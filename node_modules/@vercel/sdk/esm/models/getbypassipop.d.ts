import * as z from "zod";
import { ClosedEnum } from "../types/enums.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./sdkvalidationerror.js";
export type GetBypassIpRequest = {
    projectId: string;
    limit?: number | undefined;
    /**
     * Filter by source IP
     */
    sourceIp?: string | undefined;
    /**
     * Filter by domain
     */
    domain?: string | undefined;
    /**
     * Filter by project scoped rules
     */
    projectScope?: boolean | undefined;
    /**
     * Used for pagination. Retrieves results after the provided id
     */
    offset?: string | undefined;
    /**
     * The Team identifier to perform the request on behalf of.
     */
    teamId?: string | undefined;
    /**
     * The Team slug to perform the request on behalf of.
     */
    slug?: string | undefined;
};
export declare const GetBypassIpResponseBodyAction: {
    readonly Block: "block";
    readonly Bypass: "bypass";
};
export type GetBypassIpResponseBodyAction = ClosedEnum<typeof GetBypassIpResponseBodyAction>;
export type GetBypassIpResponseBodyResult = {
    ownerId?: string | undefined;
    id?: string | undefined;
    domain?: string | undefined;
    ip?: string | undefined;
    action?: GetBypassIpResponseBodyAction | undefined;
    projectId?: string | undefined;
    isProjectRule?: boolean | undefined;
    note?: string | undefined;
    createdAt?: string | undefined;
    actorId?: string | undefined;
    updatedAt?: string | undefined;
    updatedAtHour?: string | undefined;
    deletedAt?: string | undefined;
    expiresAt?: number | null | undefined;
};
export type GetBypassIpResponseBodyPagination = {
    ownerId: string;
    id: string;
};
export type GetBypassIpResponseBody2 = {
    result?: Array<GetBypassIpResponseBodyResult> | undefined;
    pagination?: GetBypassIpResponseBodyPagination | undefined;
};
export declare const ResponseBodyAction: {
    readonly Block: "block";
    readonly Bypass: "bypass";
};
export type ResponseBodyAction = ClosedEnum<typeof ResponseBodyAction>;
export type ResponseBodyResult = {
    ownerId?: string | undefined;
    id?: string | undefined;
    domain?: string | undefined;
    ip?: string | undefined;
    action?: ResponseBodyAction | undefined;
    projectId?: string | undefined;
    isProjectRule?: boolean | undefined;
    note?: string | undefined;
    createdAt?: string | undefined;
    actorId?: string | undefined;
    updatedAt?: string | undefined;
    updatedAtHour?: string | undefined;
    deletedAt?: string | undefined;
    expiresAt?: number | null | undefined;
};
export type GetBypassIpResponseBody1 = {
    result: Array<ResponseBodyResult>;
    pagination?: any | null | undefined;
};
export type GetBypassIpResponseBody = GetBypassIpResponseBody1 | GetBypassIpResponseBody2;
/** @internal */
export declare const GetBypassIpRequest$inboundSchema: z.ZodType<GetBypassIpRequest, z.ZodTypeDef, unknown>;
/** @internal */
export type GetBypassIpRequest$Outbound = {
    projectId: string;
    limit?: number | undefined;
    sourceIp?: string | undefined;
    domain?: string | undefined;
    projectScope?: boolean | undefined;
    offset?: string | undefined;
    teamId?: string | undefined;
    slug?: string | undefined;
};
/** @internal */
export declare const GetBypassIpRequest$outboundSchema: z.ZodType<GetBypassIpRequest$Outbound, z.ZodTypeDef, GetBypassIpRequest>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetBypassIpRequest$ {
    /** @deprecated use `GetBypassIpRequest$inboundSchema` instead. */
    const inboundSchema: z.ZodType<GetBypassIpRequest, z.ZodTypeDef, unknown>;
    /** @deprecated use `GetBypassIpRequest$outboundSchema` instead. */
    const outboundSchema: z.ZodType<GetBypassIpRequest$Outbound, z.ZodTypeDef, GetBypassIpRequest>;
    /** @deprecated use `GetBypassIpRequest$Outbound` instead. */
    type Outbound = GetBypassIpRequest$Outbound;
}
export declare function getBypassIpRequestToJSON(getBypassIpRequest: GetBypassIpRequest): string;
export declare function getBypassIpRequestFromJSON(jsonString: string): SafeParseResult<GetBypassIpRequest, SDKValidationError>;
/** @internal */
export declare const GetBypassIpResponseBodyAction$inboundSchema: z.ZodNativeEnum<typeof GetBypassIpResponseBodyAction>;
/** @internal */
export declare const GetBypassIpResponseBodyAction$outboundSchema: z.ZodNativeEnum<typeof GetBypassIpResponseBodyAction>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetBypassIpResponseBodyAction$ {
    /** @deprecated use `GetBypassIpResponseBodyAction$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Block: "block";
        readonly Bypass: "bypass";
    }>;
    /** @deprecated use `GetBypassIpResponseBodyAction$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Block: "block";
        readonly Bypass: "bypass";
    }>;
}
/** @internal */
export declare const GetBypassIpResponseBodyResult$inboundSchema: z.ZodType<GetBypassIpResponseBodyResult, z.ZodTypeDef, unknown>;
/** @internal */
export type GetBypassIpResponseBodyResult$Outbound = {
    OwnerId?: string | undefined;
    Id?: string | undefined;
    Domain?: string | undefined;
    Ip?: string | undefined;
    Action?: string | undefined;
    ProjectId?: string | undefined;
    IsProjectRule?: boolean | undefined;
    Note?: string | undefined;
    CreatedAt?: string | undefined;
    ActorId?: string | undefined;
    UpdatedAt?: string | undefined;
    UpdatedAtHour?: string | undefined;
    DeletedAt?: string | undefined;
    ExpiresAt?: number | null | undefined;
};
/** @internal */
export declare const GetBypassIpResponseBodyResult$outboundSchema: z.ZodType<GetBypassIpResponseBodyResult$Outbound, z.ZodTypeDef, GetBypassIpResponseBodyResult>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetBypassIpResponseBodyResult$ {
    /** @deprecated use `GetBypassIpResponseBodyResult$inboundSchema` instead. */
    const inboundSchema: z.ZodType<GetBypassIpResponseBodyResult, z.ZodTypeDef, unknown>;
    /** @deprecated use `GetBypassIpResponseBodyResult$outboundSchema` instead. */
    const outboundSchema: z.ZodType<GetBypassIpResponseBodyResult$Outbound, z.ZodTypeDef, GetBypassIpResponseBodyResult>;
    /** @deprecated use `GetBypassIpResponseBodyResult$Outbound` instead. */
    type Outbound = GetBypassIpResponseBodyResult$Outbound;
}
export declare function getBypassIpResponseBodyResultToJSON(getBypassIpResponseBodyResult: GetBypassIpResponseBodyResult): string;
export declare function getBypassIpResponseBodyResultFromJSON(jsonString: string): SafeParseResult<GetBypassIpResponseBodyResult, SDKValidationError>;
/** @internal */
export declare const GetBypassIpResponseBodyPagination$inboundSchema: z.ZodType<GetBypassIpResponseBodyPagination, z.ZodTypeDef, unknown>;
/** @internal */
export type GetBypassIpResponseBodyPagination$Outbound = {
    OwnerId: string;
    Id: string;
};
/** @internal */
export declare const GetBypassIpResponseBodyPagination$outboundSchema: z.ZodType<GetBypassIpResponseBodyPagination$Outbound, z.ZodTypeDef, GetBypassIpResponseBodyPagination>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetBypassIpResponseBodyPagination$ {
    /** @deprecated use `GetBypassIpResponseBodyPagination$inboundSchema` instead. */
    const inboundSchema: z.ZodType<GetBypassIpResponseBodyPagination, z.ZodTypeDef, unknown>;
    /** @deprecated use `GetBypassIpResponseBodyPagination$outboundSchema` instead. */
    const outboundSchema: z.ZodType<GetBypassIpResponseBodyPagination$Outbound, z.ZodTypeDef, GetBypassIpResponseBodyPagination>;
    /** @deprecated use `GetBypassIpResponseBodyPagination$Outbound` instead. */
    type Outbound = GetBypassIpResponseBodyPagination$Outbound;
}
export declare function getBypassIpResponseBodyPaginationToJSON(getBypassIpResponseBodyPagination: GetBypassIpResponseBodyPagination): string;
export declare function getBypassIpResponseBodyPaginationFromJSON(jsonString: string): SafeParseResult<GetBypassIpResponseBodyPagination, SDKValidationError>;
/** @internal */
export declare const GetBypassIpResponseBody2$inboundSchema: z.ZodType<GetBypassIpResponseBody2, z.ZodTypeDef, unknown>;
/** @internal */
export type GetBypassIpResponseBody2$Outbound = {
    result?: Array<GetBypassIpResponseBodyResult$Outbound> | undefined;
    pagination?: GetBypassIpResponseBodyPagination$Outbound | undefined;
};
/** @internal */
export declare const GetBypassIpResponseBody2$outboundSchema: z.ZodType<GetBypassIpResponseBody2$Outbound, z.ZodTypeDef, GetBypassIpResponseBody2>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetBypassIpResponseBody2$ {
    /** @deprecated use `GetBypassIpResponseBody2$inboundSchema` instead. */
    const inboundSchema: z.ZodType<GetBypassIpResponseBody2, z.ZodTypeDef, unknown>;
    /** @deprecated use `GetBypassIpResponseBody2$outboundSchema` instead. */
    const outboundSchema: z.ZodType<GetBypassIpResponseBody2$Outbound, z.ZodTypeDef, GetBypassIpResponseBody2>;
    /** @deprecated use `GetBypassIpResponseBody2$Outbound` instead. */
    type Outbound = GetBypassIpResponseBody2$Outbound;
}
export declare function getBypassIpResponseBody2ToJSON(getBypassIpResponseBody2: GetBypassIpResponseBody2): string;
export declare function getBypassIpResponseBody2FromJSON(jsonString: string): SafeParseResult<GetBypassIpResponseBody2, SDKValidationError>;
/** @internal */
export declare const ResponseBodyAction$inboundSchema: z.ZodNativeEnum<typeof ResponseBodyAction>;
/** @internal */
export declare const ResponseBodyAction$outboundSchema: z.ZodNativeEnum<typeof ResponseBodyAction>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace ResponseBodyAction$ {
    /** @deprecated use `ResponseBodyAction$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Block: "block";
        readonly Bypass: "bypass";
    }>;
    /** @deprecated use `ResponseBodyAction$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Block: "block";
        readonly Bypass: "bypass";
    }>;
}
/** @internal */
export declare const ResponseBodyResult$inboundSchema: z.ZodType<ResponseBodyResult, z.ZodTypeDef, unknown>;
/** @internal */
export type ResponseBodyResult$Outbound = {
    OwnerId?: string | undefined;
    Id?: string | undefined;
    Domain?: string | undefined;
    Ip?: string | undefined;
    Action?: string | undefined;
    ProjectId?: string | undefined;
    IsProjectRule?: boolean | undefined;
    Note?: string | undefined;
    CreatedAt?: string | undefined;
    ActorId?: string | undefined;
    UpdatedAt?: string | undefined;
    UpdatedAtHour?: string | undefined;
    DeletedAt?: string | undefined;
    ExpiresAt?: number | null | undefined;
};
/** @internal */
export declare const ResponseBodyResult$outboundSchema: z.ZodType<ResponseBodyResult$Outbound, z.ZodTypeDef, ResponseBodyResult>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace ResponseBodyResult$ {
    /** @deprecated use `ResponseBodyResult$inboundSchema` instead. */
    const inboundSchema: z.ZodType<ResponseBodyResult, z.ZodTypeDef, unknown>;
    /** @deprecated use `ResponseBodyResult$outboundSchema` instead. */
    const outboundSchema: z.ZodType<ResponseBodyResult$Outbound, z.ZodTypeDef, ResponseBodyResult>;
    /** @deprecated use `ResponseBodyResult$Outbound` instead. */
    type Outbound = ResponseBodyResult$Outbound;
}
export declare function responseBodyResultToJSON(responseBodyResult: ResponseBodyResult): string;
export declare function responseBodyResultFromJSON(jsonString: string): SafeParseResult<ResponseBodyResult, SDKValidationError>;
/** @internal */
export declare const GetBypassIpResponseBody1$inboundSchema: z.ZodType<GetBypassIpResponseBody1, z.ZodTypeDef, unknown>;
/** @internal */
export type GetBypassIpResponseBody1$Outbound = {
    result: Array<ResponseBodyResult$Outbound>;
    pagination?: any | null | undefined;
};
/** @internal */
export declare const GetBypassIpResponseBody1$outboundSchema: z.ZodType<GetBypassIpResponseBody1$Outbound, z.ZodTypeDef, GetBypassIpResponseBody1>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetBypassIpResponseBody1$ {
    /** @deprecated use `GetBypassIpResponseBody1$inboundSchema` instead. */
    const inboundSchema: z.ZodType<GetBypassIpResponseBody1, z.ZodTypeDef, unknown>;
    /** @deprecated use `GetBypassIpResponseBody1$outboundSchema` instead. */
    const outboundSchema: z.ZodType<GetBypassIpResponseBody1$Outbound, z.ZodTypeDef, GetBypassIpResponseBody1>;
    /** @deprecated use `GetBypassIpResponseBody1$Outbound` instead. */
    type Outbound = GetBypassIpResponseBody1$Outbound;
}
export declare function getBypassIpResponseBody1ToJSON(getBypassIpResponseBody1: GetBypassIpResponseBody1): string;
export declare function getBypassIpResponseBody1FromJSON(jsonString: string): SafeParseResult<GetBypassIpResponseBody1, SDKValidationError>;
/** @internal */
export declare const GetBypassIpResponseBody$inboundSchema: z.ZodType<GetBypassIpResponseBody, z.ZodTypeDef, unknown>;
/** @internal */
export type GetBypassIpResponseBody$Outbound = GetBypassIpResponseBody1$Outbound | GetBypassIpResponseBody2$Outbound;
/** @internal */
export declare const GetBypassIpResponseBody$outboundSchema: z.ZodType<GetBypassIpResponseBody$Outbound, z.ZodTypeDef, GetBypassIpResponseBody>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetBypassIpResponseBody$ {
    /** @deprecated use `GetBypassIpResponseBody$inboundSchema` instead. */
    const inboundSchema: z.ZodType<GetBypassIpResponseBody, z.ZodTypeDef, unknown>;
    /** @deprecated use `GetBypassIpResponseBody$outboundSchema` instead. */
    const outboundSchema: z.ZodType<GetBypassIpResponseBody$Outbound, z.ZodTypeDef, GetBypassIpResponseBody>;
    /** @deprecated use `GetBypassIpResponseBody$Outbound` instead. */
    type Outbound = GetBypassIpResponseBody$Outbound;
}
export declare function getBypassIpResponseBodyToJSON(getBypassIpResponseBody: GetBypassIpResponseBody): string;
export declare function getBypassIpResponseBodyFromJSON(jsonString: string): SafeParseResult<GetBypassIpResponseBody, SDKValidationError>;
//# sourceMappingURL=getbypassipop.d.ts.map