import * as z from "zod";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./sdkvalidationerror.js";
export type PaidFeatures = {
    concurrentBuilds?: number | null | undefined;
    passwordProtection?: boolean | null | undefined;
    previewDeploymentSuffix?: boolean | null | undefined;
};
export type AcceptProjectTransferRequestRequestBody = {
    /**
     * The desired name for the project
     */
    newProjectName?: string | undefined;
    paidFeatures?: PaidFeatures | undefined;
};
export type AcceptProjectTransferRequestRequest = {
    /**
     * The code of the project transfer request.
     */
    code: string;
    /**
     * The Team identifier to perform the request on behalf of.
     */
    teamId?: string | undefined;
    /**
     * The Team slug to perform the request on behalf of.
     */
    slug?: string | undefined;
    requestBody?: AcceptProjectTransferRequestRequestBody | undefined;
};
/**
 * The project has been transferred successfully.
 */
export type AcceptProjectTransferRequestResponseBody = {};
/** @internal */
export declare const PaidFeatures$inboundSchema: z.ZodType<PaidFeatures, z.ZodTypeDef, unknown>;
/** @internal */
export type PaidFeatures$Outbound = {
    concurrentBuilds?: number | null | undefined;
    passwordProtection?: boolean | null | undefined;
    previewDeploymentSuffix?: boolean | null | undefined;
};
/** @internal */
export declare const PaidFeatures$outboundSchema: z.ZodType<PaidFeatures$Outbound, z.ZodTypeDef, PaidFeatures>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace PaidFeatures$ {
    /** @deprecated use `PaidFeatures$inboundSchema` instead. */
    const inboundSchema: z.ZodType<PaidFeatures, z.ZodTypeDef, unknown>;
    /** @deprecated use `PaidFeatures$outboundSchema` instead. */
    const outboundSchema: z.ZodType<PaidFeatures$Outbound, z.ZodTypeDef, PaidFeatures>;
    /** @deprecated use `PaidFeatures$Outbound` instead. */
    type Outbound = PaidFeatures$Outbound;
}
export declare function paidFeaturesToJSON(paidFeatures: PaidFeatures): string;
export declare function paidFeaturesFromJSON(jsonString: string): SafeParseResult<PaidFeatures, SDKValidationError>;
/** @internal */
export declare const AcceptProjectTransferRequestRequestBody$inboundSchema: z.ZodType<AcceptProjectTransferRequestRequestBody, z.ZodTypeDef, unknown>;
/** @internal */
export type AcceptProjectTransferRequestRequestBody$Outbound = {
    newProjectName?: string | undefined;
    paidFeatures?: PaidFeatures$Outbound | undefined;
};
/** @internal */
export declare const AcceptProjectTransferRequestRequestBody$outboundSchema: z.ZodType<AcceptProjectTransferRequestRequestBody$Outbound, z.ZodTypeDef, AcceptProjectTransferRequestRequestBody>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace AcceptProjectTransferRequestRequestBody$ {
    /** @deprecated use `AcceptProjectTransferRequestRequestBody$inboundSchema` instead. */
    const inboundSchema: z.ZodType<AcceptProjectTransferRequestRequestBody, z.ZodTypeDef, unknown>;
    /** @deprecated use `AcceptProjectTransferRequestRequestBody$outboundSchema` instead. */
    const outboundSchema: z.ZodType<AcceptProjectTransferRequestRequestBody$Outbound, z.ZodTypeDef, AcceptProjectTransferRequestRequestBody>;
    /** @deprecated use `AcceptProjectTransferRequestRequestBody$Outbound` instead. */
    type Outbound = AcceptProjectTransferRequestRequestBody$Outbound;
}
export declare function acceptProjectTransferRequestRequestBodyToJSON(acceptProjectTransferRequestRequestBody: AcceptProjectTransferRequestRequestBody): string;
export declare function acceptProjectTransferRequestRequestBodyFromJSON(jsonString: string): SafeParseResult<AcceptProjectTransferRequestRequestBody, SDKValidationError>;
/** @internal */
export declare const AcceptProjectTransferRequestRequest$inboundSchema: z.ZodType<AcceptProjectTransferRequestRequest, z.ZodTypeDef, unknown>;
/** @internal */
export type AcceptProjectTransferRequestRequest$Outbound = {
    code: string;
    teamId?: string | undefined;
    slug?: string | undefined;
    RequestBody?: AcceptProjectTransferRequestRequestBody$Outbound | undefined;
};
/** @internal */
export declare const AcceptProjectTransferRequestRequest$outboundSchema: z.ZodType<AcceptProjectTransferRequestRequest$Outbound, z.ZodTypeDef, AcceptProjectTransferRequestRequest>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace AcceptProjectTransferRequestRequest$ {
    /** @deprecated use `AcceptProjectTransferRequestRequest$inboundSchema` instead. */
    const inboundSchema: z.ZodType<AcceptProjectTransferRequestRequest, z.ZodTypeDef, unknown>;
    /** @deprecated use `AcceptProjectTransferRequestRequest$outboundSchema` instead. */
    const outboundSchema: z.ZodType<AcceptProjectTransferRequestRequest$Outbound, z.ZodTypeDef, AcceptProjectTransferRequestRequest>;
    /** @deprecated use `AcceptProjectTransferRequestRequest$Outbound` instead. */
    type Outbound = AcceptProjectTransferRequestRequest$Outbound;
}
export declare function acceptProjectTransferRequestRequestToJSON(acceptProjectTransferRequestRequest: AcceptProjectTransferRequestRequest): string;
export declare function acceptProjectTransferRequestRequestFromJSON(jsonString: string): SafeParseResult<AcceptProjectTransferRequestRequest, SDKValidationError>;
/** @internal */
export declare const AcceptProjectTransferRequestResponseBody$inboundSchema: z.ZodType<AcceptProjectTransferRequestResponseBody, z.ZodTypeDef, unknown>;
/** @internal */
export type AcceptProjectTransferRequestResponseBody$Outbound = {};
/** @internal */
export declare const AcceptProjectTransferRequestResponseBody$outboundSchema: z.ZodType<AcceptProjectTransferRequestResponseBody$Outbound, z.ZodTypeDef, AcceptProjectTransferRequestResponseBody>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace AcceptProjectTransferRequestResponseBody$ {
    /** @deprecated use `AcceptProjectTransferRequestResponseBody$inboundSchema` instead. */
    const inboundSchema: z.ZodType<AcceptProjectTransferRequestResponseBody, z.ZodTypeDef, unknown>;
    /** @deprecated use `AcceptProjectTransferRequestResponseBody$outboundSchema` instead. */
    const outboundSchema: z.ZodType<AcceptProjectTransferRequestResponseBody$Outbound, z.ZodTypeDef, AcceptProjectTransferRequestResponseBody>;
    /** @deprecated use `AcceptProjectTransferRequestResponseBody$Outbound` instead. */
    type Outbound = AcceptProjectTransferRequestResponseBody$Outbound;
}
export declare function acceptProjectTransferRequestResponseBodyToJSON(acceptProjectTransferRequestResponseBody: AcceptProjectTransferRequestResponseBody): string;
export declare function acceptProjectTransferRequestResponseBodyFromJSON(jsonString: string): SafeParseResult<AcceptProjectTransferRequestResponseBody, SDKValidationError>;
//# sourceMappingURL=acceptprojecttransferrequestop.d.ts.map