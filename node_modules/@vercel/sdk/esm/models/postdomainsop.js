/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
/**
 * The type of service the domain is handled by. `external` if the DNS is externally handled, `zeit.world` if handled with Vercel, or `na` if the service is not available.
 */
export const ServiceType = {
    ZeitWorld: "zeit.world",
    External: "external",
    Na: "na",
};
/** @internal */
export const RequestBody3$inboundSchema = z.object({
    name: z.string(),
    method: z.string(),
    authCode: z.string().optional(),
    expectedPrice: z.number().optional(),
});
/** @internal */
export const RequestBody3$outboundSchema = z.object({
    name: z.string(),
    method: z.string(),
    authCode: z.string().optional(),
    expectedPrice: z.number().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var RequestBody3$;
(function (RequestBody3$) {
    /** @deprecated use `RequestBody3$inboundSchema` instead. */
    RequestBody3$.inboundSchema = RequestBody3$inboundSchema;
    /** @deprecated use `RequestBody3$outboundSchema` instead. */
    RequestBody3$.outboundSchema = RequestBody3$outboundSchema;
})(RequestBody3$ || (RequestBody3$ = {}));
export function requestBody3ToJSON(requestBody3) {
    return JSON.stringify(RequestBody3$outboundSchema.parse(requestBody3));
}
export function requestBody3FromJSON(jsonString) {
    return safeParse(jsonString, (x) => RequestBody3$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'RequestBody3' from JSON`);
}
/** @internal */
export const RequestBody2$inboundSchema = z.object({
    name: z.string(),
    method: z.string(),
    token: z.string().optional(),
});
/** @internal */
export const RequestBody2$outboundSchema = z.object({
    name: z.string(),
    method: z.string(),
    token: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var RequestBody2$;
(function (RequestBody2$) {
    /** @deprecated use `RequestBody2$inboundSchema` instead. */
    RequestBody2$.inboundSchema = RequestBody2$inboundSchema;
    /** @deprecated use `RequestBody2$outboundSchema` instead. */
    RequestBody2$.outboundSchema = RequestBody2$outboundSchema;
})(RequestBody2$ || (RequestBody2$ = {}));
export function requestBody2ToJSON(requestBody2) {
    return JSON.stringify(RequestBody2$outboundSchema.parse(requestBody2));
}
export function requestBody2FromJSON(jsonString) {
    return safeParse(jsonString, (x) => RequestBody2$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'RequestBody2' from JSON`);
}
/** @internal */
export const RequestBody1$inboundSchema = z.object({
    name: z.string(),
    cdnEnabled: z.boolean().optional(),
    zone: z.boolean().optional(),
    method: z.string().optional(),
});
/** @internal */
export const RequestBody1$outboundSchema = z.object({
    name: z.string(),
    cdnEnabled: z.boolean().optional(),
    zone: z.boolean().optional(),
    method: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var RequestBody1$;
(function (RequestBody1$) {
    /** @deprecated use `RequestBody1$inboundSchema` instead. */
    RequestBody1$.inboundSchema = RequestBody1$inboundSchema;
    /** @deprecated use `RequestBody1$outboundSchema` instead. */
    RequestBody1$.outboundSchema = RequestBody1$outboundSchema;
})(RequestBody1$ || (RequestBody1$ = {}));
export function requestBody1ToJSON(requestBody1) {
    return JSON.stringify(RequestBody1$outboundSchema.parse(requestBody1));
}
export function requestBody1FromJSON(jsonString) {
    return safeParse(jsonString, (x) => RequestBody1$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'RequestBody1' from JSON`);
}
/** @internal */
export const PostDomainsRequestBody$inboundSchema = z.union([
    z.lazy(() => RequestBody2$inboundSchema),
    z.lazy(() => RequestBody1$inboundSchema),
    z.lazy(() => RequestBody3$inboundSchema),
]);
/** @internal */
export const PostDomainsRequestBody$outboundSchema = z.union([
    z.lazy(() => RequestBody2$outboundSchema),
    z.lazy(() => RequestBody1$outboundSchema),
    z.lazy(() => RequestBody3$outboundSchema),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var PostDomainsRequestBody$;
(function (PostDomainsRequestBody$) {
    /** @deprecated use `PostDomainsRequestBody$inboundSchema` instead. */
    PostDomainsRequestBody$.inboundSchema = PostDomainsRequestBody$inboundSchema;
    /** @deprecated use `PostDomainsRequestBody$outboundSchema` instead. */
    PostDomainsRequestBody$.outboundSchema = PostDomainsRequestBody$outboundSchema;
})(PostDomainsRequestBody$ || (PostDomainsRequestBody$ = {}));
export function postDomainsRequestBodyToJSON(postDomainsRequestBody) {
    return JSON.stringify(PostDomainsRequestBody$outboundSchema.parse(postDomainsRequestBody));
}
export function postDomainsRequestBodyFromJSON(jsonString) {
    return safeParse(jsonString, (x) => PostDomainsRequestBody$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'PostDomainsRequestBody' from JSON`);
}
/** @internal */
export const PostDomainsCreator$inboundSchema = z.object({
    username: z.string(),
    email: z.string(),
    customerId: z.nullable(z.string()).optional(),
    isDomainReseller: z.boolean().optional(),
    id: z.string(),
});
/** @internal */
export const PostDomainsCreator$outboundSchema = z.object({
    username: z.string(),
    email: z.string(),
    customerId: z.nullable(z.string()).optional(),
    isDomainReseller: z.boolean().optional(),
    id: z.string(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var PostDomainsCreator$;
(function (PostDomainsCreator$) {
    /** @deprecated use `PostDomainsCreator$inboundSchema` instead. */
    PostDomainsCreator$.inboundSchema = PostDomainsCreator$inboundSchema;
    /** @deprecated use `PostDomainsCreator$outboundSchema` instead. */
    PostDomainsCreator$.outboundSchema = PostDomainsCreator$outboundSchema;
})(PostDomainsCreator$ || (PostDomainsCreator$ = {}));
export function postDomainsCreatorToJSON(postDomainsCreator) {
    return JSON.stringify(PostDomainsCreator$outboundSchema.parse(postDomainsCreator));
}
export function postDomainsCreatorFromJSON(jsonString) {
    return safeParse(jsonString, (x) => PostDomainsCreator$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'PostDomainsCreator' from JSON`);
}
/** @internal */
export const ServiceType$inboundSchema = z
    .nativeEnum(ServiceType);
/** @internal */
export const ServiceType$outboundSchema = ServiceType$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ServiceType$;
(function (ServiceType$) {
    /** @deprecated use `ServiceType$inboundSchema` instead. */
    ServiceType$.inboundSchema = ServiceType$inboundSchema;
    /** @deprecated use `ServiceType$outboundSchema` instead. */
    ServiceType$.outboundSchema = ServiceType$outboundSchema;
})(ServiceType$ || (ServiceType$ = {}));
/** @internal */
export const PostDomainsDomain$inboundSchema = z.object({
    verified: z.boolean(),
    nameservers: z.array(z.string()),
    intendedNameservers: z.array(z.string()),
    customNameservers: z.array(z.string()).optional(),
    creator: z.lazy(() => PostDomainsCreator$inboundSchema),
    name: z.string(),
    boughtAt: z.nullable(z.number()),
    createdAt: z.number(),
    expiresAt: z.nullable(z.number()),
    id: z.string(),
    orderedAt: z.number().optional(),
    renew: z.boolean().optional(),
    serviceType: ServiceType$inboundSchema,
    transferredAt: z.nullable(z.number()).optional(),
    transferStartedAt: z.number().optional(),
    userId: z.string(),
    teamId: z.nullable(z.string()),
});
/** @internal */
export const PostDomainsDomain$outboundSchema = z.object({
    verified: z.boolean(),
    nameservers: z.array(z.string()),
    intendedNameservers: z.array(z.string()),
    customNameservers: z.array(z.string()).optional(),
    creator: z.lazy(() => PostDomainsCreator$outboundSchema),
    name: z.string(),
    boughtAt: z.nullable(z.number()),
    createdAt: z.number(),
    expiresAt: z.nullable(z.number()),
    id: z.string(),
    orderedAt: z.number().optional(),
    renew: z.boolean().optional(),
    serviceType: ServiceType$outboundSchema,
    transferredAt: z.nullable(z.number()).optional(),
    transferStartedAt: z.number().optional(),
    userId: z.string(),
    teamId: z.nullable(z.string()),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var PostDomainsDomain$;
(function (PostDomainsDomain$) {
    /** @deprecated use `PostDomainsDomain$inboundSchema` instead. */
    PostDomainsDomain$.inboundSchema = PostDomainsDomain$inboundSchema;
    /** @deprecated use `PostDomainsDomain$outboundSchema` instead. */
    PostDomainsDomain$.outboundSchema = PostDomainsDomain$outboundSchema;
})(PostDomainsDomain$ || (PostDomainsDomain$ = {}));
export function postDomainsDomainToJSON(postDomainsDomain) {
    return JSON.stringify(PostDomainsDomain$outboundSchema.parse(postDomainsDomain));
}
export function postDomainsDomainFromJSON(jsonString) {
    return safeParse(jsonString, (x) => PostDomainsDomain$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'PostDomainsDomain' from JSON`);
}
/** @internal */
export const PostDomainsResponseBody$inboundSchema = z.object({
    domain: z.lazy(() => PostDomainsDomain$inboundSchema),
});
/** @internal */
export const PostDomainsResponseBody$outboundSchema = z.object({
    domain: z.lazy(() => PostDomainsDomain$outboundSchema),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var PostDomainsResponseBody$;
(function (PostDomainsResponseBody$) {
    /** @deprecated use `PostDomainsResponseBody$inboundSchema` instead. */
    PostDomainsResponseBody$.inboundSchema = PostDomainsResponseBody$inboundSchema;
    /** @deprecated use `PostDomainsResponseBody$outboundSchema` instead. */
    PostDomainsResponseBody$.outboundSchema = PostDomainsResponseBody$outboundSchema;
})(PostDomainsResponseBody$ || (PostDomainsResponseBody$ = {}));
export function postDomainsResponseBodyToJSON(postDomainsResponseBody) {
    return JSON.stringify(PostDomainsResponseBody$outboundSchema.parse(postDomainsResponseBody));
}
export function postDomainsResponseBodyFromJSON(jsonString) {
    return safeParse(jsonString, (x) => PostDomainsResponseBody$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'PostDomainsResponseBody' from JSON`);
}
//# sourceMappingURL=postdomainsop.js.map