/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { collectExtraKeys as collectExtraKeys$, safeParse, } from "../lib/schemas.js";
/** @internal */
export const Data$inboundSchema = z
    .object({
    query: z.string(),
    creatorId: z.string(),
    title: z.string(),
    groupId: z.string(),
    ownerId: z.string(),
    projectId: z.string(),
    createdAt: z.number(),
});
/** @internal */
export const Data$outboundSchema = z.object({
    query: z.string(),
    creatorId: z.string(),
    title: z.string(),
    groupId: z.string(),
    ownerId: z.string(),
    projectId: z.string(),
    createdAt: z.number(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var Data$;
(function (Data$) {
    /** @deprecated use `Data$inboundSchema` instead. */
    Data$.inboundSchema = Data$inboundSchema;
    /** @deprecated use `Data$outboundSchema` instead. */
    Data$.outboundSchema = Data$outboundSchema;
})(Data$ || (Data$ = {}));
export function dataToJSON(data) {
    return JSON.stringify(Data$outboundSchema.parse(data));
}
export function dataFromJSON(jsonString) {
    return safeParse(jsonString, (x) => Data$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'Data' from JSON`);
}
/** @internal */
export const Team$inboundSchema = collectExtraKeys$(z.object({
    id: z.string(),
    data: z.lazy(() => Data$inboundSchema),
}).catchall(z.any()), "additionalProperties", true);
/** @internal */
export const Team$outboundSchema = z.object({
    id: z.string(),
    data: z.lazy(() => Data$outboundSchema),
    additionalProperties: z.record(z.any()),
}).transform((v) => {
    return {
        ...v.additionalProperties,
        ...remap$(v, {
            additionalProperties: null,
        }),
    };
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var Team$;
(function (Team$) {
    /** @deprecated use `Team$inboundSchema` instead. */
    Team$.inboundSchema = Team$inboundSchema;
    /** @deprecated use `Team$outboundSchema` instead. */
    Team$.outboundSchema = Team$outboundSchema;
})(Team$ || (Team$ = {}));
export function teamToJSON(team) {
    return JSON.stringify(Team$outboundSchema.parse(team));
}
export function teamFromJSON(jsonString) {
    return safeParse(jsonString, (x) => Team$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'Team' from JSON`);
}
//# sourceMappingURL=team.js.map