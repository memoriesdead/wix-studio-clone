import * as z from "zod";
import { ClosedEnum } from "../types/enums.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./sdkvalidationerror.js";
/**
 * transfer-in
 */
export type RequestBody3 = {
    /**
     * The domain name you want to add.
     */
    name: string;
    /**
     * The domain operation to perform. It can be either `add` or `transfer-in`.
     */
    method: string;
    /**
     * The authorization code assigned to the domain.
     */
    authCode?: string | undefined;
    /**
     * The price you expect to be charged for the required 1 year renewal.
     */
    expectedPrice?: number | undefined;
};
/**
 * move-in
 */
export type RequestBody2 = {
    /**
     * The domain name you want to add.
     */
    name: string;
    /**
     * The domain operation to perform. It can be either `add` or `transfer-in`.
     */
    method: string;
    /**
     * The move-in token from Move Requested email.
     */
    token?: string | undefined;
};
/**
 * add
 */
export type RequestBody1 = {
    /**
     * The domain name you want to add.
     */
    name: string;
    /**
     * Whether the domain has the Vercel Edge Network enabled or not.
     */
    cdnEnabled?: boolean | undefined;
    zone?: boolean | undefined;
    /**
     * The domain operation to perform. It can be either `add` or `transfer-in`.
     */
    method?: string | undefined;
};
export type PostDomainsRequestBody = RequestBody2 | RequestBody1 | RequestBody3;
/**
 * An object containing information of the domain creator, including the user's id, username, and email.
 */
export type PostDomainsCreator = {
    username: string;
    email: string;
    customerId?: string | null | undefined;
    isDomainReseller?: boolean | undefined;
    id: string;
};
/**
 * The type of service the domain is handled by. `external` if the DNS is externally handled, `zeit.world` if handled with Vercel, or `na` if the service is not available.
 */
export declare const ServiceType: {
    readonly ZeitWorld: "zeit.world";
    readonly External: "external";
    readonly Na: "na";
};
/**
 * The type of service the domain is handled by. `external` if the DNS is externally handled, `zeit.world` if handled with Vercel, or `na` if the service is not available.
 */
export type ServiceType = ClosedEnum<typeof ServiceType>;
export type PostDomainsDomain = {
    /**
     * If the domain has the ownership verified.
     */
    verified: boolean;
    /**
     * A list of the current nameservers of the domain.
     */
    nameservers: Array<string>;
    /**
     * A list of the intended nameservers for the domain to point to Vercel DNS.
     */
    intendedNameservers: Array<string>;
    /**
     * A list of custom nameservers for the domain to point to. Only applies to domains purchased with Vercel.
     */
    customNameservers?: Array<string> | undefined;
    /**
     * An object containing information of the domain creator, including the user's id, username, and email.
     */
    creator: PostDomainsCreator;
    /**
     * The domain name.
     */
    name: string;
    /**
     * If it was purchased through Vercel, the timestamp in milliseconds when it was purchased.
     */
    boughtAt: number | null;
    /**
     * Timestamp in milliseconds when the domain was created in the registry.
     */
    createdAt: number;
    /**
     * Timestamp in milliseconds at which the domain is set to expire. `null` if not bought with Vercel.
     */
    expiresAt: number | null;
    /**
     * The unique identifier of the domain.
     */
    id: string;
    /**
     * Timestamp in milliseconds at which the domain was ordered.
     */
    orderedAt?: number | undefined;
    /**
     * Indicates whether the domain is set to automatically renew.
     */
    renew?: boolean | undefined;
    /**
     * The type of service the domain is handled by. `external` if the DNS is externally handled, `zeit.world` if handled with Vercel, or `na` if the service is not available.
     */
    serviceType: ServiceType;
    /**
     * Timestamp in milliseconds at which the domain was successfully transferred into Vercel. `null` if the transfer is still processing or was never transferred in.
     */
    transferredAt?: number | null | undefined;
    /**
     * If transferred into Vercel, timestamp in milliseconds when the domain transfer was initiated.
     */
    transferStartedAt?: number | undefined;
    userId: string;
    teamId: string | null;
};
export type PostDomainsResponseBody = {
    domain: PostDomainsDomain;
};
/** @internal */
export declare const RequestBody3$inboundSchema: z.ZodType<RequestBody3, z.ZodTypeDef, unknown>;
/** @internal */
export type RequestBody3$Outbound = {
    name: string;
    method: string;
    authCode?: string | undefined;
    expectedPrice?: number | undefined;
};
/** @internal */
export declare const RequestBody3$outboundSchema: z.ZodType<RequestBody3$Outbound, z.ZodTypeDef, RequestBody3>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace RequestBody3$ {
    /** @deprecated use `RequestBody3$inboundSchema` instead. */
    const inboundSchema: z.ZodType<RequestBody3, z.ZodTypeDef, unknown>;
    /** @deprecated use `RequestBody3$outboundSchema` instead. */
    const outboundSchema: z.ZodType<RequestBody3$Outbound, z.ZodTypeDef, RequestBody3>;
    /** @deprecated use `RequestBody3$Outbound` instead. */
    type Outbound = RequestBody3$Outbound;
}
export declare function requestBody3ToJSON(requestBody3: RequestBody3): string;
export declare function requestBody3FromJSON(jsonString: string): SafeParseResult<RequestBody3, SDKValidationError>;
/** @internal */
export declare const RequestBody2$inboundSchema: z.ZodType<RequestBody2, z.ZodTypeDef, unknown>;
/** @internal */
export type RequestBody2$Outbound = {
    name: string;
    method: string;
    token?: string | undefined;
};
/** @internal */
export declare const RequestBody2$outboundSchema: z.ZodType<RequestBody2$Outbound, z.ZodTypeDef, RequestBody2>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace RequestBody2$ {
    /** @deprecated use `RequestBody2$inboundSchema` instead. */
    const inboundSchema: z.ZodType<RequestBody2, z.ZodTypeDef, unknown>;
    /** @deprecated use `RequestBody2$outboundSchema` instead. */
    const outboundSchema: z.ZodType<RequestBody2$Outbound, z.ZodTypeDef, RequestBody2>;
    /** @deprecated use `RequestBody2$Outbound` instead. */
    type Outbound = RequestBody2$Outbound;
}
export declare function requestBody2ToJSON(requestBody2: RequestBody2): string;
export declare function requestBody2FromJSON(jsonString: string): SafeParseResult<RequestBody2, SDKValidationError>;
/** @internal */
export declare const RequestBody1$inboundSchema: z.ZodType<RequestBody1, z.ZodTypeDef, unknown>;
/** @internal */
export type RequestBody1$Outbound = {
    name: string;
    cdnEnabled?: boolean | undefined;
    zone?: boolean | undefined;
    method?: string | undefined;
};
/** @internal */
export declare const RequestBody1$outboundSchema: z.ZodType<RequestBody1$Outbound, z.ZodTypeDef, RequestBody1>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace RequestBody1$ {
    /** @deprecated use `RequestBody1$inboundSchema` instead. */
    const inboundSchema: z.ZodType<RequestBody1, z.ZodTypeDef, unknown>;
    /** @deprecated use `RequestBody1$outboundSchema` instead. */
    const outboundSchema: z.ZodType<RequestBody1$Outbound, z.ZodTypeDef, RequestBody1>;
    /** @deprecated use `RequestBody1$Outbound` instead. */
    type Outbound = RequestBody1$Outbound;
}
export declare function requestBody1ToJSON(requestBody1: RequestBody1): string;
export declare function requestBody1FromJSON(jsonString: string): SafeParseResult<RequestBody1, SDKValidationError>;
/** @internal */
export declare const PostDomainsRequestBody$inboundSchema: z.ZodType<PostDomainsRequestBody, z.ZodTypeDef, unknown>;
/** @internal */
export type PostDomainsRequestBody$Outbound = RequestBody2$Outbound | RequestBody1$Outbound | RequestBody3$Outbound;
/** @internal */
export declare const PostDomainsRequestBody$outboundSchema: z.ZodType<PostDomainsRequestBody$Outbound, z.ZodTypeDef, PostDomainsRequestBody>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace PostDomainsRequestBody$ {
    /** @deprecated use `PostDomainsRequestBody$inboundSchema` instead. */
    const inboundSchema: z.ZodType<PostDomainsRequestBody, z.ZodTypeDef, unknown>;
    /** @deprecated use `PostDomainsRequestBody$outboundSchema` instead. */
    const outboundSchema: z.ZodType<PostDomainsRequestBody$Outbound, z.ZodTypeDef, PostDomainsRequestBody>;
    /** @deprecated use `PostDomainsRequestBody$Outbound` instead. */
    type Outbound = PostDomainsRequestBody$Outbound;
}
export declare function postDomainsRequestBodyToJSON(postDomainsRequestBody: PostDomainsRequestBody): string;
export declare function postDomainsRequestBodyFromJSON(jsonString: string): SafeParseResult<PostDomainsRequestBody, SDKValidationError>;
/** @internal */
export declare const PostDomainsCreator$inboundSchema: z.ZodType<PostDomainsCreator, z.ZodTypeDef, unknown>;
/** @internal */
export type PostDomainsCreator$Outbound = {
    username: string;
    email: string;
    customerId?: string | null | undefined;
    isDomainReseller?: boolean | undefined;
    id: string;
};
/** @internal */
export declare const PostDomainsCreator$outboundSchema: z.ZodType<PostDomainsCreator$Outbound, z.ZodTypeDef, PostDomainsCreator>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace PostDomainsCreator$ {
    /** @deprecated use `PostDomainsCreator$inboundSchema` instead. */
    const inboundSchema: z.ZodType<PostDomainsCreator, z.ZodTypeDef, unknown>;
    /** @deprecated use `PostDomainsCreator$outboundSchema` instead. */
    const outboundSchema: z.ZodType<PostDomainsCreator$Outbound, z.ZodTypeDef, PostDomainsCreator>;
    /** @deprecated use `PostDomainsCreator$Outbound` instead. */
    type Outbound = PostDomainsCreator$Outbound;
}
export declare function postDomainsCreatorToJSON(postDomainsCreator: PostDomainsCreator): string;
export declare function postDomainsCreatorFromJSON(jsonString: string): SafeParseResult<PostDomainsCreator, SDKValidationError>;
/** @internal */
export declare const ServiceType$inboundSchema: z.ZodNativeEnum<typeof ServiceType>;
/** @internal */
export declare const ServiceType$outboundSchema: z.ZodNativeEnum<typeof ServiceType>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace ServiceType$ {
    /** @deprecated use `ServiceType$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly ZeitWorld: "zeit.world";
        readonly External: "external";
        readonly Na: "na";
    }>;
    /** @deprecated use `ServiceType$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly ZeitWorld: "zeit.world";
        readonly External: "external";
        readonly Na: "na";
    }>;
}
/** @internal */
export declare const PostDomainsDomain$inboundSchema: z.ZodType<PostDomainsDomain, z.ZodTypeDef, unknown>;
/** @internal */
export type PostDomainsDomain$Outbound = {
    verified: boolean;
    nameservers: Array<string>;
    intendedNameservers: Array<string>;
    customNameservers?: Array<string> | undefined;
    creator: PostDomainsCreator$Outbound;
    name: string;
    boughtAt: number | null;
    createdAt: number;
    expiresAt: number | null;
    id: string;
    orderedAt?: number | undefined;
    renew?: boolean | undefined;
    serviceType: string;
    transferredAt?: number | null | undefined;
    transferStartedAt?: number | undefined;
    userId: string;
    teamId: string | null;
};
/** @internal */
export declare const PostDomainsDomain$outboundSchema: z.ZodType<PostDomainsDomain$Outbound, z.ZodTypeDef, PostDomainsDomain>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace PostDomainsDomain$ {
    /** @deprecated use `PostDomainsDomain$inboundSchema` instead. */
    const inboundSchema: z.ZodType<PostDomainsDomain, z.ZodTypeDef, unknown>;
    /** @deprecated use `PostDomainsDomain$outboundSchema` instead. */
    const outboundSchema: z.ZodType<PostDomainsDomain$Outbound, z.ZodTypeDef, PostDomainsDomain>;
    /** @deprecated use `PostDomainsDomain$Outbound` instead. */
    type Outbound = PostDomainsDomain$Outbound;
}
export declare function postDomainsDomainToJSON(postDomainsDomain: PostDomainsDomain): string;
export declare function postDomainsDomainFromJSON(jsonString: string): SafeParseResult<PostDomainsDomain, SDKValidationError>;
/** @internal */
export declare const PostDomainsResponseBody$inboundSchema: z.ZodType<PostDomainsResponseBody, z.ZodTypeDef, unknown>;
/** @internal */
export type PostDomainsResponseBody$Outbound = {
    domain: PostDomainsDomain$Outbound;
};
/** @internal */
export declare const PostDomainsResponseBody$outboundSchema: z.ZodType<PostDomainsResponseBody$Outbound, z.ZodTypeDef, PostDomainsResponseBody>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace PostDomainsResponseBody$ {
    /** @deprecated use `PostDomainsResponseBody$inboundSchema` instead. */
    const inboundSchema: z.ZodType<PostDomainsResponseBody, z.ZodTypeDef, unknown>;
    /** @deprecated use `PostDomainsResponseBody$outboundSchema` instead. */
    const outboundSchema: z.ZodType<PostDomainsResponseBody$Outbound, z.ZodTypeDef, PostDomainsResponseBody>;
    /** @deprecated use `PostDomainsResponseBody$Outbound` instead. */
    type Outbound = PostDomainsResponseBody$Outbound;
}
export declare function postDomainsResponseBodyToJSON(postDomainsResponseBody: PostDomainsResponseBody): string;
export declare function postDomainsResponseBodyFromJSON(jsonString: string): SafeParseResult<PostDomainsResponseBody, SDKValidationError>;
//# sourceMappingURL=postdomainsop.d.ts.map