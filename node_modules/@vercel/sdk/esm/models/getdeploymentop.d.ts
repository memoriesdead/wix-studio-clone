import * as z from "zod";
import { ClosedEnum } from "../types/enums.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { FlagJSONValue, FlagJSONValue$Outbound } from "./flagjsonvalue.js";
import { SDKValidationError } from "./sdkvalidationerror.js";
export type GetDeploymentRequest = {
    /**
     * The unique identifier or hostname of the deployment.
     */
    idOrUrl: string;
    /**
     * Whether to add in gitRepo information.
     */
    withGitRepoInfo?: string | undefined;
    /**
     * The Team identifier to perform the request on behalf of.
     */
    teamId?: string | undefined;
    /**
     * The Team slug to perform the request on behalf of.
     */
    slug?: string | undefined;
};
export type GetDeploymentResponseBodyCreator = {
    uid: string;
    username?: string | undefined;
    avatar?: string | undefined;
};
export declare const GetDeploymentResponseBodyDeploymentsReadyState: {
    readonly Building: "BUILDING";
    readonly Error: "ERROR";
    readonly Initializing: "INITIALIZING";
    readonly Ready: "READY";
};
export type GetDeploymentResponseBodyDeploymentsReadyState = ClosedEnum<typeof GetDeploymentResponseBodyDeploymentsReadyState>;
export type GetDeploymentResponseBodyOutput = {
    path: string;
    functionName: string;
};
/**
 * A partial representation of a Build used by the deployment endpoint.
 */
export type ResponseBodyLambdas = {
    id?: string | undefined;
    createdAt?: number | undefined;
    entrypoint?: string | null | undefined;
    readyState?: GetDeploymentResponseBodyDeploymentsReadyState | undefined;
    readyStateAt?: number | undefined;
    output: Array<GetDeploymentResponseBodyOutput>;
};
export declare const GetDeploymentResponseBodyStatus: {
    readonly Queued: "QUEUED";
    readonly Building: "BUILDING";
    readonly Error: "ERROR";
    readonly Initializing: "INITIALIZING";
    readonly Ready: "READY";
    readonly Canceled: "CANCELED";
};
export type GetDeploymentResponseBodyStatus = ClosedEnum<typeof GetDeploymentResponseBodyStatus>;
export type ResponseBodyTeam = {
    id: string;
    name: string;
    slug: string;
    avatar?: string | undefined;
};
export type GetDeploymentCustomEnvironment2 = {
    id: string;
};
/**
 * The type of environment (production, preview, or development)
 */
export declare const GetDeploymentCustomEnvironmentType: {
    readonly Production: "production";
    readonly Preview: "preview";
    readonly Development: "development";
};
/**
 * The type of environment (production, preview, or development)
 */
export type GetDeploymentCustomEnvironmentType = ClosedEnum<typeof GetDeploymentCustomEnvironmentType>;
/**
 * The type of matching to perform
 */
export declare const GetDeploymentCustomEnvironmentDeploymentsResponseType: {
    readonly StartsWith: "startsWith";
    readonly Equals: "equals";
    readonly EndsWith: "endsWith";
};
/**
 * The type of matching to perform
 */
export type GetDeploymentCustomEnvironmentDeploymentsResponseType = ClosedEnum<typeof GetDeploymentCustomEnvironmentDeploymentsResponseType>;
/**
 * Configuration for matching git branches to this environment
 */
export type GetDeploymentCustomEnvironmentBranchMatcher = {
    /**
     * The type of matching to perform
     */
    type: GetDeploymentCustomEnvironmentDeploymentsResponseType;
    /**
     * The pattern to match against branch names
     */
    pattern: string;
};
/**
 * A list of verification challenges, one of which must be completed to verify the domain for use on the project. After the challenge is complete `POST /projects/:idOrName/domains/:domain/verify` to verify the domain. Possible challenges: - If `verification.type = TXT` the `verification.domain` will be checked for a TXT record matching `verification.value`.
 */
export type GetDeploymentCustomEnvironmentVerification = {
    type: string;
    domain: string;
    value: string;
    reason: string;
};
/**
 * List of domains associated with this environment
 */
export type GetDeploymentCustomEnvironmentDomains = {
    name: string;
    apexName: string;
    projectId: string;
    redirect?: string | null | undefined;
    redirectStatusCode?: number | null | undefined;
    gitBranch?: string | null | undefined;
    customEnvironmentId?: string | null | undefined;
    updatedAt?: number | undefined;
    createdAt?: number | undefined;
    /**
     * `true` if the domain is verified for use with the project. If `false` it will not be used as an alias on this project until the challenge in `verification` is completed.
     */
    verified: boolean;
    /**
     * A list of verification challenges, one of which must be completed to verify the domain for use on the project. After the challenge is complete `POST /projects/:idOrName/domains/:domain/verify` to verify the domain. Possible challenges: - If `verification.type = TXT` the `verification.domain` will be checked for a TXT record matching `verification.value`.
     */
    verification?: Array<GetDeploymentCustomEnvironmentVerification> | undefined;
};
/**
 * Internal representation of a custom environment with all required properties
 */
export type GetDeploymentCustomEnvironment1 = {
    /**
     * Unique identifier for the custom environment (format: env_*)
     */
    id: string;
    /**
     * URL-friendly name of the environment
     */
    slug: string;
    /**
     * The type of environment (production, preview, or development)
     */
    type: GetDeploymentCustomEnvironmentType;
    /**
     * Optional description of the environment's purpose
     */
    description?: string | undefined;
    /**
     * Configuration for matching git branches to this environment
     */
    branchMatcher?: GetDeploymentCustomEnvironmentBranchMatcher | undefined;
    /**
     * List of domains associated with this environment
     */
    domains?: Array<GetDeploymentCustomEnvironmentDomains> | undefined;
    /**
     * List of aliases for the current deployment
     */
    currentDeploymentAliases?: Array<string> | undefined;
    /**
     * Timestamp when the environment was created
     */
    createdAt: number;
    /**
     * Timestamp when the environment was last updated
     */
    updatedAt: number;
};
export type ResponseBodyCustomEnvironment = GetDeploymentCustomEnvironment2 | GetDeploymentCustomEnvironment1;
export type ResponseBodyAliasWarning = {
    code: string;
    message: string;
    link?: string | undefined;
    action?: string | undefined;
};
export declare const GetDeploymentResponseBodyDeploymentsType: {
    readonly Lambdas: "LAMBDAS";
};
export type GetDeploymentResponseBodyDeploymentsType = ClosedEnum<typeof GetDeploymentResponseBodyDeploymentsType>;
export declare const GetDeploymentResponseBodyReadyState: {
    readonly Queued: "QUEUED";
    readonly Building: "BUILDING";
    readonly Error: "ERROR";
    readonly Initializing: "INITIALIZING";
    readonly Ready: "READY";
    readonly Canceled: "CANCELED";
};
export type GetDeploymentResponseBodyReadyState = ClosedEnum<typeof GetDeploymentResponseBodyReadyState>;
export type GetDeploymentResponseBodyAliasError = {
    code: string;
    message: string;
};
export declare const GetDeploymentResponseBodyChecksState: {
    readonly Registered: "registered";
    readonly Running: "running";
    readonly Completed: "completed";
};
export type GetDeploymentResponseBodyChecksState = ClosedEnum<typeof GetDeploymentResponseBodyChecksState>;
export declare const GetDeploymentResponseBodyChecksConclusion: {
    readonly Succeeded: "succeeded";
    readonly Failed: "failed";
    readonly Skipped: "skipped";
    readonly Canceled: "canceled";
};
export type GetDeploymentResponseBodyChecksConclusion = ClosedEnum<typeof GetDeploymentResponseBodyChecksConclusion>;
export declare const GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody212Type: {
    readonly Bitbucket: "bitbucket";
};
export type GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody212Type = ClosedEnum<typeof GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody212Type>;
export type GetDeploymentGitSource12 = {
    type: GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody212Type;
    ref: string;
    sha: string;
    owner?: string | undefined;
    slug?: string | undefined;
    workspaceUuid: string;
    repoUuid: string;
};
export declare const GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody211Type: {
    readonly Gitlab: "gitlab";
};
export type GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody211Type = ClosedEnum<typeof GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody211Type>;
export type GetDeploymentGitSource11 = {
    type: GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody211Type;
    ref: string;
    sha: string;
    projectId: number;
};
export declare const GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody210Type: {
    readonly GithubCustomHost: "github-custom-host";
};
export type GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody210Type = ClosedEnum<typeof GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody210Type>;
export type GetDeploymentGitSource10 = {
    type: GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody210Type;
    host: string;
    ref: string;
    sha: string;
    repoId: number;
    org?: string | undefined;
    repo?: string | undefined;
};
export declare const GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody29Type: {
    readonly Github: "github";
};
export type GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody29Type = ClosedEnum<typeof GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody29Type>;
export type GetDeploymentGitSource9 = {
    type: GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody29Type;
    ref: string;
    sha: string;
    repoId: number;
    org?: string | undefined;
    repo?: string | undefined;
};
export declare const GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody28Type: {
    readonly Custom: "custom";
};
export type GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody28Type = ClosedEnum<typeof GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody28Type>;
/**
 * Allows custom git sources (local folder mounted to the container) in test mode
 */
export type GetDeploymentGitSource8 = {
    type: GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody28Type;
    ref: string;
    sha: string;
    gitUrl: string;
};
export declare const GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody27Type: {
    readonly Bitbucket: "bitbucket";
};
export type GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody27Type = ClosedEnum<typeof GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody27Type>;
export type GetDeploymentGitSource7 = {
    type: GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody27Type;
    owner: string;
    slug: string;
    ref?: string | null | undefined;
    sha?: string | undefined;
    prId?: number | null | undefined;
};
export declare const GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody26Type: {
    readonly Bitbucket: "bitbucket";
};
export type GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody26Type = ClosedEnum<typeof GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody26Type>;
export type GetDeploymentGitSource6 = {
    type: GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody26Type;
    workspaceUuid?: string | undefined;
    repoUuid: string;
    ref?: string | null | undefined;
    sha?: string | undefined;
    prId?: number | null | undefined;
};
export declare const GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody25Type: {
    readonly Gitlab: "gitlab";
};
export type GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody25Type = ClosedEnum<typeof GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody25Type>;
export type GetDeploymentGitSourceDeploymentsProjectId = string | number;
export type GetDeploymentGitSource5 = {
    type: GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody25Type;
    projectId: string | number;
    ref?: string | null | undefined;
    sha?: string | undefined;
    prId?: number | null | undefined;
};
export declare const GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody24Type: {
    readonly GithubCustomHost: "github-custom-host";
};
export type GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody24Type = ClosedEnum<typeof GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody24Type>;
export type GetDeploymentGitSource4 = {
    type: GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody24Type;
    host: string;
    org: string;
    repo: string;
    ref?: string | null | undefined;
    sha?: string | undefined;
    prId?: number | null | undefined;
};
export declare const GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody23Type: {
    readonly GithubCustomHost: "github-custom-host";
};
export type GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody23Type = ClosedEnum<typeof GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody23Type>;
export type GetDeploymentGitSourceDeploymentsRepoId = string | number;
export type GetDeploymentGitSource3 = {
    type: GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody23Type;
    host: string;
    repoId: string | number;
    ref?: string | null | undefined;
    sha?: string | undefined;
    prId?: number | null | undefined;
};
export declare const GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody22Type: {
    readonly Github: "github";
};
export type GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody22Type = ClosedEnum<typeof GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody22Type>;
export type GetDeploymentGitSource2 = {
    type: GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody22Type;
    org: string;
    repo: string;
    ref?: string | null | undefined;
    sha?: string | undefined;
    prId?: number | null | undefined;
};
export declare const GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody2Type: {
    readonly Github: "github";
};
export type GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody2Type = ClosedEnum<typeof GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody2Type>;
export type GetDeploymentGitSourceRepoId = string | number;
export type GetDeploymentGitSource1 = {
    type: GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody2Type;
    repoId: string | number;
    ref?: string | null | undefined;
    sha?: string | undefined;
    prId?: number | null | undefined;
};
export type ResponseBodyGitSource = GetDeploymentGitSource8 | GetDeploymentGitSource11 | GetDeploymentGitSource1 | GetDeploymentGitSource5 | GetDeploymentGitSource2 | GetDeploymentGitSource3 | GetDeploymentGitSource6 | GetDeploymentGitSource7 | GetDeploymentGitSource9 | GetDeploymentGitSource4 | GetDeploymentGitSource10 | GetDeploymentGitSource12;
export type GetDeploymentResponseBodyProject = {
    id: string;
    name: string;
    framework?: string | null | undefined;
};
/**
 * Substate of deployment when readyState is 'READY' Tracks whether or not deployment has seen production traffic: - STAGED: never seen production traffic - ROLLING: in the process of having production traffic gradually transitioned. - PROMOTED: has seen production traffic
 */
export declare const GetDeploymentResponseBodyReadySubstate: {
    readonly Staged: "STAGED";
    readonly Rolling: "ROLLING";
    readonly Promoted: "PROMOTED";
};
/**
 * Substate of deployment when readyState is 'READY' Tracks whether or not deployment has seen production traffic: - STAGED: never seen production traffic - ROLLING: in the process of having production traffic gradually transitioned. - PROMOTED: has seen production traffic
 */
export type GetDeploymentResponseBodyReadySubstate = ClosedEnum<typeof GetDeploymentResponseBodyReadySubstate>;
export declare const GetDeploymentResponseBodySource: {
    readonly ApiTriggerGitDeploy: "api-trigger-git-deploy";
    readonly Cli: "cli";
    readonly CloneRepo: "clone/repo";
    readonly Git: "git";
    readonly Import: "import";
    readonly ImportRepo: "import/repo";
    readonly Redeploy: "redeploy";
    readonly V0Web: "v0-web";
};
export type GetDeploymentResponseBodySource = ClosedEnum<typeof GetDeploymentResponseBodySource>;
export declare const GetDeploymentResponseBodyTarget: {
    readonly Staging: "staging";
    readonly Production: "production";
};
export type GetDeploymentResponseBodyTarget = ClosedEnum<typeof GetDeploymentResponseBodyTarget>;
export type GetDeploymentResponseBodyOidcTokenClaims = {
    iss: string;
    sub: string;
    scope: string;
    aud: string;
    owner: string;
    ownerId: string;
    project: string;
    projectId: string;
    environment: string;
};
/**
 * The deployment including only public information
 */
export type GetDeploymentResponseBody2 = {
    alias?: Array<string> | undefined;
    aliasAssigned: boolean;
    bootedAt: number;
    buildingAt: number;
    /**
     * Since April 2025 it necessary for On-Demand Concurrency Minutes calculation
     */
    buildContainerFinishedAt?: number | undefined;
    buildSkipped: boolean;
    creator: GetDeploymentResponseBodyCreator;
    initReadyAt?: number | undefined;
    isFirstBranchDeployment?: boolean | undefined;
    lambdas?: Array<ResponseBodyLambdas> | undefined;
    public: boolean;
    ready?: number | undefined;
    status: GetDeploymentResponseBodyStatus;
    team?: ResponseBodyTeam | undefined;
    userAliases?: Array<string> | undefined;
    previewCommentsEnabled?: boolean | undefined;
    ttyBuildLogs?: boolean | undefined;
    customEnvironment?: GetDeploymentCustomEnvironment2 | GetDeploymentCustomEnvironment1 | undefined;
    aliasWarning?: ResponseBodyAliasWarning | null | undefined;
    id: string;
    name: string;
    type: GetDeploymentResponseBodyDeploymentsType;
    createdAt: number;
    readyState: GetDeploymentResponseBodyReadyState;
    aliasError?: GetDeploymentResponseBodyAliasError | null | undefined;
    aliasFinal?: string | null | undefined;
    /**
     * applies to custom domains only, defaults to `true`
     */
    autoAssignCustomDomains?: boolean | undefined;
    automaticAliases?: Array<string> | undefined;
    buildErrorAt?: number | undefined;
    checksState?: GetDeploymentResponseBodyChecksState | undefined;
    checksConclusion?: GetDeploymentResponseBodyChecksConclusion | undefined;
    deletedAt?: number | null | undefined;
    /**
     * Computed field that is only available for deployments with a microfrontend configuration.
     */
    defaultRoute?: string | undefined;
    canceledAt?: number | undefined;
    errorCode?: string | undefined;
    errorLink?: string | undefined;
    errorMessage?: string | null | undefined;
    errorStep?: string | undefined;
    /**
     * Since November 2023 this field defines a set of regions that we will deploy the lambda to passively Lambdas will be deployed to these regions but only invoked if all of the primary `regions` are marked as out of service
     */
    passiveRegions?: Array<string> | undefined;
    gitSource?: GetDeploymentGitSource8 | GetDeploymentGitSource11 | GetDeploymentGitSource1 | GetDeploymentGitSource5 | GetDeploymentGitSource2 | GetDeploymentGitSource3 | GetDeploymentGitSource6 | GetDeploymentGitSource7 | GetDeploymentGitSource9 | GetDeploymentGitSource4 | GetDeploymentGitSource10 | GetDeploymentGitSource12 | undefined;
    meta: {
        [k: string]: string;
    };
    originCacheRegion?: string | undefined;
    project?: GetDeploymentResponseBodyProject | undefined;
    /**
     * Substate of deployment when readyState is 'READY' Tracks whether or not deployment has seen production traffic: - STAGED: never seen production traffic - ROLLING: in the process of having production traffic gradually transitioned. - PROMOTED: has seen production traffic
     */
    readySubstate?: GetDeploymentResponseBodyReadySubstate | undefined;
    regions: Array<string>;
    softDeletedByRetention?: boolean | undefined;
    source?: GetDeploymentResponseBodySource | undefined;
    target?: GetDeploymentResponseBodyTarget | null | undefined;
    undeletedAt?: number | undefined;
    url: string;
    version: number;
    oidcTokenClaims?: GetDeploymentResponseBodyOidcTokenClaims | undefined;
};
export type ResponseBodyAliasAssignedAt = number | boolean;
export type ResponseBodyBuild = {
    env: Array<string>;
};
export type ResponseBodyBuilds = {
    use: string;
    src?: string | undefined;
    config?: {
        [k: string]: any;
    } | undefined;
};
export declare const ResponseBodyFramework: {
    readonly Blitzjs: "blitzjs";
    readonly Nextjs: "nextjs";
    readonly Gatsby: "gatsby";
    readonly Remix: "remix";
    readonly ReactRouter: "react-router";
    readonly Astro: "astro";
    readonly Hexo: "hexo";
    readonly Eleventy: "eleventy";
    readonly Docusaurus2: "docusaurus-2";
    readonly Docusaurus: "docusaurus";
    readonly Preact: "preact";
    readonly Solidstart1: "solidstart-1";
    readonly Solidstart: "solidstart";
    readonly Dojo: "dojo";
    readonly Ember: "ember";
    readonly Vue: "vue";
    readonly Scully: "scully";
    readonly IonicAngular: "ionic-angular";
    readonly Angular: "angular";
    readonly Polymer: "polymer";
    readonly Svelte: "svelte";
    readonly Sveltekit: "sveltekit";
    readonly Sveltekit1: "sveltekit-1";
    readonly IonicReact: "ionic-react";
    readonly CreateReactApp: "create-react-app";
    readonly Gridsome: "gridsome";
    readonly Umijs: "umijs";
    readonly Sapper: "sapper";
    readonly Saber: "saber";
    readonly Stencil: "stencil";
    readonly Nuxtjs: "nuxtjs";
    readonly Redwoodjs: "redwoodjs";
    readonly Hugo: "hugo";
    readonly Jekyll: "jekyll";
    readonly Brunch: "brunch";
    readonly Middleman: "middleman";
    readonly Zola: "zola";
    readonly Hydrogen: "hydrogen";
    readonly Vite: "vite";
    readonly Vitepress: "vitepress";
    readonly Vuepress: "vuepress";
    readonly Parcel: "parcel";
    readonly Fasthtml: "fasthtml";
    readonly SanityV3: "sanity-v3";
    readonly Sanity: "sanity";
    readonly Storybook: "storybook";
};
export type ResponseBodyFramework = ClosedEnum<typeof ResponseBodyFramework>;
export type ResponseBodySpeedInsights = {
    id: string;
    enabledAt?: number | undefined;
    disabledAt?: number | undefined;
    canceledAt?: number | undefined;
    hasData?: boolean | undefined;
    paidAt?: number | undefined;
};
export type ResponseBodyWebAnalytics = {
    id: string;
    disabledAt?: number | undefined;
    canceledAt?: number | undefined;
    enabledAt?: number | undefined;
    hasData?: boolean | undefined;
};
export type ResponseBodyProjectSettings = {
    buildCommand?: string | null | undefined;
    devCommand?: string | null | undefined;
    framework?: ResponseBodyFramework | null | undefined;
    commandForIgnoringBuildStep?: string | null | undefined;
    installCommand?: string | null | undefined;
    outputDirectory?: string | null | undefined;
    speedInsights?: ResponseBodySpeedInsights | undefined;
    webAnalytics?: ResponseBodyWebAnalytics | undefined;
};
export declare const GetDeploymentResponseBodyDeploymentsStatus: {
    readonly Error: "error";
    readonly Skipped: "skipped";
    readonly Pending: "pending";
    readonly Ready: "ready";
    readonly Timeout: "timeout";
};
export type GetDeploymentResponseBodyDeploymentsStatus = ClosedEnum<typeof GetDeploymentResponseBodyDeploymentsStatus>;
export type ResponseBodyIntegrations = {
    status: GetDeploymentResponseBodyDeploymentsStatus;
    startedAt: number;
    completedAt?: number | undefined;
    skippedAt?: number | undefined;
    skippedBy?: string | undefined;
};
/**
 * Must be `http` or `https`.
 */
export declare const ResponseBodyProtocol: {
    readonly Http: "http";
    readonly Https: "https";
};
/**
 * Must be `http` or `https`.
 */
export type ResponseBodyProtocol = ClosedEnum<typeof ResponseBodyProtocol>;
export type ResponseBodyRemotePatterns = {
    /**
     * Must be `http` or `https`.
     */
    protocol?: ResponseBodyProtocol | undefined;
    /**
     * Can be literal or wildcard. Single `*` matches a single subdomain. Double `**` matches any number of subdomains.
     */
    hostname: string;
    /**
     * Can be literal port such as `8080` or empty string meaning no port.
     */
    port?: string | undefined;
    /**
     * Can be literal or wildcard. Single `*` matches a single path segment. Double `**` matches any number of path segments.
     */
    pathname?: string | undefined;
    /**
     * Can be literal query string such as `?v=1` or empty string meaning no query string.
     */
    search?: string | undefined;
};
export type ResponseBodyLocalPatterns = {
    /**
     * Can be literal or wildcard. Single `*` matches a single path segment. Double `**` matches any number of path segments.
     */
    pathname?: string | undefined;
    /**
     * Can be literal query string such as `?v=1` or empty string meaning no query string.
     */
    search?: string | undefined;
};
export declare const ResponseBodyFormats: {
    readonly ImageAvif: "image/avif";
    readonly ImageWebp: "image/webp";
};
export type ResponseBodyFormats = ClosedEnum<typeof ResponseBodyFormats>;
export declare const ResponseBodyContentDispositionType: {
    readonly Inline: "inline";
    readonly Attachment: "attachment";
};
export type ResponseBodyContentDispositionType = ClosedEnum<typeof ResponseBodyContentDispositionType>;
export type ResponseBodyImages = {
    sizes?: Array<number> | undefined;
    qualities?: Array<number> | undefined;
    domains?: Array<string> | undefined;
    remotePatterns?: Array<ResponseBodyRemotePatterns> | undefined;
    localPatterns?: Array<ResponseBodyLocalPatterns> | undefined;
    minimumCacheTTL?: number | undefined;
    formats?: Array<ResponseBodyFormats> | undefined;
    dangerouslyAllowSVG?: boolean | undefined;
    contentSecurityPolicy?: string | undefined;
    contentDispositionType?: ResponseBodyContentDispositionType | undefined;
};
export type ResponseBodyCreator = {
    uid: string;
    username?: string | undefined;
    avatar?: string | undefined;
};
export declare const GetDeploymentResponseBodyDeploymentsResponseReadyState: {
    readonly Building: "BUILDING";
    readonly Error: "ERROR";
    readonly Initializing: "INITIALIZING";
    readonly Ready: "READY";
};
export type GetDeploymentResponseBodyDeploymentsResponseReadyState = ClosedEnum<typeof GetDeploymentResponseBodyDeploymentsResponseReadyState>;
export type ResponseBodyOutput = {
    path: string;
    functionName: string;
};
/**
 * A partial representation of a Build used by the deployment endpoint.
 */
export type GetDeploymentResponseBodyLambdas = {
    id?: string | undefined;
    createdAt?: number | undefined;
    entrypoint?: string | null | undefined;
    readyState?: GetDeploymentResponseBodyDeploymentsResponseReadyState | undefined;
    readyStateAt?: number | undefined;
    output: Array<ResponseBodyOutput>;
};
export declare const ResponseBodyStatus: {
    readonly Queued: "QUEUED";
    readonly Building: "BUILDING";
    readonly Error: "ERROR";
    readonly Initializing: "INITIALIZING";
    readonly Ready: "READY";
    readonly Canceled: "CANCELED";
};
export type ResponseBodyStatus = ClosedEnum<typeof ResponseBodyStatus>;
export type GetDeploymentResponseBodyTeam = {
    id: string;
    name: string;
    slug: string;
    avatar?: string | undefined;
};
export type GetDeploymentCustomEnvironmentDeployments2 = {
    id: string;
};
/**
 * The type of environment (production, preview, or development)
 */
export declare const GetDeploymentCustomEnvironmentDeploymentsType: {
    readonly Production: "production";
    readonly Preview: "preview";
    readonly Development: "development";
};
/**
 * The type of environment (production, preview, or development)
 */
export type GetDeploymentCustomEnvironmentDeploymentsType = ClosedEnum<typeof GetDeploymentCustomEnvironmentDeploymentsType>;
/**
 * The type of matching to perform
 */
export declare const GetDeploymentCustomEnvironmentDeploymentsResponse200Type: {
    readonly StartsWith: "startsWith";
    readonly Equals: "equals";
    readonly EndsWith: "endsWith";
};
/**
 * The type of matching to perform
 */
export type GetDeploymentCustomEnvironmentDeploymentsResponse200Type = ClosedEnum<typeof GetDeploymentCustomEnvironmentDeploymentsResponse200Type>;
/**
 * Configuration for matching git branches to this environment
 */
export type GetDeploymentCustomEnvironmentDeploymentsBranchMatcher = {
    /**
     * The type of matching to perform
     */
    type: GetDeploymentCustomEnvironmentDeploymentsResponse200Type;
    /**
     * The pattern to match against branch names
     */
    pattern: string;
};
/**
 * A list of verification challenges, one of which must be completed to verify the domain for use on the project. After the challenge is complete `POST /projects/:idOrName/domains/:domain/verify` to verify the domain. Possible challenges: - If `verification.type = TXT` the `verification.domain` will be checked for a TXT record matching `verification.value`.
 */
export type GetDeploymentCustomEnvironmentDeploymentsVerification = {
    type: string;
    domain: string;
    value: string;
    reason: string;
};
/**
 * List of domains associated with this environment
 */
export type GetDeploymentCustomEnvironmentDeploymentsDomains = {
    name: string;
    apexName: string;
    projectId: string;
    redirect?: string | null | undefined;
    redirectStatusCode?: number | null | undefined;
    gitBranch?: string | null | undefined;
    customEnvironmentId?: string | null | undefined;
    updatedAt?: number | undefined;
    createdAt?: number | undefined;
    /**
     * `true` if the domain is verified for use with the project. If `false` it will not be used as an alias on this project until the challenge in `verification` is completed.
     */
    verified: boolean;
    /**
     * A list of verification challenges, one of which must be completed to verify the domain for use on the project. After the challenge is complete `POST /projects/:idOrName/domains/:domain/verify` to verify the domain. Possible challenges: - If `verification.type = TXT` the `verification.domain` will be checked for a TXT record matching `verification.value`.
     */
    verification?: Array<GetDeploymentCustomEnvironmentDeploymentsVerification> | undefined;
};
/**
 * Internal representation of a custom environment with all required properties
 */
export type GetDeploymentCustomEnvironmentDeployments1 = {
    /**
     * Unique identifier for the custom environment (format: env_*)
     */
    id: string;
    /**
     * URL-friendly name of the environment
     */
    slug: string;
    /**
     * The type of environment (production, preview, or development)
     */
    type: GetDeploymentCustomEnvironmentDeploymentsType;
    /**
     * Optional description of the environment's purpose
     */
    description?: string | undefined;
    /**
     * Configuration for matching git branches to this environment
     */
    branchMatcher?: GetDeploymentCustomEnvironmentDeploymentsBranchMatcher | undefined;
    /**
     * List of domains associated with this environment
     */
    domains?: Array<GetDeploymentCustomEnvironmentDeploymentsDomains> | undefined;
    /**
     * List of aliases for the current deployment
     */
    currentDeploymentAliases?: Array<string> | undefined;
    /**
     * Timestamp when the environment was created
     */
    createdAt: number;
    /**
     * Timestamp when the environment was last updated
     */
    updatedAt: number;
};
export type GetDeploymentResponseBodyCustomEnvironment = GetDeploymentCustomEnvironmentDeployments2 | GetDeploymentCustomEnvironmentDeployments1;
export type GetDeploymentResponseBodyAliasWarning = {
    code: string;
    message: string;
    link?: string | undefined;
    action?: string | undefined;
};
export declare const GetDeploymentResponseBodyType: {
    readonly Lambdas: "LAMBDAS";
};
export type GetDeploymentResponseBodyType = ClosedEnum<typeof GetDeploymentResponseBodyType>;
export declare const ResponseBodyReadyState: {
    readonly Queued: "QUEUED";
    readonly Building: "BUILDING";
    readonly Error: "ERROR";
    readonly Initializing: "INITIALIZING";
    readonly Ready: "READY";
    readonly Canceled: "CANCELED";
};
export type ResponseBodyReadyState = ClosedEnum<typeof ResponseBodyReadyState>;
export type ResponseBodyAliasError = {
    code: string;
    message: string;
};
export declare const ResponseBodyChecksState: {
    readonly Registered: "registered";
    readonly Running: "running";
    readonly Completed: "completed";
};
export type ResponseBodyChecksState = ClosedEnum<typeof ResponseBodyChecksState>;
export declare const ResponseBodyChecksConclusion: {
    readonly Succeeded: "succeeded";
    readonly Failed: "failed";
    readonly Skipped: "skipped";
    readonly Canceled: "canceled";
};
export type ResponseBodyChecksConclusion = ClosedEnum<typeof ResponseBodyChecksConclusion>;
export declare const GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody112Type: {
    readonly Bitbucket: "bitbucket";
};
export type GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody112Type = ClosedEnum<typeof GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody112Type>;
export type GetDeploymentGitSourceDeployments12 = {
    type: GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody112Type;
    ref: string;
    sha: string;
    owner?: string | undefined;
    slug?: string | undefined;
    workspaceUuid: string;
    repoUuid: string;
};
export declare const GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody111Type: {
    readonly Gitlab: "gitlab";
};
export type GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody111Type = ClosedEnum<typeof GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody111Type>;
export type GetDeploymentGitSourceDeployments11 = {
    type: GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody111Type;
    ref: string;
    sha: string;
    projectId: number;
};
export declare const GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody110Type: {
    readonly GithubCustomHost: "github-custom-host";
};
export type GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody110Type = ClosedEnum<typeof GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody110Type>;
export type GetDeploymentGitSourceDeployments10 = {
    type: GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody110Type;
    host: string;
    ref: string;
    sha: string;
    repoId: number;
    org?: string | undefined;
    repo?: string | undefined;
};
export declare const GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody19Type: {
    readonly Github: "github";
};
export type GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody19Type = ClosedEnum<typeof GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody19Type>;
export type GetDeploymentGitSourceDeployments9 = {
    type: GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody19Type;
    ref: string;
    sha: string;
    repoId: number;
    org?: string | undefined;
    repo?: string | undefined;
};
export declare const GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody1Type: {
    readonly Custom: "custom";
};
export type GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody1Type = ClosedEnum<typeof GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody1Type>;
/**
 * Allows custom git sources (local folder mounted to the container) in test mode
 */
export type GetDeploymentGitSourceDeployments8 = {
    type: GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody1Type;
    ref: string;
    sha: string;
    gitUrl: string;
};
export declare const GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBodyType: {
    readonly Bitbucket: "bitbucket";
};
export type GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBodyType = ClosedEnum<typeof GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBodyType>;
export type GetDeploymentGitSourceDeployments7 = {
    type: GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBodyType;
    owner: string;
    slug: string;
    ref?: string | null | undefined;
    sha?: string | undefined;
    prId?: number | null | undefined;
};
export declare const GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONType: {
    readonly Bitbucket: "bitbucket";
};
export type GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONType = ClosedEnum<typeof GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONType>;
export type GetDeploymentGitSourceDeployments6 = {
    type: GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONType;
    workspaceUuid?: string | undefined;
    repoUuid: string;
    ref?: string | null | undefined;
    sha?: string | undefined;
    prId?: number | null | undefined;
};
export declare const GetDeploymentGitSourceDeploymentsResponse200Type: {
    readonly Gitlab: "gitlab";
};
export type GetDeploymentGitSourceDeploymentsResponse200Type = ClosedEnum<typeof GetDeploymentGitSourceDeploymentsResponse200Type>;
export type GetDeploymentGitSourceProjectId = string | number;
export type GetDeploymentGitSourceDeployments5 = {
    type: GetDeploymentGitSourceDeploymentsResponse200Type;
    projectId: string | number;
    ref?: string | null | undefined;
    sha?: string | undefined;
    prId?: number | null | undefined;
};
export declare const GetDeploymentGitSourceDeploymentsResponseType: {
    readonly GithubCustomHost: "github-custom-host";
};
export type GetDeploymentGitSourceDeploymentsResponseType = ClosedEnum<typeof GetDeploymentGitSourceDeploymentsResponseType>;
export type GetDeploymentGitSourceDeployments4 = {
    type: GetDeploymentGitSourceDeploymentsResponseType;
    host: string;
    org: string;
    repo: string;
    ref?: string | null | undefined;
    sha?: string | undefined;
    prId?: number | null | undefined;
};
export declare const GetDeploymentGitSourceDeploymentsType: {
    readonly GithubCustomHost: "github-custom-host";
};
export type GetDeploymentGitSourceDeploymentsType = ClosedEnum<typeof GetDeploymentGitSourceDeploymentsType>;
export type GetDeploymentGitSourceDeploymentsResponse200RepoId = string | number;
export type GetDeploymentGitSourceDeployments3 = {
    type: GetDeploymentGitSourceDeploymentsType;
    host: string;
    repoId: string | number;
    ref?: string | null | undefined;
    sha?: string | undefined;
    prId?: number | null | undefined;
};
export declare const GetDeploymentGitSourceType: {
    readonly Github: "github";
};
export type GetDeploymentGitSourceType = ClosedEnum<typeof GetDeploymentGitSourceType>;
export type GetDeploymentGitSourceDeployments2 = {
    type: GetDeploymentGitSourceType;
    org: string;
    repo: string;
    ref?: string | null | undefined;
    sha?: string | undefined;
    prId?: number | null | undefined;
};
export declare const GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody11Type: {
    readonly Github: "github";
};
export type GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody11Type = ClosedEnum<typeof GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody11Type>;
export type GetDeploymentGitSourceDeploymentsResponseRepoId = string | number;
export type GetDeploymentGitSourceDeployments1 = {
    type: GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody11Type;
    repoId: string | number;
    ref?: string | null | undefined;
    sha?: string | undefined;
    prId?: number | null | undefined;
};
export type GetDeploymentResponseBodyGitSource = GetDeploymentGitSourceDeployments8 | GetDeploymentGitSourceDeployments11 | GetDeploymentGitSourceDeployments1 | GetDeploymentGitSourceDeployments5 | GetDeploymentGitSourceDeployments2 | GetDeploymentGitSourceDeployments3 | GetDeploymentGitSourceDeployments6 | GetDeploymentGitSourceDeployments7 | GetDeploymentGitSourceDeployments9 | GetDeploymentGitSourceDeployments4 | GetDeploymentGitSourceDeployments10 | GetDeploymentGitSourceDeployments12;
export type ResponseBodyProject = {
    id: string;
    name: string;
    framework?: string | null | undefined;
};
/**
 * Substate of deployment when readyState is 'READY' Tracks whether or not deployment has seen production traffic: - STAGED: never seen production traffic - ROLLING: in the process of having production traffic gradually transitioned. - PROMOTED: has seen production traffic
 */
export declare const ResponseBodyReadySubstate: {
    readonly Staged: "STAGED";
    readonly Rolling: "ROLLING";
    readonly Promoted: "PROMOTED";
};
/**
 * Substate of deployment when readyState is 'READY' Tracks whether or not deployment has seen production traffic: - STAGED: never seen production traffic - ROLLING: in the process of having production traffic gradually transitioned. - PROMOTED: has seen production traffic
 */
export type ResponseBodyReadySubstate = ClosedEnum<typeof ResponseBodyReadySubstate>;
export declare const ResponseBodySource: {
    readonly ApiTriggerGitDeploy: "api-trigger-git-deploy";
    readonly Cli: "cli";
    readonly CloneRepo: "clone/repo";
    readonly Git: "git";
    readonly Import: "import";
    readonly ImportRepo: "import/repo";
    readonly Redeploy: "redeploy";
    readonly V0Web: "v0-web";
};
export type ResponseBodySource = ClosedEnum<typeof ResponseBodySource>;
export declare const ResponseBodyTarget: {
    readonly Staging: "staging";
    readonly Production: "production";
};
export type ResponseBodyTarget = ClosedEnum<typeof ResponseBodyTarget>;
export type ResponseBodyOidcTokenClaims = {
    iss: string;
    sub: string;
    scope: string;
    aud: string;
    owner: string;
    ownerId: string;
    project: string;
    projectId: string;
    environment: string;
};
export declare const ResponseBodyPlan: {
    readonly Pro: "pro";
    readonly Enterprise: "enterprise";
    readonly Hobby: "hobby";
};
export type ResponseBodyPlan = ClosedEnum<typeof ResponseBodyPlan>;
export type ResponseBodyCrons = {
    schedule: string;
    path: string;
};
export type ResponseBodyFunctions = {
    memory?: number | undefined;
    maxDuration?: number | undefined;
    runtime?: string | undefined;
    includeFiles?: string | undefined;
    excludeFiles?: string | undefined;
};
export type GetDeploymentRoutes3 = {
    src: string;
    continue: boolean;
    middleware: number;
};
export declare const GetDeploymentRoutesHandle: {
    readonly Error: "error";
    readonly Filesystem: "filesystem";
    readonly Hit: "hit";
    readonly Miss: "miss";
    readonly Rewrite: "rewrite";
    readonly Resource: "resource";
};
export type GetDeploymentRoutesHandle = ClosedEnum<typeof GetDeploymentRoutesHandle>;
export type GetDeploymentRoutes2 = {
    handle: GetDeploymentRoutesHandle;
    src?: string | undefined;
    dest?: string | undefined;
    status?: number | undefined;
};
export declare const GetDeploymentHasType: {
    readonly Header: "header";
    readonly Cookie: "cookie";
    readonly Query: "query";
};
export type GetDeploymentHasType = ClosedEnum<typeof GetDeploymentHasType>;
export type GetDeploymentHas2 = {
    type: GetDeploymentHasType;
    key: string;
    value?: string | undefined;
};
export declare const GetDeploymentHasDeploymentsType: {
    readonly Host: "host";
};
export type GetDeploymentHasDeploymentsType = ClosedEnum<typeof GetDeploymentHasDeploymentsType>;
export type GetDeploymentHas1 = {
    type: GetDeploymentHasDeploymentsType;
    value: string;
};
export type GetDeploymentRoutesHas = GetDeploymentHas1 | GetDeploymentHas2;
export declare const GetDeploymentMissingType: {
    readonly Header: "header";
    readonly Cookie: "cookie";
    readonly Query: "query";
};
export type GetDeploymentMissingType = ClosedEnum<typeof GetDeploymentMissingType>;
export type GetDeploymentMissing2 = {
    type: GetDeploymentMissingType;
    key: string;
    value?: string | undefined;
};
export declare const GetDeploymentMissingDeploymentsType: {
    readonly Host: "host";
};
export type GetDeploymentMissingDeploymentsType = ClosedEnum<typeof GetDeploymentMissingDeploymentsType>;
export type GetDeploymentMissing1 = {
    type: GetDeploymentMissingDeploymentsType;
    value: string;
};
export type GetDeploymentRoutesMissing = GetDeploymentMissing1 | GetDeploymentMissing2;
export type GetDeploymentRoutesLocale = {
    redirect?: {
        [k: string]: string;
    } | undefined;
    cookie?: string | undefined;
};
export type GetDeploymentRoutes1 = {
    src: string;
    dest?: string | undefined;
    headers?: {
        [k: string]: string;
    } | undefined;
    methods?: Array<string> | undefined;
    continue?: boolean | undefined;
    override?: boolean | undefined;
    caseSensitive?: boolean | undefined;
    check?: boolean | undefined;
    important?: boolean | undefined;
    status?: number | undefined;
    has?: Array<GetDeploymentHas1 | GetDeploymentHas2> | undefined;
    missing?: Array<GetDeploymentMissing1 | GetDeploymentMissing2> | undefined;
    locale?: GetDeploymentRoutesLocale | undefined;
    /**
     * A middleware key within the `output` key under the build result. Overrides a `middleware` definition.
     */
    middlewarePath?: string | undefined;
    /**
     * The original middleware matchers.
     */
    middlewareRawSrc?: Array<string> | undefined;
    /**
     * A middleware index in the `middleware` key under the build result
     */
    middleware?: number | undefined;
};
export type ResponseBodyRoutes = GetDeploymentRoutes3 | GetDeploymentRoutes2 | GetDeploymentRoutes1;
export declare const GetDeploymentGitRepoDeploymentsType: {
    readonly Bitbucket: "bitbucket";
};
export type GetDeploymentGitRepoDeploymentsType = ClosedEnum<typeof GetDeploymentGitRepoDeploymentsType>;
export declare const GetDeploymentGitRepoOwnerType: {
    readonly Team: "team";
    readonly User: "user";
};
export type GetDeploymentGitRepoOwnerType = ClosedEnum<typeof GetDeploymentGitRepoOwnerType>;
export type GetDeploymentGitRepo3 = {
    owner: string;
    repoUuid: string;
    slug: string;
    type: GetDeploymentGitRepoDeploymentsType;
    workspaceUuid: string;
    path: string;
    defaultBranch: string;
    name: string;
    private: boolean;
    ownerType: GetDeploymentGitRepoOwnerType;
};
export declare const GetDeploymentGitRepoType: {
    readonly Github: "github";
};
export type GetDeploymentGitRepoType = ClosedEnum<typeof GetDeploymentGitRepoType>;
export declare const GetDeploymentGitRepoDeploymentsResponseOwnerType: {
    readonly Team: "team";
    readonly User: "user";
};
export type GetDeploymentGitRepoDeploymentsResponseOwnerType = ClosedEnum<typeof GetDeploymentGitRepoDeploymentsResponseOwnerType>;
export type GetDeploymentGitRepo2 = {
    org: string;
    repo: string;
    repoId: number;
    type: GetDeploymentGitRepoType;
    repoOwnerId: number;
    path: string;
    defaultBranch: string;
    name: string;
    private: boolean;
    ownerType: GetDeploymentGitRepoDeploymentsResponseOwnerType;
};
export declare const GetDeploymentGitRepoDeploymentsResponseType: {
    readonly Gitlab: "gitlab";
};
export type GetDeploymentGitRepoDeploymentsResponseType = ClosedEnum<typeof GetDeploymentGitRepoDeploymentsResponseType>;
export declare const GetDeploymentGitRepoDeploymentsOwnerType: {
    readonly Team: "team";
    readonly User: "user";
};
export type GetDeploymentGitRepoDeploymentsOwnerType = ClosedEnum<typeof GetDeploymentGitRepoDeploymentsOwnerType>;
export type GetDeploymentGitRepo1 = {
    namespace: string;
    projectId: number;
    type: GetDeploymentGitRepoDeploymentsResponseType;
    url: string;
    path: string;
    defaultBranch: string;
    name: string;
    private: boolean;
    ownerType: GetDeploymentGitRepoDeploymentsOwnerType;
};
export type ResponseBodyGitRepo = GetDeploymentGitRepo1 | GetDeploymentGitRepo2 | GetDeploymentGitRepo3;
/**
 * Flags defined in the Build Output API, used by this deployment. Primarily used by the Toolbar to know about the used flags.
 */
export type GetDeploymentFlags2 = {};
export type GetDeploymentFlagsOptions = {
    value: FlagJSONValue | null;
    label?: string | undefined;
};
export type GetDeploymentFlagsDefinitions = {
    options?: Array<GetDeploymentFlagsOptions> | undefined;
    url?: string | undefined;
    description?: string | undefined;
};
/**
 * Flags defined in the Build Output API, used by this deployment. Primarily used by the Toolbar to know about the used flags.
 */
export type GetDeploymentFlags1 = {
    definitions: {
        [k: string]: GetDeploymentFlagsDefinitions;
    };
};
export type ResponseBodyFlags = GetDeploymentFlags1 | Array<GetDeploymentFlags2>;
/**
 * A map of the other applications that are part of this group. Only defined on the default application. The field is set after deployments have been created, so can be undefined, but should be there for a successful deployment.
 */
export type GetDeploymentMicrofrontendsApplications = {
    /**
     * This is the production alias, it will always show the most up to date of each application.
     */
    productionHost: string;
    /**
     * Use the fixed deploymentAlias and deploymentHost so that the microfrontend preview stays in sync with the deployment. These are only present for mono-repos when a single commit creates multiple deployments. If they are not present, productionHost will be used.
     */
    deploymentAlias?: string | undefined;
    deploymentHost?: string | undefined;
};
export type GetDeploymentMicrofrontends2 = {
    /**
     * A map of the other applications that are part of this group. Only defined on the default application. The field is set after deployments have been created, so can be undefined, but should be there for a successful deployment.
     */
    applications?: {
        [k: string]: GetDeploymentMicrofrontendsApplications;
    } | undefined;
    isDefaultApp: boolean;
    /**
     * The project name of the default app of this deployment's microfrontends group.
     */
    defaultAppProjectName: string;
    /**
     * A path that is used to take screenshots and as the default path in preview links when a domain for this microfrontend is shown in the UI.
     */
    defaultRoute?: string | undefined;
    /**
     * The group of microfrontends that this project belongs to. Each microfrontend project must belong to a microfrontends group that is the set of microfrontends that are used together.
     */
    groupIds: Array<string>;
};
export type GetDeploymentMicrofrontends1 = {
    /**
     * Whether this project is the default application for the microfrontends group. The default application is the one that is used as the top level shell for the microfrontends group and hosts the other microfrontends.
     */
    isDefaultApp?: boolean | undefined;
    /**
     * The project name of the default app of this deployment's microfrontends group.
     */
    defaultAppProjectName: string;
    /**
     * A path that is used to take screenshots and as the default path in preview links when a domain for this microfrontend is shown in the UI.
     */
    defaultRoute?: string | undefined;
    /**
     * The group of microfrontends that this project belongs to. Each microfrontend project must belong to a microfrontends group that is the set of microfrontends that are used together.
     */
    groupIds: Array<string>;
};
export type ResponseBodyMicrofrontends = GetDeploymentMicrofrontends1 | GetDeploymentMicrofrontends2;
export declare const ResponseBodyFunctionType: {
    readonly Fluid: "fluid";
    readonly Standard: "standard";
};
export type ResponseBodyFunctionType = ClosedEnum<typeof ResponseBodyFunctionType>;
export declare const ResponseBodyFunctionMemoryType: {
    readonly Standard: "standard";
    readonly StandardLegacy: "standard_legacy";
    readonly Performance: "performance";
};
export type ResponseBodyFunctionMemoryType = ClosedEnum<typeof ResponseBodyFunctionMemoryType>;
/**
 * Since February 2025 the configuration must include snapshot data at the time of deployment creation to capture properties for the /deployments/:id/config endpoint utilized for displaying Deployment Configuration on the frontend This is optional because older deployments may not have this data captured
 */
export type ResponseBodyConfig = {
    version?: number | undefined;
    functionType: ResponseBodyFunctionType;
    functionMemoryType: ResponseBodyFunctionMemoryType;
    functionTimeout: number | null;
    secureComputePrimaryRegion: string | null;
    secureComputeFallbackRegion: string | null;
};
/**
 * The deployment including both public and private information
 */
export type GetDeploymentResponseBody1 = {
    aliasAssignedAt?: number | boolean | null | undefined;
    alwaysRefuseToBuild?: boolean | undefined;
    build: ResponseBodyBuild;
    buildArtifactUrls?: Array<string> | undefined;
    builds?: Array<ResponseBodyBuilds> | undefined;
    env: Array<string>;
    inspectorUrl: string | null;
    isInConcurrentBuildsQueue: boolean;
    isInSystemBuildsQueue: boolean;
    projectSettings: ResponseBodyProjectSettings;
    readyStateReason?: string | undefined;
    integrations?: ResponseBodyIntegrations | undefined;
    images?: ResponseBodyImages | undefined;
    alias?: Array<string> | undefined;
    aliasAssigned: boolean;
    bootedAt: number;
    buildingAt: number;
    /**
     * Since April 2025 it necessary for On-Demand Concurrency Minutes calculation
     */
    buildContainerFinishedAt?: number | undefined;
    buildSkipped: boolean;
    creator: ResponseBodyCreator;
    initReadyAt?: number | undefined;
    isFirstBranchDeployment?: boolean | undefined;
    lambdas?: Array<GetDeploymentResponseBodyLambdas> | undefined;
    public: boolean;
    ready?: number | undefined;
    status: ResponseBodyStatus;
    team?: GetDeploymentResponseBodyTeam | undefined;
    userAliases?: Array<string> | undefined;
    previewCommentsEnabled?: boolean | undefined;
    ttyBuildLogs?: boolean | undefined;
    customEnvironment?: GetDeploymentCustomEnvironmentDeployments2 | GetDeploymentCustomEnvironmentDeployments1 | undefined;
    aliasWarning?: GetDeploymentResponseBodyAliasWarning | null | undefined;
    id: string;
    name: string;
    type: GetDeploymentResponseBodyType;
    createdAt: number;
    readyState: ResponseBodyReadyState;
    aliasError?: ResponseBodyAliasError | null | undefined;
    aliasFinal?: string | null | undefined;
    /**
     * applies to custom domains only, defaults to `true`
     */
    autoAssignCustomDomains?: boolean | undefined;
    automaticAliases?: Array<string> | undefined;
    buildErrorAt?: number | undefined;
    checksState?: ResponseBodyChecksState | undefined;
    checksConclusion?: ResponseBodyChecksConclusion | undefined;
    deletedAt?: number | null | undefined;
    /**
     * Computed field that is only available for deployments with a microfrontend configuration.
     */
    defaultRoute?: string | undefined;
    canceledAt?: number | undefined;
    errorCode?: string | undefined;
    errorLink?: string | undefined;
    errorMessage?: string | null | undefined;
    errorStep?: string | undefined;
    /**
     * Since November 2023 this field defines a set of regions that we will deploy the lambda to passively Lambdas will be deployed to these regions but only invoked if all of the primary `regions` are marked as out of service
     */
    passiveRegions?: Array<string> | undefined;
    gitSource?: GetDeploymentGitSourceDeployments8 | GetDeploymentGitSourceDeployments11 | GetDeploymentGitSourceDeployments1 | GetDeploymentGitSourceDeployments5 | GetDeploymentGitSourceDeployments2 | GetDeploymentGitSourceDeployments3 | GetDeploymentGitSourceDeployments6 | GetDeploymentGitSourceDeployments7 | GetDeploymentGitSourceDeployments9 | GetDeploymentGitSourceDeployments4 | GetDeploymentGitSourceDeployments10 | GetDeploymentGitSourceDeployments12 | undefined;
    meta: {
        [k: string]: string;
    };
    originCacheRegion?: string | undefined;
    project?: ResponseBodyProject | undefined;
    /**
     * Substate of deployment when readyState is 'READY' Tracks whether or not deployment has seen production traffic: - STAGED: never seen production traffic - ROLLING: in the process of having production traffic gradually transitioned. - PROMOTED: has seen production traffic
     */
    readySubstate?: ResponseBodyReadySubstate | undefined;
    regions: Array<string>;
    softDeletedByRetention?: boolean | undefined;
    source?: ResponseBodySource | undefined;
    target?: ResponseBodyTarget | null | undefined;
    undeletedAt?: number | undefined;
    url: string;
    version: number;
    oidcTokenClaims?: ResponseBodyOidcTokenClaims | undefined;
    projectId: string;
    plan: ResponseBodyPlan;
    connectBuildsEnabled?: boolean | undefined;
    connectConfigurationId?: string | undefined;
    createdIn: string;
    crons?: Array<ResponseBodyCrons> | undefined;
    functions?: {
        [k: string]: ResponseBodyFunctions;
    } | null | undefined;
    monorepoManager?: string | null | undefined;
    ownerId: string;
    /**
     * Since November 2023 this field defines a Secure Compute network that will only be used to deploy passive lambdas to (as in passiveRegions)
     */
    passiveConnectConfigurationId?: string | undefined;
    routes: Array<GetDeploymentRoutes3 | GetDeploymentRoutes2 | GetDeploymentRoutes1> | null;
    gitRepo?: GetDeploymentGitRepo1 | GetDeploymentGitRepo2 | GetDeploymentGitRepo3 | null | undefined;
    flags?: GetDeploymentFlags1 | Array<GetDeploymentFlags2> | undefined;
    microfrontends?: GetDeploymentMicrofrontends1 | GetDeploymentMicrofrontends2 | undefined;
    /**
     * Since February 2025 the configuration must include snapshot data at the time of deployment creation to capture properties for the /deployments/:id/config endpoint utilized for displaying Deployment Configuration on the frontend This is optional because older deployments may not have this data captured
     */
    config?: ResponseBodyConfig | undefined;
};
/**
 * The deployment including only public information
 *
 * @remarks
 * The deployment including both public and private information
 */
export type GetDeploymentResponseBody = GetDeploymentResponseBody2 | GetDeploymentResponseBody1;
/** @internal */
export declare const GetDeploymentRequest$inboundSchema: z.ZodType<GetDeploymentRequest, z.ZodTypeDef, unknown>;
/** @internal */
export type GetDeploymentRequest$Outbound = {
    idOrUrl: string;
    withGitRepoInfo?: string | undefined;
    teamId?: string | undefined;
    slug?: string | undefined;
};
/** @internal */
export declare const GetDeploymentRequest$outboundSchema: z.ZodType<GetDeploymentRequest$Outbound, z.ZodTypeDef, GetDeploymentRequest>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetDeploymentRequest$ {
    /** @deprecated use `GetDeploymentRequest$inboundSchema` instead. */
    const inboundSchema: z.ZodType<GetDeploymentRequest, z.ZodTypeDef, unknown>;
    /** @deprecated use `GetDeploymentRequest$outboundSchema` instead. */
    const outboundSchema: z.ZodType<GetDeploymentRequest$Outbound, z.ZodTypeDef, GetDeploymentRequest>;
    /** @deprecated use `GetDeploymentRequest$Outbound` instead. */
    type Outbound = GetDeploymentRequest$Outbound;
}
export declare function getDeploymentRequestToJSON(getDeploymentRequest: GetDeploymentRequest): string;
export declare function getDeploymentRequestFromJSON(jsonString: string): SafeParseResult<GetDeploymentRequest, SDKValidationError>;
/** @internal */
export declare const GetDeploymentResponseBodyCreator$inboundSchema: z.ZodType<GetDeploymentResponseBodyCreator, z.ZodTypeDef, unknown>;
/** @internal */
export type GetDeploymentResponseBodyCreator$Outbound = {
    uid: string;
    username?: string | undefined;
    avatar?: string | undefined;
};
/** @internal */
export declare const GetDeploymentResponseBodyCreator$outboundSchema: z.ZodType<GetDeploymentResponseBodyCreator$Outbound, z.ZodTypeDef, GetDeploymentResponseBodyCreator>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetDeploymentResponseBodyCreator$ {
    /** @deprecated use `GetDeploymentResponseBodyCreator$inboundSchema` instead. */
    const inboundSchema: z.ZodType<GetDeploymentResponseBodyCreator, z.ZodTypeDef, unknown>;
    /** @deprecated use `GetDeploymentResponseBodyCreator$outboundSchema` instead. */
    const outboundSchema: z.ZodType<GetDeploymentResponseBodyCreator$Outbound, z.ZodTypeDef, GetDeploymentResponseBodyCreator>;
    /** @deprecated use `GetDeploymentResponseBodyCreator$Outbound` instead. */
    type Outbound = GetDeploymentResponseBodyCreator$Outbound;
}
export declare function getDeploymentResponseBodyCreatorToJSON(getDeploymentResponseBodyCreator: GetDeploymentResponseBodyCreator): string;
export declare function getDeploymentResponseBodyCreatorFromJSON(jsonString: string): SafeParseResult<GetDeploymentResponseBodyCreator, SDKValidationError>;
/** @internal */
export declare const GetDeploymentResponseBodyDeploymentsReadyState$inboundSchema: z.ZodNativeEnum<typeof GetDeploymentResponseBodyDeploymentsReadyState>;
/** @internal */
export declare const GetDeploymentResponseBodyDeploymentsReadyState$outboundSchema: z.ZodNativeEnum<typeof GetDeploymentResponseBodyDeploymentsReadyState>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetDeploymentResponseBodyDeploymentsReadyState$ {
    /** @deprecated use `GetDeploymentResponseBodyDeploymentsReadyState$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Building: "BUILDING";
        readonly Error: "ERROR";
        readonly Initializing: "INITIALIZING";
        readonly Ready: "READY";
    }>;
    /** @deprecated use `GetDeploymentResponseBodyDeploymentsReadyState$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Building: "BUILDING";
        readonly Error: "ERROR";
        readonly Initializing: "INITIALIZING";
        readonly Ready: "READY";
    }>;
}
/** @internal */
export declare const GetDeploymentResponseBodyOutput$inboundSchema: z.ZodType<GetDeploymentResponseBodyOutput, z.ZodTypeDef, unknown>;
/** @internal */
export type GetDeploymentResponseBodyOutput$Outbound = {
    path: string;
    functionName: string;
};
/** @internal */
export declare const GetDeploymentResponseBodyOutput$outboundSchema: z.ZodType<GetDeploymentResponseBodyOutput$Outbound, z.ZodTypeDef, GetDeploymentResponseBodyOutput>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetDeploymentResponseBodyOutput$ {
    /** @deprecated use `GetDeploymentResponseBodyOutput$inboundSchema` instead. */
    const inboundSchema: z.ZodType<GetDeploymentResponseBodyOutput, z.ZodTypeDef, unknown>;
    /** @deprecated use `GetDeploymentResponseBodyOutput$outboundSchema` instead. */
    const outboundSchema: z.ZodType<GetDeploymentResponseBodyOutput$Outbound, z.ZodTypeDef, GetDeploymentResponseBodyOutput>;
    /** @deprecated use `GetDeploymentResponseBodyOutput$Outbound` instead. */
    type Outbound = GetDeploymentResponseBodyOutput$Outbound;
}
export declare function getDeploymentResponseBodyOutputToJSON(getDeploymentResponseBodyOutput: GetDeploymentResponseBodyOutput): string;
export declare function getDeploymentResponseBodyOutputFromJSON(jsonString: string): SafeParseResult<GetDeploymentResponseBodyOutput, SDKValidationError>;
/** @internal */
export declare const ResponseBodyLambdas$inboundSchema: z.ZodType<ResponseBodyLambdas, z.ZodTypeDef, unknown>;
/** @internal */
export type ResponseBodyLambdas$Outbound = {
    id?: string | undefined;
    createdAt?: number | undefined;
    entrypoint?: string | null | undefined;
    readyState?: string | undefined;
    readyStateAt?: number | undefined;
    output: Array<GetDeploymentResponseBodyOutput$Outbound>;
};
/** @internal */
export declare const ResponseBodyLambdas$outboundSchema: z.ZodType<ResponseBodyLambdas$Outbound, z.ZodTypeDef, ResponseBodyLambdas>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace ResponseBodyLambdas$ {
    /** @deprecated use `ResponseBodyLambdas$inboundSchema` instead. */
    const inboundSchema: z.ZodType<ResponseBodyLambdas, z.ZodTypeDef, unknown>;
    /** @deprecated use `ResponseBodyLambdas$outboundSchema` instead. */
    const outboundSchema: z.ZodType<ResponseBodyLambdas$Outbound, z.ZodTypeDef, ResponseBodyLambdas>;
    /** @deprecated use `ResponseBodyLambdas$Outbound` instead. */
    type Outbound = ResponseBodyLambdas$Outbound;
}
export declare function responseBodyLambdasToJSON(responseBodyLambdas: ResponseBodyLambdas): string;
export declare function responseBodyLambdasFromJSON(jsonString: string): SafeParseResult<ResponseBodyLambdas, SDKValidationError>;
/** @internal */
export declare const GetDeploymentResponseBodyStatus$inboundSchema: z.ZodNativeEnum<typeof GetDeploymentResponseBodyStatus>;
/** @internal */
export declare const GetDeploymentResponseBodyStatus$outboundSchema: z.ZodNativeEnum<typeof GetDeploymentResponseBodyStatus>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetDeploymentResponseBodyStatus$ {
    /** @deprecated use `GetDeploymentResponseBodyStatus$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Queued: "QUEUED";
        readonly Building: "BUILDING";
        readonly Error: "ERROR";
        readonly Initializing: "INITIALIZING";
        readonly Ready: "READY";
        readonly Canceled: "CANCELED";
    }>;
    /** @deprecated use `GetDeploymentResponseBodyStatus$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Queued: "QUEUED";
        readonly Building: "BUILDING";
        readonly Error: "ERROR";
        readonly Initializing: "INITIALIZING";
        readonly Ready: "READY";
        readonly Canceled: "CANCELED";
    }>;
}
/** @internal */
export declare const ResponseBodyTeam$inboundSchema: z.ZodType<ResponseBodyTeam, z.ZodTypeDef, unknown>;
/** @internal */
export type ResponseBodyTeam$Outbound = {
    id: string;
    name: string;
    slug: string;
    avatar?: string | undefined;
};
/** @internal */
export declare const ResponseBodyTeam$outboundSchema: z.ZodType<ResponseBodyTeam$Outbound, z.ZodTypeDef, ResponseBodyTeam>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace ResponseBodyTeam$ {
    /** @deprecated use `ResponseBodyTeam$inboundSchema` instead. */
    const inboundSchema: z.ZodType<ResponseBodyTeam, z.ZodTypeDef, unknown>;
    /** @deprecated use `ResponseBodyTeam$outboundSchema` instead. */
    const outboundSchema: z.ZodType<ResponseBodyTeam$Outbound, z.ZodTypeDef, ResponseBodyTeam>;
    /** @deprecated use `ResponseBodyTeam$Outbound` instead. */
    type Outbound = ResponseBodyTeam$Outbound;
}
export declare function responseBodyTeamToJSON(responseBodyTeam: ResponseBodyTeam): string;
export declare function responseBodyTeamFromJSON(jsonString: string): SafeParseResult<ResponseBodyTeam, SDKValidationError>;
/** @internal */
export declare const GetDeploymentCustomEnvironment2$inboundSchema: z.ZodType<GetDeploymentCustomEnvironment2, z.ZodTypeDef, unknown>;
/** @internal */
export type GetDeploymentCustomEnvironment2$Outbound = {
    id: string;
};
/** @internal */
export declare const GetDeploymentCustomEnvironment2$outboundSchema: z.ZodType<GetDeploymentCustomEnvironment2$Outbound, z.ZodTypeDef, GetDeploymentCustomEnvironment2>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetDeploymentCustomEnvironment2$ {
    /** @deprecated use `GetDeploymentCustomEnvironment2$inboundSchema` instead. */
    const inboundSchema: z.ZodType<GetDeploymentCustomEnvironment2, z.ZodTypeDef, unknown>;
    /** @deprecated use `GetDeploymentCustomEnvironment2$outboundSchema` instead. */
    const outboundSchema: z.ZodType<GetDeploymentCustomEnvironment2$Outbound, z.ZodTypeDef, GetDeploymentCustomEnvironment2>;
    /** @deprecated use `GetDeploymentCustomEnvironment2$Outbound` instead. */
    type Outbound = GetDeploymentCustomEnvironment2$Outbound;
}
export declare function getDeploymentCustomEnvironment2ToJSON(getDeploymentCustomEnvironment2: GetDeploymentCustomEnvironment2): string;
export declare function getDeploymentCustomEnvironment2FromJSON(jsonString: string): SafeParseResult<GetDeploymentCustomEnvironment2, SDKValidationError>;
/** @internal */
export declare const GetDeploymentCustomEnvironmentType$inboundSchema: z.ZodNativeEnum<typeof GetDeploymentCustomEnvironmentType>;
/** @internal */
export declare const GetDeploymentCustomEnvironmentType$outboundSchema: z.ZodNativeEnum<typeof GetDeploymentCustomEnvironmentType>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetDeploymentCustomEnvironmentType$ {
    /** @deprecated use `GetDeploymentCustomEnvironmentType$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Production: "production";
        readonly Preview: "preview";
        readonly Development: "development";
    }>;
    /** @deprecated use `GetDeploymentCustomEnvironmentType$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Production: "production";
        readonly Preview: "preview";
        readonly Development: "development";
    }>;
}
/** @internal */
export declare const GetDeploymentCustomEnvironmentDeploymentsResponseType$inboundSchema: z.ZodNativeEnum<typeof GetDeploymentCustomEnvironmentDeploymentsResponseType>;
/** @internal */
export declare const GetDeploymentCustomEnvironmentDeploymentsResponseType$outboundSchema: z.ZodNativeEnum<typeof GetDeploymentCustomEnvironmentDeploymentsResponseType>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetDeploymentCustomEnvironmentDeploymentsResponseType$ {
    /** @deprecated use `GetDeploymentCustomEnvironmentDeploymentsResponseType$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly StartsWith: "startsWith";
        readonly Equals: "equals";
        readonly EndsWith: "endsWith";
    }>;
    /** @deprecated use `GetDeploymentCustomEnvironmentDeploymentsResponseType$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly StartsWith: "startsWith";
        readonly Equals: "equals";
        readonly EndsWith: "endsWith";
    }>;
}
/** @internal */
export declare const GetDeploymentCustomEnvironmentBranchMatcher$inboundSchema: z.ZodType<GetDeploymentCustomEnvironmentBranchMatcher, z.ZodTypeDef, unknown>;
/** @internal */
export type GetDeploymentCustomEnvironmentBranchMatcher$Outbound = {
    type: string;
    pattern: string;
};
/** @internal */
export declare const GetDeploymentCustomEnvironmentBranchMatcher$outboundSchema: z.ZodType<GetDeploymentCustomEnvironmentBranchMatcher$Outbound, z.ZodTypeDef, GetDeploymentCustomEnvironmentBranchMatcher>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetDeploymentCustomEnvironmentBranchMatcher$ {
    /** @deprecated use `GetDeploymentCustomEnvironmentBranchMatcher$inboundSchema` instead. */
    const inboundSchema: z.ZodType<GetDeploymentCustomEnvironmentBranchMatcher, z.ZodTypeDef, unknown>;
    /** @deprecated use `GetDeploymentCustomEnvironmentBranchMatcher$outboundSchema` instead. */
    const outboundSchema: z.ZodType<GetDeploymentCustomEnvironmentBranchMatcher$Outbound, z.ZodTypeDef, GetDeploymentCustomEnvironmentBranchMatcher>;
    /** @deprecated use `GetDeploymentCustomEnvironmentBranchMatcher$Outbound` instead. */
    type Outbound = GetDeploymentCustomEnvironmentBranchMatcher$Outbound;
}
export declare function getDeploymentCustomEnvironmentBranchMatcherToJSON(getDeploymentCustomEnvironmentBranchMatcher: GetDeploymentCustomEnvironmentBranchMatcher): string;
export declare function getDeploymentCustomEnvironmentBranchMatcherFromJSON(jsonString: string): SafeParseResult<GetDeploymentCustomEnvironmentBranchMatcher, SDKValidationError>;
/** @internal */
export declare const GetDeploymentCustomEnvironmentVerification$inboundSchema: z.ZodType<GetDeploymentCustomEnvironmentVerification, z.ZodTypeDef, unknown>;
/** @internal */
export type GetDeploymentCustomEnvironmentVerification$Outbound = {
    type: string;
    domain: string;
    value: string;
    reason: string;
};
/** @internal */
export declare const GetDeploymentCustomEnvironmentVerification$outboundSchema: z.ZodType<GetDeploymentCustomEnvironmentVerification$Outbound, z.ZodTypeDef, GetDeploymentCustomEnvironmentVerification>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetDeploymentCustomEnvironmentVerification$ {
    /** @deprecated use `GetDeploymentCustomEnvironmentVerification$inboundSchema` instead. */
    const inboundSchema: z.ZodType<GetDeploymentCustomEnvironmentVerification, z.ZodTypeDef, unknown>;
    /** @deprecated use `GetDeploymentCustomEnvironmentVerification$outboundSchema` instead. */
    const outboundSchema: z.ZodType<GetDeploymentCustomEnvironmentVerification$Outbound, z.ZodTypeDef, GetDeploymentCustomEnvironmentVerification>;
    /** @deprecated use `GetDeploymentCustomEnvironmentVerification$Outbound` instead. */
    type Outbound = GetDeploymentCustomEnvironmentVerification$Outbound;
}
export declare function getDeploymentCustomEnvironmentVerificationToJSON(getDeploymentCustomEnvironmentVerification: GetDeploymentCustomEnvironmentVerification): string;
export declare function getDeploymentCustomEnvironmentVerificationFromJSON(jsonString: string): SafeParseResult<GetDeploymentCustomEnvironmentVerification, SDKValidationError>;
/** @internal */
export declare const GetDeploymentCustomEnvironmentDomains$inboundSchema: z.ZodType<GetDeploymentCustomEnvironmentDomains, z.ZodTypeDef, unknown>;
/** @internal */
export type GetDeploymentCustomEnvironmentDomains$Outbound = {
    name: string;
    apexName: string;
    projectId: string;
    redirect?: string | null | undefined;
    redirectStatusCode?: number | null | undefined;
    gitBranch?: string | null | undefined;
    customEnvironmentId?: string | null | undefined;
    updatedAt?: number | undefined;
    createdAt?: number | undefined;
    verified: boolean;
    verification?: Array<GetDeploymentCustomEnvironmentVerification$Outbound> | undefined;
};
/** @internal */
export declare const GetDeploymentCustomEnvironmentDomains$outboundSchema: z.ZodType<GetDeploymentCustomEnvironmentDomains$Outbound, z.ZodTypeDef, GetDeploymentCustomEnvironmentDomains>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetDeploymentCustomEnvironmentDomains$ {
    /** @deprecated use `GetDeploymentCustomEnvironmentDomains$inboundSchema` instead. */
    const inboundSchema: z.ZodType<GetDeploymentCustomEnvironmentDomains, z.ZodTypeDef, unknown>;
    /** @deprecated use `GetDeploymentCustomEnvironmentDomains$outboundSchema` instead. */
    const outboundSchema: z.ZodType<GetDeploymentCustomEnvironmentDomains$Outbound, z.ZodTypeDef, GetDeploymentCustomEnvironmentDomains>;
    /** @deprecated use `GetDeploymentCustomEnvironmentDomains$Outbound` instead. */
    type Outbound = GetDeploymentCustomEnvironmentDomains$Outbound;
}
export declare function getDeploymentCustomEnvironmentDomainsToJSON(getDeploymentCustomEnvironmentDomains: GetDeploymentCustomEnvironmentDomains): string;
export declare function getDeploymentCustomEnvironmentDomainsFromJSON(jsonString: string): SafeParseResult<GetDeploymentCustomEnvironmentDomains, SDKValidationError>;
/** @internal */
export declare const GetDeploymentCustomEnvironment1$inboundSchema: z.ZodType<GetDeploymentCustomEnvironment1, z.ZodTypeDef, unknown>;
/** @internal */
export type GetDeploymentCustomEnvironment1$Outbound = {
    id: string;
    slug: string;
    type: string;
    description?: string | undefined;
    branchMatcher?: GetDeploymentCustomEnvironmentBranchMatcher$Outbound | undefined;
    domains?: Array<GetDeploymentCustomEnvironmentDomains$Outbound> | undefined;
    currentDeploymentAliases?: Array<string> | undefined;
    createdAt: number;
    updatedAt: number;
};
/** @internal */
export declare const GetDeploymentCustomEnvironment1$outboundSchema: z.ZodType<GetDeploymentCustomEnvironment1$Outbound, z.ZodTypeDef, GetDeploymentCustomEnvironment1>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetDeploymentCustomEnvironment1$ {
    /** @deprecated use `GetDeploymentCustomEnvironment1$inboundSchema` instead. */
    const inboundSchema: z.ZodType<GetDeploymentCustomEnvironment1, z.ZodTypeDef, unknown>;
    /** @deprecated use `GetDeploymentCustomEnvironment1$outboundSchema` instead. */
    const outboundSchema: z.ZodType<GetDeploymentCustomEnvironment1$Outbound, z.ZodTypeDef, GetDeploymentCustomEnvironment1>;
    /** @deprecated use `GetDeploymentCustomEnvironment1$Outbound` instead. */
    type Outbound = GetDeploymentCustomEnvironment1$Outbound;
}
export declare function getDeploymentCustomEnvironment1ToJSON(getDeploymentCustomEnvironment1: GetDeploymentCustomEnvironment1): string;
export declare function getDeploymentCustomEnvironment1FromJSON(jsonString: string): SafeParseResult<GetDeploymentCustomEnvironment1, SDKValidationError>;
/** @internal */
export declare const ResponseBodyCustomEnvironment$inboundSchema: z.ZodType<ResponseBodyCustomEnvironment, z.ZodTypeDef, unknown>;
/** @internal */
export type ResponseBodyCustomEnvironment$Outbound = GetDeploymentCustomEnvironment2$Outbound | GetDeploymentCustomEnvironment1$Outbound;
/** @internal */
export declare const ResponseBodyCustomEnvironment$outboundSchema: z.ZodType<ResponseBodyCustomEnvironment$Outbound, z.ZodTypeDef, ResponseBodyCustomEnvironment>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace ResponseBodyCustomEnvironment$ {
    /** @deprecated use `ResponseBodyCustomEnvironment$inboundSchema` instead. */
    const inboundSchema: z.ZodType<ResponseBodyCustomEnvironment, z.ZodTypeDef, unknown>;
    /** @deprecated use `ResponseBodyCustomEnvironment$outboundSchema` instead. */
    const outboundSchema: z.ZodType<ResponseBodyCustomEnvironment$Outbound, z.ZodTypeDef, ResponseBodyCustomEnvironment>;
    /** @deprecated use `ResponseBodyCustomEnvironment$Outbound` instead. */
    type Outbound = ResponseBodyCustomEnvironment$Outbound;
}
export declare function responseBodyCustomEnvironmentToJSON(responseBodyCustomEnvironment: ResponseBodyCustomEnvironment): string;
export declare function responseBodyCustomEnvironmentFromJSON(jsonString: string): SafeParseResult<ResponseBodyCustomEnvironment, SDKValidationError>;
/** @internal */
export declare const ResponseBodyAliasWarning$inboundSchema: z.ZodType<ResponseBodyAliasWarning, z.ZodTypeDef, unknown>;
/** @internal */
export type ResponseBodyAliasWarning$Outbound = {
    code: string;
    message: string;
    link?: string | undefined;
    action?: string | undefined;
};
/** @internal */
export declare const ResponseBodyAliasWarning$outboundSchema: z.ZodType<ResponseBodyAliasWarning$Outbound, z.ZodTypeDef, ResponseBodyAliasWarning>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace ResponseBodyAliasWarning$ {
    /** @deprecated use `ResponseBodyAliasWarning$inboundSchema` instead. */
    const inboundSchema: z.ZodType<ResponseBodyAliasWarning, z.ZodTypeDef, unknown>;
    /** @deprecated use `ResponseBodyAliasWarning$outboundSchema` instead. */
    const outboundSchema: z.ZodType<ResponseBodyAliasWarning$Outbound, z.ZodTypeDef, ResponseBodyAliasWarning>;
    /** @deprecated use `ResponseBodyAliasWarning$Outbound` instead. */
    type Outbound = ResponseBodyAliasWarning$Outbound;
}
export declare function responseBodyAliasWarningToJSON(responseBodyAliasWarning: ResponseBodyAliasWarning): string;
export declare function responseBodyAliasWarningFromJSON(jsonString: string): SafeParseResult<ResponseBodyAliasWarning, SDKValidationError>;
/** @internal */
export declare const GetDeploymentResponseBodyDeploymentsType$inboundSchema: z.ZodNativeEnum<typeof GetDeploymentResponseBodyDeploymentsType>;
/** @internal */
export declare const GetDeploymentResponseBodyDeploymentsType$outboundSchema: z.ZodNativeEnum<typeof GetDeploymentResponseBodyDeploymentsType>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetDeploymentResponseBodyDeploymentsType$ {
    /** @deprecated use `GetDeploymentResponseBodyDeploymentsType$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Lambdas: "LAMBDAS";
    }>;
    /** @deprecated use `GetDeploymentResponseBodyDeploymentsType$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Lambdas: "LAMBDAS";
    }>;
}
/** @internal */
export declare const GetDeploymentResponseBodyReadyState$inboundSchema: z.ZodNativeEnum<typeof GetDeploymentResponseBodyReadyState>;
/** @internal */
export declare const GetDeploymentResponseBodyReadyState$outboundSchema: z.ZodNativeEnum<typeof GetDeploymentResponseBodyReadyState>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetDeploymentResponseBodyReadyState$ {
    /** @deprecated use `GetDeploymentResponseBodyReadyState$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Queued: "QUEUED";
        readonly Building: "BUILDING";
        readonly Error: "ERROR";
        readonly Initializing: "INITIALIZING";
        readonly Ready: "READY";
        readonly Canceled: "CANCELED";
    }>;
    /** @deprecated use `GetDeploymentResponseBodyReadyState$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Queued: "QUEUED";
        readonly Building: "BUILDING";
        readonly Error: "ERROR";
        readonly Initializing: "INITIALIZING";
        readonly Ready: "READY";
        readonly Canceled: "CANCELED";
    }>;
}
/** @internal */
export declare const GetDeploymentResponseBodyAliasError$inboundSchema: z.ZodType<GetDeploymentResponseBodyAliasError, z.ZodTypeDef, unknown>;
/** @internal */
export type GetDeploymentResponseBodyAliasError$Outbound = {
    code: string;
    message: string;
};
/** @internal */
export declare const GetDeploymentResponseBodyAliasError$outboundSchema: z.ZodType<GetDeploymentResponseBodyAliasError$Outbound, z.ZodTypeDef, GetDeploymentResponseBodyAliasError>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetDeploymentResponseBodyAliasError$ {
    /** @deprecated use `GetDeploymentResponseBodyAliasError$inboundSchema` instead. */
    const inboundSchema: z.ZodType<GetDeploymentResponseBodyAliasError, z.ZodTypeDef, unknown>;
    /** @deprecated use `GetDeploymentResponseBodyAliasError$outboundSchema` instead. */
    const outboundSchema: z.ZodType<GetDeploymentResponseBodyAliasError$Outbound, z.ZodTypeDef, GetDeploymentResponseBodyAliasError>;
    /** @deprecated use `GetDeploymentResponseBodyAliasError$Outbound` instead. */
    type Outbound = GetDeploymentResponseBodyAliasError$Outbound;
}
export declare function getDeploymentResponseBodyAliasErrorToJSON(getDeploymentResponseBodyAliasError: GetDeploymentResponseBodyAliasError): string;
export declare function getDeploymentResponseBodyAliasErrorFromJSON(jsonString: string): SafeParseResult<GetDeploymentResponseBodyAliasError, SDKValidationError>;
/** @internal */
export declare const GetDeploymentResponseBodyChecksState$inboundSchema: z.ZodNativeEnum<typeof GetDeploymentResponseBodyChecksState>;
/** @internal */
export declare const GetDeploymentResponseBodyChecksState$outboundSchema: z.ZodNativeEnum<typeof GetDeploymentResponseBodyChecksState>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetDeploymentResponseBodyChecksState$ {
    /** @deprecated use `GetDeploymentResponseBodyChecksState$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Registered: "registered";
        readonly Running: "running";
        readonly Completed: "completed";
    }>;
    /** @deprecated use `GetDeploymentResponseBodyChecksState$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Registered: "registered";
        readonly Running: "running";
        readonly Completed: "completed";
    }>;
}
/** @internal */
export declare const GetDeploymentResponseBodyChecksConclusion$inboundSchema: z.ZodNativeEnum<typeof GetDeploymentResponseBodyChecksConclusion>;
/** @internal */
export declare const GetDeploymentResponseBodyChecksConclusion$outboundSchema: z.ZodNativeEnum<typeof GetDeploymentResponseBodyChecksConclusion>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetDeploymentResponseBodyChecksConclusion$ {
    /** @deprecated use `GetDeploymentResponseBodyChecksConclusion$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Succeeded: "succeeded";
        readonly Failed: "failed";
        readonly Skipped: "skipped";
        readonly Canceled: "canceled";
    }>;
    /** @deprecated use `GetDeploymentResponseBodyChecksConclusion$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Succeeded: "succeeded";
        readonly Failed: "failed";
        readonly Skipped: "skipped";
        readonly Canceled: "canceled";
    }>;
}
/** @internal */
export declare const GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody212Type$inboundSchema: z.ZodNativeEnum<typeof GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody212Type>;
/** @internal */
export declare const GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody212Type$outboundSchema: z.ZodNativeEnum<typeof GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody212Type>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody212Type$ {
    /** @deprecated use `GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody212Type$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Bitbucket: "bitbucket";
    }>;
    /** @deprecated use `GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody212Type$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Bitbucket: "bitbucket";
    }>;
}
/** @internal */
export declare const GetDeploymentGitSource12$inboundSchema: z.ZodType<GetDeploymentGitSource12, z.ZodTypeDef, unknown>;
/** @internal */
export type GetDeploymentGitSource12$Outbound = {
    type: string;
    ref: string;
    sha: string;
    owner?: string | undefined;
    slug?: string | undefined;
    workspaceUuid: string;
    repoUuid: string;
};
/** @internal */
export declare const GetDeploymentGitSource12$outboundSchema: z.ZodType<GetDeploymentGitSource12$Outbound, z.ZodTypeDef, GetDeploymentGitSource12>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetDeploymentGitSource12$ {
    /** @deprecated use `GetDeploymentGitSource12$inboundSchema` instead. */
    const inboundSchema: z.ZodType<GetDeploymentGitSource12, z.ZodTypeDef, unknown>;
    /** @deprecated use `GetDeploymentGitSource12$outboundSchema` instead. */
    const outboundSchema: z.ZodType<GetDeploymentGitSource12$Outbound, z.ZodTypeDef, GetDeploymentGitSource12>;
    /** @deprecated use `GetDeploymentGitSource12$Outbound` instead. */
    type Outbound = GetDeploymentGitSource12$Outbound;
}
export declare function getDeploymentGitSource12ToJSON(getDeploymentGitSource12: GetDeploymentGitSource12): string;
export declare function getDeploymentGitSource12FromJSON(jsonString: string): SafeParseResult<GetDeploymentGitSource12, SDKValidationError>;
/** @internal */
export declare const GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody211Type$inboundSchema: z.ZodNativeEnum<typeof GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody211Type>;
/** @internal */
export declare const GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody211Type$outboundSchema: z.ZodNativeEnum<typeof GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody211Type>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody211Type$ {
    /** @deprecated use `GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody211Type$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Gitlab: "gitlab";
    }>;
    /** @deprecated use `GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody211Type$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Gitlab: "gitlab";
    }>;
}
/** @internal */
export declare const GetDeploymentGitSource11$inboundSchema: z.ZodType<GetDeploymentGitSource11, z.ZodTypeDef, unknown>;
/** @internal */
export type GetDeploymentGitSource11$Outbound = {
    type: string;
    ref: string;
    sha: string;
    projectId: number;
};
/** @internal */
export declare const GetDeploymentGitSource11$outboundSchema: z.ZodType<GetDeploymentGitSource11$Outbound, z.ZodTypeDef, GetDeploymentGitSource11>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetDeploymentGitSource11$ {
    /** @deprecated use `GetDeploymentGitSource11$inboundSchema` instead. */
    const inboundSchema: z.ZodType<GetDeploymentGitSource11, z.ZodTypeDef, unknown>;
    /** @deprecated use `GetDeploymentGitSource11$outboundSchema` instead. */
    const outboundSchema: z.ZodType<GetDeploymentGitSource11$Outbound, z.ZodTypeDef, GetDeploymentGitSource11>;
    /** @deprecated use `GetDeploymentGitSource11$Outbound` instead. */
    type Outbound = GetDeploymentGitSource11$Outbound;
}
export declare function getDeploymentGitSource11ToJSON(getDeploymentGitSource11: GetDeploymentGitSource11): string;
export declare function getDeploymentGitSource11FromJSON(jsonString: string): SafeParseResult<GetDeploymentGitSource11, SDKValidationError>;
/** @internal */
export declare const GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody210Type$inboundSchema: z.ZodNativeEnum<typeof GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody210Type>;
/** @internal */
export declare const GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody210Type$outboundSchema: z.ZodNativeEnum<typeof GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody210Type>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody210Type$ {
    /** @deprecated use `GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody210Type$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly GithubCustomHost: "github-custom-host";
    }>;
    /** @deprecated use `GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody210Type$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly GithubCustomHost: "github-custom-host";
    }>;
}
/** @internal */
export declare const GetDeploymentGitSource10$inboundSchema: z.ZodType<GetDeploymentGitSource10, z.ZodTypeDef, unknown>;
/** @internal */
export type GetDeploymentGitSource10$Outbound = {
    type: string;
    host: string;
    ref: string;
    sha: string;
    repoId: number;
    org?: string | undefined;
    repo?: string | undefined;
};
/** @internal */
export declare const GetDeploymentGitSource10$outboundSchema: z.ZodType<GetDeploymentGitSource10$Outbound, z.ZodTypeDef, GetDeploymentGitSource10>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetDeploymentGitSource10$ {
    /** @deprecated use `GetDeploymentGitSource10$inboundSchema` instead. */
    const inboundSchema: z.ZodType<GetDeploymentGitSource10, z.ZodTypeDef, unknown>;
    /** @deprecated use `GetDeploymentGitSource10$outboundSchema` instead. */
    const outboundSchema: z.ZodType<GetDeploymentGitSource10$Outbound, z.ZodTypeDef, GetDeploymentGitSource10>;
    /** @deprecated use `GetDeploymentGitSource10$Outbound` instead. */
    type Outbound = GetDeploymentGitSource10$Outbound;
}
export declare function getDeploymentGitSource10ToJSON(getDeploymentGitSource10: GetDeploymentGitSource10): string;
export declare function getDeploymentGitSource10FromJSON(jsonString: string): SafeParseResult<GetDeploymentGitSource10, SDKValidationError>;
/** @internal */
export declare const GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody29Type$inboundSchema: z.ZodNativeEnum<typeof GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody29Type>;
/** @internal */
export declare const GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody29Type$outboundSchema: z.ZodNativeEnum<typeof GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody29Type>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody29Type$ {
    /** @deprecated use `GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody29Type$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Github: "github";
    }>;
    /** @deprecated use `GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody29Type$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Github: "github";
    }>;
}
/** @internal */
export declare const GetDeploymentGitSource9$inboundSchema: z.ZodType<GetDeploymentGitSource9, z.ZodTypeDef, unknown>;
/** @internal */
export type GetDeploymentGitSource9$Outbound = {
    type: string;
    ref: string;
    sha: string;
    repoId: number;
    org?: string | undefined;
    repo?: string | undefined;
};
/** @internal */
export declare const GetDeploymentGitSource9$outboundSchema: z.ZodType<GetDeploymentGitSource9$Outbound, z.ZodTypeDef, GetDeploymentGitSource9>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetDeploymentGitSource9$ {
    /** @deprecated use `GetDeploymentGitSource9$inboundSchema` instead. */
    const inboundSchema: z.ZodType<GetDeploymentGitSource9, z.ZodTypeDef, unknown>;
    /** @deprecated use `GetDeploymentGitSource9$outboundSchema` instead. */
    const outboundSchema: z.ZodType<GetDeploymentGitSource9$Outbound, z.ZodTypeDef, GetDeploymentGitSource9>;
    /** @deprecated use `GetDeploymentGitSource9$Outbound` instead. */
    type Outbound = GetDeploymentGitSource9$Outbound;
}
export declare function getDeploymentGitSource9ToJSON(getDeploymentGitSource9: GetDeploymentGitSource9): string;
export declare function getDeploymentGitSource9FromJSON(jsonString: string): SafeParseResult<GetDeploymentGitSource9, SDKValidationError>;
/** @internal */
export declare const GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody28Type$inboundSchema: z.ZodNativeEnum<typeof GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody28Type>;
/** @internal */
export declare const GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody28Type$outboundSchema: z.ZodNativeEnum<typeof GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody28Type>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody28Type$ {
    /** @deprecated use `GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody28Type$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Custom: "custom";
    }>;
    /** @deprecated use `GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody28Type$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Custom: "custom";
    }>;
}
/** @internal */
export declare const GetDeploymentGitSource8$inboundSchema: z.ZodType<GetDeploymentGitSource8, z.ZodTypeDef, unknown>;
/** @internal */
export type GetDeploymentGitSource8$Outbound = {
    type: string;
    ref: string;
    sha: string;
    gitUrl: string;
};
/** @internal */
export declare const GetDeploymentGitSource8$outboundSchema: z.ZodType<GetDeploymentGitSource8$Outbound, z.ZodTypeDef, GetDeploymentGitSource8>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetDeploymentGitSource8$ {
    /** @deprecated use `GetDeploymentGitSource8$inboundSchema` instead. */
    const inboundSchema: z.ZodType<GetDeploymentGitSource8, z.ZodTypeDef, unknown>;
    /** @deprecated use `GetDeploymentGitSource8$outboundSchema` instead. */
    const outboundSchema: z.ZodType<GetDeploymentGitSource8$Outbound, z.ZodTypeDef, GetDeploymentGitSource8>;
    /** @deprecated use `GetDeploymentGitSource8$Outbound` instead. */
    type Outbound = GetDeploymentGitSource8$Outbound;
}
export declare function getDeploymentGitSource8ToJSON(getDeploymentGitSource8: GetDeploymentGitSource8): string;
export declare function getDeploymentGitSource8FromJSON(jsonString: string): SafeParseResult<GetDeploymentGitSource8, SDKValidationError>;
/** @internal */
export declare const GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody27Type$inboundSchema: z.ZodNativeEnum<typeof GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody27Type>;
/** @internal */
export declare const GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody27Type$outboundSchema: z.ZodNativeEnum<typeof GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody27Type>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody27Type$ {
    /** @deprecated use `GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody27Type$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Bitbucket: "bitbucket";
    }>;
    /** @deprecated use `GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody27Type$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Bitbucket: "bitbucket";
    }>;
}
/** @internal */
export declare const GetDeploymentGitSource7$inboundSchema: z.ZodType<GetDeploymentGitSource7, z.ZodTypeDef, unknown>;
/** @internal */
export type GetDeploymentGitSource7$Outbound = {
    type: string;
    owner: string;
    slug: string;
    ref?: string | null | undefined;
    sha?: string | undefined;
    prId?: number | null | undefined;
};
/** @internal */
export declare const GetDeploymentGitSource7$outboundSchema: z.ZodType<GetDeploymentGitSource7$Outbound, z.ZodTypeDef, GetDeploymentGitSource7>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetDeploymentGitSource7$ {
    /** @deprecated use `GetDeploymentGitSource7$inboundSchema` instead. */
    const inboundSchema: z.ZodType<GetDeploymentGitSource7, z.ZodTypeDef, unknown>;
    /** @deprecated use `GetDeploymentGitSource7$outboundSchema` instead. */
    const outboundSchema: z.ZodType<GetDeploymentGitSource7$Outbound, z.ZodTypeDef, GetDeploymentGitSource7>;
    /** @deprecated use `GetDeploymentGitSource7$Outbound` instead. */
    type Outbound = GetDeploymentGitSource7$Outbound;
}
export declare function getDeploymentGitSource7ToJSON(getDeploymentGitSource7: GetDeploymentGitSource7): string;
export declare function getDeploymentGitSource7FromJSON(jsonString: string): SafeParseResult<GetDeploymentGitSource7, SDKValidationError>;
/** @internal */
export declare const GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody26Type$inboundSchema: z.ZodNativeEnum<typeof GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody26Type>;
/** @internal */
export declare const GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody26Type$outboundSchema: z.ZodNativeEnum<typeof GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody26Type>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody26Type$ {
    /** @deprecated use `GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody26Type$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Bitbucket: "bitbucket";
    }>;
    /** @deprecated use `GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody26Type$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Bitbucket: "bitbucket";
    }>;
}
/** @internal */
export declare const GetDeploymentGitSource6$inboundSchema: z.ZodType<GetDeploymentGitSource6, z.ZodTypeDef, unknown>;
/** @internal */
export type GetDeploymentGitSource6$Outbound = {
    type: string;
    workspaceUuid?: string | undefined;
    repoUuid: string;
    ref?: string | null | undefined;
    sha?: string | undefined;
    prId?: number | null | undefined;
};
/** @internal */
export declare const GetDeploymentGitSource6$outboundSchema: z.ZodType<GetDeploymentGitSource6$Outbound, z.ZodTypeDef, GetDeploymentGitSource6>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetDeploymentGitSource6$ {
    /** @deprecated use `GetDeploymentGitSource6$inboundSchema` instead. */
    const inboundSchema: z.ZodType<GetDeploymentGitSource6, z.ZodTypeDef, unknown>;
    /** @deprecated use `GetDeploymentGitSource6$outboundSchema` instead. */
    const outboundSchema: z.ZodType<GetDeploymentGitSource6$Outbound, z.ZodTypeDef, GetDeploymentGitSource6>;
    /** @deprecated use `GetDeploymentGitSource6$Outbound` instead. */
    type Outbound = GetDeploymentGitSource6$Outbound;
}
export declare function getDeploymentGitSource6ToJSON(getDeploymentGitSource6: GetDeploymentGitSource6): string;
export declare function getDeploymentGitSource6FromJSON(jsonString: string): SafeParseResult<GetDeploymentGitSource6, SDKValidationError>;
/** @internal */
export declare const GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody25Type$inboundSchema: z.ZodNativeEnum<typeof GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody25Type>;
/** @internal */
export declare const GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody25Type$outboundSchema: z.ZodNativeEnum<typeof GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody25Type>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody25Type$ {
    /** @deprecated use `GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody25Type$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Gitlab: "gitlab";
    }>;
    /** @deprecated use `GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody25Type$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Gitlab: "gitlab";
    }>;
}
/** @internal */
export declare const GetDeploymentGitSourceDeploymentsProjectId$inboundSchema: z.ZodType<GetDeploymentGitSourceDeploymentsProjectId, z.ZodTypeDef, unknown>;
/** @internal */
export type GetDeploymentGitSourceDeploymentsProjectId$Outbound = string | number;
/** @internal */
export declare const GetDeploymentGitSourceDeploymentsProjectId$outboundSchema: z.ZodType<GetDeploymentGitSourceDeploymentsProjectId$Outbound, z.ZodTypeDef, GetDeploymentGitSourceDeploymentsProjectId>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetDeploymentGitSourceDeploymentsProjectId$ {
    /** @deprecated use `GetDeploymentGitSourceDeploymentsProjectId$inboundSchema` instead. */
    const inboundSchema: z.ZodType<GetDeploymentGitSourceDeploymentsProjectId, z.ZodTypeDef, unknown>;
    /** @deprecated use `GetDeploymentGitSourceDeploymentsProjectId$outboundSchema` instead. */
    const outboundSchema: z.ZodType<GetDeploymentGitSourceDeploymentsProjectId$Outbound, z.ZodTypeDef, GetDeploymentGitSourceDeploymentsProjectId>;
    /** @deprecated use `GetDeploymentGitSourceDeploymentsProjectId$Outbound` instead. */
    type Outbound = GetDeploymentGitSourceDeploymentsProjectId$Outbound;
}
export declare function getDeploymentGitSourceDeploymentsProjectIdToJSON(getDeploymentGitSourceDeploymentsProjectId: GetDeploymentGitSourceDeploymentsProjectId): string;
export declare function getDeploymentGitSourceDeploymentsProjectIdFromJSON(jsonString: string): SafeParseResult<GetDeploymentGitSourceDeploymentsProjectId, SDKValidationError>;
/** @internal */
export declare const GetDeploymentGitSource5$inboundSchema: z.ZodType<GetDeploymentGitSource5, z.ZodTypeDef, unknown>;
/** @internal */
export type GetDeploymentGitSource5$Outbound = {
    type: string;
    projectId: string | number;
    ref?: string | null | undefined;
    sha?: string | undefined;
    prId?: number | null | undefined;
};
/** @internal */
export declare const GetDeploymentGitSource5$outboundSchema: z.ZodType<GetDeploymentGitSource5$Outbound, z.ZodTypeDef, GetDeploymentGitSource5>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetDeploymentGitSource5$ {
    /** @deprecated use `GetDeploymentGitSource5$inboundSchema` instead. */
    const inboundSchema: z.ZodType<GetDeploymentGitSource5, z.ZodTypeDef, unknown>;
    /** @deprecated use `GetDeploymentGitSource5$outboundSchema` instead. */
    const outboundSchema: z.ZodType<GetDeploymentGitSource5$Outbound, z.ZodTypeDef, GetDeploymentGitSource5>;
    /** @deprecated use `GetDeploymentGitSource5$Outbound` instead. */
    type Outbound = GetDeploymentGitSource5$Outbound;
}
export declare function getDeploymentGitSource5ToJSON(getDeploymentGitSource5: GetDeploymentGitSource5): string;
export declare function getDeploymentGitSource5FromJSON(jsonString: string): SafeParseResult<GetDeploymentGitSource5, SDKValidationError>;
/** @internal */
export declare const GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody24Type$inboundSchema: z.ZodNativeEnum<typeof GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody24Type>;
/** @internal */
export declare const GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody24Type$outboundSchema: z.ZodNativeEnum<typeof GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody24Type>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody24Type$ {
    /** @deprecated use `GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody24Type$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly GithubCustomHost: "github-custom-host";
    }>;
    /** @deprecated use `GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody24Type$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly GithubCustomHost: "github-custom-host";
    }>;
}
/** @internal */
export declare const GetDeploymentGitSource4$inboundSchema: z.ZodType<GetDeploymentGitSource4, z.ZodTypeDef, unknown>;
/** @internal */
export type GetDeploymentGitSource4$Outbound = {
    type: string;
    host: string;
    org: string;
    repo: string;
    ref?: string | null | undefined;
    sha?: string | undefined;
    prId?: number | null | undefined;
};
/** @internal */
export declare const GetDeploymentGitSource4$outboundSchema: z.ZodType<GetDeploymentGitSource4$Outbound, z.ZodTypeDef, GetDeploymentGitSource4>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetDeploymentGitSource4$ {
    /** @deprecated use `GetDeploymentGitSource4$inboundSchema` instead. */
    const inboundSchema: z.ZodType<GetDeploymentGitSource4, z.ZodTypeDef, unknown>;
    /** @deprecated use `GetDeploymentGitSource4$outboundSchema` instead. */
    const outboundSchema: z.ZodType<GetDeploymentGitSource4$Outbound, z.ZodTypeDef, GetDeploymentGitSource4>;
    /** @deprecated use `GetDeploymentGitSource4$Outbound` instead. */
    type Outbound = GetDeploymentGitSource4$Outbound;
}
export declare function getDeploymentGitSource4ToJSON(getDeploymentGitSource4: GetDeploymentGitSource4): string;
export declare function getDeploymentGitSource4FromJSON(jsonString: string): SafeParseResult<GetDeploymentGitSource4, SDKValidationError>;
/** @internal */
export declare const GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody23Type$inboundSchema: z.ZodNativeEnum<typeof GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody23Type>;
/** @internal */
export declare const GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody23Type$outboundSchema: z.ZodNativeEnum<typeof GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody23Type>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody23Type$ {
    /** @deprecated use `GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody23Type$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly GithubCustomHost: "github-custom-host";
    }>;
    /** @deprecated use `GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody23Type$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly GithubCustomHost: "github-custom-host";
    }>;
}
/** @internal */
export declare const GetDeploymentGitSourceDeploymentsRepoId$inboundSchema: z.ZodType<GetDeploymentGitSourceDeploymentsRepoId, z.ZodTypeDef, unknown>;
/** @internal */
export type GetDeploymentGitSourceDeploymentsRepoId$Outbound = string | number;
/** @internal */
export declare const GetDeploymentGitSourceDeploymentsRepoId$outboundSchema: z.ZodType<GetDeploymentGitSourceDeploymentsRepoId$Outbound, z.ZodTypeDef, GetDeploymentGitSourceDeploymentsRepoId>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetDeploymentGitSourceDeploymentsRepoId$ {
    /** @deprecated use `GetDeploymentGitSourceDeploymentsRepoId$inboundSchema` instead. */
    const inboundSchema: z.ZodType<GetDeploymentGitSourceDeploymentsRepoId, z.ZodTypeDef, unknown>;
    /** @deprecated use `GetDeploymentGitSourceDeploymentsRepoId$outboundSchema` instead. */
    const outboundSchema: z.ZodType<GetDeploymentGitSourceDeploymentsRepoId$Outbound, z.ZodTypeDef, GetDeploymentGitSourceDeploymentsRepoId>;
    /** @deprecated use `GetDeploymentGitSourceDeploymentsRepoId$Outbound` instead. */
    type Outbound = GetDeploymentGitSourceDeploymentsRepoId$Outbound;
}
export declare function getDeploymentGitSourceDeploymentsRepoIdToJSON(getDeploymentGitSourceDeploymentsRepoId: GetDeploymentGitSourceDeploymentsRepoId): string;
export declare function getDeploymentGitSourceDeploymentsRepoIdFromJSON(jsonString: string): SafeParseResult<GetDeploymentGitSourceDeploymentsRepoId, SDKValidationError>;
/** @internal */
export declare const GetDeploymentGitSource3$inboundSchema: z.ZodType<GetDeploymentGitSource3, z.ZodTypeDef, unknown>;
/** @internal */
export type GetDeploymentGitSource3$Outbound = {
    type: string;
    host: string;
    repoId: string | number;
    ref?: string | null | undefined;
    sha?: string | undefined;
    prId?: number | null | undefined;
};
/** @internal */
export declare const GetDeploymentGitSource3$outboundSchema: z.ZodType<GetDeploymentGitSource3$Outbound, z.ZodTypeDef, GetDeploymentGitSource3>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetDeploymentGitSource3$ {
    /** @deprecated use `GetDeploymentGitSource3$inboundSchema` instead. */
    const inboundSchema: z.ZodType<GetDeploymentGitSource3, z.ZodTypeDef, unknown>;
    /** @deprecated use `GetDeploymentGitSource3$outboundSchema` instead. */
    const outboundSchema: z.ZodType<GetDeploymentGitSource3$Outbound, z.ZodTypeDef, GetDeploymentGitSource3>;
    /** @deprecated use `GetDeploymentGitSource3$Outbound` instead. */
    type Outbound = GetDeploymentGitSource3$Outbound;
}
export declare function getDeploymentGitSource3ToJSON(getDeploymentGitSource3: GetDeploymentGitSource3): string;
export declare function getDeploymentGitSource3FromJSON(jsonString: string): SafeParseResult<GetDeploymentGitSource3, SDKValidationError>;
/** @internal */
export declare const GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody22Type$inboundSchema: z.ZodNativeEnum<typeof GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody22Type>;
/** @internal */
export declare const GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody22Type$outboundSchema: z.ZodNativeEnum<typeof GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody22Type>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody22Type$ {
    /** @deprecated use `GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody22Type$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Github: "github";
    }>;
    /** @deprecated use `GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody22Type$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Github: "github";
    }>;
}
/** @internal */
export declare const GetDeploymentGitSource2$inboundSchema: z.ZodType<GetDeploymentGitSource2, z.ZodTypeDef, unknown>;
/** @internal */
export type GetDeploymentGitSource2$Outbound = {
    type: string;
    org: string;
    repo: string;
    ref?: string | null | undefined;
    sha?: string | undefined;
    prId?: number | null | undefined;
};
/** @internal */
export declare const GetDeploymentGitSource2$outboundSchema: z.ZodType<GetDeploymentGitSource2$Outbound, z.ZodTypeDef, GetDeploymentGitSource2>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetDeploymentGitSource2$ {
    /** @deprecated use `GetDeploymentGitSource2$inboundSchema` instead. */
    const inboundSchema: z.ZodType<GetDeploymentGitSource2, z.ZodTypeDef, unknown>;
    /** @deprecated use `GetDeploymentGitSource2$outboundSchema` instead. */
    const outboundSchema: z.ZodType<GetDeploymentGitSource2$Outbound, z.ZodTypeDef, GetDeploymentGitSource2>;
    /** @deprecated use `GetDeploymentGitSource2$Outbound` instead. */
    type Outbound = GetDeploymentGitSource2$Outbound;
}
export declare function getDeploymentGitSource2ToJSON(getDeploymentGitSource2: GetDeploymentGitSource2): string;
export declare function getDeploymentGitSource2FromJSON(jsonString: string): SafeParseResult<GetDeploymentGitSource2, SDKValidationError>;
/** @internal */
export declare const GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody2Type$inboundSchema: z.ZodNativeEnum<typeof GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody2Type>;
/** @internal */
export declare const GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody2Type$outboundSchema: z.ZodNativeEnum<typeof GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody2Type>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody2Type$ {
    /** @deprecated use `GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody2Type$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Github: "github";
    }>;
    /** @deprecated use `GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody2Type$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Github: "github";
    }>;
}
/** @internal */
export declare const GetDeploymentGitSourceRepoId$inboundSchema: z.ZodType<GetDeploymentGitSourceRepoId, z.ZodTypeDef, unknown>;
/** @internal */
export type GetDeploymentGitSourceRepoId$Outbound = string | number;
/** @internal */
export declare const GetDeploymentGitSourceRepoId$outboundSchema: z.ZodType<GetDeploymentGitSourceRepoId$Outbound, z.ZodTypeDef, GetDeploymentGitSourceRepoId>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetDeploymentGitSourceRepoId$ {
    /** @deprecated use `GetDeploymentGitSourceRepoId$inboundSchema` instead. */
    const inboundSchema: z.ZodType<GetDeploymentGitSourceRepoId, z.ZodTypeDef, unknown>;
    /** @deprecated use `GetDeploymentGitSourceRepoId$outboundSchema` instead. */
    const outboundSchema: z.ZodType<GetDeploymentGitSourceRepoId$Outbound, z.ZodTypeDef, GetDeploymentGitSourceRepoId>;
    /** @deprecated use `GetDeploymentGitSourceRepoId$Outbound` instead. */
    type Outbound = GetDeploymentGitSourceRepoId$Outbound;
}
export declare function getDeploymentGitSourceRepoIdToJSON(getDeploymentGitSourceRepoId: GetDeploymentGitSourceRepoId): string;
export declare function getDeploymentGitSourceRepoIdFromJSON(jsonString: string): SafeParseResult<GetDeploymentGitSourceRepoId, SDKValidationError>;
/** @internal */
export declare const GetDeploymentGitSource1$inboundSchema: z.ZodType<GetDeploymentGitSource1, z.ZodTypeDef, unknown>;
/** @internal */
export type GetDeploymentGitSource1$Outbound = {
    type: string;
    repoId: string | number;
    ref?: string | null | undefined;
    sha?: string | undefined;
    prId?: number | null | undefined;
};
/** @internal */
export declare const GetDeploymentGitSource1$outboundSchema: z.ZodType<GetDeploymentGitSource1$Outbound, z.ZodTypeDef, GetDeploymentGitSource1>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetDeploymentGitSource1$ {
    /** @deprecated use `GetDeploymentGitSource1$inboundSchema` instead. */
    const inboundSchema: z.ZodType<GetDeploymentGitSource1, z.ZodTypeDef, unknown>;
    /** @deprecated use `GetDeploymentGitSource1$outboundSchema` instead. */
    const outboundSchema: z.ZodType<GetDeploymentGitSource1$Outbound, z.ZodTypeDef, GetDeploymentGitSource1>;
    /** @deprecated use `GetDeploymentGitSource1$Outbound` instead. */
    type Outbound = GetDeploymentGitSource1$Outbound;
}
export declare function getDeploymentGitSource1ToJSON(getDeploymentGitSource1: GetDeploymentGitSource1): string;
export declare function getDeploymentGitSource1FromJSON(jsonString: string): SafeParseResult<GetDeploymentGitSource1, SDKValidationError>;
/** @internal */
export declare const ResponseBodyGitSource$inboundSchema: z.ZodType<ResponseBodyGitSource, z.ZodTypeDef, unknown>;
/** @internal */
export type ResponseBodyGitSource$Outbound = GetDeploymentGitSource8$Outbound | GetDeploymentGitSource11$Outbound | GetDeploymentGitSource1$Outbound | GetDeploymentGitSource5$Outbound | GetDeploymentGitSource2$Outbound | GetDeploymentGitSource3$Outbound | GetDeploymentGitSource6$Outbound | GetDeploymentGitSource7$Outbound | GetDeploymentGitSource9$Outbound | GetDeploymentGitSource4$Outbound | GetDeploymentGitSource10$Outbound | GetDeploymentGitSource12$Outbound;
/** @internal */
export declare const ResponseBodyGitSource$outboundSchema: z.ZodType<ResponseBodyGitSource$Outbound, z.ZodTypeDef, ResponseBodyGitSource>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace ResponseBodyGitSource$ {
    /** @deprecated use `ResponseBodyGitSource$inboundSchema` instead. */
    const inboundSchema: z.ZodType<ResponseBodyGitSource, z.ZodTypeDef, unknown>;
    /** @deprecated use `ResponseBodyGitSource$outboundSchema` instead. */
    const outboundSchema: z.ZodType<ResponseBodyGitSource$Outbound, z.ZodTypeDef, ResponseBodyGitSource>;
    /** @deprecated use `ResponseBodyGitSource$Outbound` instead. */
    type Outbound = ResponseBodyGitSource$Outbound;
}
export declare function responseBodyGitSourceToJSON(responseBodyGitSource: ResponseBodyGitSource): string;
export declare function responseBodyGitSourceFromJSON(jsonString: string): SafeParseResult<ResponseBodyGitSource, SDKValidationError>;
/** @internal */
export declare const GetDeploymentResponseBodyProject$inboundSchema: z.ZodType<GetDeploymentResponseBodyProject, z.ZodTypeDef, unknown>;
/** @internal */
export type GetDeploymentResponseBodyProject$Outbound = {
    id: string;
    name: string;
    framework?: string | null | undefined;
};
/** @internal */
export declare const GetDeploymentResponseBodyProject$outboundSchema: z.ZodType<GetDeploymentResponseBodyProject$Outbound, z.ZodTypeDef, GetDeploymentResponseBodyProject>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetDeploymentResponseBodyProject$ {
    /** @deprecated use `GetDeploymentResponseBodyProject$inboundSchema` instead. */
    const inboundSchema: z.ZodType<GetDeploymentResponseBodyProject, z.ZodTypeDef, unknown>;
    /** @deprecated use `GetDeploymentResponseBodyProject$outboundSchema` instead. */
    const outboundSchema: z.ZodType<GetDeploymentResponseBodyProject$Outbound, z.ZodTypeDef, GetDeploymentResponseBodyProject>;
    /** @deprecated use `GetDeploymentResponseBodyProject$Outbound` instead. */
    type Outbound = GetDeploymentResponseBodyProject$Outbound;
}
export declare function getDeploymentResponseBodyProjectToJSON(getDeploymentResponseBodyProject: GetDeploymentResponseBodyProject): string;
export declare function getDeploymentResponseBodyProjectFromJSON(jsonString: string): SafeParseResult<GetDeploymentResponseBodyProject, SDKValidationError>;
/** @internal */
export declare const GetDeploymentResponseBodyReadySubstate$inboundSchema: z.ZodNativeEnum<typeof GetDeploymentResponseBodyReadySubstate>;
/** @internal */
export declare const GetDeploymentResponseBodyReadySubstate$outboundSchema: z.ZodNativeEnum<typeof GetDeploymentResponseBodyReadySubstate>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetDeploymentResponseBodyReadySubstate$ {
    /** @deprecated use `GetDeploymentResponseBodyReadySubstate$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Staged: "STAGED";
        readonly Rolling: "ROLLING";
        readonly Promoted: "PROMOTED";
    }>;
    /** @deprecated use `GetDeploymentResponseBodyReadySubstate$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Staged: "STAGED";
        readonly Rolling: "ROLLING";
        readonly Promoted: "PROMOTED";
    }>;
}
/** @internal */
export declare const GetDeploymentResponseBodySource$inboundSchema: z.ZodNativeEnum<typeof GetDeploymentResponseBodySource>;
/** @internal */
export declare const GetDeploymentResponseBodySource$outboundSchema: z.ZodNativeEnum<typeof GetDeploymentResponseBodySource>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetDeploymentResponseBodySource$ {
    /** @deprecated use `GetDeploymentResponseBodySource$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly ApiTriggerGitDeploy: "api-trigger-git-deploy";
        readonly Cli: "cli";
        readonly CloneRepo: "clone/repo";
        readonly Git: "git";
        readonly Import: "import";
        readonly ImportRepo: "import/repo";
        readonly Redeploy: "redeploy";
        readonly V0Web: "v0-web";
    }>;
    /** @deprecated use `GetDeploymentResponseBodySource$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly ApiTriggerGitDeploy: "api-trigger-git-deploy";
        readonly Cli: "cli";
        readonly CloneRepo: "clone/repo";
        readonly Git: "git";
        readonly Import: "import";
        readonly ImportRepo: "import/repo";
        readonly Redeploy: "redeploy";
        readonly V0Web: "v0-web";
    }>;
}
/** @internal */
export declare const GetDeploymentResponseBodyTarget$inboundSchema: z.ZodNativeEnum<typeof GetDeploymentResponseBodyTarget>;
/** @internal */
export declare const GetDeploymentResponseBodyTarget$outboundSchema: z.ZodNativeEnum<typeof GetDeploymentResponseBodyTarget>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetDeploymentResponseBodyTarget$ {
    /** @deprecated use `GetDeploymentResponseBodyTarget$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Staging: "staging";
        readonly Production: "production";
    }>;
    /** @deprecated use `GetDeploymentResponseBodyTarget$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Staging: "staging";
        readonly Production: "production";
    }>;
}
/** @internal */
export declare const GetDeploymentResponseBodyOidcTokenClaims$inboundSchema: z.ZodType<GetDeploymentResponseBodyOidcTokenClaims, z.ZodTypeDef, unknown>;
/** @internal */
export type GetDeploymentResponseBodyOidcTokenClaims$Outbound = {
    iss: string;
    sub: string;
    scope: string;
    aud: string;
    owner: string;
    owner_id: string;
    project: string;
    project_id: string;
    environment: string;
};
/** @internal */
export declare const GetDeploymentResponseBodyOidcTokenClaims$outboundSchema: z.ZodType<GetDeploymentResponseBodyOidcTokenClaims$Outbound, z.ZodTypeDef, GetDeploymentResponseBodyOidcTokenClaims>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetDeploymentResponseBodyOidcTokenClaims$ {
    /** @deprecated use `GetDeploymentResponseBodyOidcTokenClaims$inboundSchema` instead. */
    const inboundSchema: z.ZodType<GetDeploymentResponseBodyOidcTokenClaims, z.ZodTypeDef, unknown>;
    /** @deprecated use `GetDeploymentResponseBodyOidcTokenClaims$outboundSchema` instead. */
    const outboundSchema: z.ZodType<GetDeploymentResponseBodyOidcTokenClaims$Outbound, z.ZodTypeDef, GetDeploymentResponseBodyOidcTokenClaims>;
    /** @deprecated use `GetDeploymentResponseBodyOidcTokenClaims$Outbound` instead. */
    type Outbound = GetDeploymentResponseBodyOidcTokenClaims$Outbound;
}
export declare function getDeploymentResponseBodyOidcTokenClaimsToJSON(getDeploymentResponseBodyOidcTokenClaims: GetDeploymentResponseBodyOidcTokenClaims): string;
export declare function getDeploymentResponseBodyOidcTokenClaimsFromJSON(jsonString: string): SafeParseResult<GetDeploymentResponseBodyOidcTokenClaims, SDKValidationError>;
/** @internal */
export declare const GetDeploymentResponseBody2$inboundSchema: z.ZodType<GetDeploymentResponseBody2, z.ZodTypeDef, unknown>;
/** @internal */
export type GetDeploymentResponseBody2$Outbound = {
    alias?: Array<string> | undefined;
    aliasAssigned: boolean;
    bootedAt: number;
    buildingAt: number;
    buildContainerFinishedAt?: number | undefined;
    buildSkipped: boolean;
    creator: GetDeploymentResponseBodyCreator$Outbound;
    initReadyAt?: number | undefined;
    isFirstBranchDeployment?: boolean | undefined;
    lambdas?: Array<ResponseBodyLambdas$Outbound> | undefined;
    public: boolean;
    ready?: number | undefined;
    status: string;
    team?: ResponseBodyTeam$Outbound | undefined;
    userAliases?: Array<string> | undefined;
    previewCommentsEnabled?: boolean | undefined;
    ttyBuildLogs?: boolean | undefined;
    customEnvironment?: GetDeploymentCustomEnvironment2$Outbound | GetDeploymentCustomEnvironment1$Outbound | undefined;
    aliasWarning?: ResponseBodyAliasWarning$Outbound | null | undefined;
    id: string;
    name: string;
    type: string;
    createdAt: number;
    readyState: string;
    aliasError?: GetDeploymentResponseBodyAliasError$Outbound | null | undefined;
    aliasFinal?: string | null | undefined;
    autoAssignCustomDomains?: boolean | undefined;
    automaticAliases?: Array<string> | undefined;
    buildErrorAt?: number | undefined;
    checksState?: string | undefined;
    checksConclusion?: string | undefined;
    deletedAt?: number | null | undefined;
    defaultRoute?: string | undefined;
    canceledAt?: number | undefined;
    errorCode?: string | undefined;
    errorLink?: string | undefined;
    errorMessage?: string | null | undefined;
    errorStep?: string | undefined;
    passiveRegions?: Array<string> | undefined;
    gitSource?: GetDeploymentGitSource8$Outbound | GetDeploymentGitSource11$Outbound | GetDeploymentGitSource1$Outbound | GetDeploymentGitSource5$Outbound | GetDeploymentGitSource2$Outbound | GetDeploymentGitSource3$Outbound | GetDeploymentGitSource6$Outbound | GetDeploymentGitSource7$Outbound | GetDeploymentGitSource9$Outbound | GetDeploymentGitSource4$Outbound | GetDeploymentGitSource10$Outbound | GetDeploymentGitSource12$Outbound | undefined;
    meta: {
        [k: string]: string;
    };
    originCacheRegion?: string | undefined;
    project?: GetDeploymentResponseBodyProject$Outbound | undefined;
    readySubstate?: string | undefined;
    regions: Array<string>;
    softDeletedByRetention?: boolean | undefined;
    source?: string | undefined;
    target?: string | null | undefined;
    undeletedAt?: number | undefined;
    url: string;
    version: number;
    oidcTokenClaims?: GetDeploymentResponseBodyOidcTokenClaims$Outbound | undefined;
};
/** @internal */
export declare const GetDeploymentResponseBody2$outboundSchema: z.ZodType<GetDeploymentResponseBody2$Outbound, z.ZodTypeDef, GetDeploymentResponseBody2>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetDeploymentResponseBody2$ {
    /** @deprecated use `GetDeploymentResponseBody2$inboundSchema` instead. */
    const inboundSchema: z.ZodType<GetDeploymentResponseBody2, z.ZodTypeDef, unknown>;
    /** @deprecated use `GetDeploymentResponseBody2$outboundSchema` instead. */
    const outboundSchema: z.ZodType<GetDeploymentResponseBody2$Outbound, z.ZodTypeDef, GetDeploymentResponseBody2>;
    /** @deprecated use `GetDeploymentResponseBody2$Outbound` instead. */
    type Outbound = GetDeploymentResponseBody2$Outbound;
}
export declare function getDeploymentResponseBody2ToJSON(getDeploymentResponseBody2: GetDeploymentResponseBody2): string;
export declare function getDeploymentResponseBody2FromJSON(jsonString: string): SafeParseResult<GetDeploymentResponseBody2, SDKValidationError>;
/** @internal */
export declare const ResponseBodyAliasAssignedAt$inboundSchema: z.ZodType<ResponseBodyAliasAssignedAt, z.ZodTypeDef, unknown>;
/** @internal */
export type ResponseBodyAliasAssignedAt$Outbound = number | boolean;
/** @internal */
export declare const ResponseBodyAliasAssignedAt$outboundSchema: z.ZodType<ResponseBodyAliasAssignedAt$Outbound, z.ZodTypeDef, ResponseBodyAliasAssignedAt>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace ResponseBodyAliasAssignedAt$ {
    /** @deprecated use `ResponseBodyAliasAssignedAt$inboundSchema` instead. */
    const inboundSchema: z.ZodType<ResponseBodyAliasAssignedAt, z.ZodTypeDef, unknown>;
    /** @deprecated use `ResponseBodyAliasAssignedAt$outboundSchema` instead. */
    const outboundSchema: z.ZodType<ResponseBodyAliasAssignedAt$Outbound, z.ZodTypeDef, ResponseBodyAliasAssignedAt>;
    /** @deprecated use `ResponseBodyAliasAssignedAt$Outbound` instead. */
    type Outbound = ResponseBodyAliasAssignedAt$Outbound;
}
export declare function responseBodyAliasAssignedAtToJSON(responseBodyAliasAssignedAt: ResponseBodyAliasAssignedAt): string;
export declare function responseBodyAliasAssignedAtFromJSON(jsonString: string): SafeParseResult<ResponseBodyAliasAssignedAt, SDKValidationError>;
/** @internal */
export declare const ResponseBodyBuild$inboundSchema: z.ZodType<ResponseBodyBuild, z.ZodTypeDef, unknown>;
/** @internal */
export type ResponseBodyBuild$Outbound = {
    env: Array<string>;
};
/** @internal */
export declare const ResponseBodyBuild$outboundSchema: z.ZodType<ResponseBodyBuild$Outbound, z.ZodTypeDef, ResponseBodyBuild>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace ResponseBodyBuild$ {
    /** @deprecated use `ResponseBodyBuild$inboundSchema` instead. */
    const inboundSchema: z.ZodType<ResponseBodyBuild, z.ZodTypeDef, unknown>;
    /** @deprecated use `ResponseBodyBuild$outboundSchema` instead. */
    const outboundSchema: z.ZodType<ResponseBodyBuild$Outbound, z.ZodTypeDef, ResponseBodyBuild>;
    /** @deprecated use `ResponseBodyBuild$Outbound` instead. */
    type Outbound = ResponseBodyBuild$Outbound;
}
export declare function responseBodyBuildToJSON(responseBodyBuild: ResponseBodyBuild): string;
export declare function responseBodyBuildFromJSON(jsonString: string): SafeParseResult<ResponseBodyBuild, SDKValidationError>;
/** @internal */
export declare const ResponseBodyBuilds$inboundSchema: z.ZodType<ResponseBodyBuilds, z.ZodTypeDef, unknown>;
/** @internal */
export type ResponseBodyBuilds$Outbound = {
    use: string;
    src?: string | undefined;
    config?: {
        [k: string]: any;
    } | undefined;
};
/** @internal */
export declare const ResponseBodyBuilds$outboundSchema: z.ZodType<ResponseBodyBuilds$Outbound, z.ZodTypeDef, ResponseBodyBuilds>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace ResponseBodyBuilds$ {
    /** @deprecated use `ResponseBodyBuilds$inboundSchema` instead. */
    const inboundSchema: z.ZodType<ResponseBodyBuilds, z.ZodTypeDef, unknown>;
    /** @deprecated use `ResponseBodyBuilds$outboundSchema` instead. */
    const outboundSchema: z.ZodType<ResponseBodyBuilds$Outbound, z.ZodTypeDef, ResponseBodyBuilds>;
    /** @deprecated use `ResponseBodyBuilds$Outbound` instead. */
    type Outbound = ResponseBodyBuilds$Outbound;
}
export declare function responseBodyBuildsToJSON(responseBodyBuilds: ResponseBodyBuilds): string;
export declare function responseBodyBuildsFromJSON(jsonString: string): SafeParseResult<ResponseBodyBuilds, SDKValidationError>;
/** @internal */
export declare const ResponseBodyFramework$inboundSchema: z.ZodNativeEnum<typeof ResponseBodyFramework>;
/** @internal */
export declare const ResponseBodyFramework$outboundSchema: z.ZodNativeEnum<typeof ResponseBodyFramework>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace ResponseBodyFramework$ {
    /** @deprecated use `ResponseBodyFramework$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Blitzjs: "blitzjs";
        readonly Nextjs: "nextjs";
        readonly Gatsby: "gatsby";
        readonly Remix: "remix";
        readonly ReactRouter: "react-router";
        readonly Astro: "astro";
        readonly Hexo: "hexo";
        readonly Eleventy: "eleventy";
        readonly Docusaurus2: "docusaurus-2";
        readonly Docusaurus: "docusaurus";
        readonly Preact: "preact";
        readonly Solidstart1: "solidstart-1";
        readonly Solidstart: "solidstart";
        readonly Dojo: "dojo";
        readonly Ember: "ember";
        readonly Vue: "vue";
        readonly Scully: "scully";
        readonly IonicAngular: "ionic-angular";
        readonly Angular: "angular";
        readonly Polymer: "polymer";
        readonly Svelte: "svelte";
        readonly Sveltekit: "sveltekit";
        readonly Sveltekit1: "sveltekit-1";
        readonly IonicReact: "ionic-react";
        readonly CreateReactApp: "create-react-app";
        readonly Gridsome: "gridsome";
        readonly Umijs: "umijs";
        readonly Sapper: "sapper";
        readonly Saber: "saber";
        readonly Stencil: "stencil";
        readonly Nuxtjs: "nuxtjs";
        readonly Redwoodjs: "redwoodjs";
        readonly Hugo: "hugo";
        readonly Jekyll: "jekyll";
        readonly Brunch: "brunch";
        readonly Middleman: "middleman";
        readonly Zola: "zola";
        readonly Hydrogen: "hydrogen";
        readonly Vite: "vite";
        readonly Vitepress: "vitepress";
        readonly Vuepress: "vuepress";
        readonly Parcel: "parcel";
        readonly Fasthtml: "fasthtml";
        readonly SanityV3: "sanity-v3";
        readonly Sanity: "sanity";
        readonly Storybook: "storybook";
    }>;
    /** @deprecated use `ResponseBodyFramework$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Blitzjs: "blitzjs";
        readonly Nextjs: "nextjs";
        readonly Gatsby: "gatsby";
        readonly Remix: "remix";
        readonly ReactRouter: "react-router";
        readonly Astro: "astro";
        readonly Hexo: "hexo";
        readonly Eleventy: "eleventy";
        readonly Docusaurus2: "docusaurus-2";
        readonly Docusaurus: "docusaurus";
        readonly Preact: "preact";
        readonly Solidstart1: "solidstart-1";
        readonly Solidstart: "solidstart";
        readonly Dojo: "dojo";
        readonly Ember: "ember";
        readonly Vue: "vue";
        readonly Scully: "scully";
        readonly IonicAngular: "ionic-angular";
        readonly Angular: "angular";
        readonly Polymer: "polymer";
        readonly Svelte: "svelte";
        readonly Sveltekit: "sveltekit";
        readonly Sveltekit1: "sveltekit-1";
        readonly IonicReact: "ionic-react";
        readonly CreateReactApp: "create-react-app";
        readonly Gridsome: "gridsome";
        readonly Umijs: "umijs";
        readonly Sapper: "sapper";
        readonly Saber: "saber";
        readonly Stencil: "stencil";
        readonly Nuxtjs: "nuxtjs";
        readonly Redwoodjs: "redwoodjs";
        readonly Hugo: "hugo";
        readonly Jekyll: "jekyll";
        readonly Brunch: "brunch";
        readonly Middleman: "middleman";
        readonly Zola: "zola";
        readonly Hydrogen: "hydrogen";
        readonly Vite: "vite";
        readonly Vitepress: "vitepress";
        readonly Vuepress: "vuepress";
        readonly Parcel: "parcel";
        readonly Fasthtml: "fasthtml";
        readonly SanityV3: "sanity-v3";
        readonly Sanity: "sanity";
        readonly Storybook: "storybook";
    }>;
}
/** @internal */
export declare const ResponseBodySpeedInsights$inboundSchema: z.ZodType<ResponseBodySpeedInsights, z.ZodTypeDef, unknown>;
/** @internal */
export type ResponseBodySpeedInsights$Outbound = {
    id: string;
    enabledAt?: number | undefined;
    disabledAt?: number | undefined;
    canceledAt?: number | undefined;
    hasData?: boolean | undefined;
    paidAt?: number | undefined;
};
/** @internal */
export declare const ResponseBodySpeedInsights$outboundSchema: z.ZodType<ResponseBodySpeedInsights$Outbound, z.ZodTypeDef, ResponseBodySpeedInsights>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace ResponseBodySpeedInsights$ {
    /** @deprecated use `ResponseBodySpeedInsights$inboundSchema` instead. */
    const inboundSchema: z.ZodType<ResponseBodySpeedInsights, z.ZodTypeDef, unknown>;
    /** @deprecated use `ResponseBodySpeedInsights$outboundSchema` instead. */
    const outboundSchema: z.ZodType<ResponseBodySpeedInsights$Outbound, z.ZodTypeDef, ResponseBodySpeedInsights>;
    /** @deprecated use `ResponseBodySpeedInsights$Outbound` instead. */
    type Outbound = ResponseBodySpeedInsights$Outbound;
}
export declare function responseBodySpeedInsightsToJSON(responseBodySpeedInsights: ResponseBodySpeedInsights): string;
export declare function responseBodySpeedInsightsFromJSON(jsonString: string): SafeParseResult<ResponseBodySpeedInsights, SDKValidationError>;
/** @internal */
export declare const ResponseBodyWebAnalytics$inboundSchema: z.ZodType<ResponseBodyWebAnalytics, z.ZodTypeDef, unknown>;
/** @internal */
export type ResponseBodyWebAnalytics$Outbound = {
    id: string;
    disabledAt?: number | undefined;
    canceledAt?: number | undefined;
    enabledAt?: number | undefined;
    hasData?: boolean | undefined;
};
/** @internal */
export declare const ResponseBodyWebAnalytics$outboundSchema: z.ZodType<ResponseBodyWebAnalytics$Outbound, z.ZodTypeDef, ResponseBodyWebAnalytics>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace ResponseBodyWebAnalytics$ {
    /** @deprecated use `ResponseBodyWebAnalytics$inboundSchema` instead. */
    const inboundSchema: z.ZodType<ResponseBodyWebAnalytics, z.ZodTypeDef, unknown>;
    /** @deprecated use `ResponseBodyWebAnalytics$outboundSchema` instead. */
    const outboundSchema: z.ZodType<ResponseBodyWebAnalytics$Outbound, z.ZodTypeDef, ResponseBodyWebAnalytics>;
    /** @deprecated use `ResponseBodyWebAnalytics$Outbound` instead. */
    type Outbound = ResponseBodyWebAnalytics$Outbound;
}
export declare function responseBodyWebAnalyticsToJSON(responseBodyWebAnalytics: ResponseBodyWebAnalytics): string;
export declare function responseBodyWebAnalyticsFromJSON(jsonString: string): SafeParseResult<ResponseBodyWebAnalytics, SDKValidationError>;
/** @internal */
export declare const ResponseBodyProjectSettings$inboundSchema: z.ZodType<ResponseBodyProjectSettings, z.ZodTypeDef, unknown>;
/** @internal */
export type ResponseBodyProjectSettings$Outbound = {
    buildCommand?: string | null | undefined;
    devCommand?: string | null | undefined;
    framework?: string | null | undefined;
    commandForIgnoringBuildStep?: string | null | undefined;
    installCommand?: string | null | undefined;
    outputDirectory?: string | null | undefined;
    speedInsights?: ResponseBodySpeedInsights$Outbound | undefined;
    webAnalytics?: ResponseBodyWebAnalytics$Outbound | undefined;
};
/** @internal */
export declare const ResponseBodyProjectSettings$outboundSchema: z.ZodType<ResponseBodyProjectSettings$Outbound, z.ZodTypeDef, ResponseBodyProjectSettings>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace ResponseBodyProjectSettings$ {
    /** @deprecated use `ResponseBodyProjectSettings$inboundSchema` instead. */
    const inboundSchema: z.ZodType<ResponseBodyProjectSettings, z.ZodTypeDef, unknown>;
    /** @deprecated use `ResponseBodyProjectSettings$outboundSchema` instead. */
    const outboundSchema: z.ZodType<ResponseBodyProjectSettings$Outbound, z.ZodTypeDef, ResponseBodyProjectSettings>;
    /** @deprecated use `ResponseBodyProjectSettings$Outbound` instead. */
    type Outbound = ResponseBodyProjectSettings$Outbound;
}
export declare function responseBodyProjectSettingsToJSON(responseBodyProjectSettings: ResponseBodyProjectSettings): string;
export declare function responseBodyProjectSettingsFromJSON(jsonString: string): SafeParseResult<ResponseBodyProjectSettings, SDKValidationError>;
/** @internal */
export declare const GetDeploymentResponseBodyDeploymentsStatus$inboundSchema: z.ZodNativeEnum<typeof GetDeploymentResponseBodyDeploymentsStatus>;
/** @internal */
export declare const GetDeploymentResponseBodyDeploymentsStatus$outboundSchema: z.ZodNativeEnum<typeof GetDeploymentResponseBodyDeploymentsStatus>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetDeploymentResponseBodyDeploymentsStatus$ {
    /** @deprecated use `GetDeploymentResponseBodyDeploymentsStatus$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Error: "error";
        readonly Skipped: "skipped";
        readonly Pending: "pending";
        readonly Ready: "ready";
        readonly Timeout: "timeout";
    }>;
    /** @deprecated use `GetDeploymentResponseBodyDeploymentsStatus$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Error: "error";
        readonly Skipped: "skipped";
        readonly Pending: "pending";
        readonly Ready: "ready";
        readonly Timeout: "timeout";
    }>;
}
/** @internal */
export declare const ResponseBodyIntegrations$inboundSchema: z.ZodType<ResponseBodyIntegrations, z.ZodTypeDef, unknown>;
/** @internal */
export type ResponseBodyIntegrations$Outbound = {
    status: string;
    startedAt: number;
    completedAt?: number | undefined;
    skippedAt?: number | undefined;
    skippedBy?: string | undefined;
};
/** @internal */
export declare const ResponseBodyIntegrations$outboundSchema: z.ZodType<ResponseBodyIntegrations$Outbound, z.ZodTypeDef, ResponseBodyIntegrations>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace ResponseBodyIntegrations$ {
    /** @deprecated use `ResponseBodyIntegrations$inboundSchema` instead. */
    const inboundSchema: z.ZodType<ResponseBodyIntegrations, z.ZodTypeDef, unknown>;
    /** @deprecated use `ResponseBodyIntegrations$outboundSchema` instead. */
    const outboundSchema: z.ZodType<ResponseBodyIntegrations$Outbound, z.ZodTypeDef, ResponseBodyIntegrations>;
    /** @deprecated use `ResponseBodyIntegrations$Outbound` instead. */
    type Outbound = ResponseBodyIntegrations$Outbound;
}
export declare function responseBodyIntegrationsToJSON(responseBodyIntegrations: ResponseBodyIntegrations): string;
export declare function responseBodyIntegrationsFromJSON(jsonString: string): SafeParseResult<ResponseBodyIntegrations, SDKValidationError>;
/** @internal */
export declare const ResponseBodyProtocol$inboundSchema: z.ZodNativeEnum<typeof ResponseBodyProtocol>;
/** @internal */
export declare const ResponseBodyProtocol$outboundSchema: z.ZodNativeEnum<typeof ResponseBodyProtocol>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace ResponseBodyProtocol$ {
    /** @deprecated use `ResponseBodyProtocol$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Http: "http";
        readonly Https: "https";
    }>;
    /** @deprecated use `ResponseBodyProtocol$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Http: "http";
        readonly Https: "https";
    }>;
}
/** @internal */
export declare const ResponseBodyRemotePatterns$inboundSchema: z.ZodType<ResponseBodyRemotePatterns, z.ZodTypeDef, unknown>;
/** @internal */
export type ResponseBodyRemotePatterns$Outbound = {
    protocol?: string | undefined;
    hostname: string;
    port?: string | undefined;
    pathname?: string | undefined;
    search?: string | undefined;
};
/** @internal */
export declare const ResponseBodyRemotePatterns$outboundSchema: z.ZodType<ResponseBodyRemotePatterns$Outbound, z.ZodTypeDef, ResponseBodyRemotePatterns>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace ResponseBodyRemotePatterns$ {
    /** @deprecated use `ResponseBodyRemotePatterns$inboundSchema` instead. */
    const inboundSchema: z.ZodType<ResponseBodyRemotePatterns, z.ZodTypeDef, unknown>;
    /** @deprecated use `ResponseBodyRemotePatterns$outboundSchema` instead. */
    const outboundSchema: z.ZodType<ResponseBodyRemotePatterns$Outbound, z.ZodTypeDef, ResponseBodyRemotePatterns>;
    /** @deprecated use `ResponseBodyRemotePatterns$Outbound` instead. */
    type Outbound = ResponseBodyRemotePatterns$Outbound;
}
export declare function responseBodyRemotePatternsToJSON(responseBodyRemotePatterns: ResponseBodyRemotePatterns): string;
export declare function responseBodyRemotePatternsFromJSON(jsonString: string): SafeParseResult<ResponseBodyRemotePatterns, SDKValidationError>;
/** @internal */
export declare const ResponseBodyLocalPatterns$inboundSchema: z.ZodType<ResponseBodyLocalPatterns, z.ZodTypeDef, unknown>;
/** @internal */
export type ResponseBodyLocalPatterns$Outbound = {
    pathname?: string | undefined;
    search?: string | undefined;
};
/** @internal */
export declare const ResponseBodyLocalPatterns$outboundSchema: z.ZodType<ResponseBodyLocalPatterns$Outbound, z.ZodTypeDef, ResponseBodyLocalPatterns>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace ResponseBodyLocalPatterns$ {
    /** @deprecated use `ResponseBodyLocalPatterns$inboundSchema` instead. */
    const inboundSchema: z.ZodType<ResponseBodyLocalPatterns, z.ZodTypeDef, unknown>;
    /** @deprecated use `ResponseBodyLocalPatterns$outboundSchema` instead. */
    const outboundSchema: z.ZodType<ResponseBodyLocalPatterns$Outbound, z.ZodTypeDef, ResponseBodyLocalPatterns>;
    /** @deprecated use `ResponseBodyLocalPatterns$Outbound` instead. */
    type Outbound = ResponseBodyLocalPatterns$Outbound;
}
export declare function responseBodyLocalPatternsToJSON(responseBodyLocalPatterns: ResponseBodyLocalPatterns): string;
export declare function responseBodyLocalPatternsFromJSON(jsonString: string): SafeParseResult<ResponseBodyLocalPatterns, SDKValidationError>;
/** @internal */
export declare const ResponseBodyFormats$inboundSchema: z.ZodNativeEnum<typeof ResponseBodyFormats>;
/** @internal */
export declare const ResponseBodyFormats$outboundSchema: z.ZodNativeEnum<typeof ResponseBodyFormats>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace ResponseBodyFormats$ {
    /** @deprecated use `ResponseBodyFormats$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly ImageAvif: "image/avif";
        readonly ImageWebp: "image/webp";
    }>;
    /** @deprecated use `ResponseBodyFormats$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly ImageAvif: "image/avif";
        readonly ImageWebp: "image/webp";
    }>;
}
/** @internal */
export declare const ResponseBodyContentDispositionType$inboundSchema: z.ZodNativeEnum<typeof ResponseBodyContentDispositionType>;
/** @internal */
export declare const ResponseBodyContentDispositionType$outboundSchema: z.ZodNativeEnum<typeof ResponseBodyContentDispositionType>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace ResponseBodyContentDispositionType$ {
    /** @deprecated use `ResponseBodyContentDispositionType$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Inline: "inline";
        readonly Attachment: "attachment";
    }>;
    /** @deprecated use `ResponseBodyContentDispositionType$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Inline: "inline";
        readonly Attachment: "attachment";
    }>;
}
/** @internal */
export declare const ResponseBodyImages$inboundSchema: z.ZodType<ResponseBodyImages, z.ZodTypeDef, unknown>;
/** @internal */
export type ResponseBodyImages$Outbound = {
    sizes?: Array<number> | undefined;
    qualities?: Array<number> | undefined;
    domains?: Array<string> | undefined;
    remotePatterns?: Array<ResponseBodyRemotePatterns$Outbound> | undefined;
    localPatterns?: Array<ResponseBodyLocalPatterns$Outbound> | undefined;
    minimumCacheTTL?: number | undefined;
    formats?: Array<string> | undefined;
    dangerouslyAllowSVG?: boolean | undefined;
    contentSecurityPolicy?: string | undefined;
    contentDispositionType?: string | undefined;
};
/** @internal */
export declare const ResponseBodyImages$outboundSchema: z.ZodType<ResponseBodyImages$Outbound, z.ZodTypeDef, ResponseBodyImages>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace ResponseBodyImages$ {
    /** @deprecated use `ResponseBodyImages$inboundSchema` instead. */
    const inboundSchema: z.ZodType<ResponseBodyImages, z.ZodTypeDef, unknown>;
    /** @deprecated use `ResponseBodyImages$outboundSchema` instead. */
    const outboundSchema: z.ZodType<ResponseBodyImages$Outbound, z.ZodTypeDef, ResponseBodyImages>;
    /** @deprecated use `ResponseBodyImages$Outbound` instead. */
    type Outbound = ResponseBodyImages$Outbound;
}
export declare function responseBodyImagesToJSON(responseBodyImages: ResponseBodyImages): string;
export declare function responseBodyImagesFromJSON(jsonString: string): SafeParseResult<ResponseBodyImages, SDKValidationError>;
/** @internal */
export declare const ResponseBodyCreator$inboundSchema: z.ZodType<ResponseBodyCreator, z.ZodTypeDef, unknown>;
/** @internal */
export type ResponseBodyCreator$Outbound = {
    uid: string;
    username?: string | undefined;
    avatar?: string | undefined;
};
/** @internal */
export declare const ResponseBodyCreator$outboundSchema: z.ZodType<ResponseBodyCreator$Outbound, z.ZodTypeDef, ResponseBodyCreator>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace ResponseBodyCreator$ {
    /** @deprecated use `ResponseBodyCreator$inboundSchema` instead. */
    const inboundSchema: z.ZodType<ResponseBodyCreator, z.ZodTypeDef, unknown>;
    /** @deprecated use `ResponseBodyCreator$outboundSchema` instead. */
    const outboundSchema: z.ZodType<ResponseBodyCreator$Outbound, z.ZodTypeDef, ResponseBodyCreator>;
    /** @deprecated use `ResponseBodyCreator$Outbound` instead. */
    type Outbound = ResponseBodyCreator$Outbound;
}
export declare function responseBodyCreatorToJSON(responseBodyCreator: ResponseBodyCreator): string;
export declare function responseBodyCreatorFromJSON(jsonString: string): SafeParseResult<ResponseBodyCreator, SDKValidationError>;
/** @internal */
export declare const GetDeploymentResponseBodyDeploymentsResponseReadyState$inboundSchema: z.ZodNativeEnum<typeof GetDeploymentResponseBodyDeploymentsResponseReadyState>;
/** @internal */
export declare const GetDeploymentResponseBodyDeploymentsResponseReadyState$outboundSchema: z.ZodNativeEnum<typeof GetDeploymentResponseBodyDeploymentsResponseReadyState>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetDeploymentResponseBodyDeploymentsResponseReadyState$ {
    /** @deprecated use `GetDeploymentResponseBodyDeploymentsResponseReadyState$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Building: "BUILDING";
        readonly Error: "ERROR";
        readonly Initializing: "INITIALIZING";
        readonly Ready: "READY";
    }>;
    /** @deprecated use `GetDeploymentResponseBodyDeploymentsResponseReadyState$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Building: "BUILDING";
        readonly Error: "ERROR";
        readonly Initializing: "INITIALIZING";
        readonly Ready: "READY";
    }>;
}
/** @internal */
export declare const ResponseBodyOutput$inboundSchema: z.ZodType<ResponseBodyOutput, z.ZodTypeDef, unknown>;
/** @internal */
export type ResponseBodyOutput$Outbound = {
    path: string;
    functionName: string;
};
/** @internal */
export declare const ResponseBodyOutput$outboundSchema: z.ZodType<ResponseBodyOutput$Outbound, z.ZodTypeDef, ResponseBodyOutput>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace ResponseBodyOutput$ {
    /** @deprecated use `ResponseBodyOutput$inboundSchema` instead. */
    const inboundSchema: z.ZodType<ResponseBodyOutput, z.ZodTypeDef, unknown>;
    /** @deprecated use `ResponseBodyOutput$outboundSchema` instead. */
    const outboundSchema: z.ZodType<ResponseBodyOutput$Outbound, z.ZodTypeDef, ResponseBodyOutput>;
    /** @deprecated use `ResponseBodyOutput$Outbound` instead. */
    type Outbound = ResponseBodyOutput$Outbound;
}
export declare function responseBodyOutputToJSON(responseBodyOutput: ResponseBodyOutput): string;
export declare function responseBodyOutputFromJSON(jsonString: string): SafeParseResult<ResponseBodyOutput, SDKValidationError>;
/** @internal */
export declare const GetDeploymentResponseBodyLambdas$inboundSchema: z.ZodType<GetDeploymentResponseBodyLambdas, z.ZodTypeDef, unknown>;
/** @internal */
export type GetDeploymentResponseBodyLambdas$Outbound = {
    id?: string | undefined;
    createdAt?: number | undefined;
    entrypoint?: string | null | undefined;
    readyState?: string | undefined;
    readyStateAt?: number | undefined;
    output: Array<ResponseBodyOutput$Outbound>;
};
/** @internal */
export declare const GetDeploymentResponseBodyLambdas$outboundSchema: z.ZodType<GetDeploymentResponseBodyLambdas$Outbound, z.ZodTypeDef, GetDeploymentResponseBodyLambdas>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetDeploymentResponseBodyLambdas$ {
    /** @deprecated use `GetDeploymentResponseBodyLambdas$inboundSchema` instead. */
    const inboundSchema: z.ZodType<GetDeploymentResponseBodyLambdas, z.ZodTypeDef, unknown>;
    /** @deprecated use `GetDeploymentResponseBodyLambdas$outboundSchema` instead. */
    const outboundSchema: z.ZodType<GetDeploymentResponseBodyLambdas$Outbound, z.ZodTypeDef, GetDeploymentResponseBodyLambdas>;
    /** @deprecated use `GetDeploymentResponseBodyLambdas$Outbound` instead. */
    type Outbound = GetDeploymentResponseBodyLambdas$Outbound;
}
export declare function getDeploymentResponseBodyLambdasToJSON(getDeploymentResponseBodyLambdas: GetDeploymentResponseBodyLambdas): string;
export declare function getDeploymentResponseBodyLambdasFromJSON(jsonString: string): SafeParseResult<GetDeploymentResponseBodyLambdas, SDKValidationError>;
/** @internal */
export declare const ResponseBodyStatus$inboundSchema: z.ZodNativeEnum<typeof ResponseBodyStatus>;
/** @internal */
export declare const ResponseBodyStatus$outboundSchema: z.ZodNativeEnum<typeof ResponseBodyStatus>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace ResponseBodyStatus$ {
    /** @deprecated use `ResponseBodyStatus$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Queued: "QUEUED";
        readonly Building: "BUILDING";
        readonly Error: "ERROR";
        readonly Initializing: "INITIALIZING";
        readonly Ready: "READY";
        readonly Canceled: "CANCELED";
    }>;
    /** @deprecated use `ResponseBodyStatus$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Queued: "QUEUED";
        readonly Building: "BUILDING";
        readonly Error: "ERROR";
        readonly Initializing: "INITIALIZING";
        readonly Ready: "READY";
        readonly Canceled: "CANCELED";
    }>;
}
/** @internal */
export declare const GetDeploymentResponseBodyTeam$inboundSchema: z.ZodType<GetDeploymentResponseBodyTeam, z.ZodTypeDef, unknown>;
/** @internal */
export type GetDeploymentResponseBodyTeam$Outbound = {
    id: string;
    name: string;
    slug: string;
    avatar?: string | undefined;
};
/** @internal */
export declare const GetDeploymentResponseBodyTeam$outboundSchema: z.ZodType<GetDeploymentResponseBodyTeam$Outbound, z.ZodTypeDef, GetDeploymentResponseBodyTeam>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetDeploymentResponseBodyTeam$ {
    /** @deprecated use `GetDeploymentResponseBodyTeam$inboundSchema` instead. */
    const inboundSchema: z.ZodType<GetDeploymentResponseBodyTeam, z.ZodTypeDef, unknown>;
    /** @deprecated use `GetDeploymentResponseBodyTeam$outboundSchema` instead. */
    const outboundSchema: z.ZodType<GetDeploymentResponseBodyTeam$Outbound, z.ZodTypeDef, GetDeploymentResponseBodyTeam>;
    /** @deprecated use `GetDeploymentResponseBodyTeam$Outbound` instead. */
    type Outbound = GetDeploymentResponseBodyTeam$Outbound;
}
export declare function getDeploymentResponseBodyTeamToJSON(getDeploymentResponseBodyTeam: GetDeploymentResponseBodyTeam): string;
export declare function getDeploymentResponseBodyTeamFromJSON(jsonString: string): SafeParseResult<GetDeploymentResponseBodyTeam, SDKValidationError>;
/** @internal */
export declare const GetDeploymentCustomEnvironmentDeployments2$inboundSchema: z.ZodType<GetDeploymentCustomEnvironmentDeployments2, z.ZodTypeDef, unknown>;
/** @internal */
export type GetDeploymentCustomEnvironmentDeployments2$Outbound = {
    id: string;
};
/** @internal */
export declare const GetDeploymentCustomEnvironmentDeployments2$outboundSchema: z.ZodType<GetDeploymentCustomEnvironmentDeployments2$Outbound, z.ZodTypeDef, GetDeploymentCustomEnvironmentDeployments2>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetDeploymentCustomEnvironmentDeployments2$ {
    /** @deprecated use `GetDeploymentCustomEnvironmentDeployments2$inboundSchema` instead. */
    const inboundSchema: z.ZodType<GetDeploymentCustomEnvironmentDeployments2, z.ZodTypeDef, unknown>;
    /** @deprecated use `GetDeploymentCustomEnvironmentDeployments2$outboundSchema` instead. */
    const outboundSchema: z.ZodType<GetDeploymentCustomEnvironmentDeployments2$Outbound, z.ZodTypeDef, GetDeploymentCustomEnvironmentDeployments2>;
    /** @deprecated use `GetDeploymentCustomEnvironmentDeployments2$Outbound` instead. */
    type Outbound = GetDeploymentCustomEnvironmentDeployments2$Outbound;
}
export declare function getDeploymentCustomEnvironmentDeployments2ToJSON(getDeploymentCustomEnvironmentDeployments2: GetDeploymentCustomEnvironmentDeployments2): string;
export declare function getDeploymentCustomEnvironmentDeployments2FromJSON(jsonString: string): SafeParseResult<GetDeploymentCustomEnvironmentDeployments2, SDKValidationError>;
/** @internal */
export declare const GetDeploymentCustomEnvironmentDeploymentsType$inboundSchema: z.ZodNativeEnum<typeof GetDeploymentCustomEnvironmentDeploymentsType>;
/** @internal */
export declare const GetDeploymentCustomEnvironmentDeploymentsType$outboundSchema: z.ZodNativeEnum<typeof GetDeploymentCustomEnvironmentDeploymentsType>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetDeploymentCustomEnvironmentDeploymentsType$ {
    /** @deprecated use `GetDeploymentCustomEnvironmentDeploymentsType$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Production: "production";
        readonly Preview: "preview";
        readonly Development: "development";
    }>;
    /** @deprecated use `GetDeploymentCustomEnvironmentDeploymentsType$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Production: "production";
        readonly Preview: "preview";
        readonly Development: "development";
    }>;
}
/** @internal */
export declare const GetDeploymentCustomEnvironmentDeploymentsResponse200Type$inboundSchema: z.ZodNativeEnum<typeof GetDeploymentCustomEnvironmentDeploymentsResponse200Type>;
/** @internal */
export declare const GetDeploymentCustomEnvironmentDeploymentsResponse200Type$outboundSchema: z.ZodNativeEnum<typeof GetDeploymentCustomEnvironmentDeploymentsResponse200Type>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetDeploymentCustomEnvironmentDeploymentsResponse200Type$ {
    /** @deprecated use `GetDeploymentCustomEnvironmentDeploymentsResponse200Type$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly StartsWith: "startsWith";
        readonly Equals: "equals";
        readonly EndsWith: "endsWith";
    }>;
    /** @deprecated use `GetDeploymentCustomEnvironmentDeploymentsResponse200Type$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly StartsWith: "startsWith";
        readonly Equals: "equals";
        readonly EndsWith: "endsWith";
    }>;
}
/** @internal */
export declare const GetDeploymentCustomEnvironmentDeploymentsBranchMatcher$inboundSchema: z.ZodType<GetDeploymentCustomEnvironmentDeploymentsBranchMatcher, z.ZodTypeDef, unknown>;
/** @internal */
export type GetDeploymentCustomEnvironmentDeploymentsBranchMatcher$Outbound = {
    type: string;
    pattern: string;
};
/** @internal */
export declare const GetDeploymentCustomEnvironmentDeploymentsBranchMatcher$outboundSchema: z.ZodType<GetDeploymentCustomEnvironmentDeploymentsBranchMatcher$Outbound, z.ZodTypeDef, GetDeploymentCustomEnvironmentDeploymentsBranchMatcher>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetDeploymentCustomEnvironmentDeploymentsBranchMatcher$ {
    /** @deprecated use `GetDeploymentCustomEnvironmentDeploymentsBranchMatcher$inboundSchema` instead. */
    const inboundSchema: z.ZodType<GetDeploymentCustomEnvironmentDeploymentsBranchMatcher, z.ZodTypeDef, unknown>;
    /** @deprecated use `GetDeploymentCustomEnvironmentDeploymentsBranchMatcher$outboundSchema` instead. */
    const outboundSchema: z.ZodType<GetDeploymentCustomEnvironmentDeploymentsBranchMatcher$Outbound, z.ZodTypeDef, GetDeploymentCustomEnvironmentDeploymentsBranchMatcher>;
    /** @deprecated use `GetDeploymentCustomEnvironmentDeploymentsBranchMatcher$Outbound` instead. */
    type Outbound = GetDeploymentCustomEnvironmentDeploymentsBranchMatcher$Outbound;
}
export declare function getDeploymentCustomEnvironmentDeploymentsBranchMatcherToJSON(getDeploymentCustomEnvironmentDeploymentsBranchMatcher: GetDeploymentCustomEnvironmentDeploymentsBranchMatcher): string;
export declare function getDeploymentCustomEnvironmentDeploymentsBranchMatcherFromJSON(jsonString: string): SafeParseResult<GetDeploymentCustomEnvironmentDeploymentsBranchMatcher, SDKValidationError>;
/** @internal */
export declare const GetDeploymentCustomEnvironmentDeploymentsVerification$inboundSchema: z.ZodType<GetDeploymentCustomEnvironmentDeploymentsVerification, z.ZodTypeDef, unknown>;
/** @internal */
export type GetDeploymentCustomEnvironmentDeploymentsVerification$Outbound = {
    type: string;
    domain: string;
    value: string;
    reason: string;
};
/** @internal */
export declare const GetDeploymentCustomEnvironmentDeploymentsVerification$outboundSchema: z.ZodType<GetDeploymentCustomEnvironmentDeploymentsVerification$Outbound, z.ZodTypeDef, GetDeploymentCustomEnvironmentDeploymentsVerification>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetDeploymentCustomEnvironmentDeploymentsVerification$ {
    /** @deprecated use `GetDeploymentCustomEnvironmentDeploymentsVerification$inboundSchema` instead. */
    const inboundSchema: z.ZodType<GetDeploymentCustomEnvironmentDeploymentsVerification, z.ZodTypeDef, unknown>;
    /** @deprecated use `GetDeploymentCustomEnvironmentDeploymentsVerification$outboundSchema` instead. */
    const outboundSchema: z.ZodType<GetDeploymentCustomEnvironmentDeploymentsVerification$Outbound, z.ZodTypeDef, GetDeploymentCustomEnvironmentDeploymentsVerification>;
    /** @deprecated use `GetDeploymentCustomEnvironmentDeploymentsVerification$Outbound` instead. */
    type Outbound = GetDeploymentCustomEnvironmentDeploymentsVerification$Outbound;
}
export declare function getDeploymentCustomEnvironmentDeploymentsVerificationToJSON(getDeploymentCustomEnvironmentDeploymentsVerification: GetDeploymentCustomEnvironmentDeploymentsVerification): string;
export declare function getDeploymentCustomEnvironmentDeploymentsVerificationFromJSON(jsonString: string): SafeParseResult<GetDeploymentCustomEnvironmentDeploymentsVerification, SDKValidationError>;
/** @internal */
export declare const GetDeploymentCustomEnvironmentDeploymentsDomains$inboundSchema: z.ZodType<GetDeploymentCustomEnvironmentDeploymentsDomains, z.ZodTypeDef, unknown>;
/** @internal */
export type GetDeploymentCustomEnvironmentDeploymentsDomains$Outbound = {
    name: string;
    apexName: string;
    projectId: string;
    redirect?: string | null | undefined;
    redirectStatusCode?: number | null | undefined;
    gitBranch?: string | null | undefined;
    customEnvironmentId?: string | null | undefined;
    updatedAt?: number | undefined;
    createdAt?: number | undefined;
    verified: boolean;
    verification?: Array<GetDeploymentCustomEnvironmentDeploymentsVerification$Outbound> | undefined;
};
/** @internal */
export declare const GetDeploymentCustomEnvironmentDeploymentsDomains$outboundSchema: z.ZodType<GetDeploymentCustomEnvironmentDeploymentsDomains$Outbound, z.ZodTypeDef, GetDeploymentCustomEnvironmentDeploymentsDomains>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetDeploymentCustomEnvironmentDeploymentsDomains$ {
    /** @deprecated use `GetDeploymentCustomEnvironmentDeploymentsDomains$inboundSchema` instead. */
    const inboundSchema: z.ZodType<GetDeploymentCustomEnvironmentDeploymentsDomains, z.ZodTypeDef, unknown>;
    /** @deprecated use `GetDeploymentCustomEnvironmentDeploymentsDomains$outboundSchema` instead. */
    const outboundSchema: z.ZodType<GetDeploymentCustomEnvironmentDeploymentsDomains$Outbound, z.ZodTypeDef, GetDeploymentCustomEnvironmentDeploymentsDomains>;
    /** @deprecated use `GetDeploymentCustomEnvironmentDeploymentsDomains$Outbound` instead. */
    type Outbound = GetDeploymentCustomEnvironmentDeploymentsDomains$Outbound;
}
export declare function getDeploymentCustomEnvironmentDeploymentsDomainsToJSON(getDeploymentCustomEnvironmentDeploymentsDomains: GetDeploymentCustomEnvironmentDeploymentsDomains): string;
export declare function getDeploymentCustomEnvironmentDeploymentsDomainsFromJSON(jsonString: string): SafeParseResult<GetDeploymentCustomEnvironmentDeploymentsDomains, SDKValidationError>;
/** @internal */
export declare const GetDeploymentCustomEnvironmentDeployments1$inboundSchema: z.ZodType<GetDeploymentCustomEnvironmentDeployments1, z.ZodTypeDef, unknown>;
/** @internal */
export type GetDeploymentCustomEnvironmentDeployments1$Outbound = {
    id: string;
    slug: string;
    type: string;
    description?: string | undefined;
    branchMatcher?: GetDeploymentCustomEnvironmentDeploymentsBranchMatcher$Outbound | undefined;
    domains?: Array<GetDeploymentCustomEnvironmentDeploymentsDomains$Outbound> | undefined;
    currentDeploymentAliases?: Array<string> | undefined;
    createdAt: number;
    updatedAt: number;
};
/** @internal */
export declare const GetDeploymentCustomEnvironmentDeployments1$outboundSchema: z.ZodType<GetDeploymentCustomEnvironmentDeployments1$Outbound, z.ZodTypeDef, GetDeploymentCustomEnvironmentDeployments1>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetDeploymentCustomEnvironmentDeployments1$ {
    /** @deprecated use `GetDeploymentCustomEnvironmentDeployments1$inboundSchema` instead. */
    const inboundSchema: z.ZodType<GetDeploymentCustomEnvironmentDeployments1, z.ZodTypeDef, unknown>;
    /** @deprecated use `GetDeploymentCustomEnvironmentDeployments1$outboundSchema` instead. */
    const outboundSchema: z.ZodType<GetDeploymentCustomEnvironmentDeployments1$Outbound, z.ZodTypeDef, GetDeploymentCustomEnvironmentDeployments1>;
    /** @deprecated use `GetDeploymentCustomEnvironmentDeployments1$Outbound` instead. */
    type Outbound = GetDeploymentCustomEnvironmentDeployments1$Outbound;
}
export declare function getDeploymentCustomEnvironmentDeployments1ToJSON(getDeploymentCustomEnvironmentDeployments1: GetDeploymentCustomEnvironmentDeployments1): string;
export declare function getDeploymentCustomEnvironmentDeployments1FromJSON(jsonString: string): SafeParseResult<GetDeploymentCustomEnvironmentDeployments1, SDKValidationError>;
/** @internal */
export declare const GetDeploymentResponseBodyCustomEnvironment$inboundSchema: z.ZodType<GetDeploymentResponseBodyCustomEnvironment, z.ZodTypeDef, unknown>;
/** @internal */
export type GetDeploymentResponseBodyCustomEnvironment$Outbound = GetDeploymentCustomEnvironmentDeployments2$Outbound | GetDeploymentCustomEnvironmentDeployments1$Outbound;
/** @internal */
export declare const GetDeploymentResponseBodyCustomEnvironment$outboundSchema: z.ZodType<GetDeploymentResponseBodyCustomEnvironment$Outbound, z.ZodTypeDef, GetDeploymentResponseBodyCustomEnvironment>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetDeploymentResponseBodyCustomEnvironment$ {
    /** @deprecated use `GetDeploymentResponseBodyCustomEnvironment$inboundSchema` instead. */
    const inboundSchema: z.ZodType<GetDeploymentResponseBodyCustomEnvironment, z.ZodTypeDef, unknown>;
    /** @deprecated use `GetDeploymentResponseBodyCustomEnvironment$outboundSchema` instead. */
    const outboundSchema: z.ZodType<GetDeploymentResponseBodyCustomEnvironment$Outbound, z.ZodTypeDef, GetDeploymentResponseBodyCustomEnvironment>;
    /** @deprecated use `GetDeploymentResponseBodyCustomEnvironment$Outbound` instead. */
    type Outbound = GetDeploymentResponseBodyCustomEnvironment$Outbound;
}
export declare function getDeploymentResponseBodyCustomEnvironmentToJSON(getDeploymentResponseBodyCustomEnvironment: GetDeploymentResponseBodyCustomEnvironment): string;
export declare function getDeploymentResponseBodyCustomEnvironmentFromJSON(jsonString: string): SafeParseResult<GetDeploymentResponseBodyCustomEnvironment, SDKValidationError>;
/** @internal */
export declare const GetDeploymentResponseBodyAliasWarning$inboundSchema: z.ZodType<GetDeploymentResponseBodyAliasWarning, z.ZodTypeDef, unknown>;
/** @internal */
export type GetDeploymentResponseBodyAliasWarning$Outbound = {
    code: string;
    message: string;
    link?: string | undefined;
    action?: string | undefined;
};
/** @internal */
export declare const GetDeploymentResponseBodyAliasWarning$outboundSchema: z.ZodType<GetDeploymentResponseBodyAliasWarning$Outbound, z.ZodTypeDef, GetDeploymentResponseBodyAliasWarning>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetDeploymentResponseBodyAliasWarning$ {
    /** @deprecated use `GetDeploymentResponseBodyAliasWarning$inboundSchema` instead. */
    const inboundSchema: z.ZodType<GetDeploymentResponseBodyAliasWarning, z.ZodTypeDef, unknown>;
    /** @deprecated use `GetDeploymentResponseBodyAliasWarning$outboundSchema` instead. */
    const outboundSchema: z.ZodType<GetDeploymentResponseBodyAliasWarning$Outbound, z.ZodTypeDef, GetDeploymentResponseBodyAliasWarning>;
    /** @deprecated use `GetDeploymentResponseBodyAliasWarning$Outbound` instead. */
    type Outbound = GetDeploymentResponseBodyAliasWarning$Outbound;
}
export declare function getDeploymentResponseBodyAliasWarningToJSON(getDeploymentResponseBodyAliasWarning: GetDeploymentResponseBodyAliasWarning): string;
export declare function getDeploymentResponseBodyAliasWarningFromJSON(jsonString: string): SafeParseResult<GetDeploymentResponseBodyAliasWarning, SDKValidationError>;
/** @internal */
export declare const GetDeploymentResponseBodyType$inboundSchema: z.ZodNativeEnum<typeof GetDeploymentResponseBodyType>;
/** @internal */
export declare const GetDeploymentResponseBodyType$outboundSchema: z.ZodNativeEnum<typeof GetDeploymentResponseBodyType>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetDeploymentResponseBodyType$ {
    /** @deprecated use `GetDeploymentResponseBodyType$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Lambdas: "LAMBDAS";
    }>;
    /** @deprecated use `GetDeploymentResponseBodyType$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Lambdas: "LAMBDAS";
    }>;
}
/** @internal */
export declare const ResponseBodyReadyState$inboundSchema: z.ZodNativeEnum<typeof ResponseBodyReadyState>;
/** @internal */
export declare const ResponseBodyReadyState$outboundSchema: z.ZodNativeEnum<typeof ResponseBodyReadyState>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace ResponseBodyReadyState$ {
    /** @deprecated use `ResponseBodyReadyState$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Queued: "QUEUED";
        readonly Building: "BUILDING";
        readonly Error: "ERROR";
        readonly Initializing: "INITIALIZING";
        readonly Ready: "READY";
        readonly Canceled: "CANCELED";
    }>;
    /** @deprecated use `ResponseBodyReadyState$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Queued: "QUEUED";
        readonly Building: "BUILDING";
        readonly Error: "ERROR";
        readonly Initializing: "INITIALIZING";
        readonly Ready: "READY";
        readonly Canceled: "CANCELED";
    }>;
}
/** @internal */
export declare const ResponseBodyAliasError$inboundSchema: z.ZodType<ResponseBodyAliasError, z.ZodTypeDef, unknown>;
/** @internal */
export type ResponseBodyAliasError$Outbound = {
    code: string;
    message: string;
};
/** @internal */
export declare const ResponseBodyAliasError$outboundSchema: z.ZodType<ResponseBodyAliasError$Outbound, z.ZodTypeDef, ResponseBodyAliasError>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace ResponseBodyAliasError$ {
    /** @deprecated use `ResponseBodyAliasError$inboundSchema` instead. */
    const inboundSchema: z.ZodType<ResponseBodyAliasError, z.ZodTypeDef, unknown>;
    /** @deprecated use `ResponseBodyAliasError$outboundSchema` instead. */
    const outboundSchema: z.ZodType<ResponseBodyAliasError$Outbound, z.ZodTypeDef, ResponseBodyAliasError>;
    /** @deprecated use `ResponseBodyAliasError$Outbound` instead. */
    type Outbound = ResponseBodyAliasError$Outbound;
}
export declare function responseBodyAliasErrorToJSON(responseBodyAliasError: ResponseBodyAliasError): string;
export declare function responseBodyAliasErrorFromJSON(jsonString: string): SafeParseResult<ResponseBodyAliasError, SDKValidationError>;
/** @internal */
export declare const ResponseBodyChecksState$inboundSchema: z.ZodNativeEnum<typeof ResponseBodyChecksState>;
/** @internal */
export declare const ResponseBodyChecksState$outboundSchema: z.ZodNativeEnum<typeof ResponseBodyChecksState>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace ResponseBodyChecksState$ {
    /** @deprecated use `ResponseBodyChecksState$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Registered: "registered";
        readonly Running: "running";
        readonly Completed: "completed";
    }>;
    /** @deprecated use `ResponseBodyChecksState$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Registered: "registered";
        readonly Running: "running";
        readonly Completed: "completed";
    }>;
}
/** @internal */
export declare const ResponseBodyChecksConclusion$inboundSchema: z.ZodNativeEnum<typeof ResponseBodyChecksConclusion>;
/** @internal */
export declare const ResponseBodyChecksConclusion$outboundSchema: z.ZodNativeEnum<typeof ResponseBodyChecksConclusion>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace ResponseBodyChecksConclusion$ {
    /** @deprecated use `ResponseBodyChecksConclusion$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Succeeded: "succeeded";
        readonly Failed: "failed";
        readonly Skipped: "skipped";
        readonly Canceled: "canceled";
    }>;
    /** @deprecated use `ResponseBodyChecksConclusion$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Succeeded: "succeeded";
        readonly Failed: "failed";
        readonly Skipped: "skipped";
        readonly Canceled: "canceled";
    }>;
}
/** @internal */
export declare const GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody112Type$inboundSchema: z.ZodNativeEnum<typeof GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody112Type>;
/** @internal */
export declare const GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody112Type$outboundSchema: z.ZodNativeEnum<typeof GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody112Type>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody112Type$ {
    /** @deprecated use `GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody112Type$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Bitbucket: "bitbucket";
    }>;
    /** @deprecated use `GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody112Type$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Bitbucket: "bitbucket";
    }>;
}
/** @internal */
export declare const GetDeploymentGitSourceDeployments12$inboundSchema: z.ZodType<GetDeploymentGitSourceDeployments12, z.ZodTypeDef, unknown>;
/** @internal */
export type GetDeploymentGitSourceDeployments12$Outbound = {
    type: string;
    ref: string;
    sha: string;
    owner?: string | undefined;
    slug?: string | undefined;
    workspaceUuid: string;
    repoUuid: string;
};
/** @internal */
export declare const GetDeploymentGitSourceDeployments12$outboundSchema: z.ZodType<GetDeploymentGitSourceDeployments12$Outbound, z.ZodTypeDef, GetDeploymentGitSourceDeployments12>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetDeploymentGitSourceDeployments12$ {
    /** @deprecated use `GetDeploymentGitSourceDeployments12$inboundSchema` instead. */
    const inboundSchema: z.ZodType<GetDeploymentGitSourceDeployments12, z.ZodTypeDef, unknown>;
    /** @deprecated use `GetDeploymentGitSourceDeployments12$outboundSchema` instead. */
    const outboundSchema: z.ZodType<GetDeploymentGitSourceDeployments12$Outbound, z.ZodTypeDef, GetDeploymentGitSourceDeployments12>;
    /** @deprecated use `GetDeploymentGitSourceDeployments12$Outbound` instead. */
    type Outbound = GetDeploymentGitSourceDeployments12$Outbound;
}
export declare function getDeploymentGitSourceDeployments12ToJSON(getDeploymentGitSourceDeployments12: GetDeploymentGitSourceDeployments12): string;
export declare function getDeploymentGitSourceDeployments12FromJSON(jsonString: string): SafeParseResult<GetDeploymentGitSourceDeployments12, SDKValidationError>;
/** @internal */
export declare const GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody111Type$inboundSchema: z.ZodNativeEnum<typeof GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody111Type>;
/** @internal */
export declare const GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody111Type$outboundSchema: z.ZodNativeEnum<typeof GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody111Type>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody111Type$ {
    /** @deprecated use `GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody111Type$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Gitlab: "gitlab";
    }>;
    /** @deprecated use `GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody111Type$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Gitlab: "gitlab";
    }>;
}
/** @internal */
export declare const GetDeploymentGitSourceDeployments11$inboundSchema: z.ZodType<GetDeploymentGitSourceDeployments11, z.ZodTypeDef, unknown>;
/** @internal */
export type GetDeploymentGitSourceDeployments11$Outbound = {
    type: string;
    ref: string;
    sha: string;
    projectId: number;
};
/** @internal */
export declare const GetDeploymentGitSourceDeployments11$outboundSchema: z.ZodType<GetDeploymentGitSourceDeployments11$Outbound, z.ZodTypeDef, GetDeploymentGitSourceDeployments11>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetDeploymentGitSourceDeployments11$ {
    /** @deprecated use `GetDeploymentGitSourceDeployments11$inboundSchema` instead. */
    const inboundSchema: z.ZodType<GetDeploymentGitSourceDeployments11, z.ZodTypeDef, unknown>;
    /** @deprecated use `GetDeploymentGitSourceDeployments11$outboundSchema` instead. */
    const outboundSchema: z.ZodType<GetDeploymentGitSourceDeployments11$Outbound, z.ZodTypeDef, GetDeploymentGitSourceDeployments11>;
    /** @deprecated use `GetDeploymentGitSourceDeployments11$Outbound` instead. */
    type Outbound = GetDeploymentGitSourceDeployments11$Outbound;
}
export declare function getDeploymentGitSourceDeployments11ToJSON(getDeploymentGitSourceDeployments11: GetDeploymentGitSourceDeployments11): string;
export declare function getDeploymentGitSourceDeployments11FromJSON(jsonString: string): SafeParseResult<GetDeploymentGitSourceDeployments11, SDKValidationError>;
/** @internal */
export declare const GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody110Type$inboundSchema: z.ZodNativeEnum<typeof GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody110Type>;
/** @internal */
export declare const GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody110Type$outboundSchema: z.ZodNativeEnum<typeof GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody110Type>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody110Type$ {
    /** @deprecated use `GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody110Type$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly GithubCustomHost: "github-custom-host";
    }>;
    /** @deprecated use `GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody110Type$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly GithubCustomHost: "github-custom-host";
    }>;
}
/** @internal */
export declare const GetDeploymentGitSourceDeployments10$inboundSchema: z.ZodType<GetDeploymentGitSourceDeployments10, z.ZodTypeDef, unknown>;
/** @internal */
export type GetDeploymentGitSourceDeployments10$Outbound = {
    type: string;
    host: string;
    ref: string;
    sha: string;
    repoId: number;
    org?: string | undefined;
    repo?: string | undefined;
};
/** @internal */
export declare const GetDeploymentGitSourceDeployments10$outboundSchema: z.ZodType<GetDeploymentGitSourceDeployments10$Outbound, z.ZodTypeDef, GetDeploymentGitSourceDeployments10>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetDeploymentGitSourceDeployments10$ {
    /** @deprecated use `GetDeploymentGitSourceDeployments10$inboundSchema` instead. */
    const inboundSchema: z.ZodType<GetDeploymentGitSourceDeployments10, z.ZodTypeDef, unknown>;
    /** @deprecated use `GetDeploymentGitSourceDeployments10$outboundSchema` instead. */
    const outboundSchema: z.ZodType<GetDeploymentGitSourceDeployments10$Outbound, z.ZodTypeDef, GetDeploymentGitSourceDeployments10>;
    /** @deprecated use `GetDeploymentGitSourceDeployments10$Outbound` instead. */
    type Outbound = GetDeploymentGitSourceDeployments10$Outbound;
}
export declare function getDeploymentGitSourceDeployments10ToJSON(getDeploymentGitSourceDeployments10: GetDeploymentGitSourceDeployments10): string;
export declare function getDeploymentGitSourceDeployments10FromJSON(jsonString: string): SafeParseResult<GetDeploymentGitSourceDeployments10, SDKValidationError>;
/** @internal */
export declare const GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody19Type$inboundSchema: z.ZodNativeEnum<typeof GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody19Type>;
/** @internal */
export declare const GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody19Type$outboundSchema: z.ZodNativeEnum<typeof GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody19Type>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody19Type$ {
    /** @deprecated use `GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody19Type$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Github: "github";
    }>;
    /** @deprecated use `GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody19Type$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Github: "github";
    }>;
}
/** @internal */
export declare const GetDeploymentGitSourceDeployments9$inboundSchema: z.ZodType<GetDeploymentGitSourceDeployments9, z.ZodTypeDef, unknown>;
/** @internal */
export type GetDeploymentGitSourceDeployments9$Outbound = {
    type: string;
    ref: string;
    sha: string;
    repoId: number;
    org?: string | undefined;
    repo?: string | undefined;
};
/** @internal */
export declare const GetDeploymentGitSourceDeployments9$outboundSchema: z.ZodType<GetDeploymentGitSourceDeployments9$Outbound, z.ZodTypeDef, GetDeploymentGitSourceDeployments9>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetDeploymentGitSourceDeployments9$ {
    /** @deprecated use `GetDeploymentGitSourceDeployments9$inboundSchema` instead. */
    const inboundSchema: z.ZodType<GetDeploymentGitSourceDeployments9, z.ZodTypeDef, unknown>;
    /** @deprecated use `GetDeploymentGitSourceDeployments9$outboundSchema` instead. */
    const outboundSchema: z.ZodType<GetDeploymentGitSourceDeployments9$Outbound, z.ZodTypeDef, GetDeploymentGitSourceDeployments9>;
    /** @deprecated use `GetDeploymentGitSourceDeployments9$Outbound` instead. */
    type Outbound = GetDeploymentGitSourceDeployments9$Outbound;
}
export declare function getDeploymentGitSourceDeployments9ToJSON(getDeploymentGitSourceDeployments9: GetDeploymentGitSourceDeployments9): string;
export declare function getDeploymentGitSourceDeployments9FromJSON(jsonString: string): SafeParseResult<GetDeploymentGitSourceDeployments9, SDKValidationError>;
/** @internal */
export declare const GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody1Type$inboundSchema: z.ZodNativeEnum<typeof GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody1Type>;
/** @internal */
export declare const GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody1Type$outboundSchema: z.ZodNativeEnum<typeof GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody1Type>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody1Type$ {
    /** @deprecated use `GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody1Type$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Custom: "custom";
    }>;
    /** @deprecated use `GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody1Type$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Custom: "custom";
    }>;
}
/** @internal */
export declare const GetDeploymentGitSourceDeployments8$inboundSchema: z.ZodType<GetDeploymentGitSourceDeployments8, z.ZodTypeDef, unknown>;
/** @internal */
export type GetDeploymentGitSourceDeployments8$Outbound = {
    type: string;
    ref: string;
    sha: string;
    gitUrl: string;
};
/** @internal */
export declare const GetDeploymentGitSourceDeployments8$outboundSchema: z.ZodType<GetDeploymentGitSourceDeployments8$Outbound, z.ZodTypeDef, GetDeploymentGitSourceDeployments8>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetDeploymentGitSourceDeployments8$ {
    /** @deprecated use `GetDeploymentGitSourceDeployments8$inboundSchema` instead. */
    const inboundSchema: z.ZodType<GetDeploymentGitSourceDeployments8, z.ZodTypeDef, unknown>;
    /** @deprecated use `GetDeploymentGitSourceDeployments8$outboundSchema` instead. */
    const outboundSchema: z.ZodType<GetDeploymentGitSourceDeployments8$Outbound, z.ZodTypeDef, GetDeploymentGitSourceDeployments8>;
    /** @deprecated use `GetDeploymentGitSourceDeployments8$Outbound` instead. */
    type Outbound = GetDeploymentGitSourceDeployments8$Outbound;
}
export declare function getDeploymentGitSourceDeployments8ToJSON(getDeploymentGitSourceDeployments8: GetDeploymentGitSourceDeployments8): string;
export declare function getDeploymentGitSourceDeployments8FromJSON(jsonString: string): SafeParseResult<GetDeploymentGitSourceDeployments8, SDKValidationError>;
/** @internal */
export declare const GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBodyType$inboundSchema: z.ZodNativeEnum<typeof GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBodyType>;
/** @internal */
export declare const GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBodyType$outboundSchema: z.ZodNativeEnum<typeof GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBodyType>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBodyType$ {
    /** @deprecated use `GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBodyType$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Bitbucket: "bitbucket";
    }>;
    /** @deprecated use `GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBodyType$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Bitbucket: "bitbucket";
    }>;
}
/** @internal */
export declare const GetDeploymentGitSourceDeployments7$inboundSchema: z.ZodType<GetDeploymentGitSourceDeployments7, z.ZodTypeDef, unknown>;
/** @internal */
export type GetDeploymentGitSourceDeployments7$Outbound = {
    type: string;
    owner: string;
    slug: string;
    ref?: string | null | undefined;
    sha?: string | undefined;
    prId?: number | null | undefined;
};
/** @internal */
export declare const GetDeploymentGitSourceDeployments7$outboundSchema: z.ZodType<GetDeploymentGitSourceDeployments7$Outbound, z.ZodTypeDef, GetDeploymentGitSourceDeployments7>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetDeploymentGitSourceDeployments7$ {
    /** @deprecated use `GetDeploymentGitSourceDeployments7$inboundSchema` instead. */
    const inboundSchema: z.ZodType<GetDeploymentGitSourceDeployments7, z.ZodTypeDef, unknown>;
    /** @deprecated use `GetDeploymentGitSourceDeployments7$outboundSchema` instead. */
    const outboundSchema: z.ZodType<GetDeploymentGitSourceDeployments7$Outbound, z.ZodTypeDef, GetDeploymentGitSourceDeployments7>;
    /** @deprecated use `GetDeploymentGitSourceDeployments7$Outbound` instead. */
    type Outbound = GetDeploymentGitSourceDeployments7$Outbound;
}
export declare function getDeploymentGitSourceDeployments7ToJSON(getDeploymentGitSourceDeployments7: GetDeploymentGitSourceDeployments7): string;
export declare function getDeploymentGitSourceDeployments7FromJSON(jsonString: string): SafeParseResult<GetDeploymentGitSourceDeployments7, SDKValidationError>;
/** @internal */
export declare const GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONType$inboundSchema: z.ZodNativeEnum<typeof GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONType>;
/** @internal */
export declare const GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONType$outboundSchema: z.ZodNativeEnum<typeof GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONType>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONType$ {
    /** @deprecated use `GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONType$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Bitbucket: "bitbucket";
    }>;
    /** @deprecated use `GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONType$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Bitbucket: "bitbucket";
    }>;
}
/** @internal */
export declare const GetDeploymentGitSourceDeployments6$inboundSchema: z.ZodType<GetDeploymentGitSourceDeployments6, z.ZodTypeDef, unknown>;
/** @internal */
export type GetDeploymentGitSourceDeployments6$Outbound = {
    type: string;
    workspaceUuid?: string | undefined;
    repoUuid: string;
    ref?: string | null | undefined;
    sha?: string | undefined;
    prId?: number | null | undefined;
};
/** @internal */
export declare const GetDeploymentGitSourceDeployments6$outboundSchema: z.ZodType<GetDeploymentGitSourceDeployments6$Outbound, z.ZodTypeDef, GetDeploymentGitSourceDeployments6>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetDeploymentGitSourceDeployments6$ {
    /** @deprecated use `GetDeploymentGitSourceDeployments6$inboundSchema` instead. */
    const inboundSchema: z.ZodType<GetDeploymentGitSourceDeployments6, z.ZodTypeDef, unknown>;
    /** @deprecated use `GetDeploymentGitSourceDeployments6$outboundSchema` instead. */
    const outboundSchema: z.ZodType<GetDeploymentGitSourceDeployments6$Outbound, z.ZodTypeDef, GetDeploymentGitSourceDeployments6>;
    /** @deprecated use `GetDeploymentGitSourceDeployments6$Outbound` instead. */
    type Outbound = GetDeploymentGitSourceDeployments6$Outbound;
}
export declare function getDeploymentGitSourceDeployments6ToJSON(getDeploymentGitSourceDeployments6: GetDeploymentGitSourceDeployments6): string;
export declare function getDeploymentGitSourceDeployments6FromJSON(jsonString: string): SafeParseResult<GetDeploymentGitSourceDeployments6, SDKValidationError>;
/** @internal */
export declare const GetDeploymentGitSourceDeploymentsResponse200Type$inboundSchema: z.ZodNativeEnum<typeof GetDeploymentGitSourceDeploymentsResponse200Type>;
/** @internal */
export declare const GetDeploymentGitSourceDeploymentsResponse200Type$outboundSchema: z.ZodNativeEnum<typeof GetDeploymentGitSourceDeploymentsResponse200Type>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetDeploymentGitSourceDeploymentsResponse200Type$ {
    /** @deprecated use `GetDeploymentGitSourceDeploymentsResponse200Type$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Gitlab: "gitlab";
    }>;
    /** @deprecated use `GetDeploymentGitSourceDeploymentsResponse200Type$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Gitlab: "gitlab";
    }>;
}
/** @internal */
export declare const GetDeploymentGitSourceProjectId$inboundSchema: z.ZodType<GetDeploymentGitSourceProjectId, z.ZodTypeDef, unknown>;
/** @internal */
export type GetDeploymentGitSourceProjectId$Outbound = string | number;
/** @internal */
export declare const GetDeploymentGitSourceProjectId$outboundSchema: z.ZodType<GetDeploymentGitSourceProjectId$Outbound, z.ZodTypeDef, GetDeploymentGitSourceProjectId>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetDeploymentGitSourceProjectId$ {
    /** @deprecated use `GetDeploymentGitSourceProjectId$inboundSchema` instead. */
    const inboundSchema: z.ZodType<GetDeploymentGitSourceProjectId, z.ZodTypeDef, unknown>;
    /** @deprecated use `GetDeploymentGitSourceProjectId$outboundSchema` instead. */
    const outboundSchema: z.ZodType<GetDeploymentGitSourceProjectId$Outbound, z.ZodTypeDef, GetDeploymentGitSourceProjectId>;
    /** @deprecated use `GetDeploymentGitSourceProjectId$Outbound` instead. */
    type Outbound = GetDeploymentGitSourceProjectId$Outbound;
}
export declare function getDeploymentGitSourceProjectIdToJSON(getDeploymentGitSourceProjectId: GetDeploymentGitSourceProjectId): string;
export declare function getDeploymentGitSourceProjectIdFromJSON(jsonString: string): SafeParseResult<GetDeploymentGitSourceProjectId, SDKValidationError>;
/** @internal */
export declare const GetDeploymentGitSourceDeployments5$inboundSchema: z.ZodType<GetDeploymentGitSourceDeployments5, z.ZodTypeDef, unknown>;
/** @internal */
export type GetDeploymentGitSourceDeployments5$Outbound = {
    type: string;
    projectId: string | number;
    ref?: string | null | undefined;
    sha?: string | undefined;
    prId?: number | null | undefined;
};
/** @internal */
export declare const GetDeploymentGitSourceDeployments5$outboundSchema: z.ZodType<GetDeploymentGitSourceDeployments5$Outbound, z.ZodTypeDef, GetDeploymentGitSourceDeployments5>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetDeploymentGitSourceDeployments5$ {
    /** @deprecated use `GetDeploymentGitSourceDeployments5$inboundSchema` instead. */
    const inboundSchema: z.ZodType<GetDeploymentGitSourceDeployments5, z.ZodTypeDef, unknown>;
    /** @deprecated use `GetDeploymentGitSourceDeployments5$outboundSchema` instead. */
    const outboundSchema: z.ZodType<GetDeploymentGitSourceDeployments5$Outbound, z.ZodTypeDef, GetDeploymentGitSourceDeployments5>;
    /** @deprecated use `GetDeploymentGitSourceDeployments5$Outbound` instead. */
    type Outbound = GetDeploymentGitSourceDeployments5$Outbound;
}
export declare function getDeploymentGitSourceDeployments5ToJSON(getDeploymentGitSourceDeployments5: GetDeploymentGitSourceDeployments5): string;
export declare function getDeploymentGitSourceDeployments5FromJSON(jsonString: string): SafeParseResult<GetDeploymentGitSourceDeployments5, SDKValidationError>;
/** @internal */
export declare const GetDeploymentGitSourceDeploymentsResponseType$inboundSchema: z.ZodNativeEnum<typeof GetDeploymentGitSourceDeploymentsResponseType>;
/** @internal */
export declare const GetDeploymentGitSourceDeploymentsResponseType$outboundSchema: z.ZodNativeEnum<typeof GetDeploymentGitSourceDeploymentsResponseType>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetDeploymentGitSourceDeploymentsResponseType$ {
    /** @deprecated use `GetDeploymentGitSourceDeploymentsResponseType$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly GithubCustomHost: "github-custom-host";
    }>;
    /** @deprecated use `GetDeploymentGitSourceDeploymentsResponseType$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly GithubCustomHost: "github-custom-host";
    }>;
}
/** @internal */
export declare const GetDeploymentGitSourceDeployments4$inboundSchema: z.ZodType<GetDeploymentGitSourceDeployments4, z.ZodTypeDef, unknown>;
/** @internal */
export type GetDeploymentGitSourceDeployments4$Outbound = {
    type: string;
    host: string;
    org: string;
    repo: string;
    ref?: string | null | undefined;
    sha?: string | undefined;
    prId?: number | null | undefined;
};
/** @internal */
export declare const GetDeploymentGitSourceDeployments4$outboundSchema: z.ZodType<GetDeploymentGitSourceDeployments4$Outbound, z.ZodTypeDef, GetDeploymentGitSourceDeployments4>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetDeploymentGitSourceDeployments4$ {
    /** @deprecated use `GetDeploymentGitSourceDeployments4$inboundSchema` instead. */
    const inboundSchema: z.ZodType<GetDeploymentGitSourceDeployments4, z.ZodTypeDef, unknown>;
    /** @deprecated use `GetDeploymentGitSourceDeployments4$outboundSchema` instead. */
    const outboundSchema: z.ZodType<GetDeploymentGitSourceDeployments4$Outbound, z.ZodTypeDef, GetDeploymentGitSourceDeployments4>;
    /** @deprecated use `GetDeploymentGitSourceDeployments4$Outbound` instead. */
    type Outbound = GetDeploymentGitSourceDeployments4$Outbound;
}
export declare function getDeploymentGitSourceDeployments4ToJSON(getDeploymentGitSourceDeployments4: GetDeploymentGitSourceDeployments4): string;
export declare function getDeploymentGitSourceDeployments4FromJSON(jsonString: string): SafeParseResult<GetDeploymentGitSourceDeployments4, SDKValidationError>;
/** @internal */
export declare const GetDeploymentGitSourceDeploymentsType$inboundSchema: z.ZodNativeEnum<typeof GetDeploymentGitSourceDeploymentsType>;
/** @internal */
export declare const GetDeploymentGitSourceDeploymentsType$outboundSchema: z.ZodNativeEnum<typeof GetDeploymentGitSourceDeploymentsType>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetDeploymentGitSourceDeploymentsType$ {
    /** @deprecated use `GetDeploymentGitSourceDeploymentsType$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly GithubCustomHost: "github-custom-host";
    }>;
    /** @deprecated use `GetDeploymentGitSourceDeploymentsType$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly GithubCustomHost: "github-custom-host";
    }>;
}
/** @internal */
export declare const GetDeploymentGitSourceDeploymentsResponse200RepoId$inboundSchema: z.ZodType<GetDeploymentGitSourceDeploymentsResponse200RepoId, z.ZodTypeDef, unknown>;
/** @internal */
export type GetDeploymentGitSourceDeploymentsResponse200RepoId$Outbound = string | number;
/** @internal */
export declare const GetDeploymentGitSourceDeploymentsResponse200RepoId$outboundSchema: z.ZodType<GetDeploymentGitSourceDeploymentsResponse200RepoId$Outbound, z.ZodTypeDef, GetDeploymentGitSourceDeploymentsResponse200RepoId>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetDeploymentGitSourceDeploymentsResponse200RepoId$ {
    /** @deprecated use `GetDeploymentGitSourceDeploymentsResponse200RepoId$inboundSchema` instead. */
    const inboundSchema: z.ZodType<GetDeploymentGitSourceDeploymentsResponse200RepoId, z.ZodTypeDef, unknown>;
    /** @deprecated use `GetDeploymentGitSourceDeploymentsResponse200RepoId$outboundSchema` instead. */
    const outboundSchema: z.ZodType<GetDeploymentGitSourceDeploymentsResponse200RepoId$Outbound, z.ZodTypeDef, GetDeploymentGitSourceDeploymentsResponse200RepoId>;
    /** @deprecated use `GetDeploymentGitSourceDeploymentsResponse200RepoId$Outbound` instead. */
    type Outbound = GetDeploymentGitSourceDeploymentsResponse200RepoId$Outbound;
}
export declare function getDeploymentGitSourceDeploymentsResponse200RepoIdToJSON(getDeploymentGitSourceDeploymentsResponse200RepoId: GetDeploymentGitSourceDeploymentsResponse200RepoId): string;
export declare function getDeploymentGitSourceDeploymentsResponse200RepoIdFromJSON(jsonString: string): SafeParseResult<GetDeploymentGitSourceDeploymentsResponse200RepoId, SDKValidationError>;
/** @internal */
export declare const GetDeploymentGitSourceDeployments3$inboundSchema: z.ZodType<GetDeploymentGitSourceDeployments3, z.ZodTypeDef, unknown>;
/** @internal */
export type GetDeploymentGitSourceDeployments3$Outbound = {
    type: string;
    host: string;
    repoId: string | number;
    ref?: string | null | undefined;
    sha?: string | undefined;
    prId?: number | null | undefined;
};
/** @internal */
export declare const GetDeploymentGitSourceDeployments3$outboundSchema: z.ZodType<GetDeploymentGitSourceDeployments3$Outbound, z.ZodTypeDef, GetDeploymentGitSourceDeployments3>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetDeploymentGitSourceDeployments3$ {
    /** @deprecated use `GetDeploymentGitSourceDeployments3$inboundSchema` instead. */
    const inboundSchema: z.ZodType<GetDeploymentGitSourceDeployments3, z.ZodTypeDef, unknown>;
    /** @deprecated use `GetDeploymentGitSourceDeployments3$outboundSchema` instead. */
    const outboundSchema: z.ZodType<GetDeploymentGitSourceDeployments3$Outbound, z.ZodTypeDef, GetDeploymentGitSourceDeployments3>;
    /** @deprecated use `GetDeploymentGitSourceDeployments3$Outbound` instead. */
    type Outbound = GetDeploymentGitSourceDeployments3$Outbound;
}
export declare function getDeploymentGitSourceDeployments3ToJSON(getDeploymentGitSourceDeployments3: GetDeploymentGitSourceDeployments3): string;
export declare function getDeploymentGitSourceDeployments3FromJSON(jsonString: string): SafeParseResult<GetDeploymentGitSourceDeployments3, SDKValidationError>;
/** @internal */
export declare const GetDeploymentGitSourceType$inboundSchema: z.ZodNativeEnum<typeof GetDeploymentGitSourceType>;
/** @internal */
export declare const GetDeploymentGitSourceType$outboundSchema: z.ZodNativeEnum<typeof GetDeploymentGitSourceType>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetDeploymentGitSourceType$ {
    /** @deprecated use `GetDeploymentGitSourceType$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Github: "github";
    }>;
    /** @deprecated use `GetDeploymentGitSourceType$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Github: "github";
    }>;
}
/** @internal */
export declare const GetDeploymentGitSourceDeployments2$inboundSchema: z.ZodType<GetDeploymentGitSourceDeployments2, z.ZodTypeDef, unknown>;
/** @internal */
export type GetDeploymentGitSourceDeployments2$Outbound = {
    type: string;
    org: string;
    repo: string;
    ref?: string | null | undefined;
    sha?: string | undefined;
    prId?: number | null | undefined;
};
/** @internal */
export declare const GetDeploymentGitSourceDeployments2$outboundSchema: z.ZodType<GetDeploymentGitSourceDeployments2$Outbound, z.ZodTypeDef, GetDeploymentGitSourceDeployments2>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetDeploymentGitSourceDeployments2$ {
    /** @deprecated use `GetDeploymentGitSourceDeployments2$inboundSchema` instead. */
    const inboundSchema: z.ZodType<GetDeploymentGitSourceDeployments2, z.ZodTypeDef, unknown>;
    /** @deprecated use `GetDeploymentGitSourceDeployments2$outboundSchema` instead. */
    const outboundSchema: z.ZodType<GetDeploymentGitSourceDeployments2$Outbound, z.ZodTypeDef, GetDeploymentGitSourceDeployments2>;
    /** @deprecated use `GetDeploymentGitSourceDeployments2$Outbound` instead. */
    type Outbound = GetDeploymentGitSourceDeployments2$Outbound;
}
export declare function getDeploymentGitSourceDeployments2ToJSON(getDeploymentGitSourceDeployments2: GetDeploymentGitSourceDeployments2): string;
export declare function getDeploymentGitSourceDeployments2FromJSON(jsonString: string): SafeParseResult<GetDeploymentGitSourceDeployments2, SDKValidationError>;
/** @internal */
export declare const GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody11Type$inboundSchema: z.ZodNativeEnum<typeof GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody11Type>;
/** @internal */
export declare const GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody11Type$outboundSchema: z.ZodNativeEnum<typeof GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody11Type>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody11Type$ {
    /** @deprecated use `GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody11Type$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Github: "github";
    }>;
    /** @deprecated use `GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody11Type$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Github: "github";
    }>;
}
/** @internal */
export declare const GetDeploymentGitSourceDeploymentsResponseRepoId$inboundSchema: z.ZodType<GetDeploymentGitSourceDeploymentsResponseRepoId, z.ZodTypeDef, unknown>;
/** @internal */
export type GetDeploymentGitSourceDeploymentsResponseRepoId$Outbound = string | number;
/** @internal */
export declare const GetDeploymentGitSourceDeploymentsResponseRepoId$outboundSchema: z.ZodType<GetDeploymentGitSourceDeploymentsResponseRepoId$Outbound, z.ZodTypeDef, GetDeploymentGitSourceDeploymentsResponseRepoId>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetDeploymentGitSourceDeploymentsResponseRepoId$ {
    /** @deprecated use `GetDeploymentGitSourceDeploymentsResponseRepoId$inboundSchema` instead. */
    const inboundSchema: z.ZodType<GetDeploymentGitSourceDeploymentsResponseRepoId, z.ZodTypeDef, unknown>;
    /** @deprecated use `GetDeploymentGitSourceDeploymentsResponseRepoId$outboundSchema` instead. */
    const outboundSchema: z.ZodType<GetDeploymentGitSourceDeploymentsResponseRepoId$Outbound, z.ZodTypeDef, GetDeploymentGitSourceDeploymentsResponseRepoId>;
    /** @deprecated use `GetDeploymentGitSourceDeploymentsResponseRepoId$Outbound` instead. */
    type Outbound = GetDeploymentGitSourceDeploymentsResponseRepoId$Outbound;
}
export declare function getDeploymentGitSourceDeploymentsResponseRepoIdToJSON(getDeploymentGitSourceDeploymentsResponseRepoId: GetDeploymentGitSourceDeploymentsResponseRepoId): string;
export declare function getDeploymentGitSourceDeploymentsResponseRepoIdFromJSON(jsonString: string): SafeParseResult<GetDeploymentGitSourceDeploymentsResponseRepoId, SDKValidationError>;
/** @internal */
export declare const GetDeploymentGitSourceDeployments1$inboundSchema: z.ZodType<GetDeploymentGitSourceDeployments1, z.ZodTypeDef, unknown>;
/** @internal */
export type GetDeploymentGitSourceDeployments1$Outbound = {
    type: string;
    repoId: string | number;
    ref?: string | null | undefined;
    sha?: string | undefined;
    prId?: number | null | undefined;
};
/** @internal */
export declare const GetDeploymentGitSourceDeployments1$outboundSchema: z.ZodType<GetDeploymentGitSourceDeployments1$Outbound, z.ZodTypeDef, GetDeploymentGitSourceDeployments1>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetDeploymentGitSourceDeployments1$ {
    /** @deprecated use `GetDeploymentGitSourceDeployments1$inboundSchema` instead. */
    const inboundSchema: z.ZodType<GetDeploymentGitSourceDeployments1, z.ZodTypeDef, unknown>;
    /** @deprecated use `GetDeploymentGitSourceDeployments1$outboundSchema` instead. */
    const outboundSchema: z.ZodType<GetDeploymentGitSourceDeployments1$Outbound, z.ZodTypeDef, GetDeploymentGitSourceDeployments1>;
    /** @deprecated use `GetDeploymentGitSourceDeployments1$Outbound` instead. */
    type Outbound = GetDeploymentGitSourceDeployments1$Outbound;
}
export declare function getDeploymentGitSourceDeployments1ToJSON(getDeploymentGitSourceDeployments1: GetDeploymentGitSourceDeployments1): string;
export declare function getDeploymentGitSourceDeployments1FromJSON(jsonString: string): SafeParseResult<GetDeploymentGitSourceDeployments1, SDKValidationError>;
/** @internal */
export declare const GetDeploymentResponseBodyGitSource$inboundSchema: z.ZodType<GetDeploymentResponseBodyGitSource, z.ZodTypeDef, unknown>;
/** @internal */
export type GetDeploymentResponseBodyGitSource$Outbound = GetDeploymentGitSourceDeployments8$Outbound | GetDeploymentGitSourceDeployments11$Outbound | GetDeploymentGitSourceDeployments1$Outbound | GetDeploymentGitSourceDeployments5$Outbound | GetDeploymentGitSourceDeployments2$Outbound | GetDeploymentGitSourceDeployments3$Outbound | GetDeploymentGitSourceDeployments6$Outbound | GetDeploymentGitSourceDeployments7$Outbound | GetDeploymentGitSourceDeployments9$Outbound | GetDeploymentGitSourceDeployments4$Outbound | GetDeploymentGitSourceDeployments10$Outbound | GetDeploymentGitSourceDeployments12$Outbound;
/** @internal */
export declare const GetDeploymentResponseBodyGitSource$outboundSchema: z.ZodType<GetDeploymentResponseBodyGitSource$Outbound, z.ZodTypeDef, GetDeploymentResponseBodyGitSource>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetDeploymentResponseBodyGitSource$ {
    /** @deprecated use `GetDeploymentResponseBodyGitSource$inboundSchema` instead. */
    const inboundSchema: z.ZodType<GetDeploymentResponseBodyGitSource, z.ZodTypeDef, unknown>;
    /** @deprecated use `GetDeploymentResponseBodyGitSource$outboundSchema` instead. */
    const outboundSchema: z.ZodType<GetDeploymentResponseBodyGitSource$Outbound, z.ZodTypeDef, GetDeploymentResponseBodyGitSource>;
    /** @deprecated use `GetDeploymentResponseBodyGitSource$Outbound` instead. */
    type Outbound = GetDeploymentResponseBodyGitSource$Outbound;
}
export declare function getDeploymentResponseBodyGitSourceToJSON(getDeploymentResponseBodyGitSource: GetDeploymentResponseBodyGitSource): string;
export declare function getDeploymentResponseBodyGitSourceFromJSON(jsonString: string): SafeParseResult<GetDeploymentResponseBodyGitSource, SDKValidationError>;
/** @internal */
export declare const ResponseBodyProject$inboundSchema: z.ZodType<ResponseBodyProject, z.ZodTypeDef, unknown>;
/** @internal */
export type ResponseBodyProject$Outbound = {
    id: string;
    name: string;
    framework?: string | null | undefined;
};
/** @internal */
export declare const ResponseBodyProject$outboundSchema: z.ZodType<ResponseBodyProject$Outbound, z.ZodTypeDef, ResponseBodyProject>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace ResponseBodyProject$ {
    /** @deprecated use `ResponseBodyProject$inboundSchema` instead. */
    const inboundSchema: z.ZodType<ResponseBodyProject, z.ZodTypeDef, unknown>;
    /** @deprecated use `ResponseBodyProject$outboundSchema` instead. */
    const outboundSchema: z.ZodType<ResponseBodyProject$Outbound, z.ZodTypeDef, ResponseBodyProject>;
    /** @deprecated use `ResponseBodyProject$Outbound` instead. */
    type Outbound = ResponseBodyProject$Outbound;
}
export declare function responseBodyProjectToJSON(responseBodyProject: ResponseBodyProject): string;
export declare function responseBodyProjectFromJSON(jsonString: string): SafeParseResult<ResponseBodyProject, SDKValidationError>;
/** @internal */
export declare const ResponseBodyReadySubstate$inboundSchema: z.ZodNativeEnum<typeof ResponseBodyReadySubstate>;
/** @internal */
export declare const ResponseBodyReadySubstate$outboundSchema: z.ZodNativeEnum<typeof ResponseBodyReadySubstate>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace ResponseBodyReadySubstate$ {
    /** @deprecated use `ResponseBodyReadySubstate$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Staged: "STAGED";
        readonly Rolling: "ROLLING";
        readonly Promoted: "PROMOTED";
    }>;
    /** @deprecated use `ResponseBodyReadySubstate$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Staged: "STAGED";
        readonly Rolling: "ROLLING";
        readonly Promoted: "PROMOTED";
    }>;
}
/** @internal */
export declare const ResponseBodySource$inboundSchema: z.ZodNativeEnum<typeof ResponseBodySource>;
/** @internal */
export declare const ResponseBodySource$outboundSchema: z.ZodNativeEnum<typeof ResponseBodySource>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace ResponseBodySource$ {
    /** @deprecated use `ResponseBodySource$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly ApiTriggerGitDeploy: "api-trigger-git-deploy";
        readonly Cli: "cli";
        readonly CloneRepo: "clone/repo";
        readonly Git: "git";
        readonly Import: "import";
        readonly ImportRepo: "import/repo";
        readonly Redeploy: "redeploy";
        readonly V0Web: "v0-web";
    }>;
    /** @deprecated use `ResponseBodySource$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly ApiTriggerGitDeploy: "api-trigger-git-deploy";
        readonly Cli: "cli";
        readonly CloneRepo: "clone/repo";
        readonly Git: "git";
        readonly Import: "import";
        readonly ImportRepo: "import/repo";
        readonly Redeploy: "redeploy";
        readonly V0Web: "v0-web";
    }>;
}
/** @internal */
export declare const ResponseBodyTarget$inboundSchema: z.ZodNativeEnum<typeof ResponseBodyTarget>;
/** @internal */
export declare const ResponseBodyTarget$outboundSchema: z.ZodNativeEnum<typeof ResponseBodyTarget>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace ResponseBodyTarget$ {
    /** @deprecated use `ResponseBodyTarget$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Staging: "staging";
        readonly Production: "production";
    }>;
    /** @deprecated use `ResponseBodyTarget$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Staging: "staging";
        readonly Production: "production";
    }>;
}
/** @internal */
export declare const ResponseBodyOidcTokenClaims$inboundSchema: z.ZodType<ResponseBodyOidcTokenClaims, z.ZodTypeDef, unknown>;
/** @internal */
export type ResponseBodyOidcTokenClaims$Outbound = {
    iss: string;
    sub: string;
    scope: string;
    aud: string;
    owner: string;
    owner_id: string;
    project: string;
    project_id: string;
    environment: string;
};
/** @internal */
export declare const ResponseBodyOidcTokenClaims$outboundSchema: z.ZodType<ResponseBodyOidcTokenClaims$Outbound, z.ZodTypeDef, ResponseBodyOidcTokenClaims>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace ResponseBodyOidcTokenClaims$ {
    /** @deprecated use `ResponseBodyOidcTokenClaims$inboundSchema` instead. */
    const inboundSchema: z.ZodType<ResponseBodyOidcTokenClaims, z.ZodTypeDef, unknown>;
    /** @deprecated use `ResponseBodyOidcTokenClaims$outboundSchema` instead. */
    const outboundSchema: z.ZodType<ResponseBodyOidcTokenClaims$Outbound, z.ZodTypeDef, ResponseBodyOidcTokenClaims>;
    /** @deprecated use `ResponseBodyOidcTokenClaims$Outbound` instead. */
    type Outbound = ResponseBodyOidcTokenClaims$Outbound;
}
export declare function responseBodyOidcTokenClaimsToJSON(responseBodyOidcTokenClaims: ResponseBodyOidcTokenClaims): string;
export declare function responseBodyOidcTokenClaimsFromJSON(jsonString: string): SafeParseResult<ResponseBodyOidcTokenClaims, SDKValidationError>;
/** @internal */
export declare const ResponseBodyPlan$inboundSchema: z.ZodNativeEnum<typeof ResponseBodyPlan>;
/** @internal */
export declare const ResponseBodyPlan$outboundSchema: z.ZodNativeEnum<typeof ResponseBodyPlan>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace ResponseBodyPlan$ {
    /** @deprecated use `ResponseBodyPlan$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Pro: "pro";
        readonly Enterprise: "enterprise";
        readonly Hobby: "hobby";
    }>;
    /** @deprecated use `ResponseBodyPlan$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Pro: "pro";
        readonly Enterprise: "enterprise";
        readonly Hobby: "hobby";
    }>;
}
/** @internal */
export declare const ResponseBodyCrons$inboundSchema: z.ZodType<ResponseBodyCrons, z.ZodTypeDef, unknown>;
/** @internal */
export type ResponseBodyCrons$Outbound = {
    schedule: string;
    path: string;
};
/** @internal */
export declare const ResponseBodyCrons$outboundSchema: z.ZodType<ResponseBodyCrons$Outbound, z.ZodTypeDef, ResponseBodyCrons>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace ResponseBodyCrons$ {
    /** @deprecated use `ResponseBodyCrons$inboundSchema` instead. */
    const inboundSchema: z.ZodType<ResponseBodyCrons, z.ZodTypeDef, unknown>;
    /** @deprecated use `ResponseBodyCrons$outboundSchema` instead. */
    const outboundSchema: z.ZodType<ResponseBodyCrons$Outbound, z.ZodTypeDef, ResponseBodyCrons>;
    /** @deprecated use `ResponseBodyCrons$Outbound` instead. */
    type Outbound = ResponseBodyCrons$Outbound;
}
export declare function responseBodyCronsToJSON(responseBodyCrons: ResponseBodyCrons): string;
export declare function responseBodyCronsFromJSON(jsonString: string): SafeParseResult<ResponseBodyCrons, SDKValidationError>;
/** @internal */
export declare const ResponseBodyFunctions$inboundSchema: z.ZodType<ResponseBodyFunctions, z.ZodTypeDef, unknown>;
/** @internal */
export type ResponseBodyFunctions$Outbound = {
    memory?: number | undefined;
    maxDuration?: number | undefined;
    runtime?: string | undefined;
    includeFiles?: string | undefined;
    excludeFiles?: string | undefined;
};
/** @internal */
export declare const ResponseBodyFunctions$outboundSchema: z.ZodType<ResponseBodyFunctions$Outbound, z.ZodTypeDef, ResponseBodyFunctions>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace ResponseBodyFunctions$ {
    /** @deprecated use `ResponseBodyFunctions$inboundSchema` instead. */
    const inboundSchema: z.ZodType<ResponseBodyFunctions, z.ZodTypeDef, unknown>;
    /** @deprecated use `ResponseBodyFunctions$outboundSchema` instead. */
    const outboundSchema: z.ZodType<ResponseBodyFunctions$Outbound, z.ZodTypeDef, ResponseBodyFunctions>;
    /** @deprecated use `ResponseBodyFunctions$Outbound` instead. */
    type Outbound = ResponseBodyFunctions$Outbound;
}
export declare function responseBodyFunctionsToJSON(responseBodyFunctions: ResponseBodyFunctions): string;
export declare function responseBodyFunctionsFromJSON(jsonString: string): SafeParseResult<ResponseBodyFunctions, SDKValidationError>;
/** @internal */
export declare const GetDeploymentRoutes3$inboundSchema: z.ZodType<GetDeploymentRoutes3, z.ZodTypeDef, unknown>;
/** @internal */
export type GetDeploymentRoutes3$Outbound = {
    src: string;
    continue: boolean;
    middleware: number;
};
/** @internal */
export declare const GetDeploymentRoutes3$outboundSchema: z.ZodType<GetDeploymentRoutes3$Outbound, z.ZodTypeDef, GetDeploymentRoutes3>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetDeploymentRoutes3$ {
    /** @deprecated use `GetDeploymentRoutes3$inboundSchema` instead. */
    const inboundSchema: z.ZodType<GetDeploymentRoutes3, z.ZodTypeDef, unknown>;
    /** @deprecated use `GetDeploymentRoutes3$outboundSchema` instead. */
    const outboundSchema: z.ZodType<GetDeploymentRoutes3$Outbound, z.ZodTypeDef, GetDeploymentRoutes3>;
    /** @deprecated use `GetDeploymentRoutes3$Outbound` instead. */
    type Outbound = GetDeploymentRoutes3$Outbound;
}
export declare function getDeploymentRoutes3ToJSON(getDeploymentRoutes3: GetDeploymentRoutes3): string;
export declare function getDeploymentRoutes3FromJSON(jsonString: string): SafeParseResult<GetDeploymentRoutes3, SDKValidationError>;
/** @internal */
export declare const GetDeploymentRoutesHandle$inboundSchema: z.ZodNativeEnum<typeof GetDeploymentRoutesHandle>;
/** @internal */
export declare const GetDeploymentRoutesHandle$outboundSchema: z.ZodNativeEnum<typeof GetDeploymentRoutesHandle>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetDeploymentRoutesHandle$ {
    /** @deprecated use `GetDeploymentRoutesHandle$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Error: "error";
        readonly Filesystem: "filesystem";
        readonly Hit: "hit";
        readonly Miss: "miss";
        readonly Rewrite: "rewrite";
        readonly Resource: "resource";
    }>;
    /** @deprecated use `GetDeploymentRoutesHandle$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Error: "error";
        readonly Filesystem: "filesystem";
        readonly Hit: "hit";
        readonly Miss: "miss";
        readonly Rewrite: "rewrite";
        readonly Resource: "resource";
    }>;
}
/** @internal */
export declare const GetDeploymentRoutes2$inboundSchema: z.ZodType<GetDeploymentRoutes2, z.ZodTypeDef, unknown>;
/** @internal */
export type GetDeploymentRoutes2$Outbound = {
    handle: string;
    src?: string | undefined;
    dest?: string | undefined;
    status?: number | undefined;
};
/** @internal */
export declare const GetDeploymentRoutes2$outboundSchema: z.ZodType<GetDeploymentRoutes2$Outbound, z.ZodTypeDef, GetDeploymentRoutes2>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetDeploymentRoutes2$ {
    /** @deprecated use `GetDeploymentRoutes2$inboundSchema` instead. */
    const inboundSchema: z.ZodType<GetDeploymentRoutes2, z.ZodTypeDef, unknown>;
    /** @deprecated use `GetDeploymentRoutes2$outboundSchema` instead. */
    const outboundSchema: z.ZodType<GetDeploymentRoutes2$Outbound, z.ZodTypeDef, GetDeploymentRoutes2>;
    /** @deprecated use `GetDeploymentRoutes2$Outbound` instead. */
    type Outbound = GetDeploymentRoutes2$Outbound;
}
export declare function getDeploymentRoutes2ToJSON(getDeploymentRoutes2: GetDeploymentRoutes2): string;
export declare function getDeploymentRoutes2FromJSON(jsonString: string): SafeParseResult<GetDeploymentRoutes2, SDKValidationError>;
/** @internal */
export declare const GetDeploymentHasType$inboundSchema: z.ZodNativeEnum<typeof GetDeploymentHasType>;
/** @internal */
export declare const GetDeploymentHasType$outboundSchema: z.ZodNativeEnum<typeof GetDeploymentHasType>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetDeploymentHasType$ {
    /** @deprecated use `GetDeploymentHasType$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Header: "header";
        readonly Cookie: "cookie";
        readonly Query: "query";
    }>;
    /** @deprecated use `GetDeploymentHasType$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Header: "header";
        readonly Cookie: "cookie";
        readonly Query: "query";
    }>;
}
/** @internal */
export declare const GetDeploymentHas2$inboundSchema: z.ZodType<GetDeploymentHas2, z.ZodTypeDef, unknown>;
/** @internal */
export type GetDeploymentHas2$Outbound = {
    type: string;
    key: string;
    value?: string | undefined;
};
/** @internal */
export declare const GetDeploymentHas2$outboundSchema: z.ZodType<GetDeploymentHas2$Outbound, z.ZodTypeDef, GetDeploymentHas2>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetDeploymentHas2$ {
    /** @deprecated use `GetDeploymentHas2$inboundSchema` instead. */
    const inboundSchema: z.ZodType<GetDeploymentHas2, z.ZodTypeDef, unknown>;
    /** @deprecated use `GetDeploymentHas2$outboundSchema` instead. */
    const outboundSchema: z.ZodType<GetDeploymentHas2$Outbound, z.ZodTypeDef, GetDeploymentHas2>;
    /** @deprecated use `GetDeploymentHas2$Outbound` instead. */
    type Outbound = GetDeploymentHas2$Outbound;
}
export declare function getDeploymentHas2ToJSON(getDeploymentHas2: GetDeploymentHas2): string;
export declare function getDeploymentHas2FromJSON(jsonString: string): SafeParseResult<GetDeploymentHas2, SDKValidationError>;
/** @internal */
export declare const GetDeploymentHasDeploymentsType$inboundSchema: z.ZodNativeEnum<typeof GetDeploymentHasDeploymentsType>;
/** @internal */
export declare const GetDeploymentHasDeploymentsType$outboundSchema: z.ZodNativeEnum<typeof GetDeploymentHasDeploymentsType>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetDeploymentHasDeploymentsType$ {
    /** @deprecated use `GetDeploymentHasDeploymentsType$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Host: "host";
    }>;
    /** @deprecated use `GetDeploymentHasDeploymentsType$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Host: "host";
    }>;
}
/** @internal */
export declare const GetDeploymentHas1$inboundSchema: z.ZodType<GetDeploymentHas1, z.ZodTypeDef, unknown>;
/** @internal */
export type GetDeploymentHas1$Outbound = {
    type: string;
    value: string;
};
/** @internal */
export declare const GetDeploymentHas1$outboundSchema: z.ZodType<GetDeploymentHas1$Outbound, z.ZodTypeDef, GetDeploymentHas1>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetDeploymentHas1$ {
    /** @deprecated use `GetDeploymentHas1$inboundSchema` instead. */
    const inboundSchema: z.ZodType<GetDeploymentHas1, z.ZodTypeDef, unknown>;
    /** @deprecated use `GetDeploymentHas1$outboundSchema` instead. */
    const outboundSchema: z.ZodType<GetDeploymentHas1$Outbound, z.ZodTypeDef, GetDeploymentHas1>;
    /** @deprecated use `GetDeploymentHas1$Outbound` instead. */
    type Outbound = GetDeploymentHas1$Outbound;
}
export declare function getDeploymentHas1ToJSON(getDeploymentHas1: GetDeploymentHas1): string;
export declare function getDeploymentHas1FromJSON(jsonString: string): SafeParseResult<GetDeploymentHas1, SDKValidationError>;
/** @internal */
export declare const GetDeploymentRoutesHas$inboundSchema: z.ZodType<GetDeploymentRoutesHas, z.ZodTypeDef, unknown>;
/** @internal */
export type GetDeploymentRoutesHas$Outbound = GetDeploymentHas1$Outbound | GetDeploymentHas2$Outbound;
/** @internal */
export declare const GetDeploymentRoutesHas$outboundSchema: z.ZodType<GetDeploymentRoutesHas$Outbound, z.ZodTypeDef, GetDeploymentRoutesHas>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetDeploymentRoutesHas$ {
    /** @deprecated use `GetDeploymentRoutesHas$inboundSchema` instead. */
    const inboundSchema: z.ZodType<GetDeploymentRoutesHas, z.ZodTypeDef, unknown>;
    /** @deprecated use `GetDeploymentRoutesHas$outboundSchema` instead. */
    const outboundSchema: z.ZodType<GetDeploymentRoutesHas$Outbound, z.ZodTypeDef, GetDeploymentRoutesHas>;
    /** @deprecated use `GetDeploymentRoutesHas$Outbound` instead. */
    type Outbound = GetDeploymentRoutesHas$Outbound;
}
export declare function getDeploymentRoutesHasToJSON(getDeploymentRoutesHas: GetDeploymentRoutesHas): string;
export declare function getDeploymentRoutesHasFromJSON(jsonString: string): SafeParseResult<GetDeploymentRoutesHas, SDKValidationError>;
/** @internal */
export declare const GetDeploymentMissingType$inboundSchema: z.ZodNativeEnum<typeof GetDeploymentMissingType>;
/** @internal */
export declare const GetDeploymentMissingType$outboundSchema: z.ZodNativeEnum<typeof GetDeploymentMissingType>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetDeploymentMissingType$ {
    /** @deprecated use `GetDeploymentMissingType$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Header: "header";
        readonly Cookie: "cookie";
        readonly Query: "query";
    }>;
    /** @deprecated use `GetDeploymentMissingType$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Header: "header";
        readonly Cookie: "cookie";
        readonly Query: "query";
    }>;
}
/** @internal */
export declare const GetDeploymentMissing2$inboundSchema: z.ZodType<GetDeploymentMissing2, z.ZodTypeDef, unknown>;
/** @internal */
export type GetDeploymentMissing2$Outbound = {
    type: string;
    key: string;
    value?: string | undefined;
};
/** @internal */
export declare const GetDeploymentMissing2$outboundSchema: z.ZodType<GetDeploymentMissing2$Outbound, z.ZodTypeDef, GetDeploymentMissing2>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetDeploymentMissing2$ {
    /** @deprecated use `GetDeploymentMissing2$inboundSchema` instead. */
    const inboundSchema: z.ZodType<GetDeploymentMissing2, z.ZodTypeDef, unknown>;
    /** @deprecated use `GetDeploymentMissing2$outboundSchema` instead. */
    const outboundSchema: z.ZodType<GetDeploymentMissing2$Outbound, z.ZodTypeDef, GetDeploymentMissing2>;
    /** @deprecated use `GetDeploymentMissing2$Outbound` instead. */
    type Outbound = GetDeploymentMissing2$Outbound;
}
export declare function getDeploymentMissing2ToJSON(getDeploymentMissing2: GetDeploymentMissing2): string;
export declare function getDeploymentMissing2FromJSON(jsonString: string): SafeParseResult<GetDeploymentMissing2, SDKValidationError>;
/** @internal */
export declare const GetDeploymentMissingDeploymentsType$inboundSchema: z.ZodNativeEnum<typeof GetDeploymentMissingDeploymentsType>;
/** @internal */
export declare const GetDeploymentMissingDeploymentsType$outboundSchema: z.ZodNativeEnum<typeof GetDeploymentMissingDeploymentsType>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetDeploymentMissingDeploymentsType$ {
    /** @deprecated use `GetDeploymentMissingDeploymentsType$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Host: "host";
    }>;
    /** @deprecated use `GetDeploymentMissingDeploymentsType$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Host: "host";
    }>;
}
/** @internal */
export declare const GetDeploymentMissing1$inboundSchema: z.ZodType<GetDeploymentMissing1, z.ZodTypeDef, unknown>;
/** @internal */
export type GetDeploymentMissing1$Outbound = {
    type: string;
    value: string;
};
/** @internal */
export declare const GetDeploymentMissing1$outboundSchema: z.ZodType<GetDeploymentMissing1$Outbound, z.ZodTypeDef, GetDeploymentMissing1>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetDeploymentMissing1$ {
    /** @deprecated use `GetDeploymentMissing1$inboundSchema` instead. */
    const inboundSchema: z.ZodType<GetDeploymentMissing1, z.ZodTypeDef, unknown>;
    /** @deprecated use `GetDeploymentMissing1$outboundSchema` instead. */
    const outboundSchema: z.ZodType<GetDeploymentMissing1$Outbound, z.ZodTypeDef, GetDeploymentMissing1>;
    /** @deprecated use `GetDeploymentMissing1$Outbound` instead. */
    type Outbound = GetDeploymentMissing1$Outbound;
}
export declare function getDeploymentMissing1ToJSON(getDeploymentMissing1: GetDeploymentMissing1): string;
export declare function getDeploymentMissing1FromJSON(jsonString: string): SafeParseResult<GetDeploymentMissing1, SDKValidationError>;
/** @internal */
export declare const GetDeploymentRoutesMissing$inboundSchema: z.ZodType<GetDeploymentRoutesMissing, z.ZodTypeDef, unknown>;
/** @internal */
export type GetDeploymentRoutesMissing$Outbound = GetDeploymentMissing1$Outbound | GetDeploymentMissing2$Outbound;
/** @internal */
export declare const GetDeploymentRoutesMissing$outboundSchema: z.ZodType<GetDeploymentRoutesMissing$Outbound, z.ZodTypeDef, GetDeploymentRoutesMissing>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetDeploymentRoutesMissing$ {
    /** @deprecated use `GetDeploymentRoutesMissing$inboundSchema` instead. */
    const inboundSchema: z.ZodType<GetDeploymentRoutesMissing, z.ZodTypeDef, unknown>;
    /** @deprecated use `GetDeploymentRoutesMissing$outboundSchema` instead. */
    const outboundSchema: z.ZodType<GetDeploymentRoutesMissing$Outbound, z.ZodTypeDef, GetDeploymentRoutesMissing>;
    /** @deprecated use `GetDeploymentRoutesMissing$Outbound` instead. */
    type Outbound = GetDeploymentRoutesMissing$Outbound;
}
export declare function getDeploymentRoutesMissingToJSON(getDeploymentRoutesMissing: GetDeploymentRoutesMissing): string;
export declare function getDeploymentRoutesMissingFromJSON(jsonString: string): SafeParseResult<GetDeploymentRoutesMissing, SDKValidationError>;
/** @internal */
export declare const GetDeploymentRoutesLocale$inboundSchema: z.ZodType<GetDeploymentRoutesLocale, z.ZodTypeDef, unknown>;
/** @internal */
export type GetDeploymentRoutesLocale$Outbound = {
    redirect?: {
        [k: string]: string;
    } | undefined;
    cookie?: string | undefined;
};
/** @internal */
export declare const GetDeploymentRoutesLocale$outboundSchema: z.ZodType<GetDeploymentRoutesLocale$Outbound, z.ZodTypeDef, GetDeploymentRoutesLocale>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetDeploymentRoutesLocale$ {
    /** @deprecated use `GetDeploymentRoutesLocale$inboundSchema` instead. */
    const inboundSchema: z.ZodType<GetDeploymentRoutesLocale, z.ZodTypeDef, unknown>;
    /** @deprecated use `GetDeploymentRoutesLocale$outboundSchema` instead. */
    const outboundSchema: z.ZodType<GetDeploymentRoutesLocale$Outbound, z.ZodTypeDef, GetDeploymentRoutesLocale>;
    /** @deprecated use `GetDeploymentRoutesLocale$Outbound` instead. */
    type Outbound = GetDeploymentRoutesLocale$Outbound;
}
export declare function getDeploymentRoutesLocaleToJSON(getDeploymentRoutesLocale: GetDeploymentRoutesLocale): string;
export declare function getDeploymentRoutesLocaleFromJSON(jsonString: string): SafeParseResult<GetDeploymentRoutesLocale, SDKValidationError>;
/** @internal */
export declare const GetDeploymentRoutes1$inboundSchema: z.ZodType<GetDeploymentRoutes1, z.ZodTypeDef, unknown>;
/** @internal */
export type GetDeploymentRoutes1$Outbound = {
    src: string;
    dest?: string | undefined;
    headers?: {
        [k: string]: string;
    } | undefined;
    methods?: Array<string> | undefined;
    continue?: boolean | undefined;
    override?: boolean | undefined;
    caseSensitive?: boolean | undefined;
    check?: boolean | undefined;
    important?: boolean | undefined;
    status?: number | undefined;
    has?: Array<GetDeploymentHas1$Outbound | GetDeploymentHas2$Outbound> | undefined;
    missing?: Array<GetDeploymentMissing1$Outbound | GetDeploymentMissing2$Outbound> | undefined;
    locale?: GetDeploymentRoutesLocale$Outbound | undefined;
    middlewarePath?: string | undefined;
    middlewareRawSrc?: Array<string> | undefined;
    middleware?: number | undefined;
};
/** @internal */
export declare const GetDeploymentRoutes1$outboundSchema: z.ZodType<GetDeploymentRoutes1$Outbound, z.ZodTypeDef, GetDeploymentRoutes1>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetDeploymentRoutes1$ {
    /** @deprecated use `GetDeploymentRoutes1$inboundSchema` instead. */
    const inboundSchema: z.ZodType<GetDeploymentRoutes1, z.ZodTypeDef, unknown>;
    /** @deprecated use `GetDeploymentRoutes1$outboundSchema` instead. */
    const outboundSchema: z.ZodType<GetDeploymentRoutes1$Outbound, z.ZodTypeDef, GetDeploymentRoutes1>;
    /** @deprecated use `GetDeploymentRoutes1$Outbound` instead. */
    type Outbound = GetDeploymentRoutes1$Outbound;
}
export declare function getDeploymentRoutes1ToJSON(getDeploymentRoutes1: GetDeploymentRoutes1): string;
export declare function getDeploymentRoutes1FromJSON(jsonString: string): SafeParseResult<GetDeploymentRoutes1, SDKValidationError>;
/** @internal */
export declare const ResponseBodyRoutes$inboundSchema: z.ZodType<ResponseBodyRoutes, z.ZodTypeDef, unknown>;
/** @internal */
export type ResponseBodyRoutes$Outbound = GetDeploymentRoutes3$Outbound | GetDeploymentRoutes2$Outbound | GetDeploymentRoutes1$Outbound;
/** @internal */
export declare const ResponseBodyRoutes$outboundSchema: z.ZodType<ResponseBodyRoutes$Outbound, z.ZodTypeDef, ResponseBodyRoutes>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace ResponseBodyRoutes$ {
    /** @deprecated use `ResponseBodyRoutes$inboundSchema` instead. */
    const inboundSchema: z.ZodType<ResponseBodyRoutes, z.ZodTypeDef, unknown>;
    /** @deprecated use `ResponseBodyRoutes$outboundSchema` instead. */
    const outboundSchema: z.ZodType<ResponseBodyRoutes$Outbound, z.ZodTypeDef, ResponseBodyRoutes>;
    /** @deprecated use `ResponseBodyRoutes$Outbound` instead. */
    type Outbound = ResponseBodyRoutes$Outbound;
}
export declare function responseBodyRoutesToJSON(responseBodyRoutes: ResponseBodyRoutes): string;
export declare function responseBodyRoutesFromJSON(jsonString: string): SafeParseResult<ResponseBodyRoutes, SDKValidationError>;
/** @internal */
export declare const GetDeploymentGitRepoDeploymentsType$inboundSchema: z.ZodNativeEnum<typeof GetDeploymentGitRepoDeploymentsType>;
/** @internal */
export declare const GetDeploymentGitRepoDeploymentsType$outboundSchema: z.ZodNativeEnum<typeof GetDeploymentGitRepoDeploymentsType>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetDeploymentGitRepoDeploymentsType$ {
    /** @deprecated use `GetDeploymentGitRepoDeploymentsType$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Bitbucket: "bitbucket";
    }>;
    /** @deprecated use `GetDeploymentGitRepoDeploymentsType$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Bitbucket: "bitbucket";
    }>;
}
/** @internal */
export declare const GetDeploymentGitRepoOwnerType$inboundSchema: z.ZodNativeEnum<typeof GetDeploymentGitRepoOwnerType>;
/** @internal */
export declare const GetDeploymentGitRepoOwnerType$outboundSchema: z.ZodNativeEnum<typeof GetDeploymentGitRepoOwnerType>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetDeploymentGitRepoOwnerType$ {
    /** @deprecated use `GetDeploymentGitRepoOwnerType$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Team: "team";
        readonly User: "user";
    }>;
    /** @deprecated use `GetDeploymentGitRepoOwnerType$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Team: "team";
        readonly User: "user";
    }>;
}
/** @internal */
export declare const GetDeploymentGitRepo3$inboundSchema: z.ZodType<GetDeploymentGitRepo3, z.ZodTypeDef, unknown>;
/** @internal */
export type GetDeploymentGitRepo3$Outbound = {
    owner: string;
    repoUuid: string;
    slug: string;
    type: string;
    workspaceUuid: string;
    path: string;
    defaultBranch: string;
    name: string;
    private: boolean;
    ownerType: string;
};
/** @internal */
export declare const GetDeploymentGitRepo3$outboundSchema: z.ZodType<GetDeploymentGitRepo3$Outbound, z.ZodTypeDef, GetDeploymentGitRepo3>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetDeploymentGitRepo3$ {
    /** @deprecated use `GetDeploymentGitRepo3$inboundSchema` instead. */
    const inboundSchema: z.ZodType<GetDeploymentGitRepo3, z.ZodTypeDef, unknown>;
    /** @deprecated use `GetDeploymentGitRepo3$outboundSchema` instead. */
    const outboundSchema: z.ZodType<GetDeploymentGitRepo3$Outbound, z.ZodTypeDef, GetDeploymentGitRepo3>;
    /** @deprecated use `GetDeploymentGitRepo3$Outbound` instead. */
    type Outbound = GetDeploymentGitRepo3$Outbound;
}
export declare function getDeploymentGitRepo3ToJSON(getDeploymentGitRepo3: GetDeploymentGitRepo3): string;
export declare function getDeploymentGitRepo3FromJSON(jsonString: string): SafeParseResult<GetDeploymentGitRepo3, SDKValidationError>;
/** @internal */
export declare const GetDeploymentGitRepoType$inboundSchema: z.ZodNativeEnum<typeof GetDeploymentGitRepoType>;
/** @internal */
export declare const GetDeploymentGitRepoType$outboundSchema: z.ZodNativeEnum<typeof GetDeploymentGitRepoType>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetDeploymentGitRepoType$ {
    /** @deprecated use `GetDeploymentGitRepoType$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Github: "github";
    }>;
    /** @deprecated use `GetDeploymentGitRepoType$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Github: "github";
    }>;
}
/** @internal */
export declare const GetDeploymentGitRepoDeploymentsResponseOwnerType$inboundSchema: z.ZodNativeEnum<typeof GetDeploymentGitRepoDeploymentsResponseOwnerType>;
/** @internal */
export declare const GetDeploymentGitRepoDeploymentsResponseOwnerType$outboundSchema: z.ZodNativeEnum<typeof GetDeploymentGitRepoDeploymentsResponseOwnerType>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetDeploymentGitRepoDeploymentsResponseOwnerType$ {
    /** @deprecated use `GetDeploymentGitRepoDeploymentsResponseOwnerType$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Team: "team";
        readonly User: "user";
    }>;
    /** @deprecated use `GetDeploymentGitRepoDeploymentsResponseOwnerType$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Team: "team";
        readonly User: "user";
    }>;
}
/** @internal */
export declare const GetDeploymentGitRepo2$inboundSchema: z.ZodType<GetDeploymentGitRepo2, z.ZodTypeDef, unknown>;
/** @internal */
export type GetDeploymentGitRepo2$Outbound = {
    org: string;
    repo: string;
    repoId: number;
    type: string;
    repoOwnerId: number;
    path: string;
    defaultBranch: string;
    name: string;
    private: boolean;
    ownerType: string;
};
/** @internal */
export declare const GetDeploymentGitRepo2$outboundSchema: z.ZodType<GetDeploymentGitRepo2$Outbound, z.ZodTypeDef, GetDeploymentGitRepo2>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetDeploymentGitRepo2$ {
    /** @deprecated use `GetDeploymentGitRepo2$inboundSchema` instead. */
    const inboundSchema: z.ZodType<GetDeploymentGitRepo2, z.ZodTypeDef, unknown>;
    /** @deprecated use `GetDeploymentGitRepo2$outboundSchema` instead. */
    const outboundSchema: z.ZodType<GetDeploymentGitRepo2$Outbound, z.ZodTypeDef, GetDeploymentGitRepo2>;
    /** @deprecated use `GetDeploymentGitRepo2$Outbound` instead. */
    type Outbound = GetDeploymentGitRepo2$Outbound;
}
export declare function getDeploymentGitRepo2ToJSON(getDeploymentGitRepo2: GetDeploymentGitRepo2): string;
export declare function getDeploymentGitRepo2FromJSON(jsonString: string): SafeParseResult<GetDeploymentGitRepo2, SDKValidationError>;
/** @internal */
export declare const GetDeploymentGitRepoDeploymentsResponseType$inboundSchema: z.ZodNativeEnum<typeof GetDeploymentGitRepoDeploymentsResponseType>;
/** @internal */
export declare const GetDeploymentGitRepoDeploymentsResponseType$outboundSchema: z.ZodNativeEnum<typeof GetDeploymentGitRepoDeploymentsResponseType>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetDeploymentGitRepoDeploymentsResponseType$ {
    /** @deprecated use `GetDeploymentGitRepoDeploymentsResponseType$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Gitlab: "gitlab";
    }>;
    /** @deprecated use `GetDeploymentGitRepoDeploymentsResponseType$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Gitlab: "gitlab";
    }>;
}
/** @internal */
export declare const GetDeploymentGitRepoDeploymentsOwnerType$inboundSchema: z.ZodNativeEnum<typeof GetDeploymentGitRepoDeploymentsOwnerType>;
/** @internal */
export declare const GetDeploymentGitRepoDeploymentsOwnerType$outboundSchema: z.ZodNativeEnum<typeof GetDeploymentGitRepoDeploymentsOwnerType>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetDeploymentGitRepoDeploymentsOwnerType$ {
    /** @deprecated use `GetDeploymentGitRepoDeploymentsOwnerType$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Team: "team";
        readonly User: "user";
    }>;
    /** @deprecated use `GetDeploymentGitRepoDeploymentsOwnerType$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Team: "team";
        readonly User: "user";
    }>;
}
/** @internal */
export declare const GetDeploymentGitRepo1$inboundSchema: z.ZodType<GetDeploymentGitRepo1, z.ZodTypeDef, unknown>;
/** @internal */
export type GetDeploymentGitRepo1$Outbound = {
    namespace: string;
    projectId: number;
    type: string;
    url: string;
    path: string;
    defaultBranch: string;
    name: string;
    private: boolean;
    ownerType: string;
};
/** @internal */
export declare const GetDeploymentGitRepo1$outboundSchema: z.ZodType<GetDeploymentGitRepo1$Outbound, z.ZodTypeDef, GetDeploymentGitRepo1>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetDeploymentGitRepo1$ {
    /** @deprecated use `GetDeploymentGitRepo1$inboundSchema` instead. */
    const inboundSchema: z.ZodType<GetDeploymentGitRepo1, z.ZodTypeDef, unknown>;
    /** @deprecated use `GetDeploymentGitRepo1$outboundSchema` instead. */
    const outboundSchema: z.ZodType<GetDeploymentGitRepo1$Outbound, z.ZodTypeDef, GetDeploymentGitRepo1>;
    /** @deprecated use `GetDeploymentGitRepo1$Outbound` instead. */
    type Outbound = GetDeploymentGitRepo1$Outbound;
}
export declare function getDeploymentGitRepo1ToJSON(getDeploymentGitRepo1: GetDeploymentGitRepo1): string;
export declare function getDeploymentGitRepo1FromJSON(jsonString: string): SafeParseResult<GetDeploymentGitRepo1, SDKValidationError>;
/** @internal */
export declare const ResponseBodyGitRepo$inboundSchema: z.ZodType<ResponseBodyGitRepo, z.ZodTypeDef, unknown>;
/** @internal */
export type ResponseBodyGitRepo$Outbound = GetDeploymentGitRepo1$Outbound | GetDeploymentGitRepo2$Outbound | GetDeploymentGitRepo3$Outbound;
/** @internal */
export declare const ResponseBodyGitRepo$outboundSchema: z.ZodType<ResponseBodyGitRepo$Outbound, z.ZodTypeDef, ResponseBodyGitRepo>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace ResponseBodyGitRepo$ {
    /** @deprecated use `ResponseBodyGitRepo$inboundSchema` instead. */
    const inboundSchema: z.ZodType<ResponseBodyGitRepo, z.ZodTypeDef, unknown>;
    /** @deprecated use `ResponseBodyGitRepo$outboundSchema` instead. */
    const outboundSchema: z.ZodType<ResponseBodyGitRepo$Outbound, z.ZodTypeDef, ResponseBodyGitRepo>;
    /** @deprecated use `ResponseBodyGitRepo$Outbound` instead. */
    type Outbound = ResponseBodyGitRepo$Outbound;
}
export declare function responseBodyGitRepoToJSON(responseBodyGitRepo: ResponseBodyGitRepo): string;
export declare function responseBodyGitRepoFromJSON(jsonString: string): SafeParseResult<ResponseBodyGitRepo, SDKValidationError>;
/** @internal */
export declare const GetDeploymentFlags2$inboundSchema: z.ZodType<GetDeploymentFlags2, z.ZodTypeDef, unknown>;
/** @internal */
export type GetDeploymentFlags2$Outbound = {};
/** @internal */
export declare const GetDeploymentFlags2$outboundSchema: z.ZodType<GetDeploymentFlags2$Outbound, z.ZodTypeDef, GetDeploymentFlags2>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetDeploymentFlags2$ {
    /** @deprecated use `GetDeploymentFlags2$inboundSchema` instead. */
    const inboundSchema: z.ZodType<GetDeploymentFlags2, z.ZodTypeDef, unknown>;
    /** @deprecated use `GetDeploymentFlags2$outboundSchema` instead. */
    const outboundSchema: z.ZodType<GetDeploymentFlags2$Outbound, z.ZodTypeDef, GetDeploymentFlags2>;
    /** @deprecated use `GetDeploymentFlags2$Outbound` instead. */
    type Outbound = GetDeploymentFlags2$Outbound;
}
export declare function getDeploymentFlags2ToJSON(getDeploymentFlags2: GetDeploymentFlags2): string;
export declare function getDeploymentFlags2FromJSON(jsonString: string): SafeParseResult<GetDeploymentFlags2, SDKValidationError>;
/** @internal */
export declare const GetDeploymentFlagsOptions$inboundSchema: z.ZodType<GetDeploymentFlagsOptions, z.ZodTypeDef, unknown>;
/** @internal */
export type GetDeploymentFlagsOptions$Outbound = {
    value: FlagJSONValue$Outbound | null;
    label?: string | undefined;
};
/** @internal */
export declare const GetDeploymentFlagsOptions$outboundSchema: z.ZodType<GetDeploymentFlagsOptions$Outbound, z.ZodTypeDef, GetDeploymentFlagsOptions>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetDeploymentFlagsOptions$ {
    /** @deprecated use `GetDeploymentFlagsOptions$inboundSchema` instead. */
    const inboundSchema: z.ZodType<GetDeploymentFlagsOptions, z.ZodTypeDef, unknown>;
    /** @deprecated use `GetDeploymentFlagsOptions$outboundSchema` instead. */
    const outboundSchema: z.ZodType<GetDeploymentFlagsOptions$Outbound, z.ZodTypeDef, GetDeploymentFlagsOptions>;
    /** @deprecated use `GetDeploymentFlagsOptions$Outbound` instead. */
    type Outbound = GetDeploymentFlagsOptions$Outbound;
}
export declare function getDeploymentFlagsOptionsToJSON(getDeploymentFlagsOptions: GetDeploymentFlagsOptions): string;
export declare function getDeploymentFlagsOptionsFromJSON(jsonString: string): SafeParseResult<GetDeploymentFlagsOptions, SDKValidationError>;
/** @internal */
export declare const GetDeploymentFlagsDefinitions$inboundSchema: z.ZodType<GetDeploymentFlagsDefinitions, z.ZodTypeDef, unknown>;
/** @internal */
export type GetDeploymentFlagsDefinitions$Outbound = {
    options?: Array<GetDeploymentFlagsOptions$Outbound> | undefined;
    url?: string | undefined;
    description?: string | undefined;
};
/** @internal */
export declare const GetDeploymentFlagsDefinitions$outboundSchema: z.ZodType<GetDeploymentFlagsDefinitions$Outbound, z.ZodTypeDef, GetDeploymentFlagsDefinitions>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetDeploymentFlagsDefinitions$ {
    /** @deprecated use `GetDeploymentFlagsDefinitions$inboundSchema` instead. */
    const inboundSchema: z.ZodType<GetDeploymentFlagsDefinitions, z.ZodTypeDef, unknown>;
    /** @deprecated use `GetDeploymentFlagsDefinitions$outboundSchema` instead. */
    const outboundSchema: z.ZodType<GetDeploymentFlagsDefinitions$Outbound, z.ZodTypeDef, GetDeploymentFlagsDefinitions>;
    /** @deprecated use `GetDeploymentFlagsDefinitions$Outbound` instead. */
    type Outbound = GetDeploymentFlagsDefinitions$Outbound;
}
export declare function getDeploymentFlagsDefinitionsToJSON(getDeploymentFlagsDefinitions: GetDeploymentFlagsDefinitions): string;
export declare function getDeploymentFlagsDefinitionsFromJSON(jsonString: string): SafeParseResult<GetDeploymentFlagsDefinitions, SDKValidationError>;
/** @internal */
export declare const GetDeploymentFlags1$inboundSchema: z.ZodType<GetDeploymentFlags1, z.ZodTypeDef, unknown>;
/** @internal */
export type GetDeploymentFlags1$Outbound = {
    definitions: {
        [k: string]: GetDeploymentFlagsDefinitions$Outbound;
    };
};
/** @internal */
export declare const GetDeploymentFlags1$outboundSchema: z.ZodType<GetDeploymentFlags1$Outbound, z.ZodTypeDef, GetDeploymentFlags1>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetDeploymentFlags1$ {
    /** @deprecated use `GetDeploymentFlags1$inboundSchema` instead. */
    const inboundSchema: z.ZodType<GetDeploymentFlags1, z.ZodTypeDef, unknown>;
    /** @deprecated use `GetDeploymentFlags1$outboundSchema` instead. */
    const outboundSchema: z.ZodType<GetDeploymentFlags1$Outbound, z.ZodTypeDef, GetDeploymentFlags1>;
    /** @deprecated use `GetDeploymentFlags1$Outbound` instead. */
    type Outbound = GetDeploymentFlags1$Outbound;
}
export declare function getDeploymentFlags1ToJSON(getDeploymentFlags1: GetDeploymentFlags1): string;
export declare function getDeploymentFlags1FromJSON(jsonString: string): SafeParseResult<GetDeploymentFlags1, SDKValidationError>;
/** @internal */
export declare const ResponseBodyFlags$inboundSchema: z.ZodType<ResponseBodyFlags, z.ZodTypeDef, unknown>;
/** @internal */
export type ResponseBodyFlags$Outbound = GetDeploymentFlags1$Outbound | Array<GetDeploymentFlags2$Outbound>;
/** @internal */
export declare const ResponseBodyFlags$outboundSchema: z.ZodType<ResponseBodyFlags$Outbound, z.ZodTypeDef, ResponseBodyFlags>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace ResponseBodyFlags$ {
    /** @deprecated use `ResponseBodyFlags$inboundSchema` instead. */
    const inboundSchema: z.ZodType<ResponseBodyFlags, z.ZodTypeDef, unknown>;
    /** @deprecated use `ResponseBodyFlags$outboundSchema` instead. */
    const outboundSchema: z.ZodType<ResponseBodyFlags$Outbound, z.ZodTypeDef, ResponseBodyFlags>;
    /** @deprecated use `ResponseBodyFlags$Outbound` instead. */
    type Outbound = ResponseBodyFlags$Outbound;
}
export declare function responseBodyFlagsToJSON(responseBodyFlags: ResponseBodyFlags): string;
export declare function responseBodyFlagsFromJSON(jsonString: string): SafeParseResult<ResponseBodyFlags, SDKValidationError>;
/** @internal */
export declare const GetDeploymentMicrofrontendsApplications$inboundSchema: z.ZodType<GetDeploymentMicrofrontendsApplications, z.ZodTypeDef, unknown>;
/** @internal */
export type GetDeploymentMicrofrontendsApplications$Outbound = {
    productionHost: string;
    deploymentAlias?: string | undefined;
    deploymentHost?: string | undefined;
};
/** @internal */
export declare const GetDeploymentMicrofrontendsApplications$outboundSchema: z.ZodType<GetDeploymentMicrofrontendsApplications$Outbound, z.ZodTypeDef, GetDeploymentMicrofrontendsApplications>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetDeploymentMicrofrontendsApplications$ {
    /** @deprecated use `GetDeploymentMicrofrontendsApplications$inboundSchema` instead. */
    const inboundSchema: z.ZodType<GetDeploymentMicrofrontendsApplications, z.ZodTypeDef, unknown>;
    /** @deprecated use `GetDeploymentMicrofrontendsApplications$outboundSchema` instead. */
    const outboundSchema: z.ZodType<GetDeploymentMicrofrontendsApplications$Outbound, z.ZodTypeDef, GetDeploymentMicrofrontendsApplications>;
    /** @deprecated use `GetDeploymentMicrofrontendsApplications$Outbound` instead. */
    type Outbound = GetDeploymentMicrofrontendsApplications$Outbound;
}
export declare function getDeploymentMicrofrontendsApplicationsToJSON(getDeploymentMicrofrontendsApplications: GetDeploymentMicrofrontendsApplications): string;
export declare function getDeploymentMicrofrontendsApplicationsFromJSON(jsonString: string): SafeParseResult<GetDeploymentMicrofrontendsApplications, SDKValidationError>;
/** @internal */
export declare const GetDeploymentMicrofrontends2$inboundSchema: z.ZodType<GetDeploymentMicrofrontends2, z.ZodTypeDef, unknown>;
/** @internal */
export type GetDeploymentMicrofrontends2$Outbound = {
    applications?: {
        [k: string]: GetDeploymentMicrofrontendsApplications$Outbound;
    } | undefined;
    isDefaultApp: boolean;
    defaultAppProjectName: string;
    defaultRoute?: string | undefined;
    groupIds: Array<string>;
};
/** @internal */
export declare const GetDeploymentMicrofrontends2$outboundSchema: z.ZodType<GetDeploymentMicrofrontends2$Outbound, z.ZodTypeDef, GetDeploymentMicrofrontends2>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetDeploymentMicrofrontends2$ {
    /** @deprecated use `GetDeploymentMicrofrontends2$inboundSchema` instead. */
    const inboundSchema: z.ZodType<GetDeploymentMicrofrontends2, z.ZodTypeDef, unknown>;
    /** @deprecated use `GetDeploymentMicrofrontends2$outboundSchema` instead. */
    const outboundSchema: z.ZodType<GetDeploymentMicrofrontends2$Outbound, z.ZodTypeDef, GetDeploymentMicrofrontends2>;
    /** @deprecated use `GetDeploymentMicrofrontends2$Outbound` instead. */
    type Outbound = GetDeploymentMicrofrontends2$Outbound;
}
export declare function getDeploymentMicrofrontends2ToJSON(getDeploymentMicrofrontends2: GetDeploymentMicrofrontends2): string;
export declare function getDeploymentMicrofrontends2FromJSON(jsonString: string): SafeParseResult<GetDeploymentMicrofrontends2, SDKValidationError>;
/** @internal */
export declare const GetDeploymentMicrofrontends1$inboundSchema: z.ZodType<GetDeploymentMicrofrontends1, z.ZodTypeDef, unknown>;
/** @internal */
export type GetDeploymentMicrofrontends1$Outbound = {
    isDefaultApp?: boolean | undefined;
    defaultAppProjectName: string;
    defaultRoute?: string | undefined;
    groupIds: Array<string>;
};
/** @internal */
export declare const GetDeploymentMicrofrontends1$outboundSchema: z.ZodType<GetDeploymentMicrofrontends1$Outbound, z.ZodTypeDef, GetDeploymentMicrofrontends1>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetDeploymentMicrofrontends1$ {
    /** @deprecated use `GetDeploymentMicrofrontends1$inboundSchema` instead. */
    const inboundSchema: z.ZodType<GetDeploymentMicrofrontends1, z.ZodTypeDef, unknown>;
    /** @deprecated use `GetDeploymentMicrofrontends1$outboundSchema` instead. */
    const outboundSchema: z.ZodType<GetDeploymentMicrofrontends1$Outbound, z.ZodTypeDef, GetDeploymentMicrofrontends1>;
    /** @deprecated use `GetDeploymentMicrofrontends1$Outbound` instead. */
    type Outbound = GetDeploymentMicrofrontends1$Outbound;
}
export declare function getDeploymentMicrofrontends1ToJSON(getDeploymentMicrofrontends1: GetDeploymentMicrofrontends1): string;
export declare function getDeploymentMicrofrontends1FromJSON(jsonString: string): SafeParseResult<GetDeploymentMicrofrontends1, SDKValidationError>;
/** @internal */
export declare const ResponseBodyMicrofrontends$inboundSchema: z.ZodType<ResponseBodyMicrofrontends, z.ZodTypeDef, unknown>;
/** @internal */
export type ResponseBodyMicrofrontends$Outbound = GetDeploymentMicrofrontends1$Outbound | GetDeploymentMicrofrontends2$Outbound;
/** @internal */
export declare const ResponseBodyMicrofrontends$outboundSchema: z.ZodType<ResponseBodyMicrofrontends$Outbound, z.ZodTypeDef, ResponseBodyMicrofrontends>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace ResponseBodyMicrofrontends$ {
    /** @deprecated use `ResponseBodyMicrofrontends$inboundSchema` instead. */
    const inboundSchema: z.ZodType<ResponseBodyMicrofrontends, z.ZodTypeDef, unknown>;
    /** @deprecated use `ResponseBodyMicrofrontends$outboundSchema` instead. */
    const outboundSchema: z.ZodType<ResponseBodyMicrofrontends$Outbound, z.ZodTypeDef, ResponseBodyMicrofrontends>;
    /** @deprecated use `ResponseBodyMicrofrontends$Outbound` instead. */
    type Outbound = ResponseBodyMicrofrontends$Outbound;
}
export declare function responseBodyMicrofrontendsToJSON(responseBodyMicrofrontends: ResponseBodyMicrofrontends): string;
export declare function responseBodyMicrofrontendsFromJSON(jsonString: string): SafeParseResult<ResponseBodyMicrofrontends, SDKValidationError>;
/** @internal */
export declare const ResponseBodyFunctionType$inboundSchema: z.ZodNativeEnum<typeof ResponseBodyFunctionType>;
/** @internal */
export declare const ResponseBodyFunctionType$outboundSchema: z.ZodNativeEnum<typeof ResponseBodyFunctionType>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace ResponseBodyFunctionType$ {
    /** @deprecated use `ResponseBodyFunctionType$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Fluid: "fluid";
        readonly Standard: "standard";
    }>;
    /** @deprecated use `ResponseBodyFunctionType$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Fluid: "fluid";
        readonly Standard: "standard";
    }>;
}
/** @internal */
export declare const ResponseBodyFunctionMemoryType$inboundSchema: z.ZodNativeEnum<typeof ResponseBodyFunctionMemoryType>;
/** @internal */
export declare const ResponseBodyFunctionMemoryType$outboundSchema: z.ZodNativeEnum<typeof ResponseBodyFunctionMemoryType>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace ResponseBodyFunctionMemoryType$ {
    /** @deprecated use `ResponseBodyFunctionMemoryType$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Standard: "standard";
        readonly StandardLegacy: "standard_legacy";
        readonly Performance: "performance";
    }>;
    /** @deprecated use `ResponseBodyFunctionMemoryType$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Standard: "standard";
        readonly StandardLegacy: "standard_legacy";
        readonly Performance: "performance";
    }>;
}
/** @internal */
export declare const ResponseBodyConfig$inboundSchema: z.ZodType<ResponseBodyConfig, z.ZodTypeDef, unknown>;
/** @internal */
export type ResponseBodyConfig$Outbound = {
    version?: number | undefined;
    functionType: string;
    functionMemoryType: string;
    functionTimeout: number | null;
    secureComputePrimaryRegion: string | null;
    secureComputeFallbackRegion: string | null;
};
/** @internal */
export declare const ResponseBodyConfig$outboundSchema: z.ZodType<ResponseBodyConfig$Outbound, z.ZodTypeDef, ResponseBodyConfig>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace ResponseBodyConfig$ {
    /** @deprecated use `ResponseBodyConfig$inboundSchema` instead. */
    const inboundSchema: z.ZodType<ResponseBodyConfig, z.ZodTypeDef, unknown>;
    /** @deprecated use `ResponseBodyConfig$outboundSchema` instead. */
    const outboundSchema: z.ZodType<ResponseBodyConfig$Outbound, z.ZodTypeDef, ResponseBodyConfig>;
    /** @deprecated use `ResponseBodyConfig$Outbound` instead. */
    type Outbound = ResponseBodyConfig$Outbound;
}
export declare function responseBodyConfigToJSON(responseBodyConfig: ResponseBodyConfig): string;
export declare function responseBodyConfigFromJSON(jsonString: string): SafeParseResult<ResponseBodyConfig, SDKValidationError>;
/** @internal */
export declare const GetDeploymentResponseBody1$inboundSchema: z.ZodType<GetDeploymentResponseBody1, z.ZodTypeDef, unknown>;
/** @internal */
export type GetDeploymentResponseBody1$Outbound = {
    aliasAssignedAt?: number | boolean | null | undefined;
    alwaysRefuseToBuild?: boolean | undefined;
    build: ResponseBodyBuild$Outbound;
    buildArtifactUrls?: Array<string> | undefined;
    builds?: Array<ResponseBodyBuilds$Outbound> | undefined;
    env: Array<string>;
    inspectorUrl: string | null;
    isInConcurrentBuildsQueue: boolean;
    isInSystemBuildsQueue: boolean;
    projectSettings: ResponseBodyProjectSettings$Outbound;
    readyStateReason?: string | undefined;
    integrations?: ResponseBodyIntegrations$Outbound | undefined;
    images?: ResponseBodyImages$Outbound | undefined;
    alias?: Array<string> | undefined;
    aliasAssigned: boolean;
    bootedAt: number;
    buildingAt: number;
    buildContainerFinishedAt?: number | undefined;
    buildSkipped: boolean;
    creator: ResponseBodyCreator$Outbound;
    initReadyAt?: number | undefined;
    isFirstBranchDeployment?: boolean | undefined;
    lambdas?: Array<GetDeploymentResponseBodyLambdas$Outbound> | undefined;
    public: boolean;
    ready?: number | undefined;
    status: string;
    team?: GetDeploymentResponseBodyTeam$Outbound | undefined;
    userAliases?: Array<string> | undefined;
    previewCommentsEnabled?: boolean | undefined;
    ttyBuildLogs?: boolean | undefined;
    customEnvironment?: GetDeploymentCustomEnvironmentDeployments2$Outbound | GetDeploymentCustomEnvironmentDeployments1$Outbound | undefined;
    aliasWarning?: GetDeploymentResponseBodyAliasWarning$Outbound | null | undefined;
    id: string;
    name: string;
    type: string;
    createdAt: number;
    readyState: string;
    aliasError?: ResponseBodyAliasError$Outbound | null | undefined;
    aliasFinal?: string | null | undefined;
    autoAssignCustomDomains?: boolean | undefined;
    automaticAliases?: Array<string> | undefined;
    buildErrorAt?: number | undefined;
    checksState?: string | undefined;
    checksConclusion?: string | undefined;
    deletedAt?: number | null | undefined;
    defaultRoute?: string | undefined;
    canceledAt?: number | undefined;
    errorCode?: string | undefined;
    errorLink?: string | undefined;
    errorMessage?: string | null | undefined;
    errorStep?: string | undefined;
    passiveRegions?: Array<string> | undefined;
    gitSource?: GetDeploymentGitSourceDeployments8$Outbound | GetDeploymentGitSourceDeployments11$Outbound | GetDeploymentGitSourceDeployments1$Outbound | GetDeploymentGitSourceDeployments5$Outbound | GetDeploymentGitSourceDeployments2$Outbound | GetDeploymentGitSourceDeployments3$Outbound | GetDeploymentGitSourceDeployments6$Outbound | GetDeploymentGitSourceDeployments7$Outbound | GetDeploymentGitSourceDeployments9$Outbound | GetDeploymentGitSourceDeployments4$Outbound | GetDeploymentGitSourceDeployments10$Outbound | GetDeploymentGitSourceDeployments12$Outbound | undefined;
    meta: {
        [k: string]: string;
    };
    originCacheRegion?: string | undefined;
    project?: ResponseBodyProject$Outbound | undefined;
    readySubstate?: string | undefined;
    regions: Array<string>;
    softDeletedByRetention?: boolean | undefined;
    source?: string | undefined;
    target?: string | null | undefined;
    undeletedAt?: number | undefined;
    url: string;
    version: number;
    oidcTokenClaims?: ResponseBodyOidcTokenClaims$Outbound | undefined;
    projectId: string;
    plan: string;
    connectBuildsEnabled?: boolean | undefined;
    connectConfigurationId?: string | undefined;
    createdIn: string;
    crons?: Array<ResponseBodyCrons$Outbound> | undefined;
    functions?: {
        [k: string]: ResponseBodyFunctions$Outbound;
    } | null | undefined;
    monorepoManager?: string | null | undefined;
    ownerId: string;
    passiveConnectConfigurationId?: string | undefined;
    routes: Array<GetDeploymentRoutes3$Outbound | GetDeploymentRoutes2$Outbound | GetDeploymentRoutes1$Outbound> | null;
    gitRepo?: GetDeploymentGitRepo1$Outbound | GetDeploymentGitRepo2$Outbound | GetDeploymentGitRepo3$Outbound | null | undefined;
    flags?: GetDeploymentFlags1$Outbound | Array<GetDeploymentFlags2$Outbound> | undefined;
    microfrontends?: GetDeploymentMicrofrontends1$Outbound | GetDeploymentMicrofrontends2$Outbound | undefined;
    config?: ResponseBodyConfig$Outbound | undefined;
};
/** @internal */
export declare const GetDeploymentResponseBody1$outboundSchema: z.ZodType<GetDeploymentResponseBody1$Outbound, z.ZodTypeDef, GetDeploymentResponseBody1>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetDeploymentResponseBody1$ {
    /** @deprecated use `GetDeploymentResponseBody1$inboundSchema` instead. */
    const inboundSchema: z.ZodType<GetDeploymentResponseBody1, z.ZodTypeDef, unknown>;
    /** @deprecated use `GetDeploymentResponseBody1$outboundSchema` instead. */
    const outboundSchema: z.ZodType<GetDeploymentResponseBody1$Outbound, z.ZodTypeDef, GetDeploymentResponseBody1>;
    /** @deprecated use `GetDeploymentResponseBody1$Outbound` instead. */
    type Outbound = GetDeploymentResponseBody1$Outbound;
}
export declare function getDeploymentResponseBody1ToJSON(getDeploymentResponseBody1: GetDeploymentResponseBody1): string;
export declare function getDeploymentResponseBody1FromJSON(jsonString: string): SafeParseResult<GetDeploymentResponseBody1, SDKValidationError>;
/** @internal */
export declare const GetDeploymentResponseBody$inboundSchema: z.ZodType<GetDeploymentResponseBody, z.ZodTypeDef, unknown>;
/** @internal */
export type GetDeploymentResponseBody$Outbound = GetDeploymentResponseBody2$Outbound | GetDeploymentResponseBody1$Outbound;
/** @internal */
export declare const GetDeploymentResponseBody$outboundSchema: z.ZodType<GetDeploymentResponseBody$Outbound, z.ZodTypeDef, GetDeploymentResponseBody>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetDeploymentResponseBody$ {
    /** @deprecated use `GetDeploymentResponseBody$inboundSchema` instead. */
    const inboundSchema: z.ZodType<GetDeploymentResponseBody, z.ZodTypeDef, unknown>;
    /** @deprecated use `GetDeploymentResponseBody$outboundSchema` instead. */
    const outboundSchema: z.ZodType<GetDeploymentResponseBody$Outbound, z.ZodTypeDef, GetDeploymentResponseBody>;
    /** @deprecated use `GetDeploymentResponseBody$Outbound` instead. */
    type Outbound = GetDeploymentResponseBody$Outbound;
}
export declare function getDeploymentResponseBodyToJSON(getDeploymentResponseBody: GetDeploymentResponseBody): string;
export declare function getDeploymentResponseBodyFromJSON(jsonString: string): SafeParseResult<GetDeploymentResponseBody, SDKValidationError>;
//# sourceMappingURL=getdeploymentop.d.ts.map