/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { FlagJSONValue$inboundSchema, FlagJSONValue$outboundSchema, } from "./flagjsonvalue.js";
export const CancelDeploymentFramework = {
    Blitzjs: "blitzjs",
    Nextjs: "nextjs",
    Gatsby: "gatsby",
    Remix: "remix",
    ReactRouter: "react-router",
    Astro: "astro",
    Hexo: "hexo",
    Eleventy: "eleventy",
    Docusaurus2: "docusaurus-2",
    Docusaurus: "docusaurus",
    Preact: "preact",
    Solidstart1: "solidstart-1",
    Solidstart: "solidstart",
    Dojo: "dojo",
    Ember: "ember",
    Vue: "vue",
    Scully: "scully",
    IonicAngular: "ionic-angular",
    Angular: "angular",
    Polymer: "polymer",
    Svelte: "svelte",
    Sveltekit: "sveltekit",
    Sveltekit1: "sveltekit-1",
    IonicReact: "ionic-react",
    CreateReactApp: "create-react-app",
    Gridsome: "gridsome",
    Umijs: "umijs",
    Sapper: "sapper",
    Saber: "saber",
    Stencil: "stencil",
    Nuxtjs: "nuxtjs",
    Redwoodjs: "redwoodjs",
    Hugo: "hugo",
    Jekyll: "jekyll",
    Brunch: "brunch",
    Middleman: "middleman",
    Zola: "zola",
    Hydrogen: "hydrogen",
    Vite: "vite",
    Vitepress: "vitepress",
    Vuepress: "vuepress",
    Parcel: "parcel",
    Fasthtml: "fasthtml",
    SanityV3: "sanity-v3",
    Sanity: "sanity",
    Storybook: "storybook",
};
export const CancelDeploymentDeploymentsStatus = {
    Error: "error",
    Skipped: "skipped",
    Pending: "pending",
    Ready: "ready",
    Timeout: "timeout",
};
/**
 * Must be `http` or `https`.
 */
export const CancelDeploymentProtocol = {
    Http: "http",
    Https: "https",
};
export const CancelDeploymentFormats = {
    ImageAvif: "image/avif",
    ImageWebp: "image/webp",
};
export const CancelDeploymentContentDispositionType = {
    Inline: "inline",
    Attachment: "attachment",
};
export const CancelDeploymentDeploymentsReadyState = {
    Building: "BUILDING",
    Error: "ERROR",
    Initializing: "INITIALIZING",
    Ready: "READY",
};
export const CancelDeploymentStatus = {
    Building: "BUILDING",
    Error: "ERROR",
    Initializing: "INITIALIZING",
    Queued: "QUEUED",
    Ready: "READY",
    Canceled: "CANCELED",
};
/**
 * The type of environment (production, preview, or development)
 */
export const CancelDeploymentCustomEnvironmentType = {
    Production: "production",
    Preview: "preview",
    Development: "development",
};
/**
 * The type of matching to perform
 */
export const CancelDeploymentCustomEnvironmentDeploymentsType = {
    StartsWith: "startsWith",
    Equals: "equals",
    EndsWith: "endsWith",
};
export const CancelDeploymentChecksState = {
    Registered: "registered",
    Running: "running",
    Completed: "completed",
};
export const CancelDeploymentChecksConclusion = {
    Skipped: "skipped",
    Succeeded: "succeeded",
    Failed: "failed",
    Canceled: "canceled",
};
export const CancelDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody12Type = {
    Bitbucket: "bitbucket",
};
export const CancelDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody11Type = {
    Gitlab: "gitlab",
};
export const CancelDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody10Type = {
    GithubCustomHost: "github-custom-host",
};
export const CancelDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody9Type = {
    Github: "github",
};
export const CancelDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody8Type = {
    Custom: "custom",
};
export const CancelDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody7Type = {
    Bitbucket: "bitbucket",
};
export const CancelDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBodyType = {
    Bitbucket: "bitbucket",
};
export const CancelDeploymentGitSourceDeploymentsResponse200ApplicationJSONType = {
    Gitlab: "gitlab",
};
export const CancelDeploymentGitSourceDeploymentsResponse200Type = {
    GithubCustomHost: "github-custom-host",
};
export const CancelDeploymentGitSourceDeploymentsResponseType = {
    GithubCustomHost: "github-custom-host",
};
export const CancelDeploymentGitSourceDeploymentsType = {
    Github: "github",
};
export const CancelDeploymentGitSourceType = {
    Github: "github",
};
export const CancelDeploymentReadyState = {
    Building: "BUILDING",
    Error: "ERROR",
    Initializing: "INITIALIZING",
    Queued: "QUEUED",
    Ready: "READY",
    Canceled: "CANCELED",
};
/**
 * Substate of deployment when readyState is 'READY' Tracks whether or not deployment has seen production traffic: - STAGED: never seen production traffic - ROLLING: in the process of having production traffic gradually transitioned. - PROMOTED: has seen production traffic
 */
export const CancelDeploymentReadySubstate = {
    Staged: "STAGED",
    Rolling: "ROLLING",
    Promoted: "PROMOTED",
};
export const CancelDeploymentSource = {
    ApiTriggerGitDeploy: "api-trigger-git-deploy",
    Cli: "cli",
    CloneRepo: "clone/repo",
    Git: "git",
    Import: "import",
    ImportRepo: "import/repo",
    Redeploy: "redeploy",
    V0Web: "v0-web",
};
export const CancelDeploymentTarget = {
    Staging: "staging",
    Production: "production",
};
export const CancelDeploymentType = {
    Lambdas: "LAMBDAS",
};
export const CancelDeploymentPlan = {
    Pro: "pro",
    Enterprise: "enterprise",
    Hobby: "hobby",
};
export const CancelDeploymentRoutesHandle = {
    Error: "error",
    Filesystem: "filesystem",
    Hit: "hit",
    Miss: "miss",
    Rewrite: "rewrite",
    Resource: "resource",
};
export const CancelDeploymentHasDeploymentsType = {
    Header: "header",
    Cookie: "cookie",
    Query: "query",
};
export const CancelDeploymentHasType = {
    Host: "host",
};
export const CancelDeploymentMissingDeploymentsType = {
    Header: "header",
    Cookie: "cookie",
    Query: "query",
};
export const CancelDeploymentMissingType = {
    Host: "host",
};
export const CancelDeploymentGitRepoDeploymentsResponseType = {
    Bitbucket: "bitbucket",
};
export const CancelDeploymentGitRepoDeploymentsResponseOwnerType = {
    Team: "team",
    User: "user",
};
export const CancelDeploymentGitRepoDeploymentsType = {
    Github: "github",
};
export const CancelDeploymentGitRepoDeploymentsOwnerType = {
    Team: "team",
    User: "user",
};
export const CancelDeploymentGitRepoType = {
    Gitlab: "gitlab",
};
export const CancelDeploymentGitRepoOwnerType = {
    Team: "team",
    User: "user",
};
export const CancelDeploymentFunctionType = {
    Fluid: "fluid",
    Standard: "standard",
};
export const CancelDeploymentFunctionMemoryType = {
    Standard: "standard",
    StandardLegacy: "standard_legacy",
    Performance: "performance",
};
/** @internal */
export const CancelDeploymentRequest$inboundSchema = z.object({
    id: z.string(),
    teamId: z.string().optional(),
    slug: z.string().optional(),
});
/** @internal */
export const CancelDeploymentRequest$outboundSchema = z.object({
    id: z.string(),
    teamId: z.string().optional(),
    slug: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CancelDeploymentRequest$;
(function (CancelDeploymentRequest$) {
    /** @deprecated use `CancelDeploymentRequest$inboundSchema` instead. */
    CancelDeploymentRequest$.inboundSchema = CancelDeploymentRequest$inboundSchema;
    /** @deprecated use `CancelDeploymentRequest$outboundSchema` instead. */
    CancelDeploymentRequest$.outboundSchema = CancelDeploymentRequest$outboundSchema;
})(CancelDeploymentRequest$ || (CancelDeploymentRequest$ = {}));
export function cancelDeploymentRequestToJSON(cancelDeploymentRequest) {
    return JSON.stringify(CancelDeploymentRequest$outboundSchema.parse(cancelDeploymentRequest));
}
export function cancelDeploymentRequestFromJSON(jsonString) {
    return safeParse(jsonString, (x) => CancelDeploymentRequest$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CancelDeploymentRequest' from JSON`);
}
/** @internal */
export const CancelDeploymentAliasAssignedAt$inboundSchema = z.union([z.number(), z.boolean()]);
/** @internal */
export const CancelDeploymentAliasAssignedAt$outboundSchema = z.union([z.number(), z.boolean()]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CancelDeploymentAliasAssignedAt$;
(function (CancelDeploymentAliasAssignedAt$) {
    /** @deprecated use `CancelDeploymentAliasAssignedAt$inboundSchema` instead. */
    CancelDeploymentAliasAssignedAt$.inboundSchema = CancelDeploymentAliasAssignedAt$inboundSchema;
    /** @deprecated use `CancelDeploymentAliasAssignedAt$outboundSchema` instead. */
    CancelDeploymentAliasAssignedAt$.outboundSchema = CancelDeploymentAliasAssignedAt$outboundSchema;
})(CancelDeploymentAliasAssignedAt$ || (CancelDeploymentAliasAssignedAt$ = {}));
export function cancelDeploymentAliasAssignedAtToJSON(cancelDeploymentAliasAssignedAt) {
    return JSON.stringify(CancelDeploymentAliasAssignedAt$outboundSchema.parse(cancelDeploymentAliasAssignedAt));
}
export function cancelDeploymentAliasAssignedAtFromJSON(jsonString) {
    return safeParse(jsonString, (x) => CancelDeploymentAliasAssignedAt$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CancelDeploymentAliasAssignedAt' from JSON`);
}
/** @internal */
export const CancelDeploymentBuild$inboundSchema = z.object({
    env: z.array(z.string()),
});
/** @internal */
export const CancelDeploymentBuild$outboundSchema = z.object({
    env: z.array(z.string()),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CancelDeploymentBuild$;
(function (CancelDeploymentBuild$) {
    /** @deprecated use `CancelDeploymentBuild$inboundSchema` instead. */
    CancelDeploymentBuild$.inboundSchema = CancelDeploymentBuild$inboundSchema;
    /** @deprecated use `CancelDeploymentBuild$outboundSchema` instead. */
    CancelDeploymentBuild$.outboundSchema = CancelDeploymentBuild$outboundSchema;
})(CancelDeploymentBuild$ || (CancelDeploymentBuild$ = {}));
export function cancelDeploymentBuildToJSON(cancelDeploymentBuild) {
    return JSON.stringify(CancelDeploymentBuild$outboundSchema.parse(cancelDeploymentBuild));
}
export function cancelDeploymentBuildFromJSON(jsonString) {
    return safeParse(jsonString, (x) => CancelDeploymentBuild$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CancelDeploymentBuild' from JSON`);
}
/** @internal */
export const CancelDeploymentBuilds$inboundSchema = z.object({
    use: z.string(),
    src: z.string().optional(),
    config: z.record(z.any()).optional(),
});
/** @internal */
export const CancelDeploymentBuilds$outboundSchema = z.object({
    use: z.string(),
    src: z.string().optional(),
    config: z.record(z.any()).optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CancelDeploymentBuilds$;
(function (CancelDeploymentBuilds$) {
    /** @deprecated use `CancelDeploymentBuilds$inboundSchema` instead. */
    CancelDeploymentBuilds$.inboundSchema = CancelDeploymentBuilds$inboundSchema;
    /** @deprecated use `CancelDeploymentBuilds$outboundSchema` instead. */
    CancelDeploymentBuilds$.outboundSchema = CancelDeploymentBuilds$outboundSchema;
})(CancelDeploymentBuilds$ || (CancelDeploymentBuilds$ = {}));
export function cancelDeploymentBuildsToJSON(cancelDeploymentBuilds) {
    return JSON.stringify(CancelDeploymentBuilds$outboundSchema.parse(cancelDeploymentBuilds));
}
export function cancelDeploymentBuildsFromJSON(jsonString) {
    return safeParse(jsonString, (x) => CancelDeploymentBuilds$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CancelDeploymentBuilds' from JSON`);
}
/** @internal */
export const CancelDeploymentFramework$inboundSchema = z.nativeEnum(CancelDeploymentFramework);
/** @internal */
export const CancelDeploymentFramework$outboundSchema = CancelDeploymentFramework$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CancelDeploymentFramework$;
(function (CancelDeploymentFramework$) {
    /** @deprecated use `CancelDeploymentFramework$inboundSchema` instead. */
    CancelDeploymentFramework$.inboundSchema = CancelDeploymentFramework$inboundSchema;
    /** @deprecated use `CancelDeploymentFramework$outboundSchema` instead. */
    CancelDeploymentFramework$.outboundSchema = CancelDeploymentFramework$outboundSchema;
})(CancelDeploymentFramework$ || (CancelDeploymentFramework$ = {}));
/** @internal */
export const CancelDeploymentSpeedInsights$inboundSchema = z.object({
    id: z.string(),
    enabledAt: z.number().optional(),
    disabledAt: z.number().optional(),
    canceledAt: z.number().optional(),
    hasData: z.boolean().optional(),
    paidAt: z.number().optional(),
});
/** @internal */
export const CancelDeploymentSpeedInsights$outboundSchema = z.object({
    id: z.string(),
    enabledAt: z.number().optional(),
    disabledAt: z.number().optional(),
    canceledAt: z.number().optional(),
    hasData: z.boolean().optional(),
    paidAt: z.number().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CancelDeploymentSpeedInsights$;
(function (CancelDeploymentSpeedInsights$) {
    /** @deprecated use `CancelDeploymentSpeedInsights$inboundSchema` instead. */
    CancelDeploymentSpeedInsights$.inboundSchema = CancelDeploymentSpeedInsights$inboundSchema;
    /** @deprecated use `CancelDeploymentSpeedInsights$outboundSchema` instead. */
    CancelDeploymentSpeedInsights$.outboundSchema = CancelDeploymentSpeedInsights$outboundSchema;
})(CancelDeploymentSpeedInsights$ || (CancelDeploymentSpeedInsights$ = {}));
export function cancelDeploymentSpeedInsightsToJSON(cancelDeploymentSpeedInsights) {
    return JSON.stringify(CancelDeploymentSpeedInsights$outboundSchema.parse(cancelDeploymentSpeedInsights));
}
export function cancelDeploymentSpeedInsightsFromJSON(jsonString) {
    return safeParse(jsonString, (x) => CancelDeploymentSpeedInsights$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CancelDeploymentSpeedInsights' from JSON`);
}
/** @internal */
export const CancelDeploymentWebAnalytics$inboundSchema = z.object({
    id: z.string(),
    disabledAt: z.number().optional(),
    canceledAt: z.number().optional(),
    enabledAt: z.number().optional(),
    hasData: z.boolean().optional(),
});
/** @internal */
export const CancelDeploymentWebAnalytics$outboundSchema = z.object({
    id: z.string(),
    disabledAt: z.number().optional(),
    canceledAt: z.number().optional(),
    enabledAt: z.number().optional(),
    hasData: z.boolean().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CancelDeploymentWebAnalytics$;
(function (CancelDeploymentWebAnalytics$) {
    /** @deprecated use `CancelDeploymentWebAnalytics$inboundSchema` instead. */
    CancelDeploymentWebAnalytics$.inboundSchema = CancelDeploymentWebAnalytics$inboundSchema;
    /** @deprecated use `CancelDeploymentWebAnalytics$outboundSchema` instead. */
    CancelDeploymentWebAnalytics$.outboundSchema = CancelDeploymentWebAnalytics$outboundSchema;
})(CancelDeploymentWebAnalytics$ || (CancelDeploymentWebAnalytics$ = {}));
export function cancelDeploymentWebAnalyticsToJSON(cancelDeploymentWebAnalytics) {
    return JSON.stringify(CancelDeploymentWebAnalytics$outboundSchema.parse(cancelDeploymentWebAnalytics));
}
export function cancelDeploymentWebAnalyticsFromJSON(jsonString) {
    return safeParse(jsonString, (x) => CancelDeploymentWebAnalytics$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CancelDeploymentWebAnalytics' from JSON`);
}
/** @internal */
export const CancelDeploymentProjectSettings$inboundSchema = z.object({
    buildCommand: z.nullable(z.string()).optional(),
    devCommand: z.nullable(z.string()).optional(),
    framework: z.nullable(CancelDeploymentFramework$inboundSchema).optional(),
    commandForIgnoringBuildStep: z.nullable(z.string()).optional(),
    installCommand: z.nullable(z.string()).optional(),
    outputDirectory: z.nullable(z.string()).optional(),
    speedInsights: z.lazy(() => CancelDeploymentSpeedInsights$inboundSchema)
        .optional(),
    webAnalytics: z.lazy(() => CancelDeploymentWebAnalytics$inboundSchema)
        .optional(),
});
/** @internal */
export const CancelDeploymentProjectSettings$outboundSchema = z.object({
    buildCommand: z.nullable(z.string()).optional(),
    devCommand: z.nullable(z.string()).optional(),
    framework: z.nullable(CancelDeploymentFramework$outboundSchema).optional(),
    commandForIgnoringBuildStep: z.nullable(z.string()).optional(),
    installCommand: z.nullable(z.string()).optional(),
    outputDirectory: z.nullable(z.string()).optional(),
    speedInsights: z.lazy(() => CancelDeploymentSpeedInsights$outboundSchema)
        .optional(),
    webAnalytics: z.lazy(() => CancelDeploymentWebAnalytics$outboundSchema)
        .optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CancelDeploymentProjectSettings$;
(function (CancelDeploymentProjectSettings$) {
    /** @deprecated use `CancelDeploymentProjectSettings$inboundSchema` instead. */
    CancelDeploymentProjectSettings$.inboundSchema = CancelDeploymentProjectSettings$inboundSchema;
    /** @deprecated use `CancelDeploymentProjectSettings$outboundSchema` instead. */
    CancelDeploymentProjectSettings$.outboundSchema = CancelDeploymentProjectSettings$outboundSchema;
})(CancelDeploymentProjectSettings$ || (CancelDeploymentProjectSettings$ = {}));
export function cancelDeploymentProjectSettingsToJSON(cancelDeploymentProjectSettings) {
    return JSON.stringify(CancelDeploymentProjectSettings$outboundSchema.parse(cancelDeploymentProjectSettings));
}
export function cancelDeploymentProjectSettingsFromJSON(jsonString) {
    return safeParse(jsonString, (x) => CancelDeploymentProjectSettings$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CancelDeploymentProjectSettings' from JSON`);
}
/** @internal */
export const CancelDeploymentDeploymentsStatus$inboundSchema = z.nativeEnum(CancelDeploymentDeploymentsStatus);
/** @internal */
export const CancelDeploymentDeploymentsStatus$outboundSchema = CancelDeploymentDeploymentsStatus$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CancelDeploymentDeploymentsStatus$;
(function (CancelDeploymentDeploymentsStatus$) {
    /** @deprecated use `CancelDeploymentDeploymentsStatus$inboundSchema` instead. */
    CancelDeploymentDeploymentsStatus$.inboundSchema = CancelDeploymentDeploymentsStatus$inboundSchema;
    /** @deprecated use `CancelDeploymentDeploymentsStatus$outboundSchema` instead. */
    CancelDeploymentDeploymentsStatus$.outboundSchema = CancelDeploymentDeploymentsStatus$outboundSchema;
})(CancelDeploymentDeploymentsStatus$ || (CancelDeploymentDeploymentsStatus$ = {}));
/** @internal */
export const CancelDeploymentIntegrations$inboundSchema = z.object({
    status: CancelDeploymentDeploymentsStatus$inboundSchema,
    startedAt: z.number(),
    completedAt: z.number().optional(),
    skippedAt: z.number().optional(),
    skippedBy: z.string().optional(),
});
/** @internal */
export const CancelDeploymentIntegrations$outboundSchema = z.object({
    status: CancelDeploymentDeploymentsStatus$outboundSchema,
    startedAt: z.number(),
    completedAt: z.number().optional(),
    skippedAt: z.number().optional(),
    skippedBy: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CancelDeploymentIntegrations$;
(function (CancelDeploymentIntegrations$) {
    /** @deprecated use `CancelDeploymentIntegrations$inboundSchema` instead. */
    CancelDeploymentIntegrations$.inboundSchema = CancelDeploymentIntegrations$inboundSchema;
    /** @deprecated use `CancelDeploymentIntegrations$outboundSchema` instead. */
    CancelDeploymentIntegrations$.outboundSchema = CancelDeploymentIntegrations$outboundSchema;
})(CancelDeploymentIntegrations$ || (CancelDeploymentIntegrations$ = {}));
export function cancelDeploymentIntegrationsToJSON(cancelDeploymentIntegrations) {
    return JSON.stringify(CancelDeploymentIntegrations$outboundSchema.parse(cancelDeploymentIntegrations));
}
export function cancelDeploymentIntegrationsFromJSON(jsonString) {
    return safeParse(jsonString, (x) => CancelDeploymentIntegrations$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CancelDeploymentIntegrations' from JSON`);
}
/** @internal */
export const CancelDeploymentProtocol$inboundSchema = z.nativeEnum(CancelDeploymentProtocol);
/** @internal */
export const CancelDeploymentProtocol$outboundSchema = CancelDeploymentProtocol$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CancelDeploymentProtocol$;
(function (CancelDeploymentProtocol$) {
    /** @deprecated use `CancelDeploymentProtocol$inboundSchema` instead. */
    CancelDeploymentProtocol$.inboundSchema = CancelDeploymentProtocol$inboundSchema;
    /** @deprecated use `CancelDeploymentProtocol$outboundSchema` instead. */
    CancelDeploymentProtocol$.outboundSchema = CancelDeploymentProtocol$outboundSchema;
})(CancelDeploymentProtocol$ || (CancelDeploymentProtocol$ = {}));
/** @internal */
export const CancelDeploymentRemotePatterns$inboundSchema = z.object({
    protocol: CancelDeploymentProtocol$inboundSchema.optional(),
    hostname: z.string(),
    port: z.string().optional(),
    pathname: z.string().optional(),
    search: z.string().optional(),
});
/** @internal */
export const CancelDeploymentRemotePatterns$outboundSchema = z.object({
    protocol: CancelDeploymentProtocol$outboundSchema.optional(),
    hostname: z.string(),
    port: z.string().optional(),
    pathname: z.string().optional(),
    search: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CancelDeploymentRemotePatterns$;
(function (CancelDeploymentRemotePatterns$) {
    /** @deprecated use `CancelDeploymentRemotePatterns$inboundSchema` instead. */
    CancelDeploymentRemotePatterns$.inboundSchema = CancelDeploymentRemotePatterns$inboundSchema;
    /** @deprecated use `CancelDeploymentRemotePatterns$outboundSchema` instead. */
    CancelDeploymentRemotePatterns$.outboundSchema = CancelDeploymentRemotePatterns$outboundSchema;
})(CancelDeploymentRemotePatterns$ || (CancelDeploymentRemotePatterns$ = {}));
export function cancelDeploymentRemotePatternsToJSON(cancelDeploymentRemotePatterns) {
    return JSON.stringify(CancelDeploymentRemotePatterns$outboundSchema.parse(cancelDeploymentRemotePatterns));
}
export function cancelDeploymentRemotePatternsFromJSON(jsonString) {
    return safeParse(jsonString, (x) => CancelDeploymentRemotePatterns$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CancelDeploymentRemotePatterns' from JSON`);
}
/** @internal */
export const CancelDeploymentLocalPatterns$inboundSchema = z.object({
    pathname: z.string().optional(),
    search: z.string().optional(),
});
/** @internal */
export const CancelDeploymentLocalPatterns$outboundSchema = z.object({
    pathname: z.string().optional(),
    search: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CancelDeploymentLocalPatterns$;
(function (CancelDeploymentLocalPatterns$) {
    /** @deprecated use `CancelDeploymentLocalPatterns$inboundSchema` instead. */
    CancelDeploymentLocalPatterns$.inboundSchema = CancelDeploymentLocalPatterns$inboundSchema;
    /** @deprecated use `CancelDeploymentLocalPatterns$outboundSchema` instead. */
    CancelDeploymentLocalPatterns$.outboundSchema = CancelDeploymentLocalPatterns$outboundSchema;
})(CancelDeploymentLocalPatterns$ || (CancelDeploymentLocalPatterns$ = {}));
export function cancelDeploymentLocalPatternsToJSON(cancelDeploymentLocalPatterns) {
    return JSON.stringify(CancelDeploymentLocalPatterns$outboundSchema.parse(cancelDeploymentLocalPatterns));
}
export function cancelDeploymentLocalPatternsFromJSON(jsonString) {
    return safeParse(jsonString, (x) => CancelDeploymentLocalPatterns$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CancelDeploymentLocalPatterns' from JSON`);
}
/** @internal */
export const CancelDeploymentFormats$inboundSchema = z.nativeEnum(CancelDeploymentFormats);
/** @internal */
export const CancelDeploymentFormats$outboundSchema = CancelDeploymentFormats$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CancelDeploymentFormats$;
(function (CancelDeploymentFormats$) {
    /** @deprecated use `CancelDeploymentFormats$inboundSchema` instead. */
    CancelDeploymentFormats$.inboundSchema = CancelDeploymentFormats$inboundSchema;
    /** @deprecated use `CancelDeploymentFormats$outboundSchema` instead. */
    CancelDeploymentFormats$.outboundSchema = CancelDeploymentFormats$outboundSchema;
})(CancelDeploymentFormats$ || (CancelDeploymentFormats$ = {}));
/** @internal */
export const CancelDeploymentContentDispositionType$inboundSchema = z.nativeEnum(CancelDeploymentContentDispositionType);
/** @internal */
export const CancelDeploymentContentDispositionType$outboundSchema = CancelDeploymentContentDispositionType$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CancelDeploymentContentDispositionType$;
(function (CancelDeploymentContentDispositionType$) {
    /** @deprecated use `CancelDeploymentContentDispositionType$inboundSchema` instead. */
    CancelDeploymentContentDispositionType$.inboundSchema = CancelDeploymentContentDispositionType$inboundSchema;
    /** @deprecated use `CancelDeploymentContentDispositionType$outboundSchema` instead. */
    CancelDeploymentContentDispositionType$.outboundSchema = CancelDeploymentContentDispositionType$outboundSchema;
})(CancelDeploymentContentDispositionType$ || (CancelDeploymentContentDispositionType$ = {}));
/** @internal */
export const CancelDeploymentImages$inboundSchema = z.object({
    sizes: z.array(z.number()).optional(),
    qualities: z.array(z.number()).optional(),
    domains: z.array(z.string()).optional(),
    remotePatterns: z.array(z.lazy(() => CancelDeploymentRemotePatterns$inboundSchema)).optional(),
    localPatterns: z.array(z.lazy(() => CancelDeploymentLocalPatterns$inboundSchema)).optional(),
    minimumCacheTTL: z.number().optional(),
    formats: z.array(CancelDeploymentFormats$inboundSchema).optional(),
    dangerouslyAllowSVG: z.boolean().optional(),
    contentSecurityPolicy: z.string().optional(),
    contentDispositionType: CancelDeploymentContentDispositionType$inboundSchema
        .optional(),
});
/** @internal */
export const CancelDeploymentImages$outboundSchema = z.object({
    sizes: z.array(z.number()).optional(),
    qualities: z.array(z.number()).optional(),
    domains: z.array(z.string()).optional(),
    remotePatterns: z.array(z.lazy(() => CancelDeploymentRemotePatterns$outboundSchema)).optional(),
    localPatterns: z.array(z.lazy(() => CancelDeploymentLocalPatterns$outboundSchema)).optional(),
    minimumCacheTTL: z.number().optional(),
    formats: z.array(CancelDeploymentFormats$outboundSchema).optional(),
    dangerouslyAllowSVG: z.boolean().optional(),
    contentSecurityPolicy: z.string().optional(),
    contentDispositionType: CancelDeploymentContentDispositionType$outboundSchema
        .optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CancelDeploymentImages$;
(function (CancelDeploymentImages$) {
    /** @deprecated use `CancelDeploymentImages$inboundSchema` instead. */
    CancelDeploymentImages$.inboundSchema = CancelDeploymentImages$inboundSchema;
    /** @deprecated use `CancelDeploymentImages$outboundSchema` instead. */
    CancelDeploymentImages$.outboundSchema = CancelDeploymentImages$outboundSchema;
})(CancelDeploymentImages$ || (CancelDeploymentImages$ = {}));
export function cancelDeploymentImagesToJSON(cancelDeploymentImages) {
    return JSON.stringify(CancelDeploymentImages$outboundSchema.parse(cancelDeploymentImages));
}
export function cancelDeploymentImagesFromJSON(jsonString) {
    return safeParse(jsonString, (x) => CancelDeploymentImages$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CancelDeploymentImages' from JSON`);
}
/** @internal */
export const CancelDeploymentCreator$inboundSchema = z.object({
    uid: z.string(),
    username: z.string().optional(),
    avatar: z.string().optional(),
});
/** @internal */
export const CancelDeploymentCreator$outboundSchema = z.object({
    uid: z.string(),
    username: z.string().optional(),
    avatar: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CancelDeploymentCreator$;
(function (CancelDeploymentCreator$) {
    /** @deprecated use `CancelDeploymentCreator$inboundSchema` instead. */
    CancelDeploymentCreator$.inboundSchema = CancelDeploymentCreator$inboundSchema;
    /** @deprecated use `CancelDeploymentCreator$outboundSchema` instead. */
    CancelDeploymentCreator$.outboundSchema = CancelDeploymentCreator$outboundSchema;
})(CancelDeploymentCreator$ || (CancelDeploymentCreator$ = {}));
export function cancelDeploymentCreatorToJSON(cancelDeploymentCreator) {
    return JSON.stringify(CancelDeploymentCreator$outboundSchema.parse(cancelDeploymentCreator));
}
export function cancelDeploymentCreatorFromJSON(jsonString) {
    return safeParse(jsonString, (x) => CancelDeploymentCreator$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CancelDeploymentCreator' from JSON`);
}
/** @internal */
export const CancelDeploymentDeploymentsReadyState$inboundSchema = z.nativeEnum(CancelDeploymentDeploymentsReadyState);
/** @internal */
export const CancelDeploymentDeploymentsReadyState$outboundSchema = CancelDeploymentDeploymentsReadyState$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CancelDeploymentDeploymentsReadyState$;
(function (CancelDeploymentDeploymentsReadyState$) {
    /** @deprecated use `CancelDeploymentDeploymentsReadyState$inboundSchema` instead. */
    CancelDeploymentDeploymentsReadyState$.inboundSchema = CancelDeploymentDeploymentsReadyState$inboundSchema;
    /** @deprecated use `CancelDeploymentDeploymentsReadyState$outboundSchema` instead. */
    CancelDeploymentDeploymentsReadyState$.outboundSchema = CancelDeploymentDeploymentsReadyState$outboundSchema;
})(CancelDeploymentDeploymentsReadyState$ || (CancelDeploymentDeploymentsReadyState$ = {}));
/** @internal */
export const CancelDeploymentOutput$inboundSchema = z.object({
    path: z.string(),
    functionName: z.string(),
});
/** @internal */
export const CancelDeploymentOutput$outboundSchema = z.object({
    path: z.string(),
    functionName: z.string(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CancelDeploymentOutput$;
(function (CancelDeploymentOutput$) {
    /** @deprecated use `CancelDeploymentOutput$inboundSchema` instead. */
    CancelDeploymentOutput$.inboundSchema = CancelDeploymentOutput$inboundSchema;
    /** @deprecated use `CancelDeploymentOutput$outboundSchema` instead. */
    CancelDeploymentOutput$.outboundSchema = CancelDeploymentOutput$outboundSchema;
})(CancelDeploymentOutput$ || (CancelDeploymentOutput$ = {}));
export function cancelDeploymentOutputToJSON(cancelDeploymentOutput) {
    return JSON.stringify(CancelDeploymentOutput$outboundSchema.parse(cancelDeploymentOutput));
}
export function cancelDeploymentOutputFromJSON(jsonString) {
    return safeParse(jsonString, (x) => CancelDeploymentOutput$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CancelDeploymentOutput' from JSON`);
}
/** @internal */
export const CancelDeploymentLambdas$inboundSchema = z.object({
    id: z.string().optional(),
    createdAt: z.number().optional(),
    entrypoint: z.nullable(z.string()).optional(),
    readyState: CancelDeploymentDeploymentsReadyState$inboundSchema.optional(),
    readyStateAt: z.number().optional(),
    output: z.array(z.lazy(() => CancelDeploymentOutput$inboundSchema)),
});
/** @internal */
export const CancelDeploymentLambdas$outboundSchema = z.object({
    id: z.string().optional(),
    createdAt: z.number().optional(),
    entrypoint: z.nullable(z.string()).optional(),
    readyState: CancelDeploymentDeploymentsReadyState$outboundSchema.optional(),
    readyStateAt: z.number().optional(),
    output: z.array(z.lazy(() => CancelDeploymentOutput$outboundSchema)),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CancelDeploymentLambdas$;
(function (CancelDeploymentLambdas$) {
    /** @deprecated use `CancelDeploymentLambdas$inboundSchema` instead. */
    CancelDeploymentLambdas$.inboundSchema = CancelDeploymentLambdas$inboundSchema;
    /** @deprecated use `CancelDeploymentLambdas$outboundSchema` instead. */
    CancelDeploymentLambdas$.outboundSchema = CancelDeploymentLambdas$outboundSchema;
})(CancelDeploymentLambdas$ || (CancelDeploymentLambdas$ = {}));
export function cancelDeploymentLambdasToJSON(cancelDeploymentLambdas) {
    return JSON.stringify(CancelDeploymentLambdas$outboundSchema.parse(cancelDeploymentLambdas));
}
export function cancelDeploymentLambdasFromJSON(jsonString) {
    return safeParse(jsonString, (x) => CancelDeploymentLambdas$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CancelDeploymentLambdas' from JSON`);
}
/** @internal */
export const CancelDeploymentStatus$inboundSchema = z.nativeEnum(CancelDeploymentStatus);
/** @internal */
export const CancelDeploymentStatus$outboundSchema = CancelDeploymentStatus$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CancelDeploymentStatus$;
(function (CancelDeploymentStatus$) {
    /** @deprecated use `CancelDeploymentStatus$inboundSchema` instead. */
    CancelDeploymentStatus$.inboundSchema = CancelDeploymentStatus$inboundSchema;
    /** @deprecated use `CancelDeploymentStatus$outboundSchema` instead. */
    CancelDeploymentStatus$.outboundSchema = CancelDeploymentStatus$outboundSchema;
})(CancelDeploymentStatus$ || (CancelDeploymentStatus$ = {}));
/** @internal */
export const CancelDeploymentTeam$inboundSchema = z.object({
    id: z.string(),
    name: z.string(),
    avatar: z.string().optional(),
    slug: z.string(),
});
/** @internal */
export const CancelDeploymentTeam$outboundSchema = z.object({
    id: z.string(),
    name: z.string(),
    avatar: z.string().optional(),
    slug: z.string(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CancelDeploymentTeam$;
(function (CancelDeploymentTeam$) {
    /** @deprecated use `CancelDeploymentTeam$inboundSchema` instead. */
    CancelDeploymentTeam$.inboundSchema = CancelDeploymentTeam$inboundSchema;
    /** @deprecated use `CancelDeploymentTeam$outboundSchema` instead. */
    CancelDeploymentTeam$.outboundSchema = CancelDeploymentTeam$outboundSchema;
})(CancelDeploymentTeam$ || (CancelDeploymentTeam$ = {}));
export function cancelDeploymentTeamToJSON(cancelDeploymentTeam) {
    return JSON.stringify(CancelDeploymentTeam$outboundSchema.parse(cancelDeploymentTeam));
}
export function cancelDeploymentTeamFromJSON(jsonString) {
    return safeParse(jsonString, (x) => CancelDeploymentTeam$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CancelDeploymentTeam' from JSON`);
}
/** @internal */
export const CancelDeploymentCustomEnvironment2$inboundSchema = z.object({
    id: z.string(),
});
/** @internal */
export const CancelDeploymentCustomEnvironment2$outboundSchema = z.object({
    id: z.string(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CancelDeploymentCustomEnvironment2$;
(function (CancelDeploymentCustomEnvironment2$) {
    /** @deprecated use `CancelDeploymentCustomEnvironment2$inboundSchema` instead. */
    CancelDeploymentCustomEnvironment2$.inboundSchema = CancelDeploymentCustomEnvironment2$inboundSchema;
    /** @deprecated use `CancelDeploymentCustomEnvironment2$outboundSchema` instead. */
    CancelDeploymentCustomEnvironment2$.outboundSchema = CancelDeploymentCustomEnvironment2$outboundSchema;
})(CancelDeploymentCustomEnvironment2$ || (CancelDeploymentCustomEnvironment2$ = {}));
export function cancelDeploymentCustomEnvironment2ToJSON(cancelDeploymentCustomEnvironment2) {
    return JSON.stringify(CancelDeploymentCustomEnvironment2$outboundSchema.parse(cancelDeploymentCustomEnvironment2));
}
export function cancelDeploymentCustomEnvironment2FromJSON(jsonString) {
    return safeParse(jsonString, (x) => CancelDeploymentCustomEnvironment2$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CancelDeploymentCustomEnvironment2' from JSON`);
}
/** @internal */
export const CancelDeploymentCustomEnvironmentType$inboundSchema = z.nativeEnum(CancelDeploymentCustomEnvironmentType);
/** @internal */
export const CancelDeploymentCustomEnvironmentType$outboundSchema = CancelDeploymentCustomEnvironmentType$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CancelDeploymentCustomEnvironmentType$;
(function (CancelDeploymentCustomEnvironmentType$) {
    /** @deprecated use `CancelDeploymentCustomEnvironmentType$inboundSchema` instead. */
    CancelDeploymentCustomEnvironmentType$.inboundSchema = CancelDeploymentCustomEnvironmentType$inboundSchema;
    /** @deprecated use `CancelDeploymentCustomEnvironmentType$outboundSchema` instead. */
    CancelDeploymentCustomEnvironmentType$.outboundSchema = CancelDeploymentCustomEnvironmentType$outboundSchema;
})(CancelDeploymentCustomEnvironmentType$ || (CancelDeploymentCustomEnvironmentType$ = {}));
/** @internal */
export const CancelDeploymentCustomEnvironmentDeploymentsType$inboundSchema = z
    .nativeEnum(CancelDeploymentCustomEnvironmentDeploymentsType);
/** @internal */
export const CancelDeploymentCustomEnvironmentDeploymentsType$outboundSchema = CancelDeploymentCustomEnvironmentDeploymentsType$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CancelDeploymentCustomEnvironmentDeploymentsType$;
(function (CancelDeploymentCustomEnvironmentDeploymentsType$) {
    /** @deprecated use `CancelDeploymentCustomEnvironmentDeploymentsType$inboundSchema` instead. */
    CancelDeploymentCustomEnvironmentDeploymentsType$.inboundSchema = CancelDeploymentCustomEnvironmentDeploymentsType$inboundSchema;
    /** @deprecated use `CancelDeploymentCustomEnvironmentDeploymentsType$outboundSchema` instead. */
    CancelDeploymentCustomEnvironmentDeploymentsType$.outboundSchema = CancelDeploymentCustomEnvironmentDeploymentsType$outboundSchema;
})(CancelDeploymentCustomEnvironmentDeploymentsType$ || (CancelDeploymentCustomEnvironmentDeploymentsType$ = {}));
/** @internal */
export const CancelDeploymentCustomEnvironmentBranchMatcher$inboundSchema = z.object({
    type: CancelDeploymentCustomEnvironmentDeploymentsType$inboundSchema,
    pattern: z.string(),
});
/** @internal */
export const CancelDeploymentCustomEnvironmentBranchMatcher$outboundSchema = z.object({
    type: CancelDeploymentCustomEnvironmentDeploymentsType$outboundSchema,
    pattern: z.string(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CancelDeploymentCustomEnvironmentBranchMatcher$;
(function (CancelDeploymentCustomEnvironmentBranchMatcher$) {
    /** @deprecated use `CancelDeploymentCustomEnvironmentBranchMatcher$inboundSchema` instead. */
    CancelDeploymentCustomEnvironmentBranchMatcher$.inboundSchema = CancelDeploymentCustomEnvironmentBranchMatcher$inboundSchema;
    /** @deprecated use `CancelDeploymentCustomEnvironmentBranchMatcher$outboundSchema` instead. */
    CancelDeploymentCustomEnvironmentBranchMatcher$.outboundSchema = CancelDeploymentCustomEnvironmentBranchMatcher$outboundSchema;
})(CancelDeploymentCustomEnvironmentBranchMatcher$ || (CancelDeploymentCustomEnvironmentBranchMatcher$ = {}));
export function cancelDeploymentCustomEnvironmentBranchMatcherToJSON(cancelDeploymentCustomEnvironmentBranchMatcher) {
    return JSON.stringify(CancelDeploymentCustomEnvironmentBranchMatcher$outboundSchema.parse(cancelDeploymentCustomEnvironmentBranchMatcher));
}
export function cancelDeploymentCustomEnvironmentBranchMatcherFromJSON(jsonString) {
    return safeParse(jsonString, (x) => CancelDeploymentCustomEnvironmentBranchMatcher$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CancelDeploymentCustomEnvironmentBranchMatcher' from JSON`);
}
/** @internal */
export const CancelDeploymentCustomEnvironmentVerification$inboundSchema = z.object({
    type: z.string(),
    domain: z.string(),
    value: z.string(),
    reason: z.string(),
});
/** @internal */
export const CancelDeploymentCustomEnvironmentVerification$outboundSchema = z.object({
    type: z.string(),
    domain: z.string(),
    value: z.string(),
    reason: z.string(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CancelDeploymentCustomEnvironmentVerification$;
(function (CancelDeploymentCustomEnvironmentVerification$) {
    /** @deprecated use `CancelDeploymentCustomEnvironmentVerification$inboundSchema` instead. */
    CancelDeploymentCustomEnvironmentVerification$.inboundSchema = CancelDeploymentCustomEnvironmentVerification$inboundSchema;
    /** @deprecated use `CancelDeploymentCustomEnvironmentVerification$outboundSchema` instead. */
    CancelDeploymentCustomEnvironmentVerification$.outboundSchema = CancelDeploymentCustomEnvironmentVerification$outboundSchema;
})(CancelDeploymentCustomEnvironmentVerification$ || (CancelDeploymentCustomEnvironmentVerification$ = {}));
export function cancelDeploymentCustomEnvironmentVerificationToJSON(cancelDeploymentCustomEnvironmentVerification) {
    return JSON.stringify(CancelDeploymentCustomEnvironmentVerification$outboundSchema.parse(cancelDeploymentCustomEnvironmentVerification));
}
export function cancelDeploymentCustomEnvironmentVerificationFromJSON(jsonString) {
    return safeParse(jsonString, (x) => CancelDeploymentCustomEnvironmentVerification$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CancelDeploymentCustomEnvironmentVerification' from JSON`);
}
/** @internal */
export const CancelDeploymentCustomEnvironmentDomains$inboundSchema = z.object({
    name: z.string(),
    apexName: z.string(),
    projectId: z.string(),
    redirect: z.nullable(z.string()).optional(),
    redirectStatusCode: z.nullable(z.number()).optional(),
    gitBranch: z.nullable(z.string()).optional(),
    customEnvironmentId: z.nullable(z.string()).optional(),
    updatedAt: z.number().optional(),
    createdAt: z.number().optional(),
    verified: z.boolean(),
    verification: z.array(z.lazy(() => CancelDeploymentCustomEnvironmentVerification$inboundSchema)).optional(),
});
/** @internal */
export const CancelDeploymentCustomEnvironmentDomains$outboundSchema = z.object({
    name: z.string(),
    apexName: z.string(),
    projectId: z.string(),
    redirect: z.nullable(z.string()).optional(),
    redirectStatusCode: z.nullable(z.number()).optional(),
    gitBranch: z.nullable(z.string()).optional(),
    customEnvironmentId: z.nullable(z.string()).optional(),
    updatedAt: z.number().optional(),
    createdAt: z.number().optional(),
    verified: z.boolean(),
    verification: z.array(z.lazy(() => CancelDeploymentCustomEnvironmentVerification$outboundSchema)).optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CancelDeploymentCustomEnvironmentDomains$;
(function (CancelDeploymentCustomEnvironmentDomains$) {
    /** @deprecated use `CancelDeploymentCustomEnvironmentDomains$inboundSchema` instead. */
    CancelDeploymentCustomEnvironmentDomains$.inboundSchema = CancelDeploymentCustomEnvironmentDomains$inboundSchema;
    /** @deprecated use `CancelDeploymentCustomEnvironmentDomains$outboundSchema` instead. */
    CancelDeploymentCustomEnvironmentDomains$.outboundSchema = CancelDeploymentCustomEnvironmentDomains$outboundSchema;
})(CancelDeploymentCustomEnvironmentDomains$ || (CancelDeploymentCustomEnvironmentDomains$ = {}));
export function cancelDeploymentCustomEnvironmentDomainsToJSON(cancelDeploymentCustomEnvironmentDomains) {
    return JSON.stringify(CancelDeploymentCustomEnvironmentDomains$outboundSchema.parse(cancelDeploymentCustomEnvironmentDomains));
}
export function cancelDeploymentCustomEnvironmentDomainsFromJSON(jsonString) {
    return safeParse(jsonString, (x) => CancelDeploymentCustomEnvironmentDomains$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CancelDeploymentCustomEnvironmentDomains' from JSON`);
}
/** @internal */
export const CancelDeploymentCustomEnvironment1$inboundSchema = z.object({
    id: z.string(),
    slug: z.string(),
    type: CancelDeploymentCustomEnvironmentType$inboundSchema,
    description: z.string().optional(),
    branchMatcher: z.lazy(() => CancelDeploymentCustomEnvironmentBranchMatcher$inboundSchema).optional(),
    domains: z.array(z.lazy(() => CancelDeploymentCustomEnvironmentDomains$inboundSchema)).optional(),
    currentDeploymentAliases: z.array(z.string()).optional(),
    createdAt: z.number(),
    updatedAt: z.number(),
});
/** @internal */
export const CancelDeploymentCustomEnvironment1$outboundSchema = z.object({
    id: z.string(),
    slug: z.string(),
    type: CancelDeploymentCustomEnvironmentType$outboundSchema,
    description: z.string().optional(),
    branchMatcher: z.lazy(() => CancelDeploymentCustomEnvironmentBranchMatcher$outboundSchema).optional(),
    domains: z.array(z.lazy(() => CancelDeploymentCustomEnvironmentDomains$outboundSchema)).optional(),
    currentDeploymentAliases: z.array(z.string()).optional(),
    createdAt: z.number(),
    updatedAt: z.number(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CancelDeploymentCustomEnvironment1$;
(function (CancelDeploymentCustomEnvironment1$) {
    /** @deprecated use `CancelDeploymentCustomEnvironment1$inboundSchema` instead. */
    CancelDeploymentCustomEnvironment1$.inboundSchema = CancelDeploymentCustomEnvironment1$inboundSchema;
    /** @deprecated use `CancelDeploymentCustomEnvironment1$outboundSchema` instead. */
    CancelDeploymentCustomEnvironment1$.outboundSchema = CancelDeploymentCustomEnvironment1$outboundSchema;
})(CancelDeploymentCustomEnvironment1$ || (CancelDeploymentCustomEnvironment1$ = {}));
export function cancelDeploymentCustomEnvironment1ToJSON(cancelDeploymentCustomEnvironment1) {
    return JSON.stringify(CancelDeploymentCustomEnvironment1$outboundSchema.parse(cancelDeploymentCustomEnvironment1));
}
export function cancelDeploymentCustomEnvironment1FromJSON(jsonString) {
    return safeParse(jsonString, (x) => CancelDeploymentCustomEnvironment1$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CancelDeploymentCustomEnvironment1' from JSON`);
}
/** @internal */
export const CancelDeploymentCustomEnvironment$inboundSchema = z.union([
    z.lazy(() => CancelDeploymentCustomEnvironment2$inboundSchema),
    z.lazy(() => CancelDeploymentCustomEnvironment1$inboundSchema),
]);
/** @internal */
export const CancelDeploymentCustomEnvironment$outboundSchema = z.union([
    z.lazy(() => CancelDeploymentCustomEnvironment2$outboundSchema),
    z.lazy(() => CancelDeploymentCustomEnvironment1$outboundSchema),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CancelDeploymentCustomEnvironment$;
(function (CancelDeploymentCustomEnvironment$) {
    /** @deprecated use `CancelDeploymentCustomEnvironment$inboundSchema` instead. */
    CancelDeploymentCustomEnvironment$.inboundSchema = CancelDeploymentCustomEnvironment$inboundSchema;
    /** @deprecated use `CancelDeploymentCustomEnvironment$outboundSchema` instead. */
    CancelDeploymentCustomEnvironment$.outboundSchema = CancelDeploymentCustomEnvironment$outboundSchema;
})(CancelDeploymentCustomEnvironment$ || (CancelDeploymentCustomEnvironment$ = {}));
export function cancelDeploymentCustomEnvironmentToJSON(cancelDeploymentCustomEnvironment) {
    return JSON.stringify(CancelDeploymentCustomEnvironment$outboundSchema.parse(cancelDeploymentCustomEnvironment));
}
export function cancelDeploymentCustomEnvironmentFromJSON(jsonString) {
    return safeParse(jsonString, (x) => CancelDeploymentCustomEnvironment$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CancelDeploymentCustomEnvironment' from JSON`);
}
/** @internal */
export const CancelDeploymentAliasError$inboundSchema = z.object({
    code: z.string(),
    message: z.string(),
});
/** @internal */
export const CancelDeploymentAliasError$outboundSchema = z.object({
    code: z.string(),
    message: z.string(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CancelDeploymentAliasError$;
(function (CancelDeploymentAliasError$) {
    /** @deprecated use `CancelDeploymentAliasError$inboundSchema` instead. */
    CancelDeploymentAliasError$.inboundSchema = CancelDeploymentAliasError$inboundSchema;
    /** @deprecated use `CancelDeploymentAliasError$outboundSchema` instead. */
    CancelDeploymentAliasError$.outboundSchema = CancelDeploymentAliasError$outboundSchema;
})(CancelDeploymentAliasError$ || (CancelDeploymentAliasError$ = {}));
export function cancelDeploymentAliasErrorToJSON(cancelDeploymentAliasError) {
    return JSON.stringify(CancelDeploymentAliasError$outboundSchema.parse(cancelDeploymentAliasError));
}
export function cancelDeploymentAliasErrorFromJSON(jsonString) {
    return safeParse(jsonString, (x) => CancelDeploymentAliasError$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CancelDeploymentAliasError' from JSON`);
}
/** @internal */
export const CancelDeploymentAliasWarning$inboundSchema = z.object({
    code: z.string(),
    message: z.string(),
    link: z.string().optional(),
    action: z.string().optional(),
});
/** @internal */
export const CancelDeploymentAliasWarning$outboundSchema = z.object({
    code: z.string(),
    message: z.string(),
    link: z.string().optional(),
    action: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CancelDeploymentAliasWarning$;
(function (CancelDeploymentAliasWarning$) {
    /** @deprecated use `CancelDeploymentAliasWarning$inboundSchema` instead. */
    CancelDeploymentAliasWarning$.inboundSchema = CancelDeploymentAliasWarning$inboundSchema;
    /** @deprecated use `CancelDeploymentAliasWarning$outboundSchema` instead. */
    CancelDeploymentAliasWarning$.outboundSchema = CancelDeploymentAliasWarning$outboundSchema;
})(CancelDeploymentAliasWarning$ || (CancelDeploymentAliasWarning$ = {}));
export function cancelDeploymentAliasWarningToJSON(cancelDeploymentAliasWarning) {
    return JSON.stringify(CancelDeploymentAliasWarning$outboundSchema.parse(cancelDeploymentAliasWarning));
}
export function cancelDeploymentAliasWarningFromJSON(jsonString) {
    return safeParse(jsonString, (x) => CancelDeploymentAliasWarning$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CancelDeploymentAliasWarning' from JSON`);
}
/** @internal */
export const CancelDeploymentChecksState$inboundSchema = z.nativeEnum(CancelDeploymentChecksState);
/** @internal */
export const CancelDeploymentChecksState$outboundSchema = CancelDeploymentChecksState$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CancelDeploymentChecksState$;
(function (CancelDeploymentChecksState$) {
    /** @deprecated use `CancelDeploymentChecksState$inboundSchema` instead. */
    CancelDeploymentChecksState$.inboundSchema = CancelDeploymentChecksState$inboundSchema;
    /** @deprecated use `CancelDeploymentChecksState$outboundSchema` instead. */
    CancelDeploymentChecksState$.outboundSchema = CancelDeploymentChecksState$outboundSchema;
})(CancelDeploymentChecksState$ || (CancelDeploymentChecksState$ = {}));
/** @internal */
export const CancelDeploymentChecksConclusion$inboundSchema = z.nativeEnum(CancelDeploymentChecksConclusion);
/** @internal */
export const CancelDeploymentChecksConclusion$outboundSchema = CancelDeploymentChecksConclusion$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CancelDeploymentChecksConclusion$;
(function (CancelDeploymentChecksConclusion$) {
    /** @deprecated use `CancelDeploymentChecksConclusion$inboundSchema` instead. */
    CancelDeploymentChecksConclusion$.inboundSchema = CancelDeploymentChecksConclusion$inboundSchema;
    /** @deprecated use `CancelDeploymentChecksConclusion$outboundSchema` instead. */
    CancelDeploymentChecksConclusion$.outboundSchema = CancelDeploymentChecksConclusion$outboundSchema;
})(CancelDeploymentChecksConclusion$ || (CancelDeploymentChecksConclusion$ = {}));
/** @internal */
export const CancelDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody12Type$inboundSchema = z.nativeEnum(CancelDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody12Type);
/** @internal */
export const CancelDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody12Type$outboundSchema = CancelDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody12Type$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CancelDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody12Type$;
(function (CancelDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody12Type$) {
    /** @deprecated use `CancelDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody12Type$inboundSchema` instead. */
    CancelDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody12Type$.inboundSchema = CancelDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody12Type$inboundSchema;
    /** @deprecated use `CancelDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody12Type$outboundSchema` instead. */
    CancelDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody12Type$.outboundSchema = CancelDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody12Type$outboundSchema;
})(CancelDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody12Type$ || (CancelDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody12Type$ = {}));
/** @internal */
export const GitSource12$inboundSchema = z.object({
    type: CancelDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody12Type$inboundSchema,
    ref: z.string(),
    sha: z.string(),
    owner: z.string().optional(),
    slug: z.string().optional(),
    workspaceUuid: z.string(),
    repoUuid: z.string(),
});
/** @internal */
export const GitSource12$outboundSchema = z.object({
    type: CancelDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody12Type$outboundSchema,
    ref: z.string(),
    sha: z.string(),
    owner: z.string().optional(),
    slug: z.string().optional(),
    workspaceUuid: z.string(),
    repoUuid: z.string(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GitSource12$;
(function (GitSource12$) {
    /** @deprecated use `GitSource12$inboundSchema` instead. */
    GitSource12$.inboundSchema = GitSource12$inboundSchema;
    /** @deprecated use `GitSource12$outboundSchema` instead. */
    GitSource12$.outboundSchema = GitSource12$outboundSchema;
})(GitSource12$ || (GitSource12$ = {}));
export function gitSource12ToJSON(gitSource12) {
    return JSON.stringify(GitSource12$outboundSchema.parse(gitSource12));
}
export function gitSource12FromJSON(jsonString) {
    return safeParse(jsonString, (x) => GitSource12$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'GitSource12' from JSON`);
}
/** @internal */
export const CancelDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody11Type$inboundSchema = z.nativeEnum(CancelDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody11Type);
/** @internal */
export const CancelDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody11Type$outboundSchema = CancelDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody11Type$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CancelDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody11Type$;
(function (CancelDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody11Type$) {
    /** @deprecated use `CancelDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody11Type$inboundSchema` instead. */
    CancelDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody11Type$.inboundSchema = CancelDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody11Type$inboundSchema;
    /** @deprecated use `CancelDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody11Type$outboundSchema` instead. */
    CancelDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody11Type$.outboundSchema = CancelDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody11Type$outboundSchema;
})(CancelDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody11Type$ || (CancelDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody11Type$ = {}));
/** @internal */
export const GitSource11$inboundSchema = z.object({
    type: CancelDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody11Type$inboundSchema,
    ref: z.string(),
    sha: z.string(),
    projectId: z.number(),
});
/** @internal */
export const GitSource11$outboundSchema = z.object({
    type: CancelDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody11Type$outboundSchema,
    ref: z.string(),
    sha: z.string(),
    projectId: z.number(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GitSource11$;
(function (GitSource11$) {
    /** @deprecated use `GitSource11$inboundSchema` instead. */
    GitSource11$.inboundSchema = GitSource11$inboundSchema;
    /** @deprecated use `GitSource11$outboundSchema` instead. */
    GitSource11$.outboundSchema = GitSource11$outboundSchema;
})(GitSource11$ || (GitSource11$ = {}));
export function gitSource11ToJSON(gitSource11) {
    return JSON.stringify(GitSource11$outboundSchema.parse(gitSource11));
}
export function gitSource11FromJSON(jsonString) {
    return safeParse(jsonString, (x) => GitSource11$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'GitSource11' from JSON`);
}
/** @internal */
export const CancelDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody10Type$inboundSchema = z.nativeEnum(CancelDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody10Type);
/** @internal */
export const CancelDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody10Type$outboundSchema = CancelDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody10Type$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CancelDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody10Type$;
(function (CancelDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody10Type$) {
    /** @deprecated use `CancelDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody10Type$inboundSchema` instead. */
    CancelDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody10Type$.inboundSchema = CancelDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody10Type$inboundSchema;
    /** @deprecated use `CancelDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody10Type$outboundSchema` instead. */
    CancelDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody10Type$.outboundSchema = CancelDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody10Type$outboundSchema;
})(CancelDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody10Type$ || (CancelDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody10Type$ = {}));
/** @internal */
export const GitSource10$inboundSchema = z.object({
    type: CancelDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody10Type$inboundSchema,
    host: z.string(),
    ref: z.string(),
    sha: z.string(),
    repoId: z.number(),
    org: z.string().optional(),
    repo: z.string().optional(),
});
/** @internal */
export const GitSource10$outboundSchema = z.object({
    type: CancelDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody10Type$outboundSchema,
    host: z.string(),
    ref: z.string(),
    sha: z.string(),
    repoId: z.number(),
    org: z.string().optional(),
    repo: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GitSource10$;
(function (GitSource10$) {
    /** @deprecated use `GitSource10$inboundSchema` instead. */
    GitSource10$.inboundSchema = GitSource10$inboundSchema;
    /** @deprecated use `GitSource10$outboundSchema` instead. */
    GitSource10$.outboundSchema = GitSource10$outboundSchema;
})(GitSource10$ || (GitSource10$ = {}));
export function gitSource10ToJSON(gitSource10) {
    return JSON.stringify(GitSource10$outboundSchema.parse(gitSource10));
}
export function gitSource10FromJSON(jsonString) {
    return safeParse(jsonString, (x) => GitSource10$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'GitSource10' from JSON`);
}
/** @internal */
export const CancelDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody9Type$inboundSchema = z.nativeEnum(CancelDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody9Type);
/** @internal */
export const CancelDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody9Type$outboundSchema = CancelDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody9Type$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CancelDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody9Type$;
(function (CancelDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody9Type$) {
    /** @deprecated use `CancelDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody9Type$inboundSchema` instead. */
    CancelDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody9Type$.inboundSchema = CancelDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody9Type$inboundSchema;
    /** @deprecated use `CancelDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody9Type$outboundSchema` instead. */
    CancelDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody9Type$.outboundSchema = CancelDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody9Type$outboundSchema;
})(CancelDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody9Type$ || (CancelDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody9Type$ = {}));
/** @internal */
export const GitSource9$inboundSchema = z.object({
    type: CancelDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody9Type$inboundSchema,
    ref: z.string(),
    sha: z.string(),
    repoId: z.number(),
    org: z.string().optional(),
    repo: z.string().optional(),
});
/** @internal */
export const GitSource9$outboundSchema = z.object({
    type: CancelDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody9Type$outboundSchema,
    ref: z.string(),
    sha: z.string(),
    repoId: z.number(),
    org: z.string().optional(),
    repo: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GitSource9$;
(function (GitSource9$) {
    /** @deprecated use `GitSource9$inboundSchema` instead. */
    GitSource9$.inboundSchema = GitSource9$inboundSchema;
    /** @deprecated use `GitSource9$outboundSchema` instead. */
    GitSource9$.outboundSchema = GitSource9$outboundSchema;
})(GitSource9$ || (GitSource9$ = {}));
export function gitSource9ToJSON(gitSource9) {
    return JSON.stringify(GitSource9$outboundSchema.parse(gitSource9));
}
export function gitSource9FromJSON(jsonString) {
    return safeParse(jsonString, (x) => GitSource9$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'GitSource9' from JSON`);
}
/** @internal */
export const CancelDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody8Type$inboundSchema = z.nativeEnum(CancelDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody8Type);
/** @internal */
export const CancelDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody8Type$outboundSchema = CancelDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody8Type$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CancelDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody8Type$;
(function (CancelDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody8Type$) {
    /** @deprecated use `CancelDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody8Type$inboundSchema` instead. */
    CancelDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody8Type$.inboundSchema = CancelDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody8Type$inboundSchema;
    /** @deprecated use `CancelDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody8Type$outboundSchema` instead. */
    CancelDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody8Type$.outboundSchema = CancelDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody8Type$outboundSchema;
})(CancelDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody8Type$ || (CancelDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody8Type$ = {}));
/** @internal */
export const GitSource8$inboundSchema = z.object({
    type: CancelDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody8Type$inboundSchema,
    ref: z.string(),
    sha: z.string(),
    gitUrl: z.string(),
});
/** @internal */
export const GitSource8$outboundSchema = z.object({
    type: CancelDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody8Type$outboundSchema,
    ref: z.string(),
    sha: z.string(),
    gitUrl: z.string(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GitSource8$;
(function (GitSource8$) {
    /** @deprecated use `GitSource8$inboundSchema` instead. */
    GitSource8$.inboundSchema = GitSource8$inboundSchema;
    /** @deprecated use `GitSource8$outboundSchema` instead. */
    GitSource8$.outboundSchema = GitSource8$outboundSchema;
})(GitSource8$ || (GitSource8$ = {}));
export function gitSource8ToJSON(gitSource8) {
    return JSON.stringify(GitSource8$outboundSchema.parse(gitSource8));
}
export function gitSource8FromJSON(jsonString) {
    return safeParse(jsonString, (x) => GitSource8$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'GitSource8' from JSON`);
}
/** @internal */
export const CancelDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody7Type$inboundSchema = z.nativeEnum(CancelDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody7Type);
/** @internal */
export const CancelDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody7Type$outboundSchema = CancelDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody7Type$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CancelDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody7Type$;
(function (CancelDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody7Type$) {
    /** @deprecated use `CancelDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody7Type$inboundSchema` instead. */
    CancelDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody7Type$.inboundSchema = CancelDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody7Type$inboundSchema;
    /** @deprecated use `CancelDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody7Type$outboundSchema` instead. */
    CancelDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody7Type$.outboundSchema = CancelDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody7Type$outboundSchema;
})(CancelDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody7Type$ || (CancelDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody7Type$ = {}));
/** @internal */
export const GitSource7$inboundSchema = z.object({
    type: CancelDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody7Type$inboundSchema,
    owner: z.string(),
    slug: z.string(),
    ref: z.nullable(z.string()).optional(),
    sha: z.string().optional(),
    prId: z.nullable(z.number()).optional(),
});
/** @internal */
export const GitSource7$outboundSchema = z.object({
    type: CancelDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody7Type$outboundSchema,
    owner: z.string(),
    slug: z.string(),
    ref: z.nullable(z.string()).optional(),
    sha: z.string().optional(),
    prId: z.nullable(z.number()).optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GitSource7$;
(function (GitSource7$) {
    /** @deprecated use `GitSource7$inboundSchema` instead. */
    GitSource7$.inboundSchema = GitSource7$inboundSchema;
    /** @deprecated use `GitSource7$outboundSchema` instead. */
    GitSource7$.outboundSchema = GitSource7$outboundSchema;
})(GitSource7$ || (GitSource7$ = {}));
export function gitSource7ToJSON(gitSource7) {
    return JSON.stringify(GitSource7$outboundSchema.parse(gitSource7));
}
export function gitSource7FromJSON(jsonString) {
    return safeParse(jsonString, (x) => GitSource7$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'GitSource7' from JSON`);
}
/** @internal */
export const CancelDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBodyType$inboundSchema = z.nativeEnum(CancelDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBodyType);
/** @internal */
export const CancelDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBodyType$outboundSchema = CancelDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBodyType$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CancelDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBodyType$;
(function (CancelDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBodyType$) {
    /** @deprecated use `CancelDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBodyType$inboundSchema` instead. */
    CancelDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBodyType$.inboundSchema = CancelDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBodyType$inboundSchema;
    /** @deprecated use `CancelDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBodyType$outboundSchema` instead. */
    CancelDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBodyType$.outboundSchema = CancelDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBodyType$outboundSchema;
})(CancelDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBodyType$ || (CancelDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBodyType$ = {}));
/** @internal */
export const CancelDeploymentGitSource6$inboundSchema = z.object({
    type: CancelDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBodyType$inboundSchema,
    workspaceUuid: z.string().optional(),
    repoUuid: z.string(),
    ref: z.nullable(z.string()).optional(),
    sha: z.string().optional(),
    prId: z.nullable(z.number()).optional(),
});
/** @internal */
export const CancelDeploymentGitSource6$outboundSchema = z.object({
    type: CancelDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBodyType$outboundSchema,
    workspaceUuid: z.string().optional(),
    repoUuid: z.string(),
    ref: z.nullable(z.string()).optional(),
    sha: z.string().optional(),
    prId: z.nullable(z.number()).optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CancelDeploymentGitSource6$;
(function (CancelDeploymentGitSource6$) {
    /** @deprecated use `CancelDeploymentGitSource6$inboundSchema` instead. */
    CancelDeploymentGitSource6$.inboundSchema = CancelDeploymentGitSource6$inboundSchema;
    /** @deprecated use `CancelDeploymentGitSource6$outboundSchema` instead. */
    CancelDeploymentGitSource6$.outboundSchema = CancelDeploymentGitSource6$outboundSchema;
})(CancelDeploymentGitSource6$ || (CancelDeploymentGitSource6$ = {}));
export function cancelDeploymentGitSource6ToJSON(cancelDeploymentGitSource6) {
    return JSON.stringify(CancelDeploymentGitSource6$outboundSchema.parse(cancelDeploymentGitSource6));
}
export function cancelDeploymentGitSource6FromJSON(jsonString) {
    return safeParse(jsonString, (x) => CancelDeploymentGitSource6$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CancelDeploymentGitSource6' from JSON`);
}
/** @internal */
export const CancelDeploymentGitSourceDeploymentsResponse200ApplicationJSONType$inboundSchema = z.nativeEnum(CancelDeploymentGitSourceDeploymentsResponse200ApplicationJSONType);
/** @internal */
export const CancelDeploymentGitSourceDeploymentsResponse200ApplicationJSONType$outboundSchema = CancelDeploymentGitSourceDeploymentsResponse200ApplicationJSONType$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CancelDeploymentGitSourceDeploymentsResponse200ApplicationJSONType$;
(function (CancelDeploymentGitSourceDeploymentsResponse200ApplicationJSONType$) {
    /** @deprecated use `CancelDeploymentGitSourceDeploymentsResponse200ApplicationJSONType$inboundSchema` instead. */
    CancelDeploymentGitSourceDeploymentsResponse200ApplicationJSONType$.inboundSchema = CancelDeploymentGitSourceDeploymentsResponse200ApplicationJSONType$inboundSchema;
    /** @deprecated use `CancelDeploymentGitSourceDeploymentsResponse200ApplicationJSONType$outboundSchema` instead. */
    CancelDeploymentGitSourceDeploymentsResponse200ApplicationJSONType$.outboundSchema = CancelDeploymentGitSourceDeploymentsResponse200ApplicationJSONType$outboundSchema;
})(CancelDeploymentGitSourceDeploymentsResponse200ApplicationJSONType$ || (CancelDeploymentGitSourceDeploymentsResponse200ApplicationJSONType$ = {}));
/** @internal */
export const CancelDeploymentGitSourceProjectId$inboundSchema = z.union([z.string(), z.number()]);
/** @internal */
export const CancelDeploymentGitSourceProjectId$outboundSchema = z.union([z.string(), z.number()]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CancelDeploymentGitSourceProjectId$;
(function (CancelDeploymentGitSourceProjectId$) {
    /** @deprecated use `CancelDeploymentGitSourceProjectId$inboundSchema` instead. */
    CancelDeploymentGitSourceProjectId$.inboundSchema = CancelDeploymentGitSourceProjectId$inboundSchema;
    /** @deprecated use `CancelDeploymentGitSourceProjectId$outboundSchema` instead. */
    CancelDeploymentGitSourceProjectId$.outboundSchema = CancelDeploymentGitSourceProjectId$outboundSchema;
})(CancelDeploymentGitSourceProjectId$ || (CancelDeploymentGitSourceProjectId$ = {}));
export function cancelDeploymentGitSourceProjectIdToJSON(cancelDeploymentGitSourceProjectId) {
    return JSON.stringify(CancelDeploymentGitSourceProjectId$outboundSchema.parse(cancelDeploymentGitSourceProjectId));
}
export function cancelDeploymentGitSourceProjectIdFromJSON(jsonString) {
    return safeParse(jsonString, (x) => CancelDeploymentGitSourceProjectId$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CancelDeploymentGitSourceProjectId' from JSON`);
}
/** @internal */
export const CancelDeploymentGitSource5$inboundSchema = z.object({
    type: CancelDeploymentGitSourceDeploymentsResponse200ApplicationJSONType$inboundSchema,
    projectId: z.union([z.string(), z.number()]),
    ref: z.nullable(z.string()).optional(),
    sha: z.string().optional(),
    prId: z.nullable(z.number()).optional(),
});
/** @internal */
export const CancelDeploymentGitSource5$outboundSchema = z.object({
    type: CancelDeploymentGitSourceDeploymentsResponse200ApplicationJSONType$outboundSchema,
    projectId: z.union([z.string(), z.number()]),
    ref: z.nullable(z.string()).optional(),
    sha: z.string().optional(),
    prId: z.nullable(z.number()).optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CancelDeploymentGitSource5$;
(function (CancelDeploymentGitSource5$) {
    /** @deprecated use `CancelDeploymentGitSource5$inboundSchema` instead. */
    CancelDeploymentGitSource5$.inboundSchema = CancelDeploymentGitSource5$inboundSchema;
    /** @deprecated use `CancelDeploymentGitSource5$outboundSchema` instead. */
    CancelDeploymentGitSource5$.outboundSchema = CancelDeploymentGitSource5$outboundSchema;
})(CancelDeploymentGitSource5$ || (CancelDeploymentGitSource5$ = {}));
export function cancelDeploymentGitSource5ToJSON(cancelDeploymentGitSource5) {
    return JSON.stringify(CancelDeploymentGitSource5$outboundSchema.parse(cancelDeploymentGitSource5));
}
export function cancelDeploymentGitSource5FromJSON(jsonString) {
    return safeParse(jsonString, (x) => CancelDeploymentGitSource5$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CancelDeploymentGitSource5' from JSON`);
}
/** @internal */
export const CancelDeploymentGitSourceDeploymentsResponse200Type$inboundSchema = z.nativeEnum(CancelDeploymentGitSourceDeploymentsResponse200Type);
/** @internal */
export const CancelDeploymentGitSourceDeploymentsResponse200Type$outboundSchema = CancelDeploymentGitSourceDeploymentsResponse200Type$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CancelDeploymentGitSourceDeploymentsResponse200Type$;
(function (CancelDeploymentGitSourceDeploymentsResponse200Type$) {
    /** @deprecated use `CancelDeploymentGitSourceDeploymentsResponse200Type$inboundSchema` instead. */
    CancelDeploymentGitSourceDeploymentsResponse200Type$.inboundSchema = CancelDeploymentGitSourceDeploymentsResponse200Type$inboundSchema;
    /** @deprecated use `CancelDeploymentGitSourceDeploymentsResponse200Type$outboundSchema` instead. */
    CancelDeploymentGitSourceDeploymentsResponse200Type$.outboundSchema = CancelDeploymentGitSourceDeploymentsResponse200Type$outboundSchema;
})(CancelDeploymentGitSourceDeploymentsResponse200Type$ || (CancelDeploymentGitSourceDeploymentsResponse200Type$ = {}));
/** @internal */
export const CancelDeploymentGitSource4$inboundSchema = z.object({
    type: CancelDeploymentGitSourceDeploymentsResponse200Type$inboundSchema,
    host: z.string(),
    org: z.string(),
    repo: z.string(),
    ref: z.nullable(z.string()).optional(),
    sha: z.string().optional(),
    prId: z.nullable(z.number()).optional(),
});
/** @internal */
export const CancelDeploymentGitSource4$outboundSchema = z.object({
    type: CancelDeploymentGitSourceDeploymentsResponse200Type$outboundSchema,
    host: z.string(),
    org: z.string(),
    repo: z.string(),
    ref: z.nullable(z.string()).optional(),
    sha: z.string().optional(),
    prId: z.nullable(z.number()).optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CancelDeploymentGitSource4$;
(function (CancelDeploymentGitSource4$) {
    /** @deprecated use `CancelDeploymentGitSource4$inboundSchema` instead. */
    CancelDeploymentGitSource4$.inboundSchema = CancelDeploymentGitSource4$inboundSchema;
    /** @deprecated use `CancelDeploymentGitSource4$outboundSchema` instead. */
    CancelDeploymentGitSource4$.outboundSchema = CancelDeploymentGitSource4$outboundSchema;
})(CancelDeploymentGitSource4$ || (CancelDeploymentGitSource4$ = {}));
export function cancelDeploymentGitSource4ToJSON(cancelDeploymentGitSource4) {
    return JSON.stringify(CancelDeploymentGitSource4$outboundSchema.parse(cancelDeploymentGitSource4));
}
export function cancelDeploymentGitSource4FromJSON(jsonString) {
    return safeParse(jsonString, (x) => CancelDeploymentGitSource4$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CancelDeploymentGitSource4' from JSON`);
}
/** @internal */
export const CancelDeploymentGitSourceDeploymentsResponseType$inboundSchema = z
    .nativeEnum(CancelDeploymentGitSourceDeploymentsResponseType);
/** @internal */
export const CancelDeploymentGitSourceDeploymentsResponseType$outboundSchema = CancelDeploymentGitSourceDeploymentsResponseType$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CancelDeploymentGitSourceDeploymentsResponseType$;
(function (CancelDeploymentGitSourceDeploymentsResponseType$) {
    /** @deprecated use `CancelDeploymentGitSourceDeploymentsResponseType$inboundSchema` instead. */
    CancelDeploymentGitSourceDeploymentsResponseType$.inboundSchema = CancelDeploymentGitSourceDeploymentsResponseType$inboundSchema;
    /** @deprecated use `CancelDeploymentGitSourceDeploymentsResponseType$outboundSchema` instead. */
    CancelDeploymentGitSourceDeploymentsResponseType$.outboundSchema = CancelDeploymentGitSourceDeploymentsResponseType$outboundSchema;
})(CancelDeploymentGitSourceDeploymentsResponseType$ || (CancelDeploymentGitSourceDeploymentsResponseType$ = {}));
/** @internal */
export const CancelDeploymentGitSourceDeploymentsRepoId$inboundSchema = z.union([z.string(), z.number()]);
/** @internal */
export const CancelDeploymentGitSourceDeploymentsRepoId$outboundSchema = z.union([z.string(), z.number()]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CancelDeploymentGitSourceDeploymentsRepoId$;
(function (CancelDeploymentGitSourceDeploymentsRepoId$) {
    /** @deprecated use `CancelDeploymentGitSourceDeploymentsRepoId$inboundSchema` instead. */
    CancelDeploymentGitSourceDeploymentsRepoId$.inboundSchema = CancelDeploymentGitSourceDeploymentsRepoId$inboundSchema;
    /** @deprecated use `CancelDeploymentGitSourceDeploymentsRepoId$outboundSchema` instead. */
    CancelDeploymentGitSourceDeploymentsRepoId$.outboundSchema = CancelDeploymentGitSourceDeploymentsRepoId$outboundSchema;
})(CancelDeploymentGitSourceDeploymentsRepoId$ || (CancelDeploymentGitSourceDeploymentsRepoId$ = {}));
export function cancelDeploymentGitSourceDeploymentsRepoIdToJSON(cancelDeploymentGitSourceDeploymentsRepoId) {
    return JSON.stringify(CancelDeploymentGitSourceDeploymentsRepoId$outboundSchema.parse(cancelDeploymentGitSourceDeploymentsRepoId));
}
export function cancelDeploymentGitSourceDeploymentsRepoIdFromJSON(jsonString) {
    return safeParse(jsonString, (x) => CancelDeploymentGitSourceDeploymentsRepoId$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CancelDeploymentGitSourceDeploymentsRepoId' from JSON`);
}
/** @internal */
export const CancelDeploymentGitSource3$inboundSchema = z.object({
    type: CancelDeploymentGitSourceDeploymentsResponseType$inboundSchema,
    host: z.string(),
    repoId: z.union([z.string(), z.number()]),
    ref: z.nullable(z.string()).optional(),
    sha: z.string().optional(),
    prId: z.nullable(z.number()).optional(),
});
/** @internal */
export const CancelDeploymentGitSource3$outboundSchema = z.object({
    type: CancelDeploymentGitSourceDeploymentsResponseType$outboundSchema,
    host: z.string(),
    repoId: z.union([z.string(), z.number()]),
    ref: z.nullable(z.string()).optional(),
    sha: z.string().optional(),
    prId: z.nullable(z.number()).optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CancelDeploymentGitSource3$;
(function (CancelDeploymentGitSource3$) {
    /** @deprecated use `CancelDeploymentGitSource3$inboundSchema` instead. */
    CancelDeploymentGitSource3$.inboundSchema = CancelDeploymentGitSource3$inboundSchema;
    /** @deprecated use `CancelDeploymentGitSource3$outboundSchema` instead. */
    CancelDeploymentGitSource3$.outboundSchema = CancelDeploymentGitSource3$outboundSchema;
})(CancelDeploymentGitSource3$ || (CancelDeploymentGitSource3$ = {}));
export function cancelDeploymentGitSource3ToJSON(cancelDeploymentGitSource3) {
    return JSON.stringify(CancelDeploymentGitSource3$outboundSchema.parse(cancelDeploymentGitSource3));
}
export function cancelDeploymentGitSource3FromJSON(jsonString) {
    return safeParse(jsonString, (x) => CancelDeploymentGitSource3$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CancelDeploymentGitSource3' from JSON`);
}
/** @internal */
export const CancelDeploymentGitSourceDeploymentsType$inboundSchema = z
    .nativeEnum(CancelDeploymentGitSourceDeploymentsType);
/** @internal */
export const CancelDeploymentGitSourceDeploymentsType$outboundSchema = CancelDeploymentGitSourceDeploymentsType$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CancelDeploymentGitSourceDeploymentsType$;
(function (CancelDeploymentGitSourceDeploymentsType$) {
    /** @deprecated use `CancelDeploymentGitSourceDeploymentsType$inboundSchema` instead. */
    CancelDeploymentGitSourceDeploymentsType$.inboundSchema = CancelDeploymentGitSourceDeploymentsType$inboundSchema;
    /** @deprecated use `CancelDeploymentGitSourceDeploymentsType$outboundSchema` instead. */
    CancelDeploymentGitSourceDeploymentsType$.outboundSchema = CancelDeploymentGitSourceDeploymentsType$outboundSchema;
})(CancelDeploymentGitSourceDeploymentsType$ || (CancelDeploymentGitSourceDeploymentsType$ = {}));
/** @internal */
export const CancelDeploymentGitSource2$inboundSchema = z.object({
    type: CancelDeploymentGitSourceDeploymentsType$inboundSchema,
    org: z.string(),
    repo: z.string(),
    ref: z.nullable(z.string()).optional(),
    sha: z.string().optional(),
    prId: z.nullable(z.number()).optional(),
});
/** @internal */
export const CancelDeploymentGitSource2$outboundSchema = z.object({
    type: CancelDeploymentGitSourceDeploymentsType$outboundSchema,
    org: z.string(),
    repo: z.string(),
    ref: z.nullable(z.string()).optional(),
    sha: z.string().optional(),
    prId: z.nullable(z.number()).optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CancelDeploymentGitSource2$;
(function (CancelDeploymentGitSource2$) {
    /** @deprecated use `CancelDeploymentGitSource2$inboundSchema` instead. */
    CancelDeploymentGitSource2$.inboundSchema = CancelDeploymentGitSource2$inboundSchema;
    /** @deprecated use `CancelDeploymentGitSource2$outboundSchema` instead. */
    CancelDeploymentGitSource2$.outboundSchema = CancelDeploymentGitSource2$outboundSchema;
})(CancelDeploymentGitSource2$ || (CancelDeploymentGitSource2$ = {}));
export function cancelDeploymentGitSource2ToJSON(cancelDeploymentGitSource2) {
    return JSON.stringify(CancelDeploymentGitSource2$outboundSchema.parse(cancelDeploymentGitSource2));
}
export function cancelDeploymentGitSource2FromJSON(jsonString) {
    return safeParse(jsonString, (x) => CancelDeploymentGitSource2$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CancelDeploymentGitSource2' from JSON`);
}
/** @internal */
export const CancelDeploymentGitSourceType$inboundSchema = z.nativeEnum(CancelDeploymentGitSourceType);
/** @internal */
export const CancelDeploymentGitSourceType$outboundSchema = CancelDeploymentGitSourceType$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CancelDeploymentGitSourceType$;
(function (CancelDeploymentGitSourceType$) {
    /** @deprecated use `CancelDeploymentGitSourceType$inboundSchema` instead. */
    CancelDeploymentGitSourceType$.inboundSchema = CancelDeploymentGitSourceType$inboundSchema;
    /** @deprecated use `CancelDeploymentGitSourceType$outboundSchema` instead. */
    CancelDeploymentGitSourceType$.outboundSchema = CancelDeploymentGitSourceType$outboundSchema;
})(CancelDeploymentGitSourceType$ || (CancelDeploymentGitSourceType$ = {}));
/** @internal */
export const CancelDeploymentGitSourceRepoId$inboundSchema = z.union([z.string(), z.number()]);
/** @internal */
export const CancelDeploymentGitSourceRepoId$outboundSchema = z.union([z.string(), z.number()]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CancelDeploymentGitSourceRepoId$;
(function (CancelDeploymentGitSourceRepoId$) {
    /** @deprecated use `CancelDeploymentGitSourceRepoId$inboundSchema` instead. */
    CancelDeploymentGitSourceRepoId$.inboundSchema = CancelDeploymentGitSourceRepoId$inboundSchema;
    /** @deprecated use `CancelDeploymentGitSourceRepoId$outboundSchema` instead. */
    CancelDeploymentGitSourceRepoId$.outboundSchema = CancelDeploymentGitSourceRepoId$outboundSchema;
})(CancelDeploymentGitSourceRepoId$ || (CancelDeploymentGitSourceRepoId$ = {}));
export function cancelDeploymentGitSourceRepoIdToJSON(cancelDeploymentGitSourceRepoId) {
    return JSON.stringify(CancelDeploymentGitSourceRepoId$outboundSchema.parse(cancelDeploymentGitSourceRepoId));
}
export function cancelDeploymentGitSourceRepoIdFromJSON(jsonString) {
    return safeParse(jsonString, (x) => CancelDeploymentGitSourceRepoId$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CancelDeploymentGitSourceRepoId' from JSON`);
}
/** @internal */
export const CancelDeploymentGitSource1$inboundSchema = z.object({
    type: CancelDeploymentGitSourceType$inboundSchema,
    repoId: z.union([z.string(), z.number()]),
    ref: z.nullable(z.string()).optional(),
    sha: z.string().optional(),
    prId: z.nullable(z.number()).optional(),
});
/** @internal */
export const CancelDeploymentGitSource1$outboundSchema = z.object({
    type: CancelDeploymentGitSourceType$outboundSchema,
    repoId: z.union([z.string(), z.number()]),
    ref: z.nullable(z.string()).optional(),
    sha: z.string().optional(),
    prId: z.nullable(z.number()).optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CancelDeploymentGitSource1$;
(function (CancelDeploymentGitSource1$) {
    /** @deprecated use `CancelDeploymentGitSource1$inboundSchema` instead. */
    CancelDeploymentGitSource1$.inboundSchema = CancelDeploymentGitSource1$inboundSchema;
    /** @deprecated use `CancelDeploymentGitSource1$outboundSchema` instead. */
    CancelDeploymentGitSource1$.outboundSchema = CancelDeploymentGitSource1$outboundSchema;
})(CancelDeploymentGitSource1$ || (CancelDeploymentGitSource1$ = {}));
export function cancelDeploymentGitSource1ToJSON(cancelDeploymentGitSource1) {
    return JSON.stringify(CancelDeploymentGitSource1$outboundSchema.parse(cancelDeploymentGitSource1));
}
export function cancelDeploymentGitSource1FromJSON(jsonString) {
    return safeParse(jsonString, (x) => CancelDeploymentGitSource1$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CancelDeploymentGitSource1' from JSON`);
}
/** @internal */
export const CancelDeploymentGitSource$inboundSchema = z.union([
    z.lazy(() => GitSource8$inboundSchema),
    z.lazy(() => GitSource11$inboundSchema),
    z.lazy(() => CancelDeploymentGitSource1$inboundSchema),
    z.lazy(() => CancelDeploymentGitSource5$inboundSchema),
    z.lazy(() => CancelDeploymentGitSource2$inboundSchema),
    z.lazy(() => CancelDeploymentGitSource3$inboundSchema),
    z.lazy(() => CancelDeploymentGitSource6$inboundSchema),
    z.lazy(() => GitSource7$inboundSchema),
    z.lazy(() => GitSource9$inboundSchema),
    z.lazy(() => CancelDeploymentGitSource4$inboundSchema),
    z.lazy(() => GitSource10$inboundSchema),
    z.lazy(() => GitSource12$inboundSchema),
]);
/** @internal */
export const CancelDeploymentGitSource$outboundSchema = z.union([
    z.lazy(() => GitSource8$outboundSchema),
    z.lazy(() => GitSource11$outboundSchema),
    z.lazy(() => CancelDeploymentGitSource1$outboundSchema),
    z.lazy(() => CancelDeploymentGitSource5$outboundSchema),
    z.lazy(() => CancelDeploymentGitSource2$outboundSchema),
    z.lazy(() => CancelDeploymentGitSource3$outboundSchema),
    z.lazy(() => CancelDeploymentGitSource6$outboundSchema),
    z.lazy(() => GitSource7$outboundSchema),
    z.lazy(() => GitSource9$outboundSchema),
    z.lazy(() => CancelDeploymentGitSource4$outboundSchema),
    z.lazy(() => GitSource10$outboundSchema),
    z.lazy(() => GitSource12$outboundSchema),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CancelDeploymentGitSource$;
(function (CancelDeploymentGitSource$) {
    /** @deprecated use `CancelDeploymentGitSource$inboundSchema` instead. */
    CancelDeploymentGitSource$.inboundSchema = CancelDeploymentGitSource$inboundSchema;
    /** @deprecated use `CancelDeploymentGitSource$outboundSchema` instead. */
    CancelDeploymentGitSource$.outboundSchema = CancelDeploymentGitSource$outboundSchema;
})(CancelDeploymentGitSource$ || (CancelDeploymentGitSource$ = {}));
export function cancelDeploymentGitSourceToJSON(cancelDeploymentGitSource) {
    return JSON.stringify(CancelDeploymentGitSource$outboundSchema.parse(cancelDeploymentGitSource));
}
export function cancelDeploymentGitSourceFromJSON(jsonString) {
    return safeParse(jsonString, (x) => CancelDeploymentGitSource$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CancelDeploymentGitSource' from JSON`);
}
/** @internal */
export const CancelDeploymentProject$inboundSchema = z.object({
    id: z.string(),
    name: z.string(),
    framework: z.nullable(z.string()).optional(),
});
/** @internal */
export const CancelDeploymentProject$outboundSchema = z.object({
    id: z.string(),
    name: z.string(),
    framework: z.nullable(z.string()).optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CancelDeploymentProject$;
(function (CancelDeploymentProject$) {
    /** @deprecated use `CancelDeploymentProject$inboundSchema` instead. */
    CancelDeploymentProject$.inboundSchema = CancelDeploymentProject$inboundSchema;
    /** @deprecated use `CancelDeploymentProject$outboundSchema` instead. */
    CancelDeploymentProject$.outboundSchema = CancelDeploymentProject$outboundSchema;
})(CancelDeploymentProject$ || (CancelDeploymentProject$ = {}));
export function cancelDeploymentProjectToJSON(cancelDeploymentProject) {
    return JSON.stringify(CancelDeploymentProject$outboundSchema.parse(cancelDeploymentProject));
}
export function cancelDeploymentProjectFromJSON(jsonString) {
    return safeParse(jsonString, (x) => CancelDeploymentProject$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CancelDeploymentProject' from JSON`);
}
/** @internal */
export const CancelDeploymentReadyState$inboundSchema = z.nativeEnum(CancelDeploymentReadyState);
/** @internal */
export const CancelDeploymentReadyState$outboundSchema = CancelDeploymentReadyState$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CancelDeploymentReadyState$;
(function (CancelDeploymentReadyState$) {
    /** @deprecated use `CancelDeploymentReadyState$inboundSchema` instead. */
    CancelDeploymentReadyState$.inboundSchema = CancelDeploymentReadyState$inboundSchema;
    /** @deprecated use `CancelDeploymentReadyState$outboundSchema` instead. */
    CancelDeploymentReadyState$.outboundSchema = CancelDeploymentReadyState$outboundSchema;
})(CancelDeploymentReadyState$ || (CancelDeploymentReadyState$ = {}));
/** @internal */
export const CancelDeploymentReadySubstate$inboundSchema = z.nativeEnum(CancelDeploymentReadySubstate);
/** @internal */
export const CancelDeploymentReadySubstate$outboundSchema = CancelDeploymentReadySubstate$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CancelDeploymentReadySubstate$;
(function (CancelDeploymentReadySubstate$) {
    /** @deprecated use `CancelDeploymentReadySubstate$inboundSchema` instead. */
    CancelDeploymentReadySubstate$.inboundSchema = CancelDeploymentReadySubstate$inboundSchema;
    /** @deprecated use `CancelDeploymentReadySubstate$outboundSchema` instead. */
    CancelDeploymentReadySubstate$.outboundSchema = CancelDeploymentReadySubstate$outboundSchema;
})(CancelDeploymentReadySubstate$ || (CancelDeploymentReadySubstate$ = {}));
/** @internal */
export const CancelDeploymentSource$inboundSchema = z.nativeEnum(CancelDeploymentSource);
/** @internal */
export const CancelDeploymentSource$outboundSchema = CancelDeploymentSource$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CancelDeploymentSource$;
(function (CancelDeploymentSource$) {
    /** @deprecated use `CancelDeploymentSource$inboundSchema` instead. */
    CancelDeploymentSource$.inboundSchema = CancelDeploymentSource$inboundSchema;
    /** @deprecated use `CancelDeploymentSource$outboundSchema` instead. */
    CancelDeploymentSource$.outboundSchema = CancelDeploymentSource$outboundSchema;
})(CancelDeploymentSource$ || (CancelDeploymentSource$ = {}));
/** @internal */
export const CancelDeploymentTarget$inboundSchema = z.nativeEnum(CancelDeploymentTarget);
/** @internal */
export const CancelDeploymentTarget$outboundSchema = CancelDeploymentTarget$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CancelDeploymentTarget$;
(function (CancelDeploymentTarget$) {
    /** @deprecated use `CancelDeploymentTarget$inboundSchema` instead. */
    CancelDeploymentTarget$.inboundSchema = CancelDeploymentTarget$inboundSchema;
    /** @deprecated use `CancelDeploymentTarget$outboundSchema` instead. */
    CancelDeploymentTarget$.outboundSchema = CancelDeploymentTarget$outboundSchema;
})(CancelDeploymentTarget$ || (CancelDeploymentTarget$ = {}));
/** @internal */
export const CancelDeploymentType$inboundSchema = z.nativeEnum(CancelDeploymentType);
/** @internal */
export const CancelDeploymentType$outboundSchema = CancelDeploymentType$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CancelDeploymentType$;
(function (CancelDeploymentType$) {
    /** @deprecated use `CancelDeploymentType$inboundSchema` instead. */
    CancelDeploymentType$.inboundSchema = CancelDeploymentType$inboundSchema;
    /** @deprecated use `CancelDeploymentType$outboundSchema` instead. */
    CancelDeploymentType$.outboundSchema = CancelDeploymentType$outboundSchema;
})(CancelDeploymentType$ || (CancelDeploymentType$ = {}));
/** @internal */
export const CancelDeploymentOidcTokenClaims$inboundSchema = z.object({
    iss: z.string(),
    sub: z.string(),
    scope: z.string(),
    aud: z.string(),
    owner: z.string(),
    owner_id: z.string(),
    project: z.string(),
    project_id: z.string(),
    environment: z.string(),
}).transform((v) => {
    return remap$(v, {
        "owner_id": "ownerId",
        "project_id": "projectId",
    });
});
/** @internal */
export const CancelDeploymentOidcTokenClaims$outboundSchema = z.object({
    iss: z.string(),
    sub: z.string(),
    scope: z.string(),
    aud: z.string(),
    owner: z.string(),
    ownerId: z.string(),
    project: z.string(),
    projectId: z.string(),
    environment: z.string(),
}).transform((v) => {
    return remap$(v, {
        ownerId: "owner_id",
        projectId: "project_id",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CancelDeploymentOidcTokenClaims$;
(function (CancelDeploymentOidcTokenClaims$) {
    /** @deprecated use `CancelDeploymentOidcTokenClaims$inboundSchema` instead. */
    CancelDeploymentOidcTokenClaims$.inboundSchema = CancelDeploymentOidcTokenClaims$inboundSchema;
    /** @deprecated use `CancelDeploymentOidcTokenClaims$outboundSchema` instead. */
    CancelDeploymentOidcTokenClaims$.outboundSchema = CancelDeploymentOidcTokenClaims$outboundSchema;
})(CancelDeploymentOidcTokenClaims$ || (CancelDeploymentOidcTokenClaims$ = {}));
export function cancelDeploymentOidcTokenClaimsToJSON(cancelDeploymentOidcTokenClaims) {
    return JSON.stringify(CancelDeploymentOidcTokenClaims$outboundSchema.parse(cancelDeploymentOidcTokenClaims));
}
export function cancelDeploymentOidcTokenClaimsFromJSON(jsonString) {
    return safeParse(jsonString, (x) => CancelDeploymentOidcTokenClaims$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CancelDeploymentOidcTokenClaims' from JSON`);
}
/** @internal */
export const CancelDeploymentCrons$inboundSchema = z.object({
    schedule: z.string(),
    path: z.string(),
});
/** @internal */
export const CancelDeploymentCrons$outboundSchema = z.object({
    schedule: z.string(),
    path: z.string(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CancelDeploymentCrons$;
(function (CancelDeploymentCrons$) {
    /** @deprecated use `CancelDeploymentCrons$inboundSchema` instead. */
    CancelDeploymentCrons$.inboundSchema = CancelDeploymentCrons$inboundSchema;
    /** @deprecated use `CancelDeploymentCrons$outboundSchema` instead. */
    CancelDeploymentCrons$.outboundSchema = CancelDeploymentCrons$outboundSchema;
})(CancelDeploymentCrons$ || (CancelDeploymentCrons$ = {}));
export function cancelDeploymentCronsToJSON(cancelDeploymentCrons) {
    return JSON.stringify(CancelDeploymentCrons$outboundSchema.parse(cancelDeploymentCrons));
}
export function cancelDeploymentCronsFromJSON(jsonString) {
    return safeParse(jsonString, (x) => CancelDeploymentCrons$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CancelDeploymentCrons' from JSON`);
}
/** @internal */
export const CancelDeploymentFunctions$inboundSchema = z.object({
    memory: z.number().optional(),
    maxDuration: z.number().optional(),
    runtime: z.string().optional(),
    includeFiles: z.string().optional(),
    excludeFiles: z.string().optional(),
});
/** @internal */
export const CancelDeploymentFunctions$outboundSchema = z.object({
    memory: z.number().optional(),
    maxDuration: z.number().optional(),
    runtime: z.string().optional(),
    includeFiles: z.string().optional(),
    excludeFiles: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CancelDeploymentFunctions$;
(function (CancelDeploymentFunctions$) {
    /** @deprecated use `CancelDeploymentFunctions$inboundSchema` instead. */
    CancelDeploymentFunctions$.inboundSchema = CancelDeploymentFunctions$inboundSchema;
    /** @deprecated use `CancelDeploymentFunctions$outboundSchema` instead. */
    CancelDeploymentFunctions$.outboundSchema = CancelDeploymentFunctions$outboundSchema;
})(CancelDeploymentFunctions$ || (CancelDeploymentFunctions$ = {}));
export function cancelDeploymentFunctionsToJSON(cancelDeploymentFunctions) {
    return JSON.stringify(CancelDeploymentFunctions$outboundSchema.parse(cancelDeploymentFunctions));
}
export function cancelDeploymentFunctionsFromJSON(jsonString) {
    return safeParse(jsonString, (x) => CancelDeploymentFunctions$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CancelDeploymentFunctions' from JSON`);
}
/** @internal */
export const CancelDeploymentPlan$inboundSchema = z.nativeEnum(CancelDeploymentPlan);
/** @internal */
export const CancelDeploymentPlan$outboundSchema = CancelDeploymentPlan$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CancelDeploymentPlan$;
(function (CancelDeploymentPlan$) {
    /** @deprecated use `CancelDeploymentPlan$inboundSchema` instead. */
    CancelDeploymentPlan$.inboundSchema = CancelDeploymentPlan$inboundSchema;
    /** @deprecated use `CancelDeploymentPlan$outboundSchema` instead. */
    CancelDeploymentPlan$.outboundSchema = CancelDeploymentPlan$outboundSchema;
})(CancelDeploymentPlan$ || (CancelDeploymentPlan$ = {}));
/** @internal */
export const CancelDeploymentRoutes3$inboundSchema = z.object({
    src: z.string(),
    continue: z.boolean(),
    middleware: z.number(),
});
/** @internal */
export const CancelDeploymentRoutes3$outboundSchema = z.object({
    src: z.string(),
    continue: z.boolean(),
    middleware: z.number(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CancelDeploymentRoutes3$;
(function (CancelDeploymentRoutes3$) {
    /** @deprecated use `CancelDeploymentRoutes3$inboundSchema` instead. */
    CancelDeploymentRoutes3$.inboundSchema = CancelDeploymentRoutes3$inboundSchema;
    /** @deprecated use `CancelDeploymentRoutes3$outboundSchema` instead. */
    CancelDeploymentRoutes3$.outboundSchema = CancelDeploymentRoutes3$outboundSchema;
})(CancelDeploymentRoutes3$ || (CancelDeploymentRoutes3$ = {}));
export function cancelDeploymentRoutes3ToJSON(cancelDeploymentRoutes3) {
    return JSON.stringify(CancelDeploymentRoutes3$outboundSchema.parse(cancelDeploymentRoutes3));
}
export function cancelDeploymentRoutes3FromJSON(jsonString) {
    return safeParse(jsonString, (x) => CancelDeploymentRoutes3$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CancelDeploymentRoutes3' from JSON`);
}
/** @internal */
export const CancelDeploymentRoutesHandle$inboundSchema = z.nativeEnum(CancelDeploymentRoutesHandle);
/** @internal */
export const CancelDeploymentRoutesHandle$outboundSchema = CancelDeploymentRoutesHandle$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CancelDeploymentRoutesHandle$;
(function (CancelDeploymentRoutesHandle$) {
    /** @deprecated use `CancelDeploymentRoutesHandle$inboundSchema` instead. */
    CancelDeploymentRoutesHandle$.inboundSchema = CancelDeploymentRoutesHandle$inboundSchema;
    /** @deprecated use `CancelDeploymentRoutesHandle$outboundSchema` instead. */
    CancelDeploymentRoutesHandle$.outboundSchema = CancelDeploymentRoutesHandle$outboundSchema;
})(CancelDeploymentRoutesHandle$ || (CancelDeploymentRoutesHandle$ = {}));
/** @internal */
export const CancelDeploymentRoutes2$inboundSchema = z.object({
    handle: CancelDeploymentRoutesHandle$inboundSchema,
    src: z.string().optional(),
    dest: z.string().optional(),
    status: z.number().optional(),
});
/** @internal */
export const CancelDeploymentRoutes2$outboundSchema = z.object({
    handle: CancelDeploymentRoutesHandle$outboundSchema,
    src: z.string().optional(),
    dest: z.string().optional(),
    status: z.number().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CancelDeploymentRoutes2$;
(function (CancelDeploymentRoutes2$) {
    /** @deprecated use `CancelDeploymentRoutes2$inboundSchema` instead. */
    CancelDeploymentRoutes2$.inboundSchema = CancelDeploymentRoutes2$inboundSchema;
    /** @deprecated use `CancelDeploymentRoutes2$outboundSchema` instead. */
    CancelDeploymentRoutes2$.outboundSchema = CancelDeploymentRoutes2$outboundSchema;
})(CancelDeploymentRoutes2$ || (CancelDeploymentRoutes2$ = {}));
export function cancelDeploymentRoutes2ToJSON(cancelDeploymentRoutes2) {
    return JSON.stringify(CancelDeploymentRoutes2$outboundSchema.parse(cancelDeploymentRoutes2));
}
export function cancelDeploymentRoutes2FromJSON(jsonString) {
    return safeParse(jsonString, (x) => CancelDeploymentRoutes2$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CancelDeploymentRoutes2' from JSON`);
}
/** @internal */
export const CancelDeploymentHasDeploymentsType$inboundSchema = z.nativeEnum(CancelDeploymentHasDeploymentsType);
/** @internal */
export const CancelDeploymentHasDeploymentsType$outboundSchema = CancelDeploymentHasDeploymentsType$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CancelDeploymentHasDeploymentsType$;
(function (CancelDeploymentHasDeploymentsType$) {
    /** @deprecated use `CancelDeploymentHasDeploymentsType$inboundSchema` instead. */
    CancelDeploymentHasDeploymentsType$.inboundSchema = CancelDeploymentHasDeploymentsType$inboundSchema;
    /** @deprecated use `CancelDeploymentHasDeploymentsType$outboundSchema` instead. */
    CancelDeploymentHasDeploymentsType$.outboundSchema = CancelDeploymentHasDeploymentsType$outboundSchema;
})(CancelDeploymentHasDeploymentsType$ || (CancelDeploymentHasDeploymentsType$ = {}));
/** @internal */
export const CancelDeploymentHas2$inboundSchema = z.object({
    type: CancelDeploymentHasDeploymentsType$inboundSchema,
    key: z.string(),
    value: z.string().optional(),
});
/** @internal */
export const CancelDeploymentHas2$outboundSchema = z.object({
    type: CancelDeploymentHasDeploymentsType$outboundSchema,
    key: z.string(),
    value: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CancelDeploymentHas2$;
(function (CancelDeploymentHas2$) {
    /** @deprecated use `CancelDeploymentHas2$inboundSchema` instead. */
    CancelDeploymentHas2$.inboundSchema = CancelDeploymentHas2$inboundSchema;
    /** @deprecated use `CancelDeploymentHas2$outboundSchema` instead. */
    CancelDeploymentHas2$.outboundSchema = CancelDeploymentHas2$outboundSchema;
})(CancelDeploymentHas2$ || (CancelDeploymentHas2$ = {}));
export function cancelDeploymentHas2ToJSON(cancelDeploymentHas2) {
    return JSON.stringify(CancelDeploymentHas2$outboundSchema.parse(cancelDeploymentHas2));
}
export function cancelDeploymentHas2FromJSON(jsonString) {
    return safeParse(jsonString, (x) => CancelDeploymentHas2$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CancelDeploymentHas2' from JSON`);
}
/** @internal */
export const CancelDeploymentHasType$inboundSchema = z.nativeEnum(CancelDeploymentHasType);
/** @internal */
export const CancelDeploymentHasType$outboundSchema = CancelDeploymentHasType$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CancelDeploymentHasType$;
(function (CancelDeploymentHasType$) {
    /** @deprecated use `CancelDeploymentHasType$inboundSchema` instead. */
    CancelDeploymentHasType$.inboundSchema = CancelDeploymentHasType$inboundSchema;
    /** @deprecated use `CancelDeploymentHasType$outboundSchema` instead. */
    CancelDeploymentHasType$.outboundSchema = CancelDeploymentHasType$outboundSchema;
})(CancelDeploymentHasType$ || (CancelDeploymentHasType$ = {}));
/** @internal */
export const CancelDeploymentHas1$inboundSchema = z.object({
    type: CancelDeploymentHasType$inboundSchema,
    value: z.string(),
});
/** @internal */
export const CancelDeploymentHas1$outboundSchema = z.object({
    type: CancelDeploymentHasType$outboundSchema,
    value: z.string(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CancelDeploymentHas1$;
(function (CancelDeploymentHas1$) {
    /** @deprecated use `CancelDeploymentHas1$inboundSchema` instead. */
    CancelDeploymentHas1$.inboundSchema = CancelDeploymentHas1$inboundSchema;
    /** @deprecated use `CancelDeploymentHas1$outboundSchema` instead. */
    CancelDeploymentHas1$.outboundSchema = CancelDeploymentHas1$outboundSchema;
})(CancelDeploymentHas1$ || (CancelDeploymentHas1$ = {}));
export function cancelDeploymentHas1ToJSON(cancelDeploymentHas1) {
    return JSON.stringify(CancelDeploymentHas1$outboundSchema.parse(cancelDeploymentHas1));
}
export function cancelDeploymentHas1FromJSON(jsonString) {
    return safeParse(jsonString, (x) => CancelDeploymentHas1$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CancelDeploymentHas1' from JSON`);
}
/** @internal */
export const CancelDeploymentRoutesHas$inboundSchema = z.union([
    z.lazy(() => CancelDeploymentHas1$inboundSchema),
    z.lazy(() => CancelDeploymentHas2$inboundSchema),
]);
/** @internal */
export const CancelDeploymentRoutesHas$outboundSchema = z.union([
    z.lazy(() => CancelDeploymentHas1$outboundSchema),
    z.lazy(() => CancelDeploymentHas2$outboundSchema),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CancelDeploymentRoutesHas$;
(function (CancelDeploymentRoutesHas$) {
    /** @deprecated use `CancelDeploymentRoutesHas$inboundSchema` instead. */
    CancelDeploymentRoutesHas$.inboundSchema = CancelDeploymentRoutesHas$inboundSchema;
    /** @deprecated use `CancelDeploymentRoutesHas$outboundSchema` instead. */
    CancelDeploymentRoutesHas$.outboundSchema = CancelDeploymentRoutesHas$outboundSchema;
})(CancelDeploymentRoutesHas$ || (CancelDeploymentRoutesHas$ = {}));
export function cancelDeploymentRoutesHasToJSON(cancelDeploymentRoutesHas) {
    return JSON.stringify(CancelDeploymentRoutesHas$outboundSchema.parse(cancelDeploymentRoutesHas));
}
export function cancelDeploymentRoutesHasFromJSON(jsonString) {
    return safeParse(jsonString, (x) => CancelDeploymentRoutesHas$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CancelDeploymentRoutesHas' from JSON`);
}
/** @internal */
export const CancelDeploymentMissingDeploymentsType$inboundSchema = z.nativeEnum(CancelDeploymentMissingDeploymentsType);
/** @internal */
export const CancelDeploymentMissingDeploymentsType$outboundSchema = CancelDeploymentMissingDeploymentsType$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CancelDeploymentMissingDeploymentsType$;
(function (CancelDeploymentMissingDeploymentsType$) {
    /** @deprecated use `CancelDeploymentMissingDeploymentsType$inboundSchema` instead. */
    CancelDeploymentMissingDeploymentsType$.inboundSchema = CancelDeploymentMissingDeploymentsType$inboundSchema;
    /** @deprecated use `CancelDeploymentMissingDeploymentsType$outboundSchema` instead. */
    CancelDeploymentMissingDeploymentsType$.outboundSchema = CancelDeploymentMissingDeploymentsType$outboundSchema;
})(CancelDeploymentMissingDeploymentsType$ || (CancelDeploymentMissingDeploymentsType$ = {}));
/** @internal */
export const CancelDeploymentMissing2$inboundSchema = z.object({
    type: CancelDeploymentMissingDeploymentsType$inboundSchema,
    key: z.string(),
    value: z.string().optional(),
});
/** @internal */
export const CancelDeploymentMissing2$outboundSchema = z.object({
    type: CancelDeploymentMissingDeploymentsType$outboundSchema,
    key: z.string(),
    value: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CancelDeploymentMissing2$;
(function (CancelDeploymentMissing2$) {
    /** @deprecated use `CancelDeploymentMissing2$inboundSchema` instead. */
    CancelDeploymentMissing2$.inboundSchema = CancelDeploymentMissing2$inboundSchema;
    /** @deprecated use `CancelDeploymentMissing2$outboundSchema` instead. */
    CancelDeploymentMissing2$.outboundSchema = CancelDeploymentMissing2$outboundSchema;
})(CancelDeploymentMissing2$ || (CancelDeploymentMissing2$ = {}));
export function cancelDeploymentMissing2ToJSON(cancelDeploymentMissing2) {
    return JSON.stringify(CancelDeploymentMissing2$outboundSchema.parse(cancelDeploymentMissing2));
}
export function cancelDeploymentMissing2FromJSON(jsonString) {
    return safeParse(jsonString, (x) => CancelDeploymentMissing2$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CancelDeploymentMissing2' from JSON`);
}
/** @internal */
export const CancelDeploymentMissingType$inboundSchema = z.nativeEnum(CancelDeploymentMissingType);
/** @internal */
export const CancelDeploymentMissingType$outboundSchema = CancelDeploymentMissingType$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CancelDeploymentMissingType$;
(function (CancelDeploymentMissingType$) {
    /** @deprecated use `CancelDeploymentMissingType$inboundSchema` instead. */
    CancelDeploymentMissingType$.inboundSchema = CancelDeploymentMissingType$inboundSchema;
    /** @deprecated use `CancelDeploymentMissingType$outboundSchema` instead. */
    CancelDeploymentMissingType$.outboundSchema = CancelDeploymentMissingType$outboundSchema;
})(CancelDeploymentMissingType$ || (CancelDeploymentMissingType$ = {}));
/** @internal */
export const CancelDeploymentMissing1$inboundSchema = z.object({
    type: CancelDeploymentMissingType$inboundSchema,
    value: z.string(),
});
/** @internal */
export const CancelDeploymentMissing1$outboundSchema = z.object({
    type: CancelDeploymentMissingType$outboundSchema,
    value: z.string(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CancelDeploymentMissing1$;
(function (CancelDeploymentMissing1$) {
    /** @deprecated use `CancelDeploymentMissing1$inboundSchema` instead. */
    CancelDeploymentMissing1$.inboundSchema = CancelDeploymentMissing1$inboundSchema;
    /** @deprecated use `CancelDeploymentMissing1$outboundSchema` instead. */
    CancelDeploymentMissing1$.outboundSchema = CancelDeploymentMissing1$outboundSchema;
})(CancelDeploymentMissing1$ || (CancelDeploymentMissing1$ = {}));
export function cancelDeploymentMissing1ToJSON(cancelDeploymentMissing1) {
    return JSON.stringify(CancelDeploymentMissing1$outboundSchema.parse(cancelDeploymentMissing1));
}
export function cancelDeploymentMissing1FromJSON(jsonString) {
    return safeParse(jsonString, (x) => CancelDeploymentMissing1$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CancelDeploymentMissing1' from JSON`);
}
/** @internal */
export const CancelDeploymentRoutesMissing$inboundSchema = z.union([
    z.lazy(() => CancelDeploymentMissing1$inboundSchema),
    z.lazy(() => CancelDeploymentMissing2$inboundSchema),
]);
/** @internal */
export const CancelDeploymentRoutesMissing$outboundSchema = z.union([
    z.lazy(() => CancelDeploymentMissing1$outboundSchema),
    z.lazy(() => CancelDeploymentMissing2$outboundSchema),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CancelDeploymentRoutesMissing$;
(function (CancelDeploymentRoutesMissing$) {
    /** @deprecated use `CancelDeploymentRoutesMissing$inboundSchema` instead. */
    CancelDeploymentRoutesMissing$.inboundSchema = CancelDeploymentRoutesMissing$inboundSchema;
    /** @deprecated use `CancelDeploymentRoutesMissing$outboundSchema` instead. */
    CancelDeploymentRoutesMissing$.outboundSchema = CancelDeploymentRoutesMissing$outboundSchema;
})(CancelDeploymentRoutesMissing$ || (CancelDeploymentRoutesMissing$ = {}));
export function cancelDeploymentRoutesMissingToJSON(cancelDeploymentRoutesMissing) {
    return JSON.stringify(CancelDeploymentRoutesMissing$outboundSchema.parse(cancelDeploymentRoutesMissing));
}
export function cancelDeploymentRoutesMissingFromJSON(jsonString) {
    return safeParse(jsonString, (x) => CancelDeploymentRoutesMissing$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CancelDeploymentRoutesMissing' from JSON`);
}
/** @internal */
export const RoutesLocale$inboundSchema = z.object({
    redirect: z.record(z.string()).optional(),
    cookie: z.string().optional(),
});
/** @internal */
export const RoutesLocale$outboundSchema = z.object({
    redirect: z.record(z.string()).optional(),
    cookie: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var RoutesLocale$;
(function (RoutesLocale$) {
    /** @deprecated use `RoutesLocale$inboundSchema` instead. */
    RoutesLocale$.inboundSchema = RoutesLocale$inboundSchema;
    /** @deprecated use `RoutesLocale$outboundSchema` instead. */
    RoutesLocale$.outboundSchema = RoutesLocale$outboundSchema;
})(RoutesLocale$ || (RoutesLocale$ = {}));
export function routesLocaleToJSON(routesLocale) {
    return JSON.stringify(RoutesLocale$outboundSchema.parse(routesLocale));
}
export function routesLocaleFromJSON(jsonString) {
    return safeParse(jsonString, (x) => RoutesLocale$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'RoutesLocale' from JSON`);
}
/** @internal */
export const CancelDeploymentRoutes1$inboundSchema = z.object({
    src: z.string(),
    dest: z.string().optional(),
    headers: z.record(z.string()).optional(),
    methods: z.array(z.string()).optional(),
    continue: z.boolean().optional(),
    override: z.boolean().optional(),
    caseSensitive: z.boolean().optional(),
    check: z.boolean().optional(),
    important: z.boolean().optional(),
    status: z.number().optional(),
    has: z.array(z.union([
        z.lazy(() => CancelDeploymentHas1$inboundSchema),
        z.lazy(() => CancelDeploymentHas2$inboundSchema),
    ])).optional(),
    missing: z.array(z.union([
        z.lazy(() => CancelDeploymentMissing1$inboundSchema),
        z.lazy(() => CancelDeploymentMissing2$inboundSchema),
    ])).optional(),
    locale: z.lazy(() => RoutesLocale$inboundSchema).optional(),
    middlewarePath: z.string().optional(),
    middlewareRawSrc: z.array(z.string()).optional(),
    middleware: z.number().optional(),
});
/** @internal */
export const CancelDeploymentRoutes1$outboundSchema = z.object({
    src: z.string(),
    dest: z.string().optional(),
    headers: z.record(z.string()).optional(),
    methods: z.array(z.string()).optional(),
    continue: z.boolean().optional(),
    override: z.boolean().optional(),
    caseSensitive: z.boolean().optional(),
    check: z.boolean().optional(),
    important: z.boolean().optional(),
    status: z.number().optional(),
    has: z.array(z.union([
        z.lazy(() => CancelDeploymentHas1$outboundSchema),
        z.lazy(() => CancelDeploymentHas2$outboundSchema),
    ])).optional(),
    missing: z.array(z.union([
        z.lazy(() => CancelDeploymentMissing1$outboundSchema),
        z.lazy(() => CancelDeploymentMissing2$outboundSchema),
    ])).optional(),
    locale: z.lazy(() => RoutesLocale$outboundSchema).optional(),
    middlewarePath: z.string().optional(),
    middlewareRawSrc: z.array(z.string()).optional(),
    middleware: z.number().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CancelDeploymentRoutes1$;
(function (CancelDeploymentRoutes1$) {
    /** @deprecated use `CancelDeploymentRoutes1$inboundSchema` instead. */
    CancelDeploymentRoutes1$.inboundSchema = CancelDeploymentRoutes1$inboundSchema;
    /** @deprecated use `CancelDeploymentRoutes1$outboundSchema` instead. */
    CancelDeploymentRoutes1$.outboundSchema = CancelDeploymentRoutes1$outboundSchema;
})(CancelDeploymentRoutes1$ || (CancelDeploymentRoutes1$ = {}));
export function cancelDeploymentRoutes1ToJSON(cancelDeploymentRoutes1) {
    return JSON.stringify(CancelDeploymentRoutes1$outboundSchema.parse(cancelDeploymentRoutes1));
}
export function cancelDeploymentRoutes1FromJSON(jsonString) {
    return safeParse(jsonString, (x) => CancelDeploymentRoutes1$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CancelDeploymentRoutes1' from JSON`);
}
/** @internal */
export const CancelDeploymentRoutes$inboundSchema = z.union([
    z.lazy(() => CancelDeploymentRoutes3$inboundSchema),
    z.lazy(() => CancelDeploymentRoutes2$inboundSchema),
    z.lazy(() => CancelDeploymentRoutes1$inboundSchema),
]);
/** @internal */
export const CancelDeploymentRoutes$outboundSchema = z.union([
    z.lazy(() => CancelDeploymentRoutes3$outboundSchema),
    z.lazy(() => CancelDeploymentRoutes2$outboundSchema),
    z.lazy(() => CancelDeploymentRoutes1$outboundSchema),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CancelDeploymentRoutes$;
(function (CancelDeploymentRoutes$) {
    /** @deprecated use `CancelDeploymentRoutes$inboundSchema` instead. */
    CancelDeploymentRoutes$.inboundSchema = CancelDeploymentRoutes$inboundSchema;
    /** @deprecated use `CancelDeploymentRoutes$outboundSchema` instead. */
    CancelDeploymentRoutes$.outboundSchema = CancelDeploymentRoutes$outboundSchema;
})(CancelDeploymentRoutes$ || (CancelDeploymentRoutes$ = {}));
export function cancelDeploymentRoutesToJSON(cancelDeploymentRoutes) {
    return JSON.stringify(CancelDeploymentRoutes$outboundSchema.parse(cancelDeploymentRoutes));
}
export function cancelDeploymentRoutesFromJSON(jsonString) {
    return safeParse(jsonString, (x) => CancelDeploymentRoutes$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CancelDeploymentRoutes' from JSON`);
}
/** @internal */
export const CancelDeploymentGitRepoDeploymentsResponseType$inboundSchema = z
    .nativeEnum(CancelDeploymentGitRepoDeploymentsResponseType);
/** @internal */
export const CancelDeploymentGitRepoDeploymentsResponseType$outboundSchema = CancelDeploymentGitRepoDeploymentsResponseType$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CancelDeploymentGitRepoDeploymentsResponseType$;
(function (CancelDeploymentGitRepoDeploymentsResponseType$) {
    /** @deprecated use `CancelDeploymentGitRepoDeploymentsResponseType$inboundSchema` instead. */
    CancelDeploymentGitRepoDeploymentsResponseType$.inboundSchema = CancelDeploymentGitRepoDeploymentsResponseType$inboundSchema;
    /** @deprecated use `CancelDeploymentGitRepoDeploymentsResponseType$outboundSchema` instead. */
    CancelDeploymentGitRepoDeploymentsResponseType$.outboundSchema = CancelDeploymentGitRepoDeploymentsResponseType$outboundSchema;
})(CancelDeploymentGitRepoDeploymentsResponseType$ || (CancelDeploymentGitRepoDeploymentsResponseType$ = {}));
/** @internal */
export const CancelDeploymentGitRepoDeploymentsResponseOwnerType$inboundSchema = z.nativeEnum(CancelDeploymentGitRepoDeploymentsResponseOwnerType);
/** @internal */
export const CancelDeploymentGitRepoDeploymentsResponseOwnerType$outboundSchema = CancelDeploymentGitRepoDeploymentsResponseOwnerType$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CancelDeploymentGitRepoDeploymentsResponseOwnerType$;
(function (CancelDeploymentGitRepoDeploymentsResponseOwnerType$) {
    /** @deprecated use `CancelDeploymentGitRepoDeploymentsResponseOwnerType$inboundSchema` instead. */
    CancelDeploymentGitRepoDeploymentsResponseOwnerType$.inboundSchema = CancelDeploymentGitRepoDeploymentsResponseOwnerType$inboundSchema;
    /** @deprecated use `CancelDeploymentGitRepoDeploymentsResponseOwnerType$outboundSchema` instead. */
    CancelDeploymentGitRepoDeploymentsResponseOwnerType$.outboundSchema = CancelDeploymentGitRepoDeploymentsResponseOwnerType$outboundSchema;
})(CancelDeploymentGitRepoDeploymentsResponseOwnerType$ || (CancelDeploymentGitRepoDeploymentsResponseOwnerType$ = {}));
/** @internal */
export const CancelDeploymentGitRepo3$inboundSchema = z.object({
    owner: z.string(),
    repoUuid: z.string(),
    slug: z.string(),
    type: CancelDeploymentGitRepoDeploymentsResponseType$inboundSchema,
    workspaceUuid: z.string(),
    path: z.string(),
    defaultBranch: z.string(),
    name: z.string(),
    private: z.boolean(),
    ownerType: CancelDeploymentGitRepoDeploymentsResponseOwnerType$inboundSchema,
});
/** @internal */
export const CancelDeploymentGitRepo3$outboundSchema = z.object({
    owner: z.string(),
    repoUuid: z.string(),
    slug: z.string(),
    type: CancelDeploymentGitRepoDeploymentsResponseType$outboundSchema,
    workspaceUuid: z.string(),
    path: z.string(),
    defaultBranch: z.string(),
    name: z.string(),
    private: z.boolean(),
    ownerType: CancelDeploymentGitRepoDeploymentsResponseOwnerType$outboundSchema,
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CancelDeploymentGitRepo3$;
(function (CancelDeploymentGitRepo3$) {
    /** @deprecated use `CancelDeploymentGitRepo3$inboundSchema` instead. */
    CancelDeploymentGitRepo3$.inboundSchema = CancelDeploymentGitRepo3$inboundSchema;
    /** @deprecated use `CancelDeploymentGitRepo3$outboundSchema` instead. */
    CancelDeploymentGitRepo3$.outboundSchema = CancelDeploymentGitRepo3$outboundSchema;
})(CancelDeploymentGitRepo3$ || (CancelDeploymentGitRepo3$ = {}));
export function cancelDeploymentGitRepo3ToJSON(cancelDeploymentGitRepo3) {
    return JSON.stringify(CancelDeploymentGitRepo3$outboundSchema.parse(cancelDeploymentGitRepo3));
}
export function cancelDeploymentGitRepo3FromJSON(jsonString) {
    return safeParse(jsonString, (x) => CancelDeploymentGitRepo3$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CancelDeploymentGitRepo3' from JSON`);
}
/** @internal */
export const CancelDeploymentGitRepoDeploymentsType$inboundSchema = z.nativeEnum(CancelDeploymentGitRepoDeploymentsType);
/** @internal */
export const CancelDeploymentGitRepoDeploymentsType$outboundSchema = CancelDeploymentGitRepoDeploymentsType$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CancelDeploymentGitRepoDeploymentsType$;
(function (CancelDeploymentGitRepoDeploymentsType$) {
    /** @deprecated use `CancelDeploymentGitRepoDeploymentsType$inboundSchema` instead. */
    CancelDeploymentGitRepoDeploymentsType$.inboundSchema = CancelDeploymentGitRepoDeploymentsType$inboundSchema;
    /** @deprecated use `CancelDeploymentGitRepoDeploymentsType$outboundSchema` instead. */
    CancelDeploymentGitRepoDeploymentsType$.outboundSchema = CancelDeploymentGitRepoDeploymentsType$outboundSchema;
})(CancelDeploymentGitRepoDeploymentsType$ || (CancelDeploymentGitRepoDeploymentsType$ = {}));
/** @internal */
export const CancelDeploymentGitRepoDeploymentsOwnerType$inboundSchema = z
    .nativeEnum(CancelDeploymentGitRepoDeploymentsOwnerType);
/** @internal */
export const CancelDeploymentGitRepoDeploymentsOwnerType$outboundSchema = CancelDeploymentGitRepoDeploymentsOwnerType$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CancelDeploymentGitRepoDeploymentsOwnerType$;
(function (CancelDeploymentGitRepoDeploymentsOwnerType$) {
    /** @deprecated use `CancelDeploymentGitRepoDeploymentsOwnerType$inboundSchema` instead. */
    CancelDeploymentGitRepoDeploymentsOwnerType$.inboundSchema = CancelDeploymentGitRepoDeploymentsOwnerType$inboundSchema;
    /** @deprecated use `CancelDeploymentGitRepoDeploymentsOwnerType$outboundSchema` instead. */
    CancelDeploymentGitRepoDeploymentsOwnerType$.outboundSchema = CancelDeploymentGitRepoDeploymentsOwnerType$outboundSchema;
})(CancelDeploymentGitRepoDeploymentsOwnerType$ || (CancelDeploymentGitRepoDeploymentsOwnerType$ = {}));
/** @internal */
export const CancelDeploymentGitRepo2$inboundSchema = z.object({
    org: z.string(),
    repo: z.string(),
    repoId: z.number(),
    type: CancelDeploymentGitRepoDeploymentsType$inboundSchema,
    repoOwnerId: z.number(),
    path: z.string(),
    defaultBranch: z.string(),
    name: z.string(),
    private: z.boolean(),
    ownerType: CancelDeploymentGitRepoDeploymentsOwnerType$inboundSchema,
});
/** @internal */
export const CancelDeploymentGitRepo2$outboundSchema = z.object({
    org: z.string(),
    repo: z.string(),
    repoId: z.number(),
    type: CancelDeploymentGitRepoDeploymentsType$outboundSchema,
    repoOwnerId: z.number(),
    path: z.string(),
    defaultBranch: z.string(),
    name: z.string(),
    private: z.boolean(),
    ownerType: CancelDeploymentGitRepoDeploymentsOwnerType$outboundSchema,
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CancelDeploymentGitRepo2$;
(function (CancelDeploymentGitRepo2$) {
    /** @deprecated use `CancelDeploymentGitRepo2$inboundSchema` instead. */
    CancelDeploymentGitRepo2$.inboundSchema = CancelDeploymentGitRepo2$inboundSchema;
    /** @deprecated use `CancelDeploymentGitRepo2$outboundSchema` instead. */
    CancelDeploymentGitRepo2$.outboundSchema = CancelDeploymentGitRepo2$outboundSchema;
})(CancelDeploymentGitRepo2$ || (CancelDeploymentGitRepo2$ = {}));
export function cancelDeploymentGitRepo2ToJSON(cancelDeploymentGitRepo2) {
    return JSON.stringify(CancelDeploymentGitRepo2$outboundSchema.parse(cancelDeploymentGitRepo2));
}
export function cancelDeploymentGitRepo2FromJSON(jsonString) {
    return safeParse(jsonString, (x) => CancelDeploymentGitRepo2$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CancelDeploymentGitRepo2' from JSON`);
}
/** @internal */
export const CancelDeploymentGitRepoType$inboundSchema = z.nativeEnum(CancelDeploymentGitRepoType);
/** @internal */
export const CancelDeploymentGitRepoType$outboundSchema = CancelDeploymentGitRepoType$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CancelDeploymentGitRepoType$;
(function (CancelDeploymentGitRepoType$) {
    /** @deprecated use `CancelDeploymentGitRepoType$inboundSchema` instead. */
    CancelDeploymentGitRepoType$.inboundSchema = CancelDeploymentGitRepoType$inboundSchema;
    /** @deprecated use `CancelDeploymentGitRepoType$outboundSchema` instead. */
    CancelDeploymentGitRepoType$.outboundSchema = CancelDeploymentGitRepoType$outboundSchema;
})(CancelDeploymentGitRepoType$ || (CancelDeploymentGitRepoType$ = {}));
/** @internal */
export const CancelDeploymentGitRepoOwnerType$inboundSchema = z.nativeEnum(CancelDeploymentGitRepoOwnerType);
/** @internal */
export const CancelDeploymentGitRepoOwnerType$outboundSchema = CancelDeploymentGitRepoOwnerType$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CancelDeploymentGitRepoOwnerType$;
(function (CancelDeploymentGitRepoOwnerType$) {
    /** @deprecated use `CancelDeploymentGitRepoOwnerType$inboundSchema` instead. */
    CancelDeploymentGitRepoOwnerType$.inboundSchema = CancelDeploymentGitRepoOwnerType$inboundSchema;
    /** @deprecated use `CancelDeploymentGitRepoOwnerType$outboundSchema` instead. */
    CancelDeploymentGitRepoOwnerType$.outboundSchema = CancelDeploymentGitRepoOwnerType$outboundSchema;
})(CancelDeploymentGitRepoOwnerType$ || (CancelDeploymentGitRepoOwnerType$ = {}));
/** @internal */
export const CancelDeploymentGitRepo1$inboundSchema = z.object({
    namespace: z.string(),
    projectId: z.number(),
    type: CancelDeploymentGitRepoType$inboundSchema,
    url: z.string(),
    path: z.string(),
    defaultBranch: z.string(),
    name: z.string(),
    private: z.boolean(),
    ownerType: CancelDeploymentGitRepoOwnerType$inboundSchema,
});
/** @internal */
export const CancelDeploymentGitRepo1$outboundSchema = z.object({
    namespace: z.string(),
    projectId: z.number(),
    type: CancelDeploymentGitRepoType$outboundSchema,
    url: z.string(),
    path: z.string(),
    defaultBranch: z.string(),
    name: z.string(),
    private: z.boolean(),
    ownerType: CancelDeploymentGitRepoOwnerType$outboundSchema,
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CancelDeploymentGitRepo1$;
(function (CancelDeploymentGitRepo1$) {
    /** @deprecated use `CancelDeploymentGitRepo1$inboundSchema` instead. */
    CancelDeploymentGitRepo1$.inboundSchema = CancelDeploymentGitRepo1$inboundSchema;
    /** @deprecated use `CancelDeploymentGitRepo1$outboundSchema` instead. */
    CancelDeploymentGitRepo1$.outboundSchema = CancelDeploymentGitRepo1$outboundSchema;
})(CancelDeploymentGitRepo1$ || (CancelDeploymentGitRepo1$ = {}));
export function cancelDeploymentGitRepo1ToJSON(cancelDeploymentGitRepo1) {
    return JSON.stringify(CancelDeploymentGitRepo1$outboundSchema.parse(cancelDeploymentGitRepo1));
}
export function cancelDeploymentGitRepo1FromJSON(jsonString) {
    return safeParse(jsonString, (x) => CancelDeploymentGitRepo1$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CancelDeploymentGitRepo1' from JSON`);
}
/** @internal */
export const CancelDeploymentGitRepo$inboundSchema = z.union([
    z.lazy(() => CancelDeploymentGitRepo1$inboundSchema),
    z.lazy(() => CancelDeploymentGitRepo2$inboundSchema),
    z.lazy(() => CancelDeploymentGitRepo3$inboundSchema),
]);
/** @internal */
export const CancelDeploymentGitRepo$outboundSchema = z.union([
    z.lazy(() => CancelDeploymentGitRepo1$outboundSchema),
    z.lazy(() => CancelDeploymentGitRepo2$outboundSchema),
    z.lazy(() => CancelDeploymentGitRepo3$outboundSchema),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CancelDeploymentGitRepo$;
(function (CancelDeploymentGitRepo$) {
    /** @deprecated use `CancelDeploymentGitRepo$inboundSchema` instead. */
    CancelDeploymentGitRepo$.inboundSchema = CancelDeploymentGitRepo$inboundSchema;
    /** @deprecated use `CancelDeploymentGitRepo$outboundSchema` instead. */
    CancelDeploymentGitRepo$.outboundSchema = CancelDeploymentGitRepo$outboundSchema;
})(CancelDeploymentGitRepo$ || (CancelDeploymentGitRepo$ = {}));
export function cancelDeploymentGitRepoToJSON(cancelDeploymentGitRepo) {
    return JSON.stringify(CancelDeploymentGitRepo$outboundSchema.parse(cancelDeploymentGitRepo));
}
export function cancelDeploymentGitRepoFromJSON(jsonString) {
    return safeParse(jsonString, (x) => CancelDeploymentGitRepo$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CancelDeploymentGitRepo' from JSON`);
}
/** @internal */
export const CancelDeploymentFlags2$inboundSchema = z.object({});
/** @internal */
export const CancelDeploymentFlags2$outboundSchema = z.object({});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CancelDeploymentFlags2$;
(function (CancelDeploymentFlags2$) {
    /** @deprecated use `CancelDeploymentFlags2$inboundSchema` instead. */
    CancelDeploymentFlags2$.inboundSchema = CancelDeploymentFlags2$inboundSchema;
    /** @deprecated use `CancelDeploymentFlags2$outboundSchema` instead. */
    CancelDeploymentFlags2$.outboundSchema = CancelDeploymentFlags2$outboundSchema;
})(CancelDeploymentFlags2$ || (CancelDeploymentFlags2$ = {}));
export function cancelDeploymentFlags2ToJSON(cancelDeploymentFlags2) {
    return JSON.stringify(CancelDeploymentFlags2$outboundSchema.parse(cancelDeploymentFlags2));
}
export function cancelDeploymentFlags2FromJSON(jsonString) {
    return safeParse(jsonString, (x) => CancelDeploymentFlags2$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CancelDeploymentFlags2' from JSON`);
}
/** @internal */
export const FlagsOptions$inboundSchema = z.object({
    value: z.nullable(FlagJSONValue$inboundSchema),
    label: z.string().optional(),
});
/** @internal */
export const FlagsOptions$outboundSchema = z.object({
    value: z.nullable(FlagJSONValue$outboundSchema),
    label: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var FlagsOptions$;
(function (FlagsOptions$) {
    /** @deprecated use `FlagsOptions$inboundSchema` instead. */
    FlagsOptions$.inboundSchema = FlagsOptions$inboundSchema;
    /** @deprecated use `FlagsOptions$outboundSchema` instead. */
    FlagsOptions$.outboundSchema = FlagsOptions$outboundSchema;
})(FlagsOptions$ || (FlagsOptions$ = {}));
export function flagsOptionsToJSON(flagsOptions) {
    return JSON.stringify(FlagsOptions$outboundSchema.parse(flagsOptions));
}
export function flagsOptionsFromJSON(jsonString) {
    return safeParse(jsonString, (x) => FlagsOptions$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'FlagsOptions' from JSON`);
}
/** @internal */
export const CancelDeploymentFlagsDefinitions$inboundSchema = z.object({
    options: z.array(z.lazy(() => FlagsOptions$inboundSchema)).optional(),
    url: z.string().optional(),
    description: z.string().optional(),
});
/** @internal */
export const CancelDeploymentFlagsDefinitions$outboundSchema = z.object({
    options: z.array(z.lazy(() => FlagsOptions$outboundSchema)).optional(),
    url: z.string().optional(),
    description: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CancelDeploymentFlagsDefinitions$;
(function (CancelDeploymentFlagsDefinitions$) {
    /** @deprecated use `CancelDeploymentFlagsDefinitions$inboundSchema` instead. */
    CancelDeploymentFlagsDefinitions$.inboundSchema = CancelDeploymentFlagsDefinitions$inboundSchema;
    /** @deprecated use `CancelDeploymentFlagsDefinitions$outboundSchema` instead. */
    CancelDeploymentFlagsDefinitions$.outboundSchema = CancelDeploymentFlagsDefinitions$outboundSchema;
})(CancelDeploymentFlagsDefinitions$ || (CancelDeploymentFlagsDefinitions$ = {}));
export function cancelDeploymentFlagsDefinitionsToJSON(cancelDeploymentFlagsDefinitions) {
    return JSON.stringify(CancelDeploymentFlagsDefinitions$outboundSchema.parse(cancelDeploymentFlagsDefinitions));
}
export function cancelDeploymentFlagsDefinitionsFromJSON(jsonString) {
    return safeParse(jsonString, (x) => CancelDeploymentFlagsDefinitions$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CancelDeploymentFlagsDefinitions' from JSON`);
}
/** @internal */
export const CancelDeploymentFlags1$inboundSchema = z.object({
    definitions: z.record(z.lazy(() => CancelDeploymentFlagsDefinitions$inboundSchema)),
});
/** @internal */
export const CancelDeploymentFlags1$outboundSchema = z.object({
    definitions: z.record(z.lazy(() => CancelDeploymentFlagsDefinitions$outboundSchema)),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CancelDeploymentFlags1$;
(function (CancelDeploymentFlags1$) {
    /** @deprecated use `CancelDeploymentFlags1$inboundSchema` instead. */
    CancelDeploymentFlags1$.inboundSchema = CancelDeploymentFlags1$inboundSchema;
    /** @deprecated use `CancelDeploymentFlags1$outboundSchema` instead. */
    CancelDeploymentFlags1$.outboundSchema = CancelDeploymentFlags1$outboundSchema;
})(CancelDeploymentFlags1$ || (CancelDeploymentFlags1$ = {}));
export function cancelDeploymentFlags1ToJSON(cancelDeploymentFlags1) {
    return JSON.stringify(CancelDeploymentFlags1$outboundSchema.parse(cancelDeploymentFlags1));
}
export function cancelDeploymentFlags1FromJSON(jsonString) {
    return safeParse(jsonString, (x) => CancelDeploymentFlags1$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CancelDeploymentFlags1' from JSON`);
}
/** @internal */
export const CancelDeploymentFlags$inboundSchema = z.union([
    z.lazy(() => CancelDeploymentFlags1$inboundSchema),
    z.array(z.lazy(() => CancelDeploymentFlags2$inboundSchema)),
]);
/** @internal */
export const CancelDeploymentFlags$outboundSchema = z.union([
    z.lazy(() => CancelDeploymentFlags1$outboundSchema),
    z.array(z.lazy(() => CancelDeploymentFlags2$outboundSchema)),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CancelDeploymentFlags$;
(function (CancelDeploymentFlags$) {
    /** @deprecated use `CancelDeploymentFlags$inboundSchema` instead. */
    CancelDeploymentFlags$.inboundSchema = CancelDeploymentFlags$inboundSchema;
    /** @deprecated use `CancelDeploymentFlags$outboundSchema` instead. */
    CancelDeploymentFlags$.outboundSchema = CancelDeploymentFlags$outboundSchema;
})(CancelDeploymentFlags$ || (CancelDeploymentFlags$ = {}));
export function cancelDeploymentFlagsToJSON(cancelDeploymentFlags) {
    return JSON.stringify(CancelDeploymentFlags$outboundSchema.parse(cancelDeploymentFlags));
}
export function cancelDeploymentFlagsFromJSON(jsonString) {
    return safeParse(jsonString, (x) => CancelDeploymentFlags$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CancelDeploymentFlags' from JSON`);
}
/** @internal */
export const MicrofrontendsApplications$inboundSchema = z.object({
    productionHost: z.string(),
    deploymentAlias: z.string().optional(),
    deploymentHost: z.string().optional(),
});
/** @internal */
export const MicrofrontendsApplications$outboundSchema = z.object({
    productionHost: z.string(),
    deploymentAlias: z.string().optional(),
    deploymentHost: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var MicrofrontendsApplications$;
(function (MicrofrontendsApplications$) {
    /** @deprecated use `MicrofrontendsApplications$inboundSchema` instead. */
    MicrofrontendsApplications$.inboundSchema = MicrofrontendsApplications$inboundSchema;
    /** @deprecated use `MicrofrontendsApplications$outboundSchema` instead. */
    MicrofrontendsApplications$.outboundSchema = MicrofrontendsApplications$outboundSchema;
})(MicrofrontendsApplications$ || (MicrofrontendsApplications$ = {}));
export function microfrontendsApplicationsToJSON(microfrontendsApplications) {
    return JSON.stringify(MicrofrontendsApplications$outboundSchema.parse(microfrontendsApplications));
}
export function microfrontendsApplicationsFromJSON(jsonString) {
    return safeParse(jsonString, (x) => MicrofrontendsApplications$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'MicrofrontendsApplications' from JSON`);
}
/** @internal */
export const CancelDeploymentMicrofrontends2$inboundSchema = z.object({
    applications: z.record(z.lazy(() => MicrofrontendsApplications$inboundSchema))
        .optional(),
    isDefaultApp: z.boolean(),
    defaultAppProjectName: z.string(),
    defaultRoute: z.string().optional(),
    groupIds: z.array(z.string()),
});
/** @internal */
export const CancelDeploymentMicrofrontends2$outboundSchema = z.object({
    applications: z.record(z.lazy(() => MicrofrontendsApplications$outboundSchema)).optional(),
    isDefaultApp: z.boolean(),
    defaultAppProjectName: z.string(),
    defaultRoute: z.string().optional(),
    groupIds: z.array(z.string()),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CancelDeploymentMicrofrontends2$;
(function (CancelDeploymentMicrofrontends2$) {
    /** @deprecated use `CancelDeploymentMicrofrontends2$inboundSchema` instead. */
    CancelDeploymentMicrofrontends2$.inboundSchema = CancelDeploymentMicrofrontends2$inboundSchema;
    /** @deprecated use `CancelDeploymentMicrofrontends2$outboundSchema` instead. */
    CancelDeploymentMicrofrontends2$.outboundSchema = CancelDeploymentMicrofrontends2$outboundSchema;
})(CancelDeploymentMicrofrontends2$ || (CancelDeploymentMicrofrontends2$ = {}));
export function cancelDeploymentMicrofrontends2ToJSON(cancelDeploymentMicrofrontends2) {
    return JSON.stringify(CancelDeploymentMicrofrontends2$outboundSchema.parse(cancelDeploymentMicrofrontends2));
}
export function cancelDeploymentMicrofrontends2FromJSON(jsonString) {
    return safeParse(jsonString, (x) => CancelDeploymentMicrofrontends2$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CancelDeploymentMicrofrontends2' from JSON`);
}
/** @internal */
export const CancelDeploymentMicrofrontends1$inboundSchema = z.object({
    isDefaultApp: z.boolean().optional(),
    defaultAppProjectName: z.string(),
    defaultRoute: z.string().optional(),
    groupIds: z.array(z.string()),
});
/** @internal */
export const CancelDeploymentMicrofrontends1$outboundSchema = z.object({
    isDefaultApp: z.boolean().optional(),
    defaultAppProjectName: z.string(),
    defaultRoute: z.string().optional(),
    groupIds: z.array(z.string()),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CancelDeploymentMicrofrontends1$;
(function (CancelDeploymentMicrofrontends1$) {
    /** @deprecated use `CancelDeploymentMicrofrontends1$inboundSchema` instead. */
    CancelDeploymentMicrofrontends1$.inboundSchema = CancelDeploymentMicrofrontends1$inboundSchema;
    /** @deprecated use `CancelDeploymentMicrofrontends1$outboundSchema` instead. */
    CancelDeploymentMicrofrontends1$.outboundSchema = CancelDeploymentMicrofrontends1$outboundSchema;
})(CancelDeploymentMicrofrontends1$ || (CancelDeploymentMicrofrontends1$ = {}));
export function cancelDeploymentMicrofrontends1ToJSON(cancelDeploymentMicrofrontends1) {
    return JSON.stringify(CancelDeploymentMicrofrontends1$outboundSchema.parse(cancelDeploymentMicrofrontends1));
}
export function cancelDeploymentMicrofrontends1FromJSON(jsonString) {
    return safeParse(jsonString, (x) => CancelDeploymentMicrofrontends1$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CancelDeploymentMicrofrontends1' from JSON`);
}
/** @internal */
export const CancelDeploymentMicrofrontends$inboundSchema = z.union([
    z.lazy(() => CancelDeploymentMicrofrontends1$inboundSchema),
    z.lazy(() => CancelDeploymentMicrofrontends2$inboundSchema),
]);
/** @internal */
export const CancelDeploymentMicrofrontends$outboundSchema = z.union([
    z.lazy(() => CancelDeploymentMicrofrontends1$outboundSchema),
    z.lazy(() => CancelDeploymentMicrofrontends2$outboundSchema),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CancelDeploymentMicrofrontends$;
(function (CancelDeploymentMicrofrontends$) {
    /** @deprecated use `CancelDeploymentMicrofrontends$inboundSchema` instead. */
    CancelDeploymentMicrofrontends$.inboundSchema = CancelDeploymentMicrofrontends$inboundSchema;
    /** @deprecated use `CancelDeploymentMicrofrontends$outboundSchema` instead. */
    CancelDeploymentMicrofrontends$.outboundSchema = CancelDeploymentMicrofrontends$outboundSchema;
})(CancelDeploymentMicrofrontends$ || (CancelDeploymentMicrofrontends$ = {}));
export function cancelDeploymentMicrofrontendsToJSON(cancelDeploymentMicrofrontends) {
    return JSON.stringify(CancelDeploymentMicrofrontends$outboundSchema.parse(cancelDeploymentMicrofrontends));
}
export function cancelDeploymentMicrofrontendsFromJSON(jsonString) {
    return safeParse(jsonString, (x) => CancelDeploymentMicrofrontends$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CancelDeploymentMicrofrontends' from JSON`);
}
/** @internal */
export const CancelDeploymentFunctionType$inboundSchema = z.nativeEnum(CancelDeploymentFunctionType);
/** @internal */
export const CancelDeploymentFunctionType$outboundSchema = CancelDeploymentFunctionType$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CancelDeploymentFunctionType$;
(function (CancelDeploymentFunctionType$) {
    /** @deprecated use `CancelDeploymentFunctionType$inboundSchema` instead. */
    CancelDeploymentFunctionType$.inboundSchema = CancelDeploymentFunctionType$inboundSchema;
    /** @deprecated use `CancelDeploymentFunctionType$outboundSchema` instead. */
    CancelDeploymentFunctionType$.outboundSchema = CancelDeploymentFunctionType$outboundSchema;
})(CancelDeploymentFunctionType$ || (CancelDeploymentFunctionType$ = {}));
/** @internal */
export const CancelDeploymentFunctionMemoryType$inboundSchema = z.nativeEnum(CancelDeploymentFunctionMemoryType);
/** @internal */
export const CancelDeploymentFunctionMemoryType$outboundSchema = CancelDeploymentFunctionMemoryType$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CancelDeploymentFunctionMemoryType$;
(function (CancelDeploymentFunctionMemoryType$) {
    /** @deprecated use `CancelDeploymentFunctionMemoryType$inboundSchema` instead. */
    CancelDeploymentFunctionMemoryType$.inboundSchema = CancelDeploymentFunctionMemoryType$inboundSchema;
    /** @deprecated use `CancelDeploymentFunctionMemoryType$outboundSchema` instead. */
    CancelDeploymentFunctionMemoryType$.outboundSchema = CancelDeploymentFunctionMemoryType$outboundSchema;
})(CancelDeploymentFunctionMemoryType$ || (CancelDeploymentFunctionMemoryType$ = {}));
/** @internal */
export const CancelDeploymentConfig$inboundSchema = z.object({
    version: z.number().optional(),
    functionType: CancelDeploymentFunctionType$inboundSchema,
    functionMemoryType: CancelDeploymentFunctionMemoryType$inboundSchema,
    functionTimeout: z.nullable(z.number()),
    secureComputePrimaryRegion: z.nullable(z.string()),
    secureComputeFallbackRegion: z.nullable(z.string()),
});
/** @internal */
export const CancelDeploymentConfig$outboundSchema = z.object({
    version: z.number().optional(),
    functionType: CancelDeploymentFunctionType$outboundSchema,
    functionMemoryType: CancelDeploymentFunctionMemoryType$outboundSchema,
    functionTimeout: z.nullable(z.number()),
    secureComputePrimaryRegion: z.nullable(z.string()),
    secureComputeFallbackRegion: z.nullable(z.string()),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CancelDeploymentConfig$;
(function (CancelDeploymentConfig$) {
    /** @deprecated use `CancelDeploymentConfig$inboundSchema` instead. */
    CancelDeploymentConfig$.inboundSchema = CancelDeploymentConfig$inboundSchema;
    /** @deprecated use `CancelDeploymentConfig$outboundSchema` instead. */
    CancelDeploymentConfig$.outboundSchema = CancelDeploymentConfig$outboundSchema;
})(CancelDeploymentConfig$ || (CancelDeploymentConfig$ = {}));
export function cancelDeploymentConfigToJSON(cancelDeploymentConfig) {
    return JSON.stringify(CancelDeploymentConfig$outboundSchema.parse(cancelDeploymentConfig));
}
export function cancelDeploymentConfigFromJSON(jsonString) {
    return safeParse(jsonString, (x) => CancelDeploymentConfig$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CancelDeploymentConfig' from JSON`);
}
/** @internal */
export const CancelDeploymentResponseBody$inboundSchema = z.object({
    aliasAssignedAt: z.nullable(z.union([z.number(), z.boolean()])).optional(),
    alwaysRefuseToBuild: z.boolean().optional(),
    build: z.lazy(() => CancelDeploymentBuild$inboundSchema),
    buildArtifactUrls: z.array(z.string()).optional(),
    builds: z.array(z.lazy(() => CancelDeploymentBuilds$inboundSchema))
        .optional(),
    env: z.array(z.string()),
    inspectorUrl: z.nullable(z.string()),
    isInConcurrentBuildsQueue: z.boolean(),
    isInSystemBuildsQueue: z.boolean(),
    projectSettings: z.lazy(() => CancelDeploymentProjectSettings$inboundSchema),
    readyStateReason: z.string().optional(),
    integrations: z.lazy(() => CancelDeploymentIntegrations$inboundSchema)
        .optional(),
    images: z.lazy(() => CancelDeploymentImages$inboundSchema).optional(),
    alias: z.array(z.string()).optional(),
    aliasAssigned: z.boolean(),
    bootedAt: z.number(),
    buildingAt: z.number(),
    buildContainerFinishedAt: z.number().optional(),
    buildSkipped: z.boolean(),
    creator: z.lazy(() => CancelDeploymentCreator$inboundSchema),
    initReadyAt: z.number().optional(),
    isFirstBranchDeployment: z.boolean().optional(),
    lambdas: z.array(z.lazy(() => CancelDeploymentLambdas$inboundSchema))
        .optional(),
    public: z.boolean(),
    ready: z.number().optional(),
    status: CancelDeploymentStatus$inboundSchema,
    team: z.lazy(() => CancelDeploymentTeam$inboundSchema).optional(),
    userAliases: z.array(z.string()).optional(),
    previewCommentsEnabled: z.boolean().optional(),
    ttyBuildLogs: z.boolean().optional(),
    customEnvironment: z.union([
        z.lazy(() => CancelDeploymentCustomEnvironment2$inboundSchema),
        z.lazy(() => CancelDeploymentCustomEnvironment1$inboundSchema),
    ]).optional(),
    id: z.string(),
    aliasError: z.nullable(z.lazy(() => CancelDeploymentAliasError$inboundSchema))
        .optional(),
    aliasFinal: z.nullable(z.string()).optional(),
    aliasWarning: z.nullable(z.lazy(() => CancelDeploymentAliasWarning$inboundSchema)).optional(),
    autoAssignCustomDomains: z.boolean().optional(),
    automaticAliases: z.array(z.string()).optional(),
    buildErrorAt: z.number().optional(),
    checksState: CancelDeploymentChecksState$inboundSchema.optional(),
    checksConclusion: CancelDeploymentChecksConclusion$inboundSchema.optional(),
    createdAt: z.number(),
    deletedAt: z.nullable(z.number()).optional(),
    defaultRoute: z.string().optional(),
    canceledAt: z.number().optional(),
    errorCode: z.string().optional(),
    errorLink: z.string().optional(),
    errorMessage: z.nullable(z.string()).optional(),
    errorStep: z.string().optional(),
    passiveRegions: z.array(z.string()).optional(),
    gitSource: z.union([
        z.lazy(() => GitSource8$inboundSchema),
        z.lazy(() => GitSource11$inboundSchema),
        z.lazy(() => CancelDeploymentGitSource1$inboundSchema),
        z.lazy(() => CancelDeploymentGitSource5$inboundSchema),
        z.lazy(() => CancelDeploymentGitSource2$inboundSchema),
        z.lazy(() => CancelDeploymentGitSource3$inboundSchema),
        z.lazy(() => CancelDeploymentGitSource6$inboundSchema),
        z.lazy(() => GitSource7$inboundSchema),
        z.lazy(() => GitSource9$inboundSchema),
        z.lazy(() => CancelDeploymentGitSource4$inboundSchema),
        z.lazy(() => GitSource10$inboundSchema),
        z.lazy(() => GitSource12$inboundSchema),
    ]).optional(),
    name: z.string(),
    meta: z.record(z.string()),
    originCacheRegion: z.string().optional(),
    project: z.lazy(() => CancelDeploymentProject$inboundSchema).optional(),
    readyState: CancelDeploymentReadyState$inboundSchema,
    readySubstate: CancelDeploymentReadySubstate$inboundSchema.optional(),
    regions: z.array(z.string()),
    softDeletedByRetention: z.boolean().optional(),
    source: CancelDeploymentSource$inboundSchema.optional(),
    target: z.nullable(CancelDeploymentTarget$inboundSchema).optional(),
    type: CancelDeploymentType$inboundSchema,
    undeletedAt: z.number().optional(),
    url: z.string(),
    version: z.number(),
    oidcTokenClaims: z.lazy(() => CancelDeploymentOidcTokenClaims$inboundSchema)
        .optional(),
    connectBuildsEnabled: z.boolean().optional(),
    connectConfigurationId: z.string().optional(),
    createdIn: z.string(),
    crons: z.array(z.lazy(() => CancelDeploymentCrons$inboundSchema)).optional(),
    functions: z.nullable(z.record(z.lazy(() => CancelDeploymentFunctions$inboundSchema))).optional(),
    monorepoManager: z.nullable(z.string()).optional(),
    ownerId: z.string(),
    passiveConnectConfigurationId: z.string().optional(),
    plan: CancelDeploymentPlan$inboundSchema,
    projectId: z.string(),
    routes: z.nullable(z.array(z.union([
        z.lazy(() => CancelDeploymentRoutes3$inboundSchema),
        z.lazy(() => CancelDeploymentRoutes2$inboundSchema),
        z.lazy(() => CancelDeploymentRoutes1$inboundSchema),
    ]))),
    gitRepo: z.nullable(z.union([
        z.lazy(() => CancelDeploymentGitRepo1$inboundSchema),
        z.lazy(() => CancelDeploymentGitRepo2$inboundSchema),
        z.lazy(() => CancelDeploymentGitRepo3$inboundSchema),
    ])).optional(),
    flags: z.union([
        z.lazy(() => CancelDeploymentFlags1$inboundSchema),
        z.array(z.lazy(() => CancelDeploymentFlags2$inboundSchema)),
    ]).optional(),
    microfrontends: z.union([
        z.lazy(() => CancelDeploymentMicrofrontends1$inboundSchema),
        z.lazy(() => CancelDeploymentMicrofrontends2$inboundSchema),
    ]).optional(),
    config: z.lazy(() => CancelDeploymentConfig$inboundSchema).optional(),
});
/** @internal */
export const CancelDeploymentResponseBody$outboundSchema = z.object({
    aliasAssignedAt: z.nullable(z.union([z.number(), z.boolean()])).optional(),
    alwaysRefuseToBuild: z.boolean().optional(),
    build: z.lazy(() => CancelDeploymentBuild$outboundSchema),
    buildArtifactUrls: z.array(z.string()).optional(),
    builds: z.array(z.lazy(() => CancelDeploymentBuilds$outboundSchema))
        .optional(),
    env: z.array(z.string()),
    inspectorUrl: z.nullable(z.string()),
    isInConcurrentBuildsQueue: z.boolean(),
    isInSystemBuildsQueue: z.boolean(),
    projectSettings: z.lazy(() => CancelDeploymentProjectSettings$outboundSchema),
    readyStateReason: z.string().optional(),
    integrations: z.lazy(() => CancelDeploymentIntegrations$outboundSchema)
        .optional(),
    images: z.lazy(() => CancelDeploymentImages$outboundSchema).optional(),
    alias: z.array(z.string()).optional(),
    aliasAssigned: z.boolean(),
    bootedAt: z.number(),
    buildingAt: z.number(),
    buildContainerFinishedAt: z.number().optional(),
    buildSkipped: z.boolean(),
    creator: z.lazy(() => CancelDeploymentCreator$outboundSchema),
    initReadyAt: z.number().optional(),
    isFirstBranchDeployment: z.boolean().optional(),
    lambdas: z.array(z.lazy(() => CancelDeploymentLambdas$outboundSchema))
        .optional(),
    public: z.boolean(),
    ready: z.number().optional(),
    status: CancelDeploymentStatus$outboundSchema,
    team: z.lazy(() => CancelDeploymentTeam$outboundSchema).optional(),
    userAliases: z.array(z.string()).optional(),
    previewCommentsEnabled: z.boolean().optional(),
    ttyBuildLogs: z.boolean().optional(),
    customEnvironment: z.union([
        z.lazy(() => CancelDeploymentCustomEnvironment2$outboundSchema),
        z.lazy(() => CancelDeploymentCustomEnvironment1$outboundSchema),
    ]).optional(),
    id: z.string(),
    aliasError: z.nullable(z.lazy(() => CancelDeploymentAliasError$outboundSchema)).optional(),
    aliasFinal: z.nullable(z.string()).optional(),
    aliasWarning: z.nullable(z.lazy(() => CancelDeploymentAliasWarning$outboundSchema)).optional(),
    autoAssignCustomDomains: z.boolean().optional(),
    automaticAliases: z.array(z.string()).optional(),
    buildErrorAt: z.number().optional(),
    checksState: CancelDeploymentChecksState$outboundSchema.optional(),
    checksConclusion: CancelDeploymentChecksConclusion$outboundSchema.optional(),
    createdAt: z.number(),
    deletedAt: z.nullable(z.number()).optional(),
    defaultRoute: z.string().optional(),
    canceledAt: z.number().optional(),
    errorCode: z.string().optional(),
    errorLink: z.string().optional(),
    errorMessage: z.nullable(z.string()).optional(),
    errorStep: z.string().optional(),
    passiveRegions: z.array(z.string()).optional(),
    gitSource: z.union([
        z.lazy(() => GitSource8$outboundSchema),
        z.lazy(() => GitSource11$outboundSchema),
        z.lazy(() => CancelDeploymentGitSource1$outboundSchema),
        z.lazy(() => CancelDeploymentGitSource5$outboundSchema),
        z.lazy(() => CancelDeploymentGitSource2$outboundSchema),
        z.lazy(() => CancelDeploymentGitSource3$outboundSchema),
        z.lazy(() => CancelDeploymentGitSource6$outboundSchema),
        z.lazy(() => GitSource7$outboundSchema),
        z.lazy(() => GitSource9$outboundSchema),
        z.lazy(() => CancelDeploymentGitSource4$outboundSchema),
        z.lazy(() => GitSource10$outboundSchema),
        z.lazy(() => GitSource12$outboundSchema),
    ]).optional(),
    name: z.string(),
    meta: z.record(z.string()),
    originCacheRegion: z.string().optional(),
    project: z.lazy(() => CancelDeploymentProject$outboundSchema).optional(),
    readyState: CancelDeploymentReadyState$outboundSchema,
    readySubstate: CancelDeploymentReadySubstate$outboundSchema.optional(),
    regions: z.array(z.string()),
    softDeletedByRetention: z.boolean().optional(),
    source: CancelDeploymentSource$outboundSchema.optional(),
    target: z.nullable(CancelDeploymentTarget$outboundSchema).optional(),
    type: CancelDeploymentType$outboundSchema,
    undeletedAt: z.number().optional(),
    url: z.string(),
    version: z.number(),
    oidcTokenClaims: z.lazy(() => CancelDeploymentOidcTokenClaims$outboundSchema)
        .optional(),
    connectBuildsEnabled: z.boolean().optional(),
    connectConfigurationId: z.string().optional(),
    createdIn: z.string(),
    crons: z.array(z.lazy(() => CancelDeploymentCrons$outboundSchema)).optional(),
    functions: z.nullable(z.record(z.lazy(() => CancelDeploymentFunctions$outboundSchema))).optional(),
    monorepoManager: z.nullable(z.string()).optional(),
    ownerId: z.string(),
    passiveConnectConfigurationId: z.string().optional(),
    plan: CancelDeploymentPlan$outboundSchema,
    projectId: z.string(),
    routes: z.nullable(z.array(z.union([
        z.lazy(() => CancelDeploymentRoutes3$outboundSchema),
        z.lazy(() => CancelDeploymentRoutes2$outboundSchema),
        z.lazy(() => CancelDeploymentRoutes1$outboundSchema),
    ]))),
    gitRepo: z.nullable(z.union([
        z.lazy(() => CancelDeploymentGitRepo1$outboundSchema),
        z.lazy(() => CancelDeploymentGitRepo2$outboundSchema),
        z.lazy(() => CancelDeploymentGitRepo3$outboundSchema),
    ])).optional(),
    flags: z.union([
        z.lazy(() => CancelDeploymentFlags1$outboundSchema),
        z.array(z.lazy(() => CancelDeploymentFlags2$outboundSchema)),
    ]).optional(),
    microfrontends: z.union([
        z.lazy(() => CancelDeploymentMicrofrontends1$outboundSchema),
        z.lazy(() => CancelDeploymentMicrofrontends2$outboundSchema),
    ]).optional(),
    config: z.lazy(() => CancelDeploymentConfig$outboundSchema).optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CancelDeploymentResponseBody$;
(function (CancelDeploymentResponseBody$) {
    /** @deprecated use `CancelDeploymentResponseBody$inboundSchema` instead. */
    CancelDeploymentResponseBody$.inboundSchema = CancelDeploymentResponseBody$inboundSchema;
    /** @deprecated use `CancelDeploymentResponseBody$outboundSchema` instead. */
    CancelDeploymentResponseBody$.outboundSchema = CancelDeploymentResponseBody$outboundSchema;
})(CancelDeploymentResponseBody$ || (CancelDeploymentResponseBody$ = {}));
export function cancelDeploymentResponseBodyToJSON(cancelDeploymentResponseBody) {
    return JSON.stringify(CancelDeploymentResponseBody$outboundSchema.parse(cancelDeploymentResponseBody));
}
export function cancelDeploymentResponseBodyFromJSON(jsonString) {
    return safeParse(jsonString, (x) => CancelDeploymentResponseBody$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CancelDeploymentResponseBody' from JSON`);
}
//# sourceMappingURL=canceldeploymentop.js.map