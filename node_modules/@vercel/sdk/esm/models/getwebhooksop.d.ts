import * as z from "zod";
import { ClosedEnum } from "../types/enums.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./sdkvalidationerror.js";
export type GetWebhooksRequest = {
    projectId?: string | undefined;
    /**
     * The Team identifier to perform the request on behalf of.
     */
    teamId?: string | undefined;
    /**
     * The Team slug to perform the request on behalf of.
     */
    slug?: string | undefined;
};
/**
 * The webhooks events
 */
export declare const GetWebhooksResponseBodyEvents: {
    readonly BudgetReached: "budget.reached";
    readonly BudgetReset: "budget.reset";
    readonly DomainCreated: "domain.created";
    readonly DeploymentCreated: "deployment.created";
    readonly DeploymentError: "deployment.error";
    readonly DeploymentCanceled: "deployment.canceled";
    readonly DeploymentSucceeded: "deployment.succeeded";
    readonly DeploymentReady: "deployment.ready";
    readonly DeploymentCheckRerequested: "deployment.check-rerequested";
    readonly DeploymentPromoted: "deployment.promoted";
    readonly DeploymentIntegrationActionStart: "deployment.integration.action.start";
    readonly DeploymentIntegrationActionCancel: "deployment.integration.action.cancel";
    readonly DeploymentIntegrationActionCleanup: "deployment.integration.action.cleanup";
    readonly EdgeConfigCreated: "edge-config.created";
    readonly EdgeConfigDeleted: "edge-config.deleted";
    readonly EdgeConfigItemsUpdated: "edge-config.items.updated";
    readonly FirewallAttack: "firewall.attack";
    readonly IntegrationConfigurationPermissionUpgraded: "integration-configuration.permission-upgraded";
    readonly IntegrationConfigurationRemoved: "integration-configuration.removed";
    readonly IntegrationConfigurationScopeChangeConfirmed: "integration-configuration.scope-change-confirmed";
    readonly IntegrationResourceProjectConnected: "integration-resource.project-connected";
    readonly IntegrationResourceProjectDisconnected: "integration-resource.project-disconnected";
    readonly ProjectCreated: "project.created";
    readonly ProjectRemoved: "project.removed";
    readonly ProjectRollingReleaseStarted: "project.rolling-release.started";
    readonly ProjectRollingReleaseAborted: "project.rolling-release.aborted";
    readonly ProjectRollingReleaseCompleted: "project.rolling-release.completed";
    readonly ProjectRollingReleaseApproved: "project.rolling-release.approved";
    readonly DeploymentChecksCompletedLegacy: "deployment-checks-completed";
    readonly DeploymentReadyLegacy: "deployment-ready";
    readonly DeploymentPreparedLegacy: "deployment-prepared";
    readonly DeploymentErrorLegacy: "deployment-error";
    readonly DeploymentCheckRerequestedLegacy: "deployment-check-rerequested";
    readonly DeploymentCanceledLegacy: "deployment-canceled";
    readonly ProjectCreatedLegacy: "project-created";
    readonly ProjectRemovedLegacy: "project-removed";
    readonly DomainCreatedLegacy: "domain-created";
    readonly DeploymentLegacy: "deployment";
    readonly IntegrationConfigurationPermissionUpdatedLegacy: "integration-configuration-permission-updated";
    readonly IntegrationConfigurationRemovedLegacy: "integration-configuration-removed";
    readonly IntegrationConfigurationScopeChangeConfirmedLegacy: "integration-configuration-scope-change-confirmed";
    readonly MarketplaceInvoiceCreated: "marketplace.invoice.created";
    readonly MarketplaceInvoicePaid: "marketplace.invoice.paid";
    readonly MarketplaceInvoiceNotpaid: "marketplace.invoice.notpaid";
    readonly MarketplaceInvoiceRefunded: "marketplace.invoice.refunded";
    readonly ObservabilityAnomaly: "observability.anomaly";
    readonly TestWebhook: "test-webhook";
};
/**
 * The webhooks events
 */
export type GetWebhooksResponseBodyEvents = ClosedEnum<typeof GetWebhooksResponseBodyEvents>;
export type GetWebhooksResponseBody2 = {
    /**
     * The webhooks events
     */
    events: Array<GetWebhooksResponseBodyEvents>;
    /**
     * The webhook id
     */
    id: string;
    /**
     * A string with the URL of the webhook
     */
    url: string;
    /**
     * The unique ID of the team the webhook belongs to
     */
    ownerId: string;
    /**
     * A number containing the date when the webhook was created in in milliseconds
     */
    createdAt: number;
    /**
     * A number containing the date when the webhook was updated in in milliseconds
     */
    updatedAt: number;
    /**
     * The ID of the projects the webhook is associated with
     */
    projectIds?: Array<string> | undefined;
};
export declare const GetWebhooksResponseBodyFramework: {
    readonly Blitzjs: "blitzjs";
    readonly Nextjs: "nextjs";
    readonly Gatsby: "gatsby";
    readonly Remix: "remix";
    readonly ReactRouter: "react-router";
    readonly Astro: "astro";
    readonly Hexo: "hexo";
    readonly Eleventy: "eleventy";
    readonly Docusaurus2: "docusaurus-2";
    readonly Docusaurus: "docusaurus";
    readonly Preact: "preact";
    readonly Solidstart1: "solidstart-1";
    readonly Solidstart: "solidstart";
    readonly Dojo: "dojo";
    readonly Ember: "ember";
    readonly Vue: "vue";
    readonly Scully: "scully";
    readonly IonicAngular: "ionic-angular";
    readonly Angular: "angular";
    readonly Polymer: "polymer";
    readonly Svelte: "svelte";
    readonly Sveltekit: "sveltekit";
    readonly Sveltekit1: "sveltekit-1";
    readonly IonicReact: "ionic-react";
    readonly CreateReactApp: "create-react-app";
    readonly Gridsome: "gridsome";
    readonly Umijs: "umijs";
    readonly Sapper: "sapper";
    readonly Saber: "saber";
    readonly Stencil: "stencil";
    readonly Nuxtjs: "nuxtjs";
    readonly Redwoodjs: "redwoodjs";
    readonly Hugo: "hugo";
    readonly Jekyll: "jekyll";
    readonly Brunch: "brunch";
    readonly Middleman: "middleman";
    readonly Zola: "zola";
    readonly Hydrogen: "hydrogen";
    readonly Vite: "vite";
    readonly Vitepress: "vitepress";
    readonly Vuepress: "vuepress";
    readonly Parcel: "parcel";
    readonly Fasthtml: "fasthtml";
    readonly SanityV3: "sanity-v3";
    readonly Sanity: "sanity";
    readonly Storybook: "storybook";
};
export type GetWebhooksResponseBodyFramework = ClosedEnum<typeof GetWebhooksResponseBodyFramework>;
export type ProjectsMetadata = {
    id: string;
    name: string;
    framework?: GetWebhooksResponseBodyFramework | null | undefined;
    latestDeployment?: string | undefined;
};
/**
 * The webhooks events
 */
export declare const ResponseBodyEvents: {
    readonly BudgetReached: "budget.reached";
    readonly BudgetReset: "budget.reset";
    readonly DomainCreated: "domain.created";
    readonly DeploymentCreated: "deployment.created";
    readonly DeploymentError: "deployment.error";
    readonly DeploymentCanceled: "deployment.canceled";
    readonly DeploymentSucceeded: "deployment.succeeded";
    readonly DeploymentReady: "deployment.ready";
    readonly DeploymentCheckRerequested: "deployment.check-rerequested";
    readonly DeploymentPromoted: "deployment.promoted";
    readonly DeploymentIntegrationActionStart: "deployment.integration.action.start";
    readonly DeploymentIntegrationActionCancel: "deployment.integration.action.cancel";
    readonly DeploymentIntegrationActionCleanup: "deployment.integration.action.cleanup";
    readonly EdgeConfigCreated: "edge-config.created";
    readonly EdgeConfigDeleted: "edge-config.deleted";
    readonly EdgeConfigItemsUpdated: "edge-config.items.updated";
    readonly FirewallAttack: "firewall.attack";
    readonly IntegrationConfigurationPermissionUpgraded: "integration-configuration.permission-upgraded";
    readonly IntegrationConfigurationRemoved: "integration-configuration.removed";
    readonly IntegrationConfigurationScopeChangeConfirmed: "integration-configuration.scope-change-confirmed";
    readonly IntegrationResourceProjectConnected: "integration-resource.project-connected";
    readonly IntegrationResourceProjectDisconnected: "integration-resource.project-disconnected";
    readonly ProjectCreated: "project.created";
    readonly ProjectRemoved: "project.removed";
    readonly ProjectRollingReleaseStarted: "project.rolling-release.started";
    readonly ProjectRollingReleaseAborted: "project.rolling-release.aborted";
    readonly ProjectRollingReleaseCompleted: "project.rolling-release.completed";
    readonly ProjectRollingReleaseApproved: "project.rolling-release.approved";
    readonly DeploymentChecksCompletedLegacy: "deployment-checks-completed";
    readonly DeploymentReadyLegacy: "deployment-ready";
    readonly DeploymentPreparedLegacy: "deployment-prepared";
    readonly DeploymentErrorLegacy: "deployment-error";
    readonly DeploymentCheckRerequestedLegacy: "deployment-check-rerequested";
    readonly DeploymentCanceledLegacy: "deployment-canceled";
    readonly ProjectCreatedLegacy: "project-created";
    readonly ProjectRemovedLegacy: "project-removed";
    readonly DomainCreatedLegacy: "domain-created";
    readonly DeploymentLegacy: "deployment";
    readonly IntegrationConfigurationPermissionUpdatedLegacy: "integration-configuration-permission-updated";
    readonly IntegrationConfigurationRemovedLegacy: "integration-configuration-removed";
    readonly IntegrationConfigurationScopeChangeConfirmedLegacy: "integration-configuration-scope-change-confirmed";
    readonly MarketplaceInvoiceCreated: "marketplace.invoice.created";
    readonly MarketplaceInvoicePaid: "marketplace.invoice.paid";
    readonly MarketplaceInvoiceNotpaid: "marketplace.invoice.notpaid";
    readonly MarketplaceInvoiceRefunded: "marketplace.invoice.refunded";
    readonly ObservabilityAnomaly: "observability.anomaly";
    readonly TestWebhook: "test-webhook";
};
/**
 * The webhooks events
 */
export type ResponseBodyEvents = ClosedEnum<typeof ResponseBodyEvents>;
export type GetWebhooksResponseBody1 = {
    projectsMetadata: Array<ProjectsMetadata> | null;
    /**
     * The webhooks events
     */
    events: Array<ResponseBodyEvents>;
    /**
     * The webhook id
     */
    id: string;
    /**
     * A string with the URL of the webhook
     */
    url: string;
    /**
     * The unique ID of the team the webhook belongs to
     */
    ownerId: string;
    /**
     * A number containing the date when the webhook was created in in milliseconds
     */
    createdAt: number;
    /**
     * A number containing the date when the webhook was updated in in milliseconds
     */
    updatedAt: number;
    /**
     * The ID of the projects the webhook is associated with
     */
    projectIds?: Array<string> | undefined;
};
export type GetWebhooksResponseBody = Array<GetWebhooksResponseBody1> | Array<GetWebhooksResponseBody2>;
/** @internal */
export declare const GetWebhooksRequest$inboundSchema: z.ZodType<GetWebhooksRequest, z.ZodTypeDef, unknown>;
/** @internal */
export type GetWebhooksRequest$Outbound = {
    projectId?: string | undefined;
    teamId?: string | undefined;
    slug?: string | undefined;
};
/** @internal */
export declare const GetWebhooksRequest$outboundSchema: z.ZodType<GetWebhooksRequest$Outbound, z.ZodTypeDef, GetWebhooksRequest>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetWebhooksRequest$ {
    /** @deprecated use `GetWebhooksRequest$inboundSchema` instead. */
    const inboundSchema: z.ZodType<GetWebhooksRequest, z.ZodTypeDef, unknown>;
    /** @deprecated use `GetWebhooksRequest$outboundSchema` instead. */
    const outboundSchema: z.ZodType<GetWebhooksRequest$Outbound, z.ZodTypeDef, GetWebhooksRequest>;
    /** @deprecated use `GetWebhooksRequest$Outbound` instead. */
    type Outbound = GetWebhooksRequest$Outbound;
}
export declare function getWebhooksRequestToJSON(getWebhooksRequest: GetWebhooksRequest): string;
export declare function getWebhooksRequestFromJSON(jsonString: string): SafeParseResult<GetWebhooksRequest, SDKValidationError>;
/** @internal */
export declare const GetWebhooksResponseBodyEvents$inboundSchema: z.ZodNativeEnum<typeof GetWebhooksResponseBodyEvents>;
/** @internal */
export declare const GetWebhooksResponseBodyEvents$outboundSchema: z.ZodNativeEnum<typeof GetWebhooksResponseBodyEvents>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetWebhooksResponseBodyEvents$ {
    /** @deprecated use `GetWebhooksResponseBodyEvents$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly BudgetReached: "budget.reached";
        readonly BudgetReset: "budget.reset";
        readonly DomainCreated: "domain.created";
        readonly DeploymentCreated: "deployment.created";
        readonly DeploymentError: "deployment.error";
        readonly DeploymentCanceled: "deployment.canceled";
        readonly DeploymentSucceeded: "deployment.succeeded";
        readonly DeploymentReady: "deployment.ready";
        readonly DeploymentCheckRerequested: "deployment.check-rerequested";
        readonly DeploymentPromoted: "deployment.promoted";
        readonly DeploymentIntegrationActionStart: "deployment.integration.action.start";
        readonly DeploymentIntegrationActionCancel: "deployment.integration.action.cancel";
        readonly DeploymentIntegrationActionCleanup: "deployment.integration.action.cleanup";
        readonly EdgeConfigCreated: "edge-config.created";
        readonly EdgeConfigDeleted: "edge-config.deleted";
        readonly EdgeConfigItemsUpdated: "edge-config.items.updated";
        readonly FirewallAttack: "firewall.attack";
        readonly IntegrationConfigurationPermissionUpgraded: "integration-configuration.permission-upgraded";
        readonly IntegrationConfigurationRemoved: "integration-configuration.removed";
        readonly IntegrationConfigurationScopeChangeConfirmed: "integration-configuration.scope-change-confirmed";
        readonly IntegrationResourceProjectConnected: "integration-resource.project-connected";
        readonly IntegrationResourceProjectDisconnected: "integration-resource.project-disconnected";
        readonly ProjectCreated: "project.created";
        readonly ProjectRemoved: "project.removed";
        readonly ProjectRollingReleaseStarted: "project.rolling-release.started";
        readonly ProjectRollingReleaseAborted: "project.rolling-release.aborted";
        readonly ProjectRollingReleaseCompleted: "project.rolling-release.completed";
        readonly ProjectRollingReleaseApproved: "project.rolling-release.approved";
        readonly DeploymentChecksCompletedLegacy: "deployment-checks-completed";
        readonly DeploymentReadyLegacy: "deployment-ready";
        readonly DeploymentPreparedLegacy: "deployment-prepared";
        readonly DeploymentErrorLegacy: "deployment-error";
        readonly DeploymentCheckRerequestedLegacy: "deployment-check-rerequested";
        readonly DeploymentCanceledLegacy: "deployment-canceled";
        readonly ProjectCreatedLegacy: "project-created";
        readonly ProjectRemovedLegacy: "project-removed";
        readonly DomainCreatedLegacy: "domain-created";
        readonly DeploymentLegacy: "deployment";
        readonly IntegrationConfigurationPermissionUpdatedLegacy: "integration-configuration-permission-updated";
        readonly IntegrationConfigurationRemovedLegacy: "integration-configuration-removed";
        readonly IntegrationConfigurationScopeChangeConfirmedLegacy: "integration-configuration-scope-change-confirmed";
        readonly MarketplaceInvoiceCreated: "marketplace.invoice.created";
        readonly MarketplaceInvoicePaid: "marketplace.invoice.paid";
        readonly MarketplaceInvoiceNotpaid: "marketplace.invoice.notpaid";
        readonly MarketplaceInvoiceRefunded: "marketplace.invoice.refunded";
        readonly ObservabilityAnomaly: "observability.anomaly";
        readonly TestWebhook: "test-webhook";
    }>;
    /** @deprecated use `GetWebhooksResponseBodyEvents$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly BudgetReached: "budget.reached";
        readonly BudgetReset: "budget.reset";
        readonly DomainCreated: "domain.created";
        readonly DeploymentCreated: "deployment.created";
        readonly DeploymentError: "deployment.error";
        readonly DeploymentCanceled: "deployment.canceled";
        readonly DeploymentSucceeded: "deployment.succeeded";
        readonly DeploymentReady: "deployment.ready";
        readonly DeploymentCheckRerequested: "deployment.check-rerequested";
        readonly DeploymentPromoted: "deployment.promoted";
        readonly DeploymentIntegrationActionStart: "deployment.integration.action.start";
        readonly DeploymentIntegrationActionCancel: "deployment.integration.action.cancel";
        readonly DeploymentIntegrationActionCleanup: "deployment.integration.action.cleanup";
        readonly EdgeConfigCreated: "edge-config.created";
        readonly EdgeConfigDeleted: "edge-config.deleted";
        readonly EdgeConfigItemsUpdated: "edge-config.items.updated";
        readonly FirewallAttack: "firewall.attack";
        readonly IntegrationConfigurationPermissionUpgraded: "integration-configuration.permission-upgraded";
        readonly IntegrationConfigurationRemoved: "integration-configuration.removed";
        readonly IntegrationConfigurationScopeChangeConfirmed: "integration-configuration.scope-change-confirmed";
        readonly IntegrationResourceProjectConnected: "integration-resource.project-connected";
        readonly IntegrationResourceProjectDisconnected: "integration-resource.project-disconnected";
        readonly ProjectCreated: "project.created";
        readonly ProjectRemoved: "project.removed";
        readonly ProjectRollingReleaseStarted: "project.rolling-release.started";
        readonly ProjectRollingReleaseAborted: "project.rolling-release.aborted";
        readonly ProjectRollingReleaseCompleted: "project.rolling-release.completed";
        readonly ProjectRollingReleaseApproved: "project.rolling-release.approved";
        readonly DeploymentChecksCompletedLegacy: "deployment-checks-completed";
        readonly DeploymentReadyLegacy: "deployment-ready";
        readonly DeploymentPreparedLegacy: "deployment-prepared";
        readonly DeploymentErrorLegacy: "deployment-error";
        readonly DeploymentCheckRerequestedLegacy: "deployment-check-rerequested";
        readonly DeploymentCanceledLegacy: "deployment-canceled";
        readonly ProjectCreatedLegacy: "project-created";
        readonly ProjectRemovedLegacy: "project-removed";
        readonly DomainCreatedLegacy: "domain-created";
        readonly DeploymentLegacy: "deployment";
        readonly IntegrationConfigurationPermissionUpdatedLegacy: "integration-configuration-permission-updated";
        readonly IntegrationConfigurationRemovedLegacy: "integration-configuration-removed";
        readonly IntegrationConfigurationScopeChangeConfirmedLegacy: "integration-configuration-scope-change-confirmed";
        readonly MarketplaceInvoiceCreated: "marketplace.invoice.created";
        readonly MarketplaceInvoicePaid: "marketplace.invoice.paid";
        readonly MarketplaceInvoiceNotpaid: "marketplace.invoice.notpaid";
        readonly MarketplaceInvoiceRefunded: "marketplace.invoice.refunded";
        readonly ObservabilityAnomaly: "observability.anomaly";
        readonly TestWebhook: "test-webhook";
    }>;
}
/** @internal */
export declare const GetWebhooksResponseBody2$inboundSchema: z.ZodType<GetWebhooksResponseBody2, z.ZodTypeDef, unknown>;
/** @internal */
export type GetWebhooksResponseBody2$Outbound = {
    events: Array<string>;
    id: string;
    url: string;
    ownerId: string;
    createdAt: number;
    updatedAt: number;
    projectIds?: Array<string> | undefined;
};
/** @internal */
export declare const GetWebhooksResponseBody2$outboundSchema: z.ZodType<GetWebhooksResponseBody2$Outbound, z.ZodTypeDef, GetWebhooksResponseBody2>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetWebhooksResponseBody2$ {
    /** @deprecated use `GetWebhooksResponseBody2$inboundSchema` instead. */
    const inboundSchema: z.ZodType<GetWebhooksResponseBody2, z.ZodTypeDef, unknown>;
    /** @deprecated use `GetWebhooksResponseBody2$outboundSchema` instead. */
    const outboundSchema: z.ZodType<GetWebhooksResponseBody2$Outbound, z.ZodTypeDef, GetWebhooksResponseBody2>;
    /** @deprecated use `GetWebhooksResponseBody2$Outbound` instead. */
    type Outbound = GetWebhooksResponseBody2$Outbound;
}
export declare function getWebhooksResponseBody2ToJSON(getWebhooksResponseBody2: GetWebhooksResponseBody2): string;
export declare function getWebhooksResponseBody2FromJSON(jsonString: string): SafeParseResult<GetWebhooksResponseBody2, SDKValidationError>;
/** @internal */
export declare const GetWebhooksResponseBodyFramework$inboundSchema: z.ZodNativeEnum<typeof GetWebhooksResponseBodyFramework>;
/** @internal */
export declare const GetWebhooksResponseBodyFramework$outboundSchema: z.ZodNativeEnum<typeof GetWebhooksResponseBodyFramework>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetWebhooksResponseBodyFramework$ {
    /** @deprecated use `GetWebhooksResponseBodyFramework$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Blitzjs: "blitzjs";
        readonly Nextjs: "nextjs";
        readonly Gatsby: "gatsby";
        readonly Remix: "remix";
        readonly ReactRouter: "react-router";
        readonly Astro: "astro";
        readonly Hexo: "hexo";
        readonly Eleventy: "eleventy";
        readonly Docusaurus2: "docusaurus-2";
        readonly Docusaurus: "docusaurus";
        readonly Preact: "preact";
        readonly Solidstart1: "solidstart-1";
        readonly Solidstart: "solidstart";
        readonly Dojo: "dojo";
        readonly Ember: "ember";
        readonly Vue: "vue";
        readonly Scully: "scully";
        readonly IonicAngular: "ionic-angular";
        readonly Angular: "angular";
        readonly Polymer: "polymer";
        readonly Svelte: "svelte";
        readonly Sveltekit: "sveltekit";
        readonly Sveltekit1: "sveltekit-1";
        readonly IonicReact: "ionic-react";
        readonly CreateReactApp: "create-react-app";
        readonly Gridsome: "gridsome";
        readonly Umijs: "umijs";
        readonly Sapper: "sapper";
        readonly Saber: "saber";
        readonly Stencil: "stencil";
        readonly Nuxtjs: "nuxtjs";
        readonly Redwoodjs: "redwoodjs";
        readonly Hugo: "hugo";
        readonly Jekyll: "jekyll";
        readonly Brunch: "brunch";
        readonly Middleman: "middleman";
        readonly Zola: "zola";
        readonly Hydrogen: "hydrogen";
        readonly Vite: "vite";
        readonly Vitepress: "vitepress";
        readonly Vuepress: "vuepress";
        readonly Parcel: "parcel";
        readonly Fasthtml: "fasthtml";
        readonly SanityV3: "sanity-v3";
        readonly Sanity: "sanity";
        readonly Storybook: "storybook";
    }>;
    /** @deprecated use `GetWebhooksResponseBodyFramework$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Blitzjs: "blitzjs";
        readonly Nextjs: "nextjs";
        readonly Gatsby: "gatsby";
        readonly Remix: "remix";
        readonly ReactRouter: "react-router";
        readonly Astro: "astro";
        readonly Hexo: "hexo";
        readonly Eleventy: "eleventy";
        readonly Docusaurus2: "docusaurus-2";
        readonly Docusaurus: "docusaurus";
        readonly Preact: "preact";
        readonly Solidstart1: "solidstart-1";
        readonly Solidstart: "solidstart";
        readonly Dojo: "dojo";
        readonly Ember: "ember";
        readonly Vue: "vue";
        readonly Scully: "scully";
        readonly IonicAngular: "ionic-angular";
        readonly Angular: "angular";
        readonly Polymer: "polymer";
        readonly Svelte: "svelte";
        readonly Sveltekit: "sveltekit";
        readonly Sveltekit1: "sveltekit-1";
        readonly IonicReact: "ionic-react";
        readonly CreateReactApp: "create-react-app";
        readonly Gridsome: "gridsome";
        readonly Umijs: "umijs";
        readonly Sapper: "sapper";
        readonly Saber: "saber";
        readonly Stencil: "stencil";
        readonly Nuxtjs: "nuxtjs";
        readonly Redwoodjs: "redwoodjs";
        readonly Hugo: "hugo";
        readonly Jekyll: "jekyll";
        readonly Brunch: "brunch";
        readonly Middleman: "middleman";
        readonly Zola: "zola";
        readonly Hydrogen: "hydrogen";
        readonly Vite: "vite";
        readonly Vitepress: "vitepress";
        readonly Vuepress: "vuepress";
        readonly Parcel: "parcel";
        readonly Fasthtml: "fasthtml";
        readonly SanityV3: "sanity-v3";
        readonly Sanity: "sanity";
        readonly Storybook: "storybook";
    }>;
}
/** @internal */
export declare const ProjectsMetadata$inboundSchema: z.ZodType<ProjectsMetadata, z.ZodTypeDef, unknown>;
/** @internal */
export type ProjectsMetadata$Outbound = {
    id: string;
    name: string;
    framework?: string | null | undefined;
    latestDeployment?: string | undefined;
};
/** @internal */
export declare const ProjectsMetadata$outboundSchema: z.ZodType<ProjectsMetadata$Outbound, z.ZodTypeDef, ProjectsMetadata>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace ProjectsMetadata$ {
    /** @deprecated use `ProjectsMetadata$inboundSchema` instead. */
    const inboundSchema: z.ZodType<ProjectsMetadata, z.ZodTypeDef, unknown>;
    /** @deprecated use `ProjectsMetadata$outboundSchema` instead. */
    const outboundSchema: z.ZodType<ProjectsMetadata$Outbound, z.ZodTypeDef, ProjectsMetadata>;
    /** @deprecated use `ProjectsMetadata$Outbound` instead. */
    type Outbound = ProjectsMetadata$Outbound;
}
export declare function projectsMetadataToJSON(projectsMetadata: ProjectsMetadata): string;
export declare function projectsMetadataFromJSON(jsonString: string): SafeParseResult<ProjectsMetadata, SDKValidationError>;
/** @internal */
export declare const ResponseBodyEvents$inboundSchema: z.ZodNativeEnum<typeof ResponseBodyEvents>;
/** @internal */
export declare const ResponseBodyEvents$outboundSchema: z.ZodNativeEnum<typeof ResponseBodyEvents>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace ResponseBodyEvents$ {
    /** @deprecated use `ResponseBodyEvents$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly BudgetReached: "budget.reached";
        readonly BudgetReset: "budget.reset";
        readonly DomainCreated: "domain.created";
        readonly DeploymentCreated: "deployment.created";
        readonly DeploymentError: "deployment.error";
        readonly DeploymentCanceled: "deployment.canceled";
        readonly DeploymentSucceeded: "deployment.succeeded";
        readonly DeploymentReady: "deployment.ready";
        readonly DeploymentCheckRerequested: "deployment.check-rerequested";
        readonly DeploymentPromoted: "deployment.promoted";
        readonly DeploymentIntegrationActionStart: "deployment.integration.action.start";
        readonly DeploymentIntegrationActionCancel: "deployment.integration.action.cancel";
        readonly DeploymentIntegrationActionCleanup: "deployment.integration.action.cleanup";
        readonly EdgeConfigCreated: "edge-config.created";
        readonly EdgeConfigDeleted: "edge-config.deleted";
        readonly EdgeConfigItemsUpdated: "edge-config.items.updated";
        readonly FirewallAttack: "firewall.attack";
        readonly IntegrationConfigurationPermissionUpgraded: "integration-configuration.permission-upgraded";
        readonly IntegrationConfigurationRemoved: "integration-configuration.removed";
        readonly IntegrationConfigurationScopeChangeConfirmed: "integration-configuration.scope-change-confirmed";
        readonly IntegrationResourceProjectConnected: "integration-resource.project-connected";
        readonly IntegrationResourceProjectDisconnected: "integration-resource.project-disconnected";
        readonly ProjectCreated: "project.created";
        readonly ProjectRemoved: "project.removed";
        readonly ProjectRollingReleaseStarted: "project.rolling-release.started";
        readonly ProjectRollingReleaseAborted: "project.rolling-release.aborted";
        readonly ProjectRollingReleaseCompleted: "project.rolling-release.completed";
        readonly ProjectRollingReleaseApproved: "project.rolling-release.approved";
        readonly DeploymentChecksCompletedLegacy: "deployment-checks-completed";
        readonly DeploymentReadyLegacy: "deployment-ready";
        readonly DeploymentPreparedLegacy: "deployment-prepared";
        readonly DeploymentErrorLegacy: "deployment-error";
        readonly DeploymentCheckRerequestedLegacy: "deployment-check-rerequested";
        readonly DeploymentCanceledLegacy: "deployment-canceled";
        readonly ProjectCreatedLegacy: "project-created";
        readonly ProjectRemovedLegacy: "project-removed";
        readonly DomainCreatedLegacy: "domain-created";
        readonly DeploymentLegacy: "deployment";
        readonly IntegrationConfigurationPermissionUpdatedLegacy: "integration-configuration-permission-updated";
        readonly IntegrationConfigurationRemovedLegacy: "integration-configuration-removed";
        readonly IntegrationConfigurationScopeChangeConfirmedLegacy: "integration-configuration-scope-change-confirmed";
        readonly MarketplaceInvoiceCreated: "marketplace.invoice.created";
        readonly MarketplaceInvoicePaid: "marketplace.invoice.paid";
        readonly MarketplaceInvoiceNotpaid: "marketplace.invoice.notpaid";
        readonly MarketplaceInvoiceRefunded: "marketplace.invoice.refunded";
        readonly ObservabilityAnomaly: "observability.anomaly";
        readonly TestWebhook: "test-webhook";
    }>;
    /** @deprecated use `ResponseBodyEvents$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly BudgetReached: "budget.reached";
        readonly BudgetReset: "budget.reset";
        readonly DomainCreated: "domain.created";
        readonly DeploymentCreated: "deployment.created";
        readonly DeploymentError: "deployment.error";
        readonly DeploymentCanceled: "deployment.canceled";
        readonly DeploymentSucceeded: "deployment.succeeded";
        readonly DeploymentReady: "deployment.ready";
        readonly DeploymentCheckRerequested: "deployment.check-rerequested";
        readonly DeploymentPromoted: "deployment.promoted";
        readonly DeploymentIntegrationActionStart: "deployment.integration.action.start";
        readonly DeploymentIntegrationActionCancel: "deployment.integration.action.cancel";
        readonly DeploymentIntegrationActionCleanup: "deployment.integration.action.cleanup";
        readonly EdgeConfigCreated: "edge-config.created";
        readonly EdgeConfigDeleted: "edge-config.deleted";
        readonly EdgeConfigItemsUpdated: "edge-config.items.updated";
        readonly FirewallAttack: "firewall.attack";
        readonly IntegrationConfigurationPermissionUpgraded: "integration-configuration.permission-upgraded";
        readonly IntegrationConfigurationRemoved: "integration-configuration.removed";
        readonly IntegrationConfigurationScopeChangeConfirmed: "integration-configuration.scope-change-confirmed";
        readonly IntegrationResourceProjectConnected: "integration-resource.project-connected";
        readonly IntegrationResourceProjectDisconnected: "integration-resource.project-disconnected";
        readonly ProjectCreated: "project.created";
        readonly ProjectRemoved: "project.removed";
        readonly ProjectRollingReleaseStarted: "project.rolling-release.started";
        readonly ProjectRollingReleaseAborted: "project.rolling-release.aborted";
        readonly ProjectRollingReleaseCompleted: "project.rolling-release.completed";
        readonly ProjectRollingReleaseApproved: "project.rolling-release.approved";
        readonly DeploymentChecksCompletedLegacy: "deployment-checks-completed";
        readonly DeploymentReadyLegacy: "deployment-ready";
        readonly DeploymentPreparedLegacy: "deployment-prepared";
        readonly DeploymentErrorLegacy: "deployment-error";
        readonly DeploymentCheckRerequestedLegacy: "deployment-check-rerequested";
        readonly DeploymentCanceledLegacy: "deployment-canceled";
        readonly ProjectCreatedLegacy: "project-created";
        readonly ProjectRemovedLegacy: "project-removed";
        readonly DomainCreatedLegacy: "domain-created";
        readonly DeploymentLegacy: "deployment";
        readonly IntegrationConfigurationPermissionUpdatedLegacy: "integration-configuration-permission-updated";
        readonly IntegrationConfigurationRemovedLegacy: "integration-configuration-removed";
        readonly IntegrationConfigurationScopeChangeConfirmedLegacy: "integration-configuration-scope-change-confirmed";
        readonly MarketplaceInvoiceCreated: "marketplace.invoice.created";
        readonly MarketplaceInvoicePaid: "marketplace.invoice.paid";
        readonly MarketplaceInvoiceNotpaid: "marketplace.invoice.notpaid";
        readonly MarketplaceInvoiceRefunded: "marketplace.invoice.refunded";
        readonly ObservabilityAnomaly: "observability.anomaly";
        readonly TestWebhook: "test-webhook";
    }>;
}
/** @internal */
export declare const GetWebhooksResponseBody1$inboundSchema: z.ZodType<GetWebhooksResponseBody1, z.ZodTypeDef, unknown>;
/** @internal */
export type GetWebhooksResponseBody1$Outbound = {
    projectsMetadata: Array<ProjectsMetadata$Outbound> | null;
    events: Array<string>;
    id: string;
    url: string;
    ownerId: string;
    createdAt: number;
    updatedAt: number;
    projectIds?: Array<string> | undefined;
};
/** @internal */
export declare const GetWebhooksResponseBody1$outboundSchema: z.ZodType<GetWebhooksResponseBody1$Outbound, z.ZodTypeDef, GetWebhooksResponseBody1>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetWebhooksResponseBody1$ {
    /** @deprecated use `GetWebhooksResponseBody1$inboundSchema` instead. */
    const inboundSchema: z.ZodType<GetWebhooksResponseBody1, z.ZodTypeDef, unknown>;
    /** @deprecated use `GetWebhooksResponseBody1$outboundSchema` instead. */
    const outboundSchema: z.ZodType<GetWebhooksResponseBody1$Outbound, z.ZodTypeDef, GetWebhooksResponseBody1>;
    /** @deprecated use `GetWebhooksResponseBody1$Outbound` instead. */
    type Outbound = GetWebhooksResponseBody1$Outbound;
}
export declare function getWebhooksResponseBody1ToJSON(getWebhooksResponseBody1: GetWebhooksResponseBody1): string;
export declare function getWebhooksResponseBody1FromJSON(jsonString: string): SafeParseResult<GetWebhooksResponseBody1, SDKValidationError>;
/** @internal */
export declare const GetWebhooksResponseBody$inboundSchema: z.ZodType<GetWebhooksResponseBody, z.ZodTypeDef, unknown>;
/** @internal */
export type GetWebhooksResponseBody$Outbound = Array<GetWebhooksResponseBody1$Outbound> | Array<GetWebhooksResponseBody2$Outbound>;
/** @internal */
export declare const GetWebhooksResponseBody$outboundSchema: z.ZodType<GetWebhooksResponseBody$Outbound, z.ZodTypeDef, GetWebhooksResponseBody>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetWebhooksResponseBody$ {
    /** @deprecated use `GetWebhooksResponseBody$inboundSchema` instead. */
    const inboundSchema: z.ZodType<GetWebhooksResponseBody, z.ZodTypeDef, unknown>;
    /** @deprecated use `GetWebhooksResponseBody$outboundSchema` instead. */
    const outboundSchema: z.ZodType<GetWebhooksResponseBody$Outbound, z.ZodTypeDef, GetWebhooksResponseBody>;
    /** @deprecated use `GetWebhooksResponseBody$Outbound` instead. */
    type Outbound = GetWebhooksResponseBody$Outbound;
}
export declare function getWebhooksResponseBodyToJSON(getWebhooksResponseBody: GetWebhooksResponseBody): string;
export declare function getWebhooksResponseBodyFromJSON(jsonString: string): SafeParseResult<GetWebhooksResponseBody, SDKValidationError>;
//# sourceMappingURL=getwebhooksop.d.ts.map