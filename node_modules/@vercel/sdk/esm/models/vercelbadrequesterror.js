/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
export class VercelBadRequestError extends Error {
    constructor(err) {
        const message = "message" in err && typeof err.message === "string"
            ? err.message
            : `API error occurred: ${JSON.stringify(err)}`;
        super(message);
        this.data$ = err;
        this.error = err.error;
        this.name = "VercelBadRequestError";
    }
}
/** @internal */
export const ErrorT$inboundSchema = z
    .object({
    code: z.string(),
    message: z.string(),
});
/** @internal */
export const ErrorT$outboundSchema = z.object({
    code: z.string(),
    message: z.string(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ErrorT$;
(function (ErrorT$) {
    /** @deprecated use `ErrorT$inboundSchema` instead. */
    ErrorT$.inboundSchema = ErrorT$inboundSchema;
    /** @deprecated use `ErrorT$outboundSchema` instead. */
    ErrorT$.outboundSchema = ErrorT$outboundSchema;
})(ErrorT$ || (ErrorT$ = {}));
export function errorToJSON(errorT) {
    return JSON.stringify(ErrorT$outboundSchema.parse(errorT));
}
export function errorFromJSON(jsonString) {
    return safeParse(jsonString, (x) => ErrorT$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'ErrorT' from JSON`);
}
/** @internal */
export const VercelBadRequestError$inboundSchema = z.object({
    error: z.lazy(() => ErrorT$inboundSchema),
})
    .transform((v) => {
    return new VercelBadRequestError(v);
});
/** @internal */
export const VercelBadRequestError$outboundSchema = z.instanceof(VercelBadRequestError)
    .transform(v => v.data$)
    .pipe(z.object({
    error: z.lazy(() => ErrorT$outboundSchema),
}));
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var VercelBadRequestError$;
(function (VercelBadRequestError$) {
    /** @deprecated use `VercelBadRequestError$inboundSchema` instead. */
    VercelBadRequestError$.inboundSchema = VercelBadRequestError$inboundSchema;
    /** @deprecated use `VercelBadRequestError$outboundSchema` instead. */
    VercelBadRequestError$.outboundSchema = VercelBadRequestError$outboundSchema;
})(VercelBadRequestError$ || (VercelBadRequestError$ = {}));
//# sourceMappingURL=vercelbadrequesterror.js.map