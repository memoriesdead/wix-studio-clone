/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { FlagJSONValue$inboundSchema, FlagJSONValue$outboundSchema, } from "./flagjsonvalue.js";
/**
 * Forces a new deployment even if there is a previous similar deployment
 */
export const ForceNew = {
    Zero: "0",
    One: "1",
};
/**
 * Allows to skip framework detection so the API would not fail to ask for confirmation
 */
export const SkipAutoDetectionConfirmation = {
    Zero: "0",
    One: "1",
};
/**
 * The file content encoding, it could be either a base64 (useful for images, etc.) of the files or the plain text for source code.
 */
export const Encoding = {
    Base64: "base64",
    Utf8: "utf-8",
};
export const CreateDeploymentGitSourceDeploymentsRequestRequestBodyType = {
    Bitbucket: "bitbucket",
};
export const CreateDeploymentGitSourceDeploymentsRequestType = {
    Bitbucket: "bitbucket",
};
export const CreateDeploymentGitSourceDeploymentsType = {
    Gitlab: "gitlab",
};
export const CreateDeploymentGitSourceType = {
    GithubCustomHost: "github-custom-host",
};
export const GitSourceType = {
    Github: "github",
};
export const CreateDeploymentGitSourceDeploymentsRequestRequestBody1Type = {
    Github: "github",
};
/**
 * The framework that is being used for this project. When `null` is used no framework is selected
 */
export const Framework = {
    Blitzjs: "blitzjs",
    Nextjs: "nextjs",
    Gatsby: "gatsby",
    Remix: "remix",
    ReactRouter: "react-router",
    Astro: "astro",
    Hexo: "hexo",
    Eleventy: "eleventy",
    Docusaurus2: "docusaurus-2",
    Docusaurus: "docusaurus",
    Preact: "preact",
    Solidstart1: "solidstart-1",
    Solidstart: "solidstart",
    Dojo: "dojo",
    Ember: "ember",
    Vue: "vue",
    Scully: "scully",
    IonicAngular: "ionic-angular",
    Angular: "angular",
    Polymer: "polymer",
    Svelte: "svelte",
    Sveltekit: "sveltekit",
    Sveltekit1: "sveltekit-1",
    IonicReact: "ionic-react",
    CreateReactApp: "create-react-app",
    Gridsome: "gridsome",
    Umijs: "umijs",
    Sapper: "sapper",
    Saber: "saber",
    Stencil: "stencil",
    Nuxtjs: "nuxtjs",
    Redwoodjs: "redwoodjs",
    Hugo: "hugo",
    Jekyll: "jekyll",
    Brunch: "brunch",
    Middleman: "middleman",
    Zola: "zola",
    Hydrogen: "hydrogen",
    Vite: "vite",
    Vitepress: "vitepress",
    Vuepress: "vuepress",
    Parcel: "parcel",
    Fasthtml: "fasthtml",
    SanityV3: "sanity-v3",
    Sanity: "sanity",
    Storybook: "storybook",
};
/**
 * Override the Node.js version that should be used for this deployment
 */
export const NodeVersion = {
    TwentyTwoDotX: "22.x",
    TwentyDotX: "20.x",
    EighteenDotX: "18.x",
    SixteenDotX: "16.x",
    FourteenDotX: "14.x",
    TwelveDotX: "12.x",
    TenDotX: "10.x",
    EightDot10DotX: "8.10.x",
};
export const CreateDeploymentFramework = {
    Blitzjs: "blitzjs",
    Nextjs: "nextjs",
    Gatsby: "gatsby",
    Remix: "remix",
    ReactRouter: "react-router",
    Astro: "astro",
    Hexo: "hexo",
    Eleventy: "eleventy",
    Docusaurus2: "docusaurus-2",
    Docusaurus: "docusaurus",
    Preact: "preact",
    Solidstart1: "solidstart-1",
    Solidstart: "solidstart",
    Dojo: "dojo",
    Ember: "ember",
    Vue: "vue",
    Scully: "scully",
    IonicAngular: "ionic-angular",
    Angular: "angular",
    Polymer: "polymer",
    Svelte: "svelte",
    Sveltekit: "sveltekit",
    Sveltekit1: "sveltekit-1",
    IonicReact: "ionic-react",
    CreateReactApp: "create-react-app",
    Gridsome: "gridsome",
    Umijs: "umijs",
    Sapper: "sapper",
    Saber: "saber",
    Stencil: "stencil",
    Nuxtjs: "nuxtjs",
    Redwoodjs: "redwoodjs",
    Hugo: "hugo",
    Jekyll: "jekyll",
    Brunch: "brunch",
    Middleman: "middleman",
    Zola: "zola",
    Hydrogen: "hydrogen",
    Vite: "vite",
    Vitepress: "vitepress",
    Vuepress: "vuepress",
    Parcel: "parcel",
    Fasthtml: "fasthtml",
    SanityV3: "sanity-v3",
    Sanity: "sanity",
    Storybook: "storybook",
};
export const CreateDeploymentDeploymentsStatus = {
    Error: "error",
    Skipped: "skipped",
    Pending: "pending",
    Ready: "ready",
    Timeout: "timeout",
};
/**
 * Must be `http` or `https`.
 */
export const Protocol = {
    Http: "http",
    Https: "https",
};
export const Formats = {
    ImageAvif: "image/avif",
    ImageWebp: "image/webp",
};
export const ContentDispositionType = {
    Inline: "inline",
    Attachment: "attachment",
};
export const CreateDeploymentReadyState = {
    Building: "BUILDING",
    Error: "ERROR",
    Initializing: "INITIALIZING",
    Ready: "READY",
};
export const CreateDeploymentStatus = {
    Canceled: "CANCELED",
    Error: "ERROR",
    Queued: "QUEUED",
    Building: "BUILDING",
    Initializing: "INITIALIZING",
    Ready: "READY",
};
/**
 * The type of environment (production, preview, or development)
 */
export const CustomEnvironmentType = {
    Production: "production",
    Preview: "preview",
    Development: "development",
};
/**
 * The type of matching to perform
 */
export const CreateDeploymentCustomEnvironmentType = {
    StartsWith: "startsWith",
    Equals: "equals",
    EndsWith: "endsWith",
};
export const CreateDeploymentType = {
    Lambdas: "LAMBDAS",
};
export const CreateDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody12Type = {
    Bitbucket: "bitbucket",
};
export const CreateDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody11Type = {
    Gitlab: "gitlab",
};
export const CreateDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody10Type = {
    GithubCustomHost: "github-custom-host",
};
export const CreateDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody9Type = {
    Github: "github",
};
export const CreateDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody8Type = {
    Custom: "custom",
};
export const CreateDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody7Type = {
    Bitbucket: "bitbucket",
};
export const CreateDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody6Type = {
    Bitbucket: "bitbucket",
};
export const CreateDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody5Type = {
    Gitlab: "gitlab",
};
export const CreateDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBodyType = {
    GithubCustomHost: "github-custom-host",
};
export const CreateDeploymentGitSourceDeploymentsResponse200ApplicationJSONType = {
    GithubCustomHost: "github-custom-host",
};
export const CreateDeploymentGitSourceDeploymentsResponse200Type = {
    Github: "github",
};
export const CreateDeploymentGitSourceDeploymentsResponseType = {
    Github: "github",
};
export const ReadyState = {
    Canceled: "CANCELED",
    Error: "ERROR",
    Queued: "QUEUED",
    Building: "BUILDING",
    Initializing: "INITIALIZING",
    Ready: "READY",
};
export const CreateDeploymentSource = {
    Cli: "cli",
    Git: "git",
    Import: "import",
    ImportRepo: "import/repo",
    CloneRepo: "clone/repo",
    ApiTriggerGitDeploy: "api-trigger-git-deploy",
    Redeploy: "redeploy",
    V0Web: "v0-web",
};
export const CreateDeploymentTarget = {
    Production: "production",
    Staging: "staging",
};
export const ChecksState = {
    Registered: "registered",
    Running: "running",
    Completed: "completed",
};
export const ChecksConclusion = {
    Succeeded: "succeeded",
    Failed: "failed",
    Skipped: "skipped",
    Canceled: "canceled",
};
/**
 * Substate of deployment when readyState is 'READY' Tracks whether or not deployment has seen production traffic: - STAGED: never seen production traffic - ROLLING: in the process of having production traffic gradually transitioned. - PROMOTED: has seen production traffic
 */
export const ReadySubstate = {
    Staged: "STAGED",
    Rolling: "ROLLING",
    Promoted: "PROMOTED",
};
export const CreateDeploymentPlan = {
    Pro: "pro",
    Enterprise: "enterprise",
    Hobby: "hobby",
};
export const FunctionType = {
    Fluid: "fluid",
    Standard: "standard",
};
export const FunctionMemoryType = {
    Standard: "standard",
    StandardLegacy: "standard_legacy",
    Performance: "performance",
};
export const RoutesHandle = {
    Error: "error",
    Filesystem: "filesystem",
    Hit: "hit",
    Miss: "miss",
    Rewrite: "rewrite",
    Resource: "resource",
};
export const CreateDeploymentHasType = {
    Header: "header",
    Cookie: "cookie",
    Query: "query",
};
export const HasType = {
    Host: "host",
};
export const CreateDeploymentMissingType = {
    Header: "header",
    Cookie: "cookie",
    Query: "query",
};
export const MissingType = {
    Host: "host",
};
export const CreateDeploymentGitRepoDeploymentsType = {
    Bitbucket: "bitbucket",
};
export const CreateDeploymentGitRepoOwnerType = {
    Team: "team",
    User: "user",
};
export const CreateDeploymentGitRepoType = {
    Github: "github",
};
export const GitRepoOwnerType = {
    Team: "team",
    User: "user",
};
export const GitRepoType = {
    Gitlab: "gitlab",
};
export const OwnerType = {
    Team: "team",
    User: "user",
};
/** @internal */
export const ForceNew$inboundSchema = z
    .nativeEnum(ForceNew);
/** @internal */
export const ForceNew$outboundSchema = ForceNew$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ForceNew$;
(function (ForceNew$) {
    /** @deprecated use `ForceNew$inboundSchema` instead. */
    ForceNew$.inboundSchema = ForceNew$inboundSchema;
    /** @deprecated use `ForceNew$outboundSchema` instead. */
    ForceNew$.outboundSchema = ForceNew$outboundSchema;
})(ForceNew$ || (ForceNew$ = {}));
/** @internal */
export const SkipAutoDetectionConfirmation$inboundSchema = z.nativeEnum(SkipAutoDetectionConfirmation);
/** @internal */
export const SkipAutoDetectionConfirmation$outboundSchema = SkipAutoDetectionConfirmation$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var SkipAutoDetectionConfirmation$;
(function (SkipAutoDetectionConfirmation$) {
    /** @deprecated use `SkipAutoDetectionConfirmation$inboundSchema` instead. */
    SkipAutoDetectionConfirmation$.inboundSchema = SkipAutoDetectionConfirmation$inboundSchema;
    /** @deprecated use `SkipAutoDetectionConfirmation$outboundSchema` instead. */
    SkipAutoDetectionConfirmation$.outboundSchema = SkipAutoDetectionConfirmation$outboundSchema;
})(SkipAutoDetectionConfirmation$ || (SkipAutoDetectionConfirmation$ = {}));
/** @internal */
export const UploadedFile$inboundSchema = z.object({
    file: z.string(),
    sha: z.string().optional(),
    size: z.number().int().optional(),
});
/** @internal */
export const UploadedFile$outboundSchema = z.object({
    file: z.string(),
    sha: z.string().optional(),
    size: z.number().int().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UploadedFile$;
(function (UploadedFile$) {
    /** @deprecated use `UploadedFile$inboundSchema` instead. */
    UploadedFile$.inboundSchema = UploadedFile$inboundSchema;
    /** @deprecated use `UploadedFile$outboundSchema` instead. */
    UploadedFile$.outboundSchema = UploadedFile$outboundSchema;
})(UploadedFile$ || (UploadedFile$ = {}));
export function uploadedFileToJSON(uploadedFile) {
    return JSON.stringify(UploadedFile$outboundSchema.parse(uploadedFile));
}
export function uploadedFileFromJSON(jsonString) {
    return safeParse(jsonString, (x) => UploadedFile$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'UploadedFile' from JSON`);
}
/** @internal */
export const Encoding$inboundSchema = z
    .nativeEnum(Encoding);
/** @internal */
export const Encoding$outboundSchema = Encoding$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var Encoding$;
(function (Encoding$) {
    /** @deprecated use `Encoding$inboundSchema` instead. */
    Encoding$.inboundSchema = Encoding$inboundSchema;
    /** @deprecated use `Encoding$outboundSchema` instead. */
    Encoding$.outboundSchema = Encoding$outboundSchema;
})(Encoding$ || (Encoding$ = {}));
/** @internal */
export const InlinedFile$inboundSchema = z.object({
    data: z.string(),
    encoding: Encoding$inboundSchema.optional(),
    file: z.string(),
});
/** @internal */
export const InlinedFile$outboundSchema = z.object({
    data: z.string(),
    encoding: Encoding$outboundSchema.optional(),
    file: z.string(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var InlinedFile$;
(function (InlinedFile$) {
    /** @deprecated use `InlinedFile$inboundSchema` instead. */
    InlinedFile$.inboundSchema = InlinedFile$inboundSchema;
    /** @deprecated use `InlinedFile$outboundSchema` instead. */
    InlinedFile$.outboundSchema = InlinedFile$outboundSchema;
})(InlinedFile$ || (InlinedFile$ = {}));
export function inlinedFileToJSON(inlinedFile) {
    return JSON.stringify(InlinedFile$outboundSchema.parse(inlinedFile));
}
export function inlinedFileFromJSON(jsonString) {
    return safeParse(jsonString, (x) => InlinedFile$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'InlinedFile' from JSON`);
}
/** @internal */
export const Files$inboundSchema = z
    .union([
    z.lazy(() => InlinedFile$inboundSchema),
    z.lazy(() => UploadedFile$inboundSchema),
]);
/** @internal */
export const Files$outboundSchema = z.union([
    z.lazy(() => InlinedFile$outboundSchema),
    z.lazy(() => UploadedFile$outboundSchema),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var Files$;
(function (Files$) {
    /** @deprecated use `Files$inboundSchema` instead. */
    Files$.inboundSchema = Files$inboundSchema;
    /** @deprecated use `Files$outboundSchema` instead. */
    Files$.outboundSchema = Files$outboundSchema;
})(Files$ || (Files$ = {}));
export function filesToJSON(files) {
    return JSON.stringify(Files$outboundSchema.parse(files));
}
export function filesFromJSON(jsonString) {
    return safeParse(jsonString, (x) => Files$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'Files' from JSON`);
}
/** @internal */
export const GitMetadata$inboundSchema = z.object({
    remoteUrl: z.string().optional(),
    commitAuthorName: z.string().optional(),
    commitMessage: z.string().optional(),
    commitRef: z.string().optional(),
    commitSha: z.string().optional(),
    dirty: z.boolean().optional(),
});
/** @internal */
export const GitMetadata$outboundSchema = z.object({
    remoteUrl: z.string().optional(),
    commitAuthorName: z.string().optional(),
    commitMessage: z.string().optional(),
    commitRef: z.string().optional(),
    commitSha: z.string().optional(),
    dirty: z.boolean().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GitMetadata$;
(function (GitMetadata$) {
    /** @deprecated use `GitMetadata$inboundSchema` instead. */
    GitMetadata$.inboundSchema = GitMetadata$inboundSchema;
    /** @deprecated use `GitMetadata$outboundSchema` instead. */
    GitMetadata$.outboundSchema = GitMetadata$outboundSchema;
})(GitMetadata$ || (GitMetadata$ = {}));
export function gitMetadataToJSON(gitMetadata) {
    return JSON.stringify(GitMetadata$outboundSchema.parse(gitMetadata));
}
export function gitMetadataFromJSON(jsonString) {
    return safeParse(jsonString, (x) => GitMetadata$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'GitMetadata' from JSON`);
}
/** @internal */
export const CreateDeploymentGitSourceDeploymentsRequestRequestBodyType$inboundSchema = z.nativeEnum(CreateDeploymentGitSourceDeploymentsRequestRequestBodyType);
/** @internal */
export const CreateDeploymentGitSourceDeploymentsRequestRequestBodyType$outboundSchema = CreateDeploymentGitSourceDeploymentsRequestRequestBodyType$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CreateDeploymentGitSourceDeploymentsRequestRequestBodyType$;
(function (CreateDeploymentGitSourceDeploymentsRequestRequestBodyType$) {
    /** @deprecated use `CreateDeploymentGitSourceDeploymentsRequestRequestBodyType$inboundSchema` instead. */
    CreateDeploymentGitSourceDeploymentsRequestRequestBodyType$.inboundSchema = CreateDeploymentGitSourceDeploymentsRequestRequestBodyType$inboundSchema;
    /** @deprecated use `CreateDeploymentGitSourceDeploymentsRequestRequestBodyType$outboundSchema` instead. */
    CreateDeploymentGitSourceDeploymentsRequestRequestBodyType$.outboundSchema = CreateDeploymentGitSourceDeploymentsRequestRequestBodyType$outboundSchema;
})(CreateDeploymentGitSourceDeploymentsRequestRequestBodyType$ || (CreateDeploymentGitSourceDeploymentsRequestRequestBodyType$ = {}));
/** @internal */
export const GitSource6$inboundSchema = z.object({
    owner: z.string(),
    ref: z.string(),
    sha: z.string().optional(),
    slug: z.string(),
    type: CreateDeploymentGitSourceDeploymentsRequestRequestBodyType$inboundSchema,
});
/** @internal */
export const GitSource6$outboundSchema = z.object({
    owner: z.string(),
    ref: z.string(),
    sha: z.string().optional(),
    slug: z.string(),
    type: CreateDeploymentGitSourceDeploymentsRequestRequestBodyType$outboundSchema,
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GitSource6$;
(function (GitSource6$) {
    /** @deprecated use `GitSource6$inboundSchema` instead. */
    GitSource6$.inboundSchema = GitSource6$inboundSchema;
    /** @deprecated use `GitSource6$outboundSchema` instead. */
    GitSource6$.outboundSchema = GitSource6$outboundSchema;
})(GitSource6$ || (GitSource6$ = {}));
export function gitSource6ToJSON(gitSource6) {
    return JSON.stringify(GitSource6$outboundSchema.parse(gitSource6));
}
export function gitSource6FromJSON(jsonString) {
    return safeParse(jsonString, (x) => GitSource6$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'GitSource6' from JSON`);
}
/** @internal */
export const CreateDeploymentGitSourceDeploymentsRequestType$inboundSchema = z
    .nativeEnum(CreateDeploymentGitSourceDeploymentsRequestType);
/** @internal */
export const CreateDeploymentGitSourceDeploymentsRequestType$outboundSchema = CreateDeploymentGitSourceDeploymentsRequestType$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CreateDeploymentGitSourceDeploymentsRequestType$;
(function (CreateDeploymentGitSourceDeploymentsRequestType$) {
    /** @deprecated use `CreateDeploymentGitSourceDeploymentsRequestType$inboundSchema` instead. */
    CreateDeploymentGitSourceDeploymentsRequestType$.inboundSchema = CreateDeploymentGitSourceDeploymentsRequestType$inboundSchema;
    /** @deprecated use `CreateDeploymentGitSourceDeploymentsRequestType$outboundSchema` instead. */
    CreateDeploymentGitSourceDeploymentsRequestType$.outboundSchema = CreateDeploymentGitSourceDeploymentsRequestType$outboundSchema;
})(CreateDeploymentGitSourceDeploymentsRequestType$ || (CreateDeploymentGitSourceDeploymentsRequestType$ = {}));
/** @internal */
export const GitSource5$inboundSchema = z.object({
    ref: z.string(),
    repoUuid: z.string(),
    sha: z.string().optional(),
    type: CreateDeploymentGitSourceDeploymentsRequestType$inboundSchema,
    workspaceUuid: z.string().optional(),
});
/** @internal */
export const GitSource5$outboundSchema = z.object({
    ref: z.string(),
    repoUuid: z.string(),
    sha: z.string().optional(),
    type: CreateDeploymentGitSourceDeploymentsRequestType$outboundSchema,
    workspaceUuid: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GitSource5$;
(function (GitSource5$) {
    /** @deprecated use `GitSource5$inboundSchema` instead. */
    GitSource5$.inboundSchema = GitSource5$inboundSchema;
    /** @deprecated use `GitSource5$outboundSchema` instead. */
    GitSource5$.outboundSchema = GitSource5$outboundSchema;
})(GitSource5$ || (GitSource5$ = {}));
export function gitSource5ToJSON(gitSource5) {
    return JSON.stringify(GitSource5$outboundSchema.parse(gitSource5));
}
export function gitSource5FromJSON(jsonString) {
    return safeParse(jsonString, (x) => GitSource5$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'GitSource5' from JSON`);
}
/** @internal */
export const ProjectId$inboundSchema = z.union([z.number(), z.string()]);
/** @internal */
export const ProjectId$outboundSchema = z.union([z.number(), z.string()]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ProjectId$;
(function (ProjectId$) {
    /** @deprecated use `ProjectId$inboundSchema` instead. */
    ProjectId$.inboundSchema = ProjectId$inboundSchema;
    /** @deprecated use `ProjectId$outboundSchema` instead. */
    ProjectId$.outboundSchema = ProjectId$outboundSchema;
})(ProjectId$ || (ProjectId$ = {}));
export function projectIdToJSON(projectId) {
    return JSON.stringify(ProjectId$outboundSchema.parse(projectId));
}
export function projectIdFromJSON(jsonString) {
    return safeParse(jsonString, (x) => ProjectId$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'ProjectId' from JSON`);
}
/** @internal */
export const CreateDeploymentGitSourceDeploymentsType$inboundSchema = z
    .nativeEnum(CreateDeploymentGitSourceDeploymentsType);
/** @internal */
export const CreateDeploymentGitSourceDeploymentsType$outboundSchema = CreateDeploymentGitSourceDeploymentsType$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CreateDeploymentGitSourceDeploymentsType$;
(function (CreateDeploymentGitSourceDeploymentsType$) {
    /** @deprecated use `CreateDeploymentGitSourceDeploymentsType$inboundSchema` instead. */
    CreateDeploymentGitSourceDeploymentsType$.inboundSchema = CreateDeploymentGitSourceDeploymentsType$inboundSchema;
    /** @deprecated use `CreateDeploymentGitSourceDeploymentsType$outboundSchema` instead. */
    CreateDeploymentGitSourceDeploymentsType$.outboundSchema = CreateDeploymentGitSourceDeploymentsType$outboundSchema;
})(CreateDeploymentGitSourceDeploymentsType$ || (CreateDeploymentGitSourceDeploymentsType$ = {}));
/** @internal */
export const GitSource4$inboundSchema = z.object({
    projectId: z.union([z.number(), z.string()]),
    ref: z.string(),
    sha: z.string().optional(),
    type: CreateDeploymentGitSourceDeploymentsType$inboundSchema,
});
/** @internal */
export const GitSource4$outboundSchema = z.object({
    projectId: z.union([z.number(), z.string()]),
    ref: z.string(),
    sha: z.string().optional(),
    type: CreateDeploymentGitSourceDeploymentsType$outboundSchema,
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GitSource4$;
(function (GitSource4$) {
    /** @deprecated use `GitSource4$inboundSchema` instead. */
    GitSource4$.inboundSchema = GitSource4$inboundSchema;
    /** @deprecated use `GitSource4$outboundSchema` instead. */
    GitSource4$.outboundSchema = GitSource4$outboundSchema;
})(GitSource4$ || (GitSource4$ = {}));
export function gitSource4ToJSON(gitSource4) {
    return JSON.stringify(GitSource4$outboundSchema.parse(gitSource4));
}
export function gitSource4FromJSON(jsonString) {
    return safeParse(jsonString, (x) => GitSource4$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'GitSource4' from JSON`);
}
/** @internal */
export const CreateDeploymentGitSourceType$inboundSchema = z.nativeEnum(CreateDeploymentGitSourceType);
/** @internal */
export const CreateDeploymentGitSourceType$outboundSchema = CreateDeploymentGitSourceType$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CreateDeploymentGitSourceType$;
(function (CreateDeploymentGitSourceType$) {
    /** @deprecated use `CreateDeploymentGitSourceType$inboundSchema` instead. */
    CreateDeploymentGitSourceType$.inboundSchema = CreateDeploymentGitSourceType$inboundSchema;
    /** @deprecated use `CreateDeploymentGitSourceType$outboundSchema` instead. */
    CreateDeploymentGitSourceType$.outboundSchema = CreateDeploymentGitSourceType$outboundSchema;
})(CreateDeploymentGitSourceType$ || (CreateDeploymentGitSourceType$ = {}));
/** @internal */
export const GitSource3$inboundSchema = z.object({
    org: z.string(),
    ref: z.string(),
    repo: z.string(),
    sha: z.string().optional(),
    host: z.string(),
    type: CreateDeploymentGitSourceType$inboundSchema,
});
/** @internal */
export const GitSource3$outboundSchema = z.object({
    org: z.string(),
    ref: z.string(),
    repo: z.string(),
    sha: z.string().optional(),
    host: z.string(),
    type: CreateDeploymentGitSourceType$outboundSchema,
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GitSource3$;
(function (GitSource3$) {
    /** @deprecated use `GitSource3$inboundSchema` instead. */
    GitSource3$.inboundSchema = GitSource3$inboundSchema;
    /** @deprecated use `GitSource3$outboundSchema` instead. */
    GitSource3$.outboundSchema = GitSource3$outboundSchema;
})(GitSource3$ || (GitSource3$ = {}));
export function gitSource3ToJSON(gitSource3) {
    return JSON.stringify(GitSource3$outboundSchema.parse(gitSource3));
}
export function gitSource3FromJSON(jsonString) {
    return safeParse(jsonString, (x) => GitSource3$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'GitSource3' from JSON`);
}
/** @internal */
export const GitSourceType$inboundSchema = z.nativeEnum(GitSourceType);
/** @internal */
export const GitSourceType$outboundSchema = GitSourceType$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GitSourceType$;
(function (GitSourceType$) {
    /** @deprecated use `GitSourceType$inboundSchema` instead. */
    GitSourceType$.inboundSchema = GitSourceType$inboundSchema;
    /** @deprecated use `GitSourceType$outboundSchema` instead. */
    GitSourceType$.outboundSchema = GitSourceType$outboundSchema;
})(GitSourceType$ || (GitSourceType$ = {}));
/** @internal */
export const GitSource2$inboundSchema = z.object({
    org: z.string(),
    ref: z.string(),
    repo: z.string(),
    sha: z.string().optional(),
    type: GitSourceType$inboundSchema,
});
/** @internal */
export const GitSource2$outboundSchema = z.object({
    org: z.string(),
    ref: z.string(),
    repo: z.string(),
    sha: z.string().optional(),
    type: GitSourceType$outboundSchema,
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GitSource2$;
(function (GitSource2$) {
    /** @deprecated use `GitSource2$inboundSchema` instead. */
    GitSource2$.inboundSchema = GitSource2$inboundSchema;
    /** @deprecated use `GitSource2$outboundSchema` instead. */
    GitSource2$.outboundSchema = GitSource2$outboundSchema;
})(GitSource2$ || (GitSource2$ = {}));
export function gitSource2ToJSON(gitSource2) {
    return JSON.stringify(GitSource2$outboundSchema.parse(gitSource2));
}
export function gitSource2FromJSON(jsonString) {
    return safeParse(jsonString, (x) => GitSource2$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'GitSource2' from JSON`);
}
/** @internal */
export const RepoId$inboundSchema = z
    .union([z.number(), z.string()]);
/** @internal */
export const RepoId$outboundSchema = z.union([z.number(), z.string()]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var RepoId$;
(function (RepoId$) {
    /** @deprecated use `RepoId$inboundSchema` instead. */
    RepoId$.inboundSchema = RepoId$inboundSchema;
    /** @deprecated use `RepoId$outboundSchema` instead. */
    RepoId$.outboundSchema = RepoId$outboundSchema;
})(RepoId$ || (RepoId$ = {}));
export function repoIdToJSON(repoId) {
    return JSON.stringify(RepoId$outboundSchema.parse(repoId));
}
export function repoIdFromJSON(jsonString) {
    return safeParse(jsonString, (x) => RepoId$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'RepoId' from JSON`);
}
/** @internal */
export const CreateDeploymentGitSourceDeploymentsRequestRequestBody1Type$inboundSchema = z.nativeEnum(CreateDeploymentGitSourceDeploymentsRequestRequestBody1Type);
/** @internal */
export const CreateDeploymentGitSourceDeploymentsRequestRequestBody1Type$outboundSchema = CreateDeploymentGitSourceDeploymentsRequestRequestBody1Type$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CreateDeploymentGitSourceDeploymentsRequestRequestBody1Type$;
(function (CreateDeploymentGitSourceDeploymentsRequestRequestBody1Type$) {
    /** @deprecated use `CreateDeploymentGitSourceDeploymentsRequestRequestBody1Type$inboundSchema` instead. */
    CreateDeploymentGitSourceDeploymentsRequestRequestBody1Type$.inboundSchema = CreateDeploymentGitSourceDeploymentsRequestRequestBody1Type$inboundSchema;
    /** @deprecated use `CreateDeploymentGitSourceDeploymentsRequestRequestBody1Type$outboundSchema` instead. */
    CreateDeploymentGitSourceDeploymentsRequestRequestBody1Type$.outboundSchema = CreateDeploymentGitSourceDeploymentsRequestRequestBody1Type$outboundSchema;
})(CreateDeploymentGitSourceDeploymentsRequestRequestBody1Type$ || (CreateDeploymentGitSourceDeploymentsRequestRequestBody1Type$ = {}));
/** @internal */
export const GitSource1$inboundSchema = z.object({
    ref: z.string(),
    repoId: z.union([z.number(), z.string()]),
    sha: z.string().optional(),
    type: CreateDeploymentGitSourceDeploymentsRequestRequestBody1Type$inboundSchema,
});
/** @internal */
export const GitSource1$outboundSchema = z.object({
    ref: z.string(),
    repoId: z.union([z.number(), z.string()]),
    sha: z.string().optional(),
    type: CreateDeploymentGitSourceDeploymentsRequestRequestBody1Type$outboundSchema,
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GitSource1$;
(function (GitSource1$) {
    /** @deprecated use `GitSource1$inboundSchema` instead. */
    GitSource1$.inboundSchema = GitSource1$inboundSchema;
    /** @deprecated use `GitSource1$outboundSchema` instead. */
    GitSource1$.outboundSchema = GitSource1$outboundSchema;
})(GitSource1$ || (GitSource1$ = {}));
export function gitSource1ToJSON(gitSource1) {
    return JSON.stringify(GitSource1$outboundSchema.parse(gitSource1));
}
export function gitSource1FromJSON(jsonString) {
    return safeParse(jsonString, (x) => GitSource1$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'GitSource1' from JSON`);
}
/** @internal */
export const GitSource$inboundSchema = z.union([
    z.lazy(() => GitSource1$inboundSchema),
    z.lazy(() => GitSource4$inboundSchema),
    z.lazy(() => GitSource2$inboundSchema),
    z.lazy(() => GitSource5$inboundSchema),
    z.lazy(() => GitSource6$inboundSchema),
    z.lazy(() => GitSource3$inboundSchema),
]);
/** @internal */
export const GitSource$outboundSchema = z.union([
    z.lazy(() => GitSource1$outboundSchema),
    z.lazy(() => GitSource4$outboundSchema),
    z.lazy(() => GitSource2$outboundSchema),
    z.lazy(() => GitSource5$outboundSchema),
    z.lazy(() => GitSource6$outboundSchema),
    z.lazy(() => GitSource3$outboundSchema),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GitSource$;
(function (GitSource$) {
    /** @deprecated use `GitSource$inboundSchema` instead. */
    GitSource$.inboundSchema = GitSource$inboundSchema;
    /** @deprecated use `GitSource$outboundSchema` instead. */
    GitSource$.outboundSchema = GitSource$outboundSchema;
})(GitSource$ || (GitSource$ = {}));
export function gitSourceToJSON(gitSource) {
    return JSON.stringify(GitSource$outboundSchema.parse(gitSource));
}
export function gitSourceFromJSON(jsonString) {
    return safeParse(jsonString, (x) => GitSource$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'GitSource' from JSON`);
}
/** @internal */
export const Framework$inboundSchema = z
    .nativeEnum(Framework);
/** @internal */
export const Framework$outboundSchema = Framework$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var Framework$;
(function (Framework$) {
    /** @deprecated use `Framework$inboundSchema` instead. */
    Framework$.inboundSchema = Framework$inboundSchema;
    /** @deprecated use `Framework$outboundSchema` instead. */
    Framework$.outboundSchema = Framework$outboundSchema;
})(Framework$ || (Framework$ = {}));
/** @internal */
export const NodeVersion$inboundSchema = z
    .nativeEnum(NodeVersion);
/** @internal */
export const NodeVersion$outboundSchema = NodeVersion$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var NodeVersion$;
(function (NodeVersion$) {
    /** @deprecated use `NodeVersion$inboundSchema` instead. */
    NodeVersion$.inboundSchema = NodeVersion$inboundSchema;
    /** @deprecated use `NodeVersion$outboundSchema` instead. */
    NodeVersion$.outboundSchema = NodeVersion$outboundSchema;
})(NodeVersion$ || (NodeVersion$ = {}));
/** @internal */
export const ProjectSettings$inboundSchema = z.object({
    buildCommand: z.nullable(z.string()).optional(),
    commandForIgnoringBuildStep: z.nullable(z.string()).optional(),
    devCommand: z.nullable(z.string()).optional(),
    framework: z.nullable(Framework$inboundSchema).optional(),
    installCommand: z.nullable(z.string()).optional(),
    nodeVersion: NodeVersion$inboundSchema.optional(),
    outputDirectory: z.nullable(z.string()).optional(),
    rootDirectory: z.nullable(z.string()).optional(),
    serverlessFunctionRegion: z.nullable(z.string()).optional(),
    skipGitConnectDuringLink: z.boolean().optional(),
    sourceFilesOutsideRootDirectory: z.boolean().optional(),
});
/** @internal */
export const ProjectSettings$outboundSchema = z.object({
    buildCommand: z.nullable(z.string()).optional(),
    commandForIgnoringBuildStep: z.nullable(z.string()).optional(),
    devCommand: z.nullable(z.string()).optional(),
    framework: z.nullable(Framework$outboundSchema).optional(),
    installCommand: z.nullable(z.string()).optional(),
    nodeVersion: NodeVersion$outboundSchema.optional(),
    outputDirectory: z.nullable(z.string()).optional(),
    rootDirectory: z.nullable(z.string()).optional(),
    serverlessFunctionRegion: z.nullable(z.string()).optional(),
    skipGitConnectDuringLink: z.boolean().optional(),
    sourceFilesOutsideRootDirectory: z.boolean().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ProjectSettings$;
(function (ProjectSettings$) {
    /** @deprecated use `ProjectSettings$inboundSchema` instead. */
    ProjectSettings$.inboundSchema = ProjectSettings$inboundSchema;
    /** @deprecated use `ProjectSettings$outboundSchema` instead. */
    ProjectSettings$.outboundSchema = ProjectSettings$outboundSchema;
})(ProjectSettings$ || (ProjectSettings$ = {}));
export function projectSettingsToJSON(projectSettings) {
    return JSON.stringify(ProjectSettings$outboundSchema.parse(projectSettings));
}
export function projectSettingsFromJSON(jsonString) {
    return safeParse(jsonString, (x) => ProjectSettings$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'ProjectSettings' from JSON`);
}
/** @internal */
export const CreateDeploymentRequestBody$inboundSchema = z.object({
    customEnvironmentSlugOrId: z.string().optional(),
    deploymentId: z.string().optional(),
    files: z.array(z.union([
        z.lazy(() => InlinedFile$inboundSchema),
        z.lazy(() => UploadedFile$inboundSchema),
    ])).optional(),
    gitMetadata: z.lazy(() => GitMetadata$inboundSchema).optional(),
    gitSource: z.union([
        z.lazy(() => GitSource1$inboundSchema),
        z.lazy(() => GitSource4$inboundSchema),
        z.lazy(() => GitSource2$inboundSchema),
        z.lazy(() => GitSource5$inboundSchema),
        z.lazy(() => GitSource6$inboundSchema),
        z.lazy(() => GitSource3$inboundSchema),
    ]).optional(),
    meta: z.record(z.string()).optional(),
    monorepoManager: z.nullable(z.string()).optional(),
    name: z.string(),
    project: z.string().optional(),
    projectSettings: z.lazy(() => ProjectSettings$inboundSchema).optional(),
    target: z.string().optional(),
    withLatestCommit: z.boolean().optional(),
});
/** @internal */
export const CreateDeploymentRequestBody$outboundSchema = z.object({
    customEnvironmentSlugOrId: z.string().optional(),
    deploymentId: z.string().optional(),
    files: z.array(z.union([
        z.lazy(() => InlinedFile$outboundSchema),
        z.lazy(() => UploadedFile$outboundSchema),
    ])).optional(),
    gitMetadata: z.lazy(() => GitMetadata$outboundSchema).optional(),
    gitSource: z.union([
        z.lazy(() => GitSource1$outboundSchema),
        z.lazy(() => GitSource4$outboundSchema),
        z.lazy(() => GitSource2$outboundSchema),
        z.lazy(() => GitSource5$outboundSchema),
        z.lazy(() => GitSource6$outboundSchema),
        z.lazy(() => GitSource3$outboundSchema),
    ]).optional(),
    meta: z.record(z.string()).optional(),
    monorepoManager: z.nullable(z.string()).optional(),
    name: z.string(),
    project: z.string().optional(),
    projectSettings: z.lazy(() => ProjectSettings$outboundSchema).optional(),
    target: z.string().optional(),
    withLatestCommit: z.boolean().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CreateDeploymentRequestBody$;
(function (CreateDeploymentRequestBody$) {
    /** @deprecated use `CreateDeploymentRequestBody$inboundSchema` instead. */
    CreateDeploymentRequestBody$.inboundSchema = CreateDeploymentRequestBody$inboundSchema;
    /** @deprecated use `CreateDeploymentRequestBody$outboundSchema` instead. */
    CreateDeploymentRequestBody$.outboundSchema = CreateDeploymentRequestBody$outboundSchema;
})(CreateDeploymentRequestBody$ || (CreateDeploymentRequestBody$ = {}));
export function createDeploymentRequestBodyToJSON(createDeploymentRequestBody) {
    return JSON.stringify(CreateDeploymentRequestBody$outboundSchema.parse(createDeploymentRequestBody));
}
export function createDeploymentRequestBodyFromJSON(jsonString) {
    return safeParse(jsonString, (x) => CreateDeploymentRequestBody$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CreateDeploymentRequestBody' from JSON`);
}
/** @internal */
export const CreateDeploymentRequest$inboundSchema = z.object({
    forceNew: ForceNew$inboundSchema.optional(),
    skipAutoDetectionConfirmation: SkipAutoDetectionConfirmation$inboundSchema
        .optional(),
    teamId: z.string().optional(),
    slug: z.string().optional(),
    RequestBody: z.lazy(() => CreateDeploymentRequestBody$inboundSchema),
}).transform((v) => {
    return remap$(v, {
        "RequestBody": "requestBody",
    });
});
/** @internal */
export const CreateDeploymentRequest$outboundSchema = z.object({
    forceNew: ForceNew$outboundSchema.optional(),
    skipAutoDetectionConfirmation: SkipAutoDetectionConfirmation$outboundSchema
        .optional(),
    teamId: z.string().optional(),
    slug: z.string().optional(),
    requestBody: z.lazy(() => CreateDeploymentRequestBody$outboundSchema),
}).transform((v) => {
    return remap$(v, {
        requestBody: "RequestBody",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CreateDeploymentRequest$;
(function (CreateDeploymentRequest$) {
    /** @deprecated use `CreateDeploymentRequest$inboundSchema` instead. */
    CreateDeploymentRequest$.inboundSchema = CreateDeploymentRequest$inboundSchema;
    /** @deprecated use `CreateDeploymentRequest$outboundSchema` instead. */
    CreateDeploymentRequest$.outboundSchema = CreateDeploymentRequest$outboundSchema;
})(CreateDeploymentRequest$ || (CreateDeploymentRequest$ = {}));
export function createDeploymentRequestToJSON(createDeploymentRequest) {
    return JSON.stringify(CreateDeploymentRequest$outboundSchema.parse(createDeploymentRequest));
}
export function createDeploymentRequestFromJSON(jsonString) {
    return safeParse(jsonString, (x) => CreateDeploymentRequest$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CreateDeploymentRequest' from JSON`);
}
/** @internal */
export const AliasAssignedAt$inboundSchema = z.union([z.number(), z.boolean()]);
/** @internal */
export const AliasAssignedAt$outboundSchema = z.union([z.number(), z.boolean()]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var AliasAssignedAt$;
(function (AliasAssignedAt$) {
    /** @deprecated use `AliasAssignedAt$inboundSchema` instead. */
    AliasAssignedAt$.inboundSchema = AliasAssignedAt$inboundSchema;
    /** @deprecated use `AliasAssignedAt$outboundSchema` instead. */
    AliasAssignedAt$.outboundSchema = AliasAssignedAt$outboundSchema;
})(AliasAssignedAt$ || (AliasAssignedAt$ = {}));
export function aliasAssignedAtToJSON(aliasAssignedAt) {
    return JSON.stringify(AliasAssignedAt$outboundSchema.parse(aliasAssignedAt));
}
export function aliasAssignedAtFromJSON(jsonString) {
    return safeParse(jsonString, (x) => AliasAssignedAt$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'AliasAssignedAt' from JSON`);
}
/** @internal */
export const Build$inboundSchema = z
    .object({
    env: z.array(z.string()),
});
/** @internal */
export const Build$outboundSchema = z.object({
    env: z.array(z.string()),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var Build$;
(function (Build$) {
    /** @deprecated use `Build$inboundSchema` instead. */
    Build$.inboundSchema = Build$inboundSchema;
    /** @deprecated use `Build$outboundSchema` instead. */
    Build$.outboundSchema = Build$outboundSchema;
})(Build$ || (Build$ = {}));
export function buildToJSON(build) {
    return JSON.stringify(Build$outboundSchema.parse(build));
}
export function buildFromJSON(jsonString) {
    return safeParse(jsonString, (x) => Build$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'Build' from JSON`);
}
/** @internal */
export const Builds$inboundSchema = z
    .object({
    use: z.string(),
    src: z.string().optional(),
    config: z.record(z.any()).optional(),
});
/** @internal */
export const Builds$outboundSchema = z.object({
    use: z.string(),
    src: z.string().optional(),
    config: z.record(z.any()).optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var Builds$;
(function (Builds$) {
    /** @deprecated use `Builds$inboundSchema` instead. */
    Builds$.inboundSchema = Builds$inboundSchema;
    /** @deprecated use `Builds$outboundSchema` instead. */
    Builds$.outboundSchema = Builds$outboundSchema;
})(Builds$ || (Builds$ = {}));
export function buildsToJSON(builds) {
    return JSON.stringify(Builds$outboundSchema.parse(builds));
}
export function buildsFromJSON(jsonString) {
    return safeParse(jsonString, (x) => Builds$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'Builds' from JSON`);
}
/** @internal */
export const CreateDeploymentFramework$inboundSchema = z.nativeEnum(CreateDeploymentFramework);
/** @internal */
export const CreateDeploymentFramework$outboundSchema = CreateDeploymentFramework$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CreateDeploymentFramework$;
(function (CreateDeploymentFramework$) {
    /** @deprecated use `CreateDeploymentFramework$inboundSchema` instead. */
    CreateDeploymentFramework$.inboundSchema = CreateDeploymentFramework$inboundSchema;
    /** @deprecated use `CreateDeploymentFramework$outboundSchema` instead. */
    CreateDeploymentFramework$.outboundSchema = CreateDeploymentFramework$outboundSchema;
})(CreateDeploymentFramework$ || (CreateDeploymentFramework$ = {}));
/** @internal */
export const CreateDeploymentSpeedInsights$inboundSchema = z.object({
    id: z.string(),
    enabledAt: z.number().optional(),
    disabledAt: z.number().optional(),
    canceledAt: z.number().optional(),
    hasData: z.boolean().optional(),
    paidAt: z.number().optional(),
});
/** @internal */
export const CreateDeploymentSpeedInsights$outboundSchema = z.object({
    id: z.string(),
    enabledAt: z.number().optional(),
    disabledAt: z.number().optional(),
    canceledAt: z.number().optional(),
    hasData: z.boolean().optional(),
    paidAt: z.number().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CreateDeploymentSpeedInsights$;
(function (CreateDeploymentSpeedInsights$) {
    /** @deprecated use `CreateDeploymentSpeedInsights$inboundSchema` instead. */
    CreateDeploymentSpeedInsights$.inboundSchema = CreateDeploymentSpeedInsights$inboundSchema;
    /** @deprecated use `CreateDeploymentSpeedInsights$outboundSchema` instead. */
    CreateDeploymentSpeedInsights$.outboundSchema = CreateDeploymentSpeedInsights$outboundSchema;
})(CreateDeploymentSpeedInsights$ || (CreateDeploymentSpeedInsights$ = {}));
export function createDeploymentSpeedInsightsToJSON(createDeploymentSpeedInsights) {
    return JSON.stringify(CreateDeploymentSpeedInsights$outboundSchema.parse(createDeploymentSpeedInsights));
}
export function createDeploymentSpeedInsightsFromJSON(jsonString) {
    return safeParse(jsonString, (x) => CreateDeploymentSpeedInsights$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CreateDeploymentSpeedInsights' from JSON`);
}
/** @internal */
export const CreateDeploymentWebAnalytics$inboundSchema = z.object({
    id: z.string(),
    disabledAt: z.number().optional(),
    canceledAt: z.number().optional(),
    enabledAt: z.number().optional(),
    hasData: z.boolean().optional(),
});
/** @internal */
export const CreateDeploymentWebAnalytics$outboundSchema = z.object({
    id: z.string(),
    disabledAt: z.number().optional(),
    canceledAt: z.number().optional(),
    enabledAt: z.number().optional(),
    hasData: z.boolean().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CreateDeploymentWebAnalytics$;
(function (CreateDeploymentWebAnalytics$) {
    /** @deprecated use `CreateDeploymentWebAnalytics$inboundSchema` instead. */
    CreateDeploymentWebAnalytics$.inboundSchema = CreateDeploymentWebAnalytics$inboundSchema;
    /** @deprecated use `CreateDeploymentWebAnalytics$outboundSchema` instead. */
    CreateDeploymentWebAnalytics$.outboundSchema = CreateDeploymentWebAnalytics$outboundSchema;
})(CreateDeploymentWebAnalytics$ || (CreateDeploymentWebAnalytics$ = {}));
export function createDeploymentWebAnalyticsToJSON(createDeploymentWebAnalytics) {
    return JSON.stringify(CreateDeploymentWebAnalytics$outboundSchema.parse(createDeploymentWebAnalytics));
}
export function createDeploymentWebAnalyticsFromJSON(jsonString) {
    return safeParse(jsonString, (x) => CreateDeploymentWebAnalytics$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CreateDeploymentWebAnalytics' from JSON`);
}
/** @internal */
export const CreateDeploymentProjectSettings$inboundSchema = z.object({
    buildCommand: z.nullable(z.string()).optional(),
    commandForIgnoringBuildStep: z.nullable(z.string()).optional(),
    devCommand: z.nullable(z.string()).optional(),
    framework: z.nullable(CreateDeploymentFramework$inboundSchema).optional(),
    installCommand: z.nullable(z.string()).optional(),
    outputDirectory: z.nullable(z.string()).optional(),
    speedInsights: z.lazy(() => CreateDeploymentSpeedInsights$inboundSchema)
        .optional(),
    webAnalytics: z.lazy(() => CreateDeploymentWebAnalytics$inboundSchema)
        .optional(),
});
/** @internal */
export const CreateDeploymentProjectSettings$outboundSchema = z.object({
    buildCommand: z.nullable(z.string()).optional(),
    commandForIgnoringBuildStep: z.nullable(z.string()).optional(),
    devCommand: z.nullable(z.string()).optional(),
    framework: z.nullable(CreateDeploymentFramework$outboundSchema).optional(),
    installCommand: z.nullable(z.string()).optional(),
    outputDirectory: z.nullable(z.string()).optional(),
    speedInsights: z.lazy(() => CreateDeploymentSpeedInsights$outboundSchema)
        .optional(),
    webAnalytics: z.lazy(() => CreateDeploymentWebAnalytics$outboundSchema)
        .optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CreateDeploymentProjectSettings$;
(function (CreateDeploymentProjectSettings$) {
    /** @deprecated use `CreateDeploymentProjectSettings$inboundSchema` instead. */
    CreateDeploymentProjectSettings$.inboundSchema = CreateDeploymentProjectSettings$inboundSchema;
    /** @deprecated use `CreateDeploymentProjectSettings$outboundSchema` instead. */
    CreateDeploymentProjectSettings$.outboundSchema = CreateDeploymentProjectSettings$outboundSchema;
})(CreateDeploymentProjectSettings$ || (CreateDeploymentProjectSettings$ = {}));
export function createDeploymentProjectSettingsToJSON(createDeploymentProjectSettings) {
    return JSON.stringify(CreateDeploymentProjectSettings$outboundSchema.parse(createDeploymentProjectSettings));
}
export function createDeploymentProjectSettingsFromJSON(jsonString) {
    return safeParse(jsonString, (x) => CreateDeploymentProjectSettings$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CreateDeploymentProjectSettings' from JSON`);
}
/** @internal */
export const CreateDeploymentDeploymentsStatus$inboundSchema = z.nativeEnum(CreateDeploymentDeploymentsStatus);
/** @internal */
export const CreateDeploymentDeploymentsStatus$outboundSchema = CreateDeploymentDeploymentsStatus$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CreateDeploymentDeploymentsStatus$;
(function (CreateDeploymentDeploymentsStatus$) {
    /** @deprecated use `CreateDeploymentDeploymentsStatus$inboundSchema` instead. */
    CreateDeploymentDeploymentsStatus$.inboundSchema = CreateDeploymentDeploymentsStatus$inboundSchema;
    /** @deprecated use `CreateDeploymentDeploymentsStatus$outboundSchema` instead. */
    CreateDeploymentDeploymentsStatus$.outboundSchema = CreateDeploymentDeploymentsStatus$outboundSchema;
})(CreateDeploymentDeploymentsStatus$ || (CreateDeploymentDeploymentsStatus$ = {}));
/** @internal */
export const Integrations$inboundSchema = z.object({
    status: CreateDeploymentDeploymentsStatus$inboundSchema,
    startedAt: z.number(),
    completedAt: z.number().optional(),
    skippedAt: z.number().optional(),
    skippedBy: z.string().optional(),
});
/** @internal */
export const Integrations$outboundSchema = z.object({
    status: CreateDeploymentDeploymentsStatus$outboundSchema,
    startedAt: z.number(),
    completedAt: z.number().optional(),
    skippedAt: z.number().optional(),
    skippedBy: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var Integrations$;
(function (Integrations$) {
    /** @deprecated use `Integrations$inboundSchema` instead. */
    Integrations$.inboundSchema = Integrations$inboundSchema;
    /** @deprecated use `Integrations$outboundSchema` instead. */
    Integrations$.outboundSchema = Integrations$outboundSchema;
})(Integrations$ || (Integrations$ = {}));
export function integrationsToJSON(integrations) {
    return JSON.stringify(Integrations$outboundSchema.parse(integrations));
}
export function integrationsFromJSON(jsonString) {
    return safeParse(jsonString, (x) => Integrations$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'Integrations' from JSON`);
}
/** @internal */
export const Protocol$inboundSchema = z
    .nativeEnum(Protocol);
/** @internal */
export const Protocol$outboundSchema = Protocol$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var Protocol$;
(function (Protocol$) {
    /** @deprecated use `Protocol$inboundSchema` instead. */
    Protocol$.inboundSchema = Protocol$inboundSchema;
    /** @deprecated use `Protocol$outboundSchema` instead. */
    Protocol$.outboundSchema = Protocol$outboundSchema;
})(Protocol$ || (Protocol$ = {}));
/** @internal */
export const RemotePatterns$inboundSchema = z.object({
    protocol: Protocol$inboundSchema.optional(),
    hostname: z.string(),
    port: z.string().optional(),
    pathname: z.string().optional(),
    search: z.string().optional(),
});
/** @internal */
export const RemotePatterns$outboundSchema = z.object({
    protocol: Protocol$outboundSchema.optional(),
    hostname: z.string(),
    port: z.string().optional(),
    pathname: z.string().optional(),
    search: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var RemotePatterns$;
(function (RemotePatterns$) {
    /** @deprecated use `RemotePatterns$inboundSchema` instead. */
    RemotePatterns$.inboundSchema = RemotePatterns$inboundSchema;
    /** @deprecated use `RemotePatterns$outboundSchema` instead. */
    RemotePatterns$.outboundSchema = RemotePatterns$outboundSchema;
})(RemotePatterns$ || (RemotePatterns$ = {}));
export function remotePatternsToJSON(remotePatterns) {
    return JSON.stringify(RemotePatterns$outboundSchema.parse(remotePatterns));
}
export function remotePatternsFromJSON(jsonString) {
    return safeParse(jsonString, (x) => RemotePatterns$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'RemotePatterns' from JSON`);
}
/** @internal */
export const LocalPatterns$inboundSchema = z.object({
    pathname: z.string().optional(),
    search: z.string().optional(),
});
/** @internal */
export const LocalPatterns$outboundSchema = z.object({
    pathname: z.string().optional(),
    search: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var LocalPatterns$;
(function (LocalPatterns$) {
    /** @deprecated use `LocalPatterns$inboundSchema` instead. */
    LocalPatterns$.inboundSchema = LocalPatterns$inboundSchema;
    /** @deprecated use `LocalPatterns$outboundSchema` instead. */
    LocalPatterns$.outboundSchema = LocalPatterns$outboundSchema;
})(LocalPatterns$ || (LocalPatterns$ = {}));
export function localPatternsToJSON(localPatterns) {
    return JSON.stringify(LocalPatterns$outboundSchema.parse(localPatterns));
}
export function localPatternsFromJSON(jsonString) {
    return safeParse(jsonString, (x) => LocalPatterns$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'LocalPatterns' from JSON`);
}
/** @internal */
export const Formats$inboundSchema = z
    .nativeEnum(Formats);
/** @internal */
export const Formats$outboundSchema = Formats$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var Formats$;
(function (Formats$) {
    /** @deprecated use `Formats$inboundSchema` instead. */
    Formats$.inboundSchema = Formats$inboundSchema;
    /** @deprecated use `Formats$outboundSchema` instead. */
    Formats$.outboundSchema = Formats$outboundSchema;
})(Formats$ || (Formats$ = {}));
/** @internal */
export const ContentDispositionType$inboundSchema = z.nativeEnum(ContentDispositionType);
/** @internal */
export const ContentDispositionType$outboundSchema = ContentDispositionType$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ContentDispositionType$;
(function (ContentDispositionType$) {
    /** @deprecated use `ContentDispositionType$inboundSchema` instead. */
    ContentDispositionType$.inboundSchema = ContentDispositionType$inboundSchema;
    /** @deprecated use `ContentDispositionType$outboundSchema` instead. */
    ContentDispositionType$.outboundSchema = ContentDispositionType$outboundSchema;
})(ContentDispositionType$ || (ContentDispositionType$ = {}));
/** @internal */
export const Images$inboundSchema = z
    .object({
    sizes: z.array(z.number()).optional(),
    qualities: z.array(z.number()).optional(),
    domains: z.array(z.string()).optional(),
    remotePatterns: z.array(z.lazy(() => RemotePatterns$inboundSchema))
        .optional(),
    localPatterns: z.array(z.lazy(() => LocalPatterns$inboundSchema))
        .optional(),
    minimumCacheTTL: z.number().optional(),
    formats: z.array(Formats$inboundSchema).optional(),
    dangerouslyAllowSVG: z.boolean().optional(),
    contentSecurityPolicy: z.string().optional(),
    contentDispositionType: ContentDispositionType$inboundSchema.optional(),
});
/** @internal */
export const Images$outboundSchema = z.object({
    sizes: z.array(z.number()).optional(),
    qualities: z.array(z.number()).optional(),
    domains: z.array(z.string()).optional(),
    remotePatterns: z.array(z.lazy(() => RemotePatterns$outboundSchema))
        .optional(),
    localPatterns: z.array(z.lazy(() => LocalPatterns$outboundSchema)).optional(),
    minimumCacheTTL: z.number().optional(),
    formats: z.array(Formats$outboundSchema).optional(),
    dangerouslyAllowSVG: z.boolean().optional(),
    contentSecurityPolicy: z.string().optional(),
    contentDispositionType: ContentDispositionType$outboundSchema.optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var Images$;
(function (Images$) {
    /** @deprecated use `Images$inboundSchema` instead. */
    Images$.inboundSchema = Images$inboundSchema;
    /** @deprecated use `Images$outboundSchema` instead. */
    Images$.outboundSchema = Images$outboundSchema;
})(Images$ || (Images$ = {}));
export function imagesToJSON(images) {
    return JSON.stringify(Images$outboundSchema.parse(images));
}
export function imagesFromJSON(jsonString) {
    return safeParse(jsonString, (x) => Images$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'Images' from JSON`);
}
/** @internal */
export const Creator$inboundSchema = z.object({
    uid: z.string(),
    username: z.string().optional(),
    avatar: z.string().optional(),
});
/** @internal */
export const Creator$outboundSchema = z.object({
    uid: z.string(),
    username: z.string().optional(),
    avatar: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var Creator$;
(function (Creator$) {
    /** @deprecated use `Creator$inboundSchema` instead. */
    Creator$.inboundSchema = Creator$inboundSchema;
    /** @deprecated use `Creator$outboundSchema` instead. */
    Creator$.outboundSchema = Creator$outboundSchema;
})(Creator$ || (Creator$ = {}));
export function creatorToJSON(creator) {
    return JSON.stringify(Creator$outboundSchema.parse(creator));
}
export function creatorFromJSON(jsonString) {
    return safeParse(jsonString, (x) => Creator$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'Creator' from JSON`);
}
/** @internal */
export const CreateDeploymentReadyState$inboundSchema = z.nativeEnum(CreateDeploymentReadyState);
/** @internal */
export const CreateDeploymentReadyState$outboundSchema = CreateDeploymentReadyState$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CreateDeploymentReadyState$;
(function (CreateDeploymentReadyState$) {
    /** @deprecated use `CreateDeploymentReadyState$inboundSchema` instead. */
    CreateDeploymentReadyState$.inboundSchema = CreateDeploymentReadyState$inboundSchema;
    /** @deprecated use `CreateDeploymentReadyState$outboundSchema` instead. */
    CreateDeploymentReadyState$.outboundSchema = CreateDeploymentReadyState$outboundSchema;
})(CreateDeploymentReadyState$ || (CreateDeploymentReadyState$ = {}));
/** @internal */
export const CreateDeploymentOutput$inboundSchema = z.object({
    path: z.string(),
    functionName: z.string(),
});
/** @internal */
export const CreateDeploymentOutput$outboundSchema = z.object({
    path: z.string(),
    functionName: z.string(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CreateDeploymentOutput$;
(function (CreateDeploymentOutput$) {
    /** @deprecated use `CreateDeploymentOutput$inboundSchema` instead. */
    CreateDeploymentOutput$.inboundSchema = CreateDeploymentOutput$inboundSchema;
    /** @deprecated use `CreateDeploymentOutput$outboundSchema` instead. */
    CreateDeploymentOutput$.outboundSchema = CreateDeploymentOutput$outboundSchema;
})(CreateDeploymentOutput$ || (CreateDeploymentOutput$ = {}));
export function createDeploymentOutputToJSON(createDeploymentOutput) {
    return JSON.stringify(CreateDeploymentOutput$outboundSchema.parse(createDeploymentOutput));
}
export function createDeploymentOutputFromJSON(jsonString) {
    return safeParse(jsonString, (x) => CreateDeploymentOutput$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CreateDeploymentOutput' from JSON`);
}
/** @internal */
export const Lambdas$inboundSchema = z.object({
    id: z.string().optional(),
    createdAt: z.number().optional(),
    entrypoint: z.nullable(z.string()).optional(),
    readyState: CreateDeploymentReadyState$inboundSchema.optional(),
    readyStateAt: z.number().optional(),
    output: z.array(z.lazy(() => CreateDeploymentOutput$inboundSchema)),
});
/** @internal */
export const Lambdas$outboundSchema = z.object({
    id: z.string().optional(),
    createdAt: z.number().optional(),
    entrypoint: z.nullable(z.string()).optional(),
    readyState: CreateDeploymentReadyState$outboundSchema.optional(),
    readyStateAt: z.number().optional(),
    output: z.array(z.lazy(() => CreateDeploymentOutput$outboundSchema)),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var Lambdas$;
(function (Lambdas$) {
    /** @deprecated use `Lambdas$inboundSchema` instead. */
    Lambdas$.inboundSchema = Lambdas$inboundSchema;
    /** @deprecated use `Lambdas$outboundSchema` instead. */
    Lambdas$.outboundSchema = Lambdas$outboundSchema;
})(Lambdas$ || (Lambdas$ = {}));
export function lambdasToJSON(lambdas) {
    return JSON.stringify(Lambdas$outboundSchema.parse(lambdas));
}
export function lambdasFromJSON(jsonString) {
    return safeParse(jsonString, (x) => Lambdas$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'Lambdas' from JSON`);
}
/** @internal */
export const CreateDeploymentStatus$inboundSchema = z.nativeEnum(CreateDeploymentStatus);
/** @internal */
export const CreateDeploymentStatus$outboundSchema = CreateDeploymentStatus$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CreateDeploymentStatus$;
(function (CreateDeploymentStatus$) {
    /** @deprecated use `CreateDeploymentStatus$inboundSchema` instead. */
    CreateDeploymentStatus$.inboundSchema = CreateDeploymentStatus$inboundSchema;
    /** @deprecated use `CreateDeploymentStatus$outboundSchema` instead. */
    CreateDeploymentStatus$.outboundSchema = CreateDeploymentStatus$outboundSchema;
})(CreateDeploymentStatus$ || (CreateDeploymentStatus$ = {}));
/** @internal */
export const CreateDeploymentTeam$inboundSchema = z.object({
    name: z.string(),
    id: z.string(),
    slug: z.string(),
    avatar: z.string().optional(),
});
/** @internal */
export const CreateDeploymentTeam$outboundSchema = z.object({
    name: z.string(),
    id: z.string(),
    slug: z.string(),
    avatar: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CreateDeploymentTeam$;
(function (CreateDeploymentTeam$) {
    /** @deprecated use `CreateDeploymentTeam$inboundSchema` instead. */
    CreateDeploymentTeam$.inboundSchema = CreateDeploymentTeam$inboundSchema;
    /** @deprecated use `CreateDeploymentTeam$outboundSchema` instead. */
    CreateDeploymentTeam$.outboundSchema = CreateDeploymentTeam$outboundSchema;
})(CreateDeploymentTeam$ || (CreateDeploymentTeam$ = {}));
export function createDeploymentTeamToJSON(createDeploymentTeam) {
    return JSON.stringify(CreateDeploymentTeam$outboundSchema.parse(createDeploymentTeam));
}
export function createDeploymentTeamFromJSON(jsonString) {
    return safeParse(jsonString, (x) => CreateDeploymentTeam$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CreateDeploymentTeam' from JSON`);
}
/** @internal */
export const CustomEnvironment2$inboundSchema = z.object({
    id: z.string(),
});
/** @internal */
export const CustomEnvironment2$outboundSchema = z.object({
    id: z.string(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CustomEnvironment2$;
(function (CustomEnvironment2$) {
    /** @deprecated use `CustomEnvironment2$inboundSchema` instead. */
    CustomEnvironment2$.inboundSchema = CustomEnvironment2$inboundSchema;
    /** @deprecated use `CustomEnvironment2$outboundSchema` instead. */
    CustomEnvironment2$.outboundSchema = CustomEnvironment2$outboundSchema;
})(CustomEnvironment2$ || (CustomEnvironment2$ = {}));
export function customEnvironment2ToJSON(customEnvironment2) {
    return JSON.stringify(CustomEnvironment2$outboundSchema.parse(customEnvironment2));
}
export function customEnvironment2FromJSON(jsonString) {
    return safeParse(jsonString, (x) => CustomEnvironment2$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CustomEnvironment2' from JSON`);
}
/** @internal */
export const CustomEnvironmentType$inboundSchema = z.nativeEnum(CustomEnvironmentType);
/** @internal */
export const CustomEnvironmentType$outboundSchema = CustomEnvironmentType$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CustomEnvironmentType$;
(function (CustomEnvironmentType$) {
    /** @deprecated use `CustomEnvironmentType$inboundSchema` instead. */
    CustomEnvironmentType$.inboundSchema = CustomEnvironmentType$inboundSchema;
    /** @deprecated use `CustomEnvironmentType$outboundSchema` instead. */
    CustomEnvironmentType$.outboundSchema = CustomEnvironmentType$outboundSchema;
})(CustomEnvironmentType$ || (CustomEnvironmentType$ = {}));
/** @internal */
export const CreateDeploymentCustomEnvironmentType$inboundSchema = z.nativeEnum(CreateDeploymentCustomEnvironmentType);
/** @internal */
export const CreateDeploymentCustomEnvironmentType$outboundSchema = CreateDeploymentCustomEnvironmentType$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CreateDeploymentCustomEnvironmentType$;
(function (CreateDeploymentCustomEnvironmentType$) {
    /** @deprecated use `CreateDeploymentCustomEnvironmentType$inboundSchema` instead. */
    CreateDeploymentCustomEnvironmentType$.inboundSchema = CreateDeploymentCustomEnvironmentType$inboundSchema;
    /** @deprecated use `CreateDeploymentCustomEnvironmentType$outboundSchema` instead. */
    CreateDeploymentCustomEnvironmentType$.outboundSchema = CreateDeploymentCustomEnvironmentType$outboundSchema;
})(CreateDeploymentCustomEnvironmentType$ || (CreateDeploymentCustomEnvironmentType$ = {}));
/** @internal */
export const CustomEnvironmentBranchMatcher$inboundSchema = z.object({
    type: CreateDeploymentCustomEnvironmentType$inboundSchema,
    pattern: z.string(),
});
/** @internal */
export const CustomEnvironmentBranchMatcher$outboundSchema = z.object({
    type: CreateDeploymentCustomEnvironmentType$outboundSchema,
    pattern: z.string(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CustomEnvironmentBranchMatcher$;
(function (CustomEnvironmentBranchMatcher$) {
    /** @deprecated use `CustomEnvironmentBranchMatcher$inboundSchema` instead. */
    CustomEnvironmentBranchMatcher$.inboundSchema = CustomEnvironmentBranchMatcher$inboundSchema;
    /** @deprecated use `CustomEnvironmentBranchMatcher$outboundSchema` instead. */
    CustomEnvironmentBranchMatcher$.outboundSchema = CustomEnvironmentBranchMatcher$outboundSchema;
})(CustomEnvironmentBranchMatcher$ || (CustomEnvironmentBranchMatcher$ = {}));
export function customEnvironmentBranchMatcherToJSON(customEnvironmentBranchMatcher) {
    return JSON.stringify(CustomEnvironmentBranchMatcher$outboundSchema.parse(customEnvironmentBranchMatcher));
}
export function customEnvironmentBranchMatcherFromJSON(jsonString) {
    return safeParse(jsonString, (x) => CustomEnvironmentBranchMatcher$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CustomEnvironmentBranchMatcher' from JSON`);
}
/** @internal */
export const CustomEnvironmentVerification$inboundSchema = z.object({
    type: z.string(),
    domain: z.string(),
    value: z.string(),
    reason: z.string(),
});
/** @internal */
export const CustomEnvironmentVerification$outboundSchema = z.object({
    type: z.string(),
    domain: z.string(),
    value: z.string(),
    reason: z.string(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CustomEnvironmentVerification$;
(function (CustomEnvironmentVerification$) {
    /** @deprecated use `CustomEnvironmentVerification$inboundSchema` instead. */
    CustomEnvironmentVerification$.inboundSchema = CustomEnvironmentVerification$inboundSchema;
    /** @deprecated use `CustomEnvironmentVerification$outboundSchema` instead. */
    CustomEnvironmentVerification$.outboundSchema = CustomEnvironmentVerification$outboundSchema;
})(CustomEnvironmentVerification$ || (CustomEnvironmentVerification$ = {}));
export function customEnvironmentVerificationToJSON(customEnvironmentVerification) {
    return JSON.stringify(CustomEnvironmentVerification$outboundSchema.parse(customEnvironmentVerification));
}
export function customEnvironmentVerificationFromJSON(jsonString) {
    return safeParse(jsonString, (x) => CustomEnvironmentVerification$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CustomEnvironmentVerification' from JSON`);
}
/** @internal */
export const CustomEnvironmentDomains$inboundSchema = z.object({
    name: z.string(),
    apexName: z.string(),
    projectId: z.string(),
    redirect: z.nullable(z.string()).optional(),
    redirectStatusCode: z.nullable(z.number()).optional(),
    gitBranch: z.nullable(z.string()).optional(),
    customEnvironmentId: z.nullable(z.string()).optional(),
    updatedAt: z.number().optional(),
    createdAt: z.number().optional(),
    verified: z.boolean(),
    verification: z.array(z.lazy(() => CustomEnvironmentVerification$inboundSchema)).optional(),
});
/** @internal */
export const CustomEnvironmentDomains$outboundSchema = z.object({
    name: z.string(),
    apexName: z.string(),
    projectId: z.string(),
    redirect: z.nullable(z.string()).optional(),
    redirectStatusCode: z.nullable(z.number()).optional(),
    gitBranch: z.nullable(z.string()).optional(),
    customEnvironmentId: z.nullable(z.string()).optional(),
    updatedAt: z.number().optional(),
    createdAt: z.number().optional(),
    verified: z.boolean(),
    verification: z.array(z.lazy(() => CustomEnvironmentVerification$outboundSchema)).optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CustomEnvironmentDomains$;
(function (CustomEnvironmentDomains$) {
    /** @deprecated use `CustomEnvironmentDomains$inboundSchema` instead. */
    CustomEnvironmentDomains$.inboundSchema = CustomEnvironmentDomains$inboundSchema;
    /** @deprecated use `CustomEnvironmentDomains$outboundSchema` instead. */
    CustomEnvironmentDomains$.outboundSchema = CustomEnvironmentDomains$outboundSchema;
})(CustomEnvironmentDomains$ || (CustomEnvironmentDomains$ = {}));
export function customEnvironmentDomainsToJSON(customEnvironmentDomains) {
    return JSON.stringify(CustomEnvironmentDomains$outboundSchema.parse(customEnvironmentDomains));
}
export function customEnvironmentDomainsFromJSON(jsonString) {
    return safeParse(jsonString, (x) => CustomEnvironmentDomains$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CustomEnvironmentDomains' from JSON`);
}
/** @internal */
export const CustomEnvironment1$inboundSchema = z.object({
    id: z.string(),
    slug: z.string(),
    type: CustomEnvironmentType$inboundSchema,
    description: z.string().optional(),
    branchMatcher: z.lazy(() => CustomEnvironmentBranchMatcher$inboundSchema)
        .optional(),
    domains: z.array(z.lazy(() => CustomEnvironmentDomains$inboundSchema))
        .optional(),
    currentDeploymentAliases: z.array(z.string()).optional(),
    createdAt: z.number(),
    updatedAt: z.number(),
});
/** @internal */
export const CustomEnvironment1$outboundSchema = z.object({
    id: z.string(),
    slug: z.string(),
    type: CustomEnvironmentType$outboundSchema,
    description: z.string().optional(),
    branchMatcher: z.lazy(() => CustomEnvironmentBranchMatcher$outboundSchema)
        .optional(),
    domains: z.array(z.lazy(() => CustomEnvironmentDomains$outboundSchema))
        .optional(),
    currentDeploymentAliases: z.array(z.string()).optional(),
    createdAt: z.number(),
    updatedAt: z.number(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CustomEnvironment1$;
(function (CustomEnvironment1$) {
    /** @deprecated use `CustomEnvironment1$inboundSchema` instead. */
    CustomEnvironment1$.inboundSchema = CustomEnvironment1$inboundSchema;
    /** @deprecated use `CustomEnvironment1$outboundSchema` instead. */
    CustomEnvironment1$.outboundSchema = CustomEnvironment1$outboundSchema;
})(CustomEnvironment1$ || (CustomEnvironment1$ = {}));
export function customEnvironment1ToJSON(customEnvironment1) {
    return JSON.stringify(CustomEnvironment1$outboundSchema.parse(customEnvironment1));
}
export function customEnvironment1FromJSON(jsonString) {
    return safeParse(jsonString, (x) => CustomEnvironment1$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CustomEnvironment1' from JSON`);
}
/** @internal */
export const CustomEnvironment$inboundSchema = z.union([
    z.lazy(() => CustomEnvironment2$inboundSchema),
    z.lazy(() => CustomEnvironment1$inboundSchema),
]);
/** @internal */
export const CustomEnvironment$outboundSchema = z.union([
    z.lazy(() => CustomEnvironment2$outboundSchema),
    z.lazy(() => CustomEnvironment1$outboundSchema),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CustomEnvironment$;
(function (CustomEnvironment$) {
    /** @deprecated use `CustomEnvironment$inboundSchema` instead. */
    CustomEnvironment$.inboundSchema = CustomEnvironment$inboundSchema;
    /** @deprecated use `CustomEnvironment$outboundSchema` instead. */
    CustomEnvironment$.outboundSchema = CustomEnvironment$outboundSchema;
})(CustomEnvironment$ || (CustomEnvironment$ = {}));
export function customEnvironmentToJSON(customEnvironment) {
    return JSON.stringify(CustomEnvironment$outboundSchema.parse(customEnvironment));
}
export function customEnvironmentFromJSON(jsonString) {
    return safeParse(jsonString, (x) => CustomEnvironment$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CustomEnvironment' from JSON`);
}
/** @internal */
export const CreateDeploymentType$inboundSchema = z.nativeEnum(CreateDeploymentType);
/** @internal */
export const CreateDeploymentType$outboundSchema = CreateDeploymentType$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CreateDeploymentType$;
(function (CreateDeploymentType$) {
    /** @deprecated use `CreateDeploymentType$inboundSchema` instead. */
    CreateDeploymentType$.inboundSchema = CreateDeploymentType$inboundSchema;
    /** @deprecated use `CreateDeploymentType$outboundSchema` instead. */
    CreateDeploymentType$.outboundSchema = CreateDeploymentType$outboundSchema;
})(CreateDeploymentType$ || (CreateDeploymentType$ = {}));
/** @internal */
export const CreateDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody12Type$inboundSchema = z.nativeEnum(CreateDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody12Type);
/** @internal */
export const CreateDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody12Type$outboundSchema = CreateDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody12Type$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CreateDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody12Type$;
(function (CreateDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody12Type$) {
    /** @deprecated use `CreateDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody12Type$inboundSchema` instead. */
    CreateDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody12Type$.inboundSchema = CreateDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody12Type$inboundSchema;
    /** @deprecated use `CreateDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody12Type$outboundSchema` instead. */
    CreateDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody12Type$.outboundSchema = CreateDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody12Type$outboundSchema;
})(CreateDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody12Type$ || (CreateDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody12Type$ = {}));
/** @internal */
export const CreateDeploymentGitSource12$inboundSchema = z.object({
    type: CreateDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody12Type$inboundSchema,
    ref: z.string(),
    sha: z.string(),
    owner: z.string().optional(),
    slug: z.string().optional(),
    workspaceUuid: z.string(),
    repoUuid: z.string(),
});
/** @internal */
export const CreateDeploymentGitSource12$outboundSchema = z.object({
    type: CreateDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody12Type$outboundSchema,
    ref: z.string(),
    sha: z.string(),
    owner: z.string().optional(),
    slug: z.string().optional(),
    workspaceUuid: z.string(),
    repoUuid: z.string(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CreateDeploymentGitSource12$;
(function (CreateDeploymentGitSource12$) {
    /** @deprecated use `CreateDeploymentGitSource12$inboundSchema` instead. */
    CreateDeploymentGitSource12$.inboundSchema = CreateDeploymentGitSource12$inboundSchema;
    /** @deprecated use `CreateDeploymentGitSource12$outboundSchema` instead. */
    CreateDeploymentGitSource12$.outboundSchema = CreateDeploymentGitSource12$outboundSchema;
})(CreateDeploymentGitSource12$ || (CreateDeploymentGitSource12$ = {}));
export function createDeploymentGitSource12ToJSON(createDeploymentGitSource12) {
    return JSON.stringify(CreateDeploymentGitSource12$outboundSchema.parse(createDeploymentGitSource12));
}
export function createDeploymentGitSource12FromJSON(jsonString) {
    return safeParse(jsonString, (x) => CreateDeploymentGitSource12$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CreateDeploymentGitSource12' from JSON`);
}
/** @internal */
export const CreateDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody11Type$inboundSchema = z.nativeEnum(CreateDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody11Type);
/** @internal */
export const CreateDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody11Type$outboundSchema = CreateDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody11Type$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CreateDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody11Type$;
(function (CreateDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody11Type$) {
    /** @deprecated use `CreateDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody11Type$inboundSchema` instead. */
    CreateDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody11Type$.inboundSchema = CreateDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody11Type$inboundSchema;
    /** @deprecated use `CreateDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody11Type$outboundSchema` instead. */
    CreateDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody11Type$.outboundSchema = CreateDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody11Type$outboundSchema;
})(CreateDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody11Type$ || (CreateDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody11Type$ = {}));
/** @internal */
export const CreateDeploymentGitSource11$inboundSchema = z.object({
    type: CreateDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody11Type$inboundSchema,
    ref: z.string(),
    sha: z.string(),
    projectId: z.number(),
});
/** @internal */
export const CreateDeploymentGitSource11$outboundSchema = z.object({
    type: CreateDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody11Type$outboundSchema,
    ref: z.string(),
    sha: z.string(),
    projectId: z.number(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CreateDeploymentGitSource11$;
(function (CreateDeploymentGitSource11$) {
    /** @deprecated use `CreateDeploymentGitSource11$inboundSchema` instead. */
    CreateDeploymentGitSource11$.inboundSchema = CreateDeploymentGitSource11$inboundSchema;
    /** @deprecated use `CreateDeploymentGitSource11$outboundSchema` instead. */
    CreateDeploymentGitSource11$.outboundSchema = CreateDeploymentGitSource11$outboundSchema;
})(CreateDeploymentGitSource11$ || (CreateDeploymentGitSource11$ = {}));
export function createDeploymentGitSource11ToJSON(createDeploymentGitSource11) {
    return JSON.stringify(CreateDeploymentGitSource11$outboundSchema.parse(createDeploymentGitSource11));
}
export function createDeploymentGitSource11FromJSON(jsonString) {
    return safeParse(jsonString, (x) => CreateDeploymentGitSource11$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CreateDeploymentGitSource11' from JSON`);
}
/** @internal */
export const CreateDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody10Type$inboundSchema = z.nativeEnum(CreateDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody10Type);
/** @internal */
export const CreateDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody10Type$outboundSchema = CreateDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody10Type$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CreateDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody10Type$;
(function (CreateDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody10Type$) {
    /** @deprecated use `CreateDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody10Type$inboundSchema` instead. */
    CreateDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody10Type$.inboundSchema = CreateDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody10Type$inboundSchema;
    /** @deprecated use `CreateDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody10Type$outboundSchema` instead. */
    CreateDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody10Type$.outboundSchema = CreateDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody10Type$outboundSchema;
})(CreateDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody10Type$ || (CreateDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody10Type$ = {}));
/** @internal */
export const CreateDeploymentGitSource10$inboundSchema = z.object({
    type: CreateDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody10Type$inboundSchema,
    host: z.string(),
    ref: z.string(),
    sha: z.string(),
    repoId: z.number(),
    org: z.string().optional(),
    repo: z.string().optional(),
});
/** @internal */
export const CreateDeploymentGitSource10$outboundSchema = z.object({
    type: CreateDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody10Type$outboundSchema,
    host: z.string(),
    ref: z.string(),
    sha: z.string(),
    repoId: z.number(),
    org: z.string().optional(),
    repo: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CreateDeploymentGitSource10$;
(function (CreateDeploymentGitSource10$) {
    /** @deprecated use `CreateDeploymentGitSource10$inboundSchema` instead. */
    CreateDeploymentGitSource10$.inboundSchema = CreateDeploymentGitSource10$inboundSchema;
    /** @deprecated use `CreateDeploymentGitSource10$outboundSchema` instead. */
    CreateDeploymentGitSource10$.outboundSchema = CreateDeploymentGitSource10$outboundSchema;
})(CreateDeploymentGitSource10$ || (CreateDeploymentGitSource10$ = {}));
export function createDeploymentGitSource10ToJSON(createDeploymentGitSource10) {
    return JSON.stringify(CreateDeploymentGitSource10$outboundSchema.parse(createDeploymentGitSource10));
}
export function createDeploymentGitSource10FromJSON(jsonString) {
    return safeParse(jsonString, (x) => CreateDeploymentGitSource10$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CreateDeploymentGitSource10' from JSON`);
}
/** @internal */
export const CreateDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody9Type$inboundSchema = z.nativeEnum(CreateDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody9Type);
/** @internal */
export const CreateDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody9Type$outboundSchema = CreateDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody9Type$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CreateDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody9Type$;
(function (CreateDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody9Type$) {
    /** @deprecated use `CreateDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody9Type$inboundSchema` instead. */
    CreateDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody9Type$.inboundSchema = CreateDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody9Type$inboundSchema;
    /** @deprecated use `CreateDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody9Type$outboundSchema` instead. */
    CreateDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody9Type$.outboundSchema = CreateDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody9Type$outboundSchema;
})(CreateDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody9Type$ || (CreateDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody9Type$ = {}));
/** @internal */
export const CreateDeploymentGitSource9$inboundSchema = z.object({
    type: CreateDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody9Type$inboundSchema,
    ref: z.string(),
    sha: z.string(),
    repoId: z.number(),
    org: z.string().optional(),
    repo: z.string().optional(),
});
/** @internal */
export const CreateDeploymentGitSource9$outboundSchema = z.object({
    type: CreateDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody9Type$outboundSchema,
    ref: z.string(),
    sha: z.string(),
    repoId: z.number(),
    org: z.string().optional(),
    repo: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CreateDeploymentGitSource9$;
(function (CreateDeploymentGitSource9$) {
    /** @deprecated use `CreateDeploymentGitSource9$inboundSchema` instead. */
    CreateDeploymentGitSource9$.inboundSchema = CreateDeploymentGitSource9$inboundSchema;
    /** @deprecated use `CreateDeploymentGitSource9$outboundSchema` instead. */
    CreateDeploymentGitSource9$.outboundSchema = CreateDeploymentGitSource9$outboundSchema;
})(CreateDeploymentGitSource9$ || (CreateDeploymentGitSource9$ = {}));
export function createDeploymentGitSource9ToJSON(createDeploymentGitSource9) {
    return JSON.stringify(CreateDeploymentGitSource9$outboundSchema.parse(createDeploymentGitSource9));
}
export function createDeploymentGitSource9FromJSON(jsonString) {
    return safeParse(jsonString, (x) => CreateDeploymentGitSource9$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CreateDeploymentGitSource9' from JSON`);
}
/** @internal */
export const CreateDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody8Type$inboundSchema = z.nativeEnum(CreateDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody8Type);
/** @internal */
export const CreateDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody8Type$outboundSchema = CreateDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody8Type$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CreateDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody8Type$;
(function (CreateDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody8Type$) {
    /** @deprecated use `CreateDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody8Type$inboundSchema` instead. */
    CreateDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody8Type$.inboundSchema = CreateDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody8Type$inboundSchema;
    /** @deprecated use `CreateDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody8Type$outboundSchema` instead. */
    CreateDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody8Type$.outboundSchema = CreateDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody8Type$outboundSchema;
})(CreateDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody8Type$ || (CreateDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody8Type$ = {}));
/** @internal */
export const CreateDeploymentGitSource8$inboundSchema = z.object({
    type: CreateDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody8Type$inboundSchema,
    ref: z.string(),
    sha: z.string(),
    gitUrl: z.string(),
});
/** @internal */
export const CreateDeploymentGitSource8$outboundSchema = z.object({
    type: CreateDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody8Type$outboundSchema,
    ref: z.string(),
    sha: z.string(),
    gitUrl: z.string(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CreateDeploymentGitSource8$;
(function (CreateDeploymentGitSource8$) {
    /** @deprecated use `CreateDeploymentGitSource8$inboundSchema` instead. */
    CreateDeploymentGitSource8$.inboundSchema = CreateDeploymentGitSource8$inboundSchema;
    /** @deprecated use `CreateDeploymentGitSource8$outboundSchema` instead. */
    CreateDeploymentGitSource8$.outboundSchema = CreateDeploymentGitSource8$outboundSchema;
})(CreateDeploymentGitSource8$ || (CreateDeploymentGitSource8$ = {}));
export function createDeploymentGitSource8ToJSON(createDeploymentGitSource8) {
    return JSON.stringify(CreateDeploymentGitSource8$outboundSchema.parse(createDeploymentGitSource8));
}
export function createDeploymentGitSource8FromJSON(jsonString) {
    return safeParse(jsonString, (x) => CreateDeploymentGitSource8$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CreateDeploymentGitSource8' from JSON`);
}
/** @internal */
export const CreateDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody7Type$inboundSchema = z.nativeEnum(CreateDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody7Type);
/** @internal */
export const CreateDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody7Type$outboundSchema = CreateDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody7Type$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CreateDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody7Type$;
(function (CreateDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody7Type$) {
    /** @deprecated use `CreateDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody7Type$inboundSchema` instead. */
    CreateDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody7Type$.inboundSchema = CreateDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody7Type$inboundSchema;
    /** @deprecated use `CreateDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody7Type$outboundSchema` instead. */
    CreateDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody7Type$.outboundSchema = CreateDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody7Type$outboundSchema;
})(CreateDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody7Type$ || (CreateDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody7Type$ = {}));
/** @internal */
export const CreateDeploymentGitSource7$inboundSchema = z.object({
    type: CreateDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody7Type$inboundSchema,
    owner: z.string(),
    slug: z.string(),
    ref: z.nullable(z.string()).optional(),
    sha: z.string().optional(),
    prId: z.nullable(z.number()).optional(),
});
/** @internal */
export const CreateDeploymentGitSource7$outboundSchema = z.object({
    type: CreateDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody7Type$outboundSchema,
    owner: z.string(),
    slug: z.string(),
    ref: z.nullable(z.string()).optional(),
    sha: z.string().optional(),
    prId: z.nullable(z.number()).optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CreateDeploymentGitSource7$;
(function (CreateDeploymentGitSource7$) {
    /** @deprecated use `CreateDeploymentGitSource7$inboundSchema` instead. */
    CreateDeploymentGitSource7$.inboundSchema = CreateDeploymentGitSource7$inboundSchema;
    /** @deprecated use `CreateDeploymentGitSource7$outboundSchema` instead. */
    CreateDeploymentGitSource7$.outboundSchema = CreateDeploymentGitSource7$outboundSchema;
})(CreateDeploymentGitSource7$ || (CreateDeploymentGitSource7$ = {}));
export function createDeploymentGitSource7ToJSON(createDeploymentGitSource7) {
    return JSON.stringify(CreateDeploymentGitSource7$outboundSchema.parse(createDeploymentGitSource7));
}
export function createDeploymentGitSource7FromJSON(jsonString) {
    return safeParse(jsonString, (x) => CreateDeploymentGitSource7$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CreateDeploymentGitSource7' from JSON`);
}
/** @internal */
export const CreateDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody6Type$inboundSchema = z.nativeEnum(CreateDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody6Type);
/** @internal */
export const CreateDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody6Type$outboundSchema = CreateDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody6Type$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CreateDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody6Type$;
(function (CreateDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody6Type$) {
    /** @deprecated use `CreateDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody6Type$inboundSchema` instead. */
    CreateDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody6Type$.inboundSchema = CreateDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody6Type$inboundSchema;
    /** @deprecated use `CreateDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody6Type$outboundSchema` instead. */
    CreateDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody6Type$.outboundSchema = CreateDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody6Type$outboundSchema;
})(CreateDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody6Type$ || (CreateDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody6Type$ = {}));
/** @internal */
export const CreateDeploymentGitSource6$inboundSchema = z.object({
    type: CreateDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody6Type$inboundSchema,
    workspaceUuid: z.string().optional(),
    repoUuid: z.string(),
    ref: z.nullable(z.string()).optional(),
    sha: z.string().optional(),
    prId: z.nullable(z.number()).optional(),
});
/** @internal */
export const CreateDeploymentGitSource6$outboundSchema = z.object({
    type: CreateDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody6Type$outboundSchema,
    workspaceUuid: z.string().optional(),
    repoUuid: z.string(),
    ref: z.nullable(z.string()).optional(),
    sha: z.string().optional(),
    prId: z.nullable(z.number()).optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CreateDeploymentGitSource6$;
(function (CreateDeploymentGitSource6$) {
    /** @deprecated use `CreateDeploymentGitSource6$inboundSchema` instead. */
    CreateDeploymentGitSource6$.inboundSchema = CreateDeploymentGitSource6$inboundSchema;
    /** @deprecated use `CreateDeploymentGitSource6$outboundSchema` instead. */
    CreateDeploymentGitSource6$.outboundSchema = CreateDeploymentGitSource6$outboundSchema;
})(CreateDeploymentGitSource6$ || (CreateDeploymentGitSource6$ = {}));
export function createDeploymentGitSource6ToJSON(createDeploymentGitSource6) {
    return JSON.stringify(CreateDeploymentGitSource6$outboundSchema.parse(createDeploymentGitSource6));
}
export function createDeploymentGitSource6FromJSON(jsonString) {
    return safeParse(jsonString, (x) => CreateDeploymentGitSource6$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CreateDeploymentGitSource6' from JSON`);
}
/** @internal */
export const CreateDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody5Type$inboundSchema = z.nativeEnum(CreateDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody5Type);
/** @internal */
export const CreateDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody5Type$outboundSchema = CreateDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody5Type$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CreateDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody5Type$;
(function (CreateDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody5Type$) {
    /** @deprecated use `CreateDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody5Type$inboundSchema` instead. */
    CreateDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody5Type$.inboundSchema = CreateDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody5Type$inboundSchema;
    /** @deprecated use `CreateDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody5Type$outboundSchema` instead. */
    CreateDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody5Type$.outboundSchema = CreateDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody5Type$outboundSchema;
})(CreateDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody5Type$ || (CreateDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody5Type$ = {}));
/** @internal */
export const GitSourceProjectId$inboundSchema = z.union([z.string(), z.number()]);
/** @internal */
export const GitSourceProjectId$outboundSchema = z.union([z.string(), z.number()]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GitSourceProjectId$;
(function (GitSourceProjectId$) {
    /** @deprecated use `GitSourceProjectId$inboundSchema` instead. */
    GitSourceProjectId$.inboundSchema = GitSourceProjectId$inboundSchema;
    /** @deprecated use `GitSourceProjectId$outboundSchema` instead. */
    GitSourceProjectId$.outboundSchema = GitSourceProjectId$outboundSchema;
})(GitSourceProjectId$ || (GitSourceProjectId$ = {}));
export function gitSourceProjectIdToJSON(gitSourceProjectId) {
    return JSON.stringify(GitSourceProjectId$outboundSchema.parse(gitSourceProjectId));
}
export function gitSourceProjectIdFromJSON(jsonString) {
    return safeParse(jsonString, (x) => GitSourceProjectId$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'GitSourceProjectId' from JSON`);
}
/** @internal */
export const CreateDeploymentGitSource5$inboundSchema = z.object({
    type: CreateDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody5Type$inboundSchema,
    projectId: z.union([z.string(), z.number()]),
    ref: z.nullable(z.string()).optional(),
    sha: z.string().optional(),
    prId: z.nullable(z.number()).optional(),
});
/** @internal */
export const CreateDeploymentGitSource5$outboundSchema = z.object({
    type: CreateDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody5Type$outboundSchema,
    projectId: z.union([z.string(), z.number()]),
    ref: z.nullable(z.string()).optional(),
    sha: z.string().optional(),
    prId: z.nullable(z.number()).optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CreateDeploymentGitSource5$;
(function (CreateDeploymentGitSource5$) {
    /** @deprecated use `CreateDeploymentGitSource5$inboundSchema` instead. */
    CreateDeploymentGitSource5$.inboundSchema = CreateDeploymentGitSource5$inboundSchema;
    /** @deprecated use `CreateDeploymentGitSource5$outboundSchema` instead. */
    CreateDeploymentGitSource5$.outboundSchema = CreateDeploymentGitSource5$outboundSchema;
})(CreateDeploymentGitSource5$ || (CreateDeploymentGitSource5$ = {}));
export function createDeploymentGitSource5ToJSON(createDeploymentGitSource5) {
    return JSON.stringify(CreateDeploymentGitSource5$outboundSchema.parse(createDeploymentGitSource5));
}
export function createDeploymentGitSource5FromJSON(jsonString) {
    return safeParse(jsonString, (x) => CreateDeploymentGitSource5$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CreateDeploymentGitSource5' from JSON`);
}
/** @internal */
export const CreateDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBodyType$inboundSchema = z.nativeEnum(CreateDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBodyType);
/** @internal */
export const CreateDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBodyType$outboundSchema = CreateDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBodyType$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CreateDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBodyType$;
(function (CreateDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBodyType$) {
    /** @deprecated use `CreateDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBodyType$inboundSchema` instead. */
    CreateDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBodyType$.inboundSchema = CreateDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBodyType$inboundSchema;
    /** @deprecated use `CreateDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBodyType$outboundSchema` instead. */
    CreateDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBodyType$.outboundSchema = CreateDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBodyType$outboundSchema;
})(CreateDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBodyType$ || (CreateDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBodyType$ = {}));
/** @internal */
export const CreateDeploymentGitSource4$inboundSchema = z.object({
    type: CreateDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBodyType$inboundSchema,
    host: z.string(),
    org: z.string(),
    repo: z.string(),
    ref: z.nullable(z.string()).optional(),
    sha: z.string().optional(),
    prId: z.nullable(z.number()).optional(),
});
/** @internal */
export const CreateDeploymentGitSource4$outboundSchema = z.object({
    type: CreateDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBodyType$outboundSchema,
    host: z.string(),
    org: z.string(),
    repo: z.string(),
    ref: z.nullable(z.string()).optional(),
    sha: z.string().optional(),
    prId: z.nullable(z.number()).optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CreateDeploymentGitSource4$;
(function (CreateDeploymentGitSource4$) {
    /** @deprecated use `CreateDeploymentGitSource4$inboundSchema` instead. */
    CreateDeploymentGitSource4$.inboundSchema = CreateDeploymentGitSource4$inboundSchema;
    /** @deprecated use `CreateDeploymentGitSource4$outboundSchema` instead. */
    CreateDeploymentGitSource4$.outboundSchema = CreateDeploymentGitSource4$outboundSchema;
})(CreateDeploymentGitSource4$ || (CreateDeploymentGitSource4$ = {}));
export function createDeploymentGitSource4ToJSON(createDeploymentGitSource4) {
    return JSON.stringify(CreateDeploymentGitSource4$outboundSchema.parse(createDeploymentGitSource4));
}
export function createDeploymentGitSource4FromJSON(jsonString) {
    return safeParse(jsonString, (x) => CreateDeploymentGitSource4$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CreateDeploymentGitSource4' from JSON`);
}
/** @internal */
export const CreateDeploymentGitSourceDeploymentsResponse200ApplicationJSONType$inboundSchema = z.nativeEnum(CreateDeploymentGitSourceDeploymentsResponse200ApplicationJSONType);
/** @internal */
export const CreateDeploymentGitSourceDeploymentsResponse200ApplicationJSONType$outboundSchema = CreateDeploymentGitSourceDeploymentsResponse200ApplicationJSONType$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CreateDeploymentGitSourceDeploymentsResponse200ApplicationJSONType$;
(function (CreateDeploymentGitSourceDeploymentsResponse200ApplicationJSONType$) {
    /** @deprecated use `CreateDeploymentGitSourceDeploymentsResponse200ApplicationJSONType$inboundSchema` instead. */
    CreateDeploymentGitSourceDeploymentsResponse200ApplicationJSONType$.inboundSchema = CreateDeploymentGitSourceDeploymentsResponse200ApplicationJSONType$inboundSchema;
    /** @deprecated use `CreateDeploymentGitSourceDeploymentsResponse200ApplicationJSONType$outboundSchema` instead. */
    CreateDeploymentGitSourceDeploymentsResponse200ApplicationJSONType$.outboundSchema = CreateDeploymentGitSourceDeploymentsResponse200ApplicationJSONType$outboundSchema;
})(CreateDeploymentGitSourceDeploymentsResponse200ApplicationJSONType$ || (CreateDeploymentGitSourceDeploymentsResponse200ApplicationJSONType$ = {}));
/** @internal */
export const CreateDeploymentGitSourceRepoId$inboundSchema = z.union([z.string(), z.number()]);
/** @internal */
export const CreateDeploymentGitSourceRepoId$outboundSchema = z.union([z.string(), z.number()]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CreateDeploymentGitSourceRepoId$;
(function (CreateDeploymentGitSourceRepoId$) {
    /** @deprecated use `CreateDeploymentGitSourceRepoId$inboundSchema` instead. */
    CreateDeploymentGitSourceRepoId$.inboundSchema = CreateDeploymentGitSourceRepoId$inboundSchema;
    /** @deprecated use `CreateDeploymentGitSourceRepoId$outboundSchema` instead. */
    CreateDeploymentGitSourceRepoId$.outboundSchema = CreateDeploymentGitSourceRepoId$outboundSchema;
})(CreateDeploymentGitSourceRepoId$ || (CreateDeploymentGitSourceRepoId$ = {}));
export function createDeploymentGitSourceRepoIdToJSON(createDeploymentGitSourceRepoId) {
    return JSON.stringify(CreateDeploymentGitSourceRepoId$outboundSchema.parse(createDeploymentGitSourceRepoId));
}
export function createDeploymentGitSourceRepoIdFromJSON(jsonString) {
    return safeParse(jsonString, (x) => CreateDeploymentGitSourceRepoId$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CreateDeploymentGitSourceRepoId' from JSON`);
}
/** @internal */
export const CreateDeploymentGitSource3$inboundSchema = z.object({
    type: CreateDeploymentGitSourceDeploymentsResponse200ApplicationJSONType$inboundSchema,
    host: z.string(),
    repoId: z.union([z.string(), z.number()]),
    ref: z.nullable(z.string()).optional(),
    sha: z.string().optional(),
    prId: z.nullable(z.number()).optional(),
});
/** @internal */
export const CreateDeploymentGitSource3$outboundSchema = z.object({
    type: CreateDeploymentGitSourceDeploymentsResponse200ApplicationJSONType$outboundSchema,
    host: z.string(),
    repoId: z.union([z.string(), z.number()]),
    ref: z.nullable(z.string()).optional(),
    sha: z.string().optional(),
    prId: z.nullable(z.number()).optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CreateDeploymentGitSource3$;
(function (CreateDeploymentGitSource3$) {
    /** @deprecated use `CreateDeploymentGitSource3$inboundSchema` instead. */
    CreateDeploymentGitSource3$.inboundSchema = CreateDeploymentGitSource3$inboundSchema;
    /** @deprecated use `CreateDeploymentGitSource3$outboundSchema` instead. */
    CreateDeploymentGitSource3$.outboundSchema = CreateDeploymentGitSource3$outboundSchema;
})(CreateDeploymentGitSource3$ || (CreateDeploymentGitSource3$ = {}));
export function createDeploymentGitSource3ToJSON(createDeploymentGitSource3) {
    return JSON.stringify(CreateDeploymentGitSource3$outboundSchema.parse(createDeploymentGitSource3));
}
export function createDeploymentGitSource3FromJSON(jsonString) {
    return safeParse(jsonString, (x) => CreateDeploymentGitSource3$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CreateDeploymentGitSource3' from JSON`);
}
/** @internal */
export const CreateDeploymentGitSourceDeploymentsResponse200Type$inboundSchema = z.nativeEnum(CreateDeploymentGitSourceDeploymentsResponse200Type);
/** @internal */
export const CreateDeploymentGitSourceDeploymentsResponse200Type$outboundSchema = CreateDeploymentGitSourceDeploymentsResponse200Type$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CreateDeploymentGitSourceDeploymentsResponse200Type$;
(function (CreateDeploymentGitSourceDeploymentsResponse200Type$) {
    /** @deprecated use `CreateDeploymentGitSourceDeploymentsResponse200Type$inboundSchema` instead. */
    CreateDeploymentGitSourceDeploymentsResponse200Type$.inboundSchema = CreateDeploymentGitSourceDeploymentsResponse200Type$inboundSchema;
    /** @deprecated use `CreateDeploymentGitSourceDeploymentsResponse200Type$outboundSchema` instead. */
    CreateDeploymentGitSourceDeploymentsResponse200Type$.outboundSchema = CreateDeploymentGitSourceDeploymentsResponse200Type$outboundSchema;
})(CreateDeploymentGitSourceDeploymentsResponse200Type$ || (CreateDeploymentGitSourceDeploymentsResponse200Type$ = {}));
/** @internal */
export const CreateDeploymentGitSource2$inboundSchema = z.object({
    type: CreateDeploymentGitSourceDeploymentsResponse200Type$inboundSchema,
    org: z.string(),
    repo: z.string(),
    ref: z.nullable(z.string()).optional(),
    sha: z.string().optional(),
    prId: z.nullable(z.number()).optional(),
});
/** @internal */
export const CreateDeploymentGitSource2$outboundSchema = z.object({
    type: CreateDeploymentGitSourceDeploymentsResponse200Type$outboundSchema,
    org: z.string(),
    repo: z.string(),
    ref: z.nullable(z.string()).optional(),
    sha: z.string().optional(),
    prId: z.nullable(z.number()).optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CreateDeploymentGitSource2$;
(function (CreateDeploymentGitSource2$) {
    /** @deprecated use `CreateDeploymentGitSource2$inboundSchema` instead. */
    CreateDeploymentGitSource2$.inboundSchema = CreateDeploymentGitSource2$inboundSchema;
    /** @deprecated use `CreateDeploymentGitSource2$outboundSchema` instead. */
    CreateDeploymentGitSource2$.outboundSchema = CreateDeploymentGitSource2$outboundSchema;
})(CreateDeploymentGitSource2$ || (CreateDeploymentGitSource2$ = {}));
export function createDeploymentGitSource2ToJSON(createDeploymentGitSource2) {
    return JSON.stringify(CreateDeploymentGitSource2$outboundSchema.parse(createDeploymentGitSource2));
}
export function createDeploymentGitSource2FromJSON(jsonString) {
    return safeParse(jsonString, (x) => CreateDeploymentGitSource2$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CreateDeploymentGitSource2' from JSON`);
}
/** @internal */
export const CreateDeploymentGitSourceDeploymentsResponseType$inboundSchema = z
    .nativeEnum(CreateDeploymentGitSourceDeploymentsResponseType);
/** @internal */
export const CreateDeploymentGitSourceDeploymentsResponseType$outboundSchema = CreateDeploymentGitSourceDeploymentsResponseType$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CreateDeploymentGitSourceDeploymentsResponseType$;
(function (CreateDeploymentGitSourceDeploymentsResponseType$) {
    /** @deprecated use `CreateDeploymentGitSourceDeploymentsResponseType$inboundSchema` instead. */
    CreateDeploymentGitSourceDeploymentsResponseType$.inboundSchema = CreateDeploymentGitSourceDeploymentsResponseType$inboundSchema;
    /** @deprecated use `CreateDeploymentGitSourceDeploymentsResponseType$outboundSchema` instead. */
    CreateDeploymentGitSourceDeploymentsResponseType$.outboundSchema = CreateDeploymentGitSourceDeploymentsResponseType$outboundSchema;
})(CreateDeploymentGitSourceDeploymentsResponseType$ || (CreateDeploymentGitSourceDeploymentsResponseType$ = {}));
/** @internal */
export const GitSourceRepoId$inboundSchema = z.union([z.string(), z.number()]);
/** @internal */
export const GitSourceRepoId$outboundSchema = z.union([z.string(), z.number()]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GitSourceRepoId$;
(function (GitSourceRepoId$) {
    /** @deprecated use `GitSourceRepoId$inboundSchema` instead. */
    GitSourceRepoId$.inboundSchema = GitSourceRepoId$inboundSchema;
    /** @deprecated use `GitSourceRepoId$outboundSchema` instead. */
    GitSourceRepoId$.outboundSchema = GitSourceRepoId$outboundSchema;
})(GitSourceRepoId$ || (GitSourceRepoId$ = {}));
export function gitSourceRepoIdToJSON(gitSourceRepoId) {
    return JSON.stringify(GitSourceRepoId$outboundSchema.parse(gitSourceRepoId));
}
export function gitSourceRepoIdFromJSON(jsonString) {
    return safeParse(jsonString, (x) => GitSourceRepoId$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'GitSourceRepoId' from JSON`);
}
/** @internal */
export const CreateDeploymentGitSource1$inboundSchema = z.object({
    type: CreateDeploymentGitSourceDeploymentsResponseType$inboundSchema,
    repoId: z.union([z.string(), z.number()]),
    ref: z.nullable(z.string()).optional(),
    sha: z.string().optional(),
    prId: z.nullable(z.number()).optional(),
});
/** @internal */
export const CreateDeploymentGitSource1$outboundSchema = z.object({
    type: CreateDeploymentGitSourceDeploymentsResponseType$outboundSchema,
    repoId: z.union([z.string(), z.number()]),
    ref: z.nullable(z.string()).optional(),
    sha: z.string().optional(),
    prId: z.nullable(z.number()).optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CreateDeploymentGitSource1$;
(function (CreateDeploymentGitSource1$) {
    /** @deprecated use `CreateDeploymentGitSource1$inboundSchema` instead. */
    CreateDeploymentGitSource1$.inboundSchema = CreateDeploymentGitSource1$inboundSchema;
    /** @deprecated use `CreateDeploymentGitSource1$outboundSchema` instead. */
    CreateDeploymentGitSource1$.outboundSchema = CreateDeploymentGitSource1$outboundSchema;
})(CreateDeploymentGitSource1$ || (CreateDeploymentGitSource1$ = {}));
export function createDeploymentGitSource1ToJSON(createDeploymentGitSource1) {
    return JSON.stringify(CreateDeploymentGitSource1$outboundSchema.parse(createDeploymentGitSource1));
}
export function createDeploymentGitSource1FromJSON(jsonString) {
    return safeParse(jsonString, (x) => CreateDeploymentGitSource1$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CreateDeploymentGitSource1' from JSON`);
}
/** @internal */
export const CreateDeploymentGitSource$inboundSchema = z.union([
    z.lazy(() => CreateDeploymentGitSource8$inboundSchema),
    z.lazy(() => CreateDeploymentGitSource11$inboundSchema),
    z.lazy(() => CreateDeploymentGitSource1$inboundSchema),
    z.lazy(() => CreateDeploymentGitSource5$inboundSchema),
    z.lazy(() => CreateDeploymentGitSource2$inboundSchema),
    z.lazy(() => CreateDeploymentGitSource3$inboundSchema),
    z.lazy(() => CreateDeploymentGitSource6$inboundSchema),
    z.lazy(() => CreateDeploymentGitSource7$inboundSchema),
    z.lazy(() => CreateDeploymentGitSource9$inboundSchema),
    z.lazy(() => CreateDeploymentGitSource4$inboundSchema),
    z.lazy(() => CreateDeploymentGitSource10$inboundSchema),
    z.lazy(() => CreateDeploymentGitSource12$inboundSchema),
]);
/** @internal */
export const CreateDeploymentGitSource$outboundSchema = z.union([
    z.lazy(() => CreateDeploymentGitSource8$outboundSchema),
    z.lazy(() => CreateDeploymentGitSource11$outboundSchema),
    z.lazy(() => CreateDeploymentGitSource1$outboundSchema),
    z.lazy(() => CreateDeploymentGitSource5$outboundSchema),
    z.lazy(() => CreateDeploymentGitSource2$outboundSchema),
    z.lazy(() => CreateDeploymentGitSource3$outboundSchema),
    z.lazy(() => CreateDeploymentGitSource6$outboundSchema),
    z.lazy(() => CreateDeploymentGitSource7$outboundSchema),
    z.lazy(() => CreateDeploymentGitSource9$outboundSchema),
    z.lazy(() => CreateDeploymentGitSource4$outboundSchema),
    z.lazy(() => CreateDeploymentGitSource10$outboundSchema),
    z.lazy(() => CreateDeploymentGitSource12$outboundSchema),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CreateDeploymentGitSource$;
(function (CreateDeploymentGitSource$) {
    /** @deprecated use `CreateDeploymentGitSource$inboundSchema` instead. */
    CreateDeploymentGitSource$.inboundSchema = CreateDeploymentGitSource$inboundSchema;
    /** @deprecated use `CreateDeploymentGitSource$outboundSchema` instead. */
    CreateDeploymentGitSource$.outboundSchema = CreateDeploymentGitSource$outboundSchema;
})(CreateDeploymentGitSource$ || (CreateDeploymentGitSource$ = {}));
export function createDeploymentGitSourceToJSON(createDeploymentGitSource) {
    return JSON.stringify(CreateDeploymentGitSource$outboundSchema.parse(createDeploymentGitSource));
}
export function createDeploymentGitSourceFromJSON(jsonString) {
    return safeParse(jsonString, (x) => CreateDeploymentGitSource$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CreateDeploymentGitSource' from JSON`);
}
/** @internal */
export const CreateDeploymentProject$inboundSchema = z.object({
    id: z.string(),
    name: z.string(),
    framework: z.nullable(z.string()).optional(),
});
/** @internal */
export const CreateDeploymentProject$outboundSchema = z.object({
    id: z.string(),
    name: z.string(),
    framework: z.nullable(z.string()).optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CreateDeploymentProject$;
(function (CreateDeploymentProject$) {
    /** @deprecated use `CreateDeploymentProject$inboundSchema` instead. */
    CreateDeploymentProject$.inboundSchema = CreateDeploymentProject$inboundSchema;
    /** @deprecated use `CreateDeploymentProject$outboundSchema` instead. */
    CreateDeploymentProject$.outboundSchema = CreateDeploymentProject$outboundSchema;
})(CreateDeploymentProject$ || (CreateDeploymentProject$ = {}));
export function createDeploymentProjectToJSON(createDeploymentProject) {
    return JSON.stringify(CreateDeploymentProject$outboundSchema.parse(createDeploymentProject));
}
export function createDeploymentProjectFromJSON(jsonString) {
    return safeParse(jsonString, (x) => CreateDeploymentProject$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CreateDeploymentProject' from JSON`);
}
/** @internal */
export const ReadyState$inboundSchema = z
    .nativeEnum(ReadyState);
/** @internal */
export const ReadyState$outboundSchema = ReadyState$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ReadyState$;
(function (ReadyState$) {
    /** @deprecated use `ReadyState$inboundSchema` instead. */
    ReadyState$.inboundSchema = ReadyState$inboundSchema;
    /** @deprecated use `ReadyState$outboundSchema` instead. */
    ReadyState$.outboundSchema = ReadyState$outboundSchema;
})(ReadyState$ || (ReadyState$ = {}));
/** @internal */
export const CreateDeploymentSource$inboundSchema = z.nativeEnum(CreateDeploymentSource);
/** @internal */
export const CreateDeploymentSource$outboundSchema = CreateDeploymentSource$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CreateDeploymentSource$;
(function (CreateDeploymentSource$) {
    /** @deprecated use `CreateDeploymentSource$inboundSchema` instead. */
    CreateDeploymentSource$.inboundSchema = CreateDeploymentSource$inboundSchema;
    /** @deprecated use `CreateDeploymentSource$outboundSchema` instead. */
    CreateDeploymentSource$.outboundSchema = CreateDeploymentSource$outboundSchema;
})(CreateDeploymentSource$ || (CreateDeploymentSource$ = {}));
/** @internal */
export const CreateDeploymentTarget$inboundSchema = z.nativeEnum(CreateDeploymentTarget);
/** @internal */
export const CreateDeploymentTarget$outboundSchema = CreateDeploymentTarget$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CreateDeploymentTarget$;
(function (CreateDeploymentTarget$) {
    /** @deprecated use `CreateDeploymentTarget$inboundSchema` instead. */
    CreateDeploymentTarget$.inboundSchema = CreateDeploymentTarget$inboundSchema;
    /** @deprecated use `CreateDeploymentTarget$outboundSchema` instead. */
    CreateDeploymentTarget$.outboundSchema = CreateDeploymentTarget$outboundSchema;
})(CreateDeploymentTarget$ || (CreateDeploymentTarget$ = {}));
/** @internal */
export const AliasWarning$inboundSchema = z.object({
    code: z.string(),
    message: z.string(),
    link: z.string().optional(),
    action: z.string().optional(),
});
/** @internal */
export const AliasWarning$outboundSchema = z.object({
    code: z.string(),
    message: z.string(),
    link: z.string().optional(),
    action: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var AliasWarning$;
(function (AliasWarning$) {
    /** @deprecated use `AliasWarning$inboundSchema` instead. */
    AliasWarning$.inboundSchema = AliasWarning$inboundSchema;
    /** @deprecated use `AliasWarning$outboundSchema` instead. */
    AliasWarning$.outboundSchema = AliasWarning$outboundSchema;
})(AliasWarning$ || (AliasWarning$ = {}));
export function aliasWarningToJSON(aliasWarning) {
    return JSON.stringify(AliasWarning$outboundSchema.parse(aliasWarning));
}
export function aliasWarningFromJSON(jsonString) {
    return safeParse(jsonString, (x) => AliasWarning$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'AliasWarning' from JSON`);
}
/** @internal */
export const AliasError$inboundSchema = z.object({
    code: z.string(),
    message: z.string(),
});
/** @internal */
export const AliasError$outboundSchema = z.object({
    code: z.string(),
    message: z.string(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var AliasError$;
(function (AliasError$) {
    /** @deprecated use `AliasError$inboundSchema` instead. */
    AliasError$.inboundSchema = AliasError$inboundSchema;
    /** @deprecated use `AliasError$outboundSchema` instead. */
    AliasError$.outboundSchema = AliasError$outboundSchema;
})(AliasError$ || (AliasError$ = {}));
export function aliasErrorToJSON(aliasError) {
    return JSON.stringify(AliasError$outboundSchema.parse(aliasError));
}
export function aliasErrorFromJSON(jsonString) {
    return safeParse(jsonString, (x) => AliasError$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'AliasError' from JSON`);
}
/** @internal */
export const ChecksState$inboundSchema = z
    .nativeEnum(ChecksState);
/** @internal */
export const ChecksState$outboundSchema = ChecksState$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ChecksState$;
(function (ChecksState$) {
    /** @deprecated use `ChecksState$inboundSchema` instead. */
    ChecksState$.inboundSchema = ChecksState$inboundSchema;
    /** @deprecated use `ChecksState$outboundSchema` instead. */
    ChecksState$.outboundSchema = ChecksState$outboundSchema;
})(ChecksState$ || (ChecksState$ = {}));
/** @internal */
export const ChecksConclusion$inboundSchema = z.nativeEnum(ChecksConclusion);
/** @internal */
export const ChecksConclusion$outboundSchema = ChecksConclusion$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ChecksConclusion$;
(function (ChecksConclusion$) {
    /** @deprecated use `ChecksConclusion$inboundSchema` instead. */
    ChecksConclusion$.inboundSchema = ChecksConclusion$inboundSchema;
    /** @deprecated use `ChecksConclusion$outboundSchema` instead. */
    ChecksConclusion$.outboundSchema = ChecksConclusion$outboundSchema;
})(ChecksConclusion$ || (ChecksConclusion$ = {}));
/** @internal */
export const ReadySubstate$inboundSchema = z.nativeEnum(ReadySubstate);
/** @internal */
export const ReadySubstate$outboundSchema = ReadySubstate$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ReadySubstate$;
(function (ReadySubstate$) {
    /** @deprecated use `ReadySubstate$inboundSchema` instead. */
    ReadySubstate$.inboundSchema = ReadySubstate$inboundSchema;
    /** @deprecated use `ReadySubstate$outboundSchema` instead. */
    ReadySubstate$.outboundSchema = ReadySubstate$outboundSchema;
})(ReadySubstate$ || (ReadySubstate$ = {}));
/** @internal */
export const OidcTokenClaims$inboundSchema = z.object({
    iss: z.string(),
    sub: z.string(),
    scope: z.string(),
    aud: z.string(),
    owner: z.string(),
    owner_id: z.string(),
    project: z.string(),
    project_id: z.string(),
    environment: z.string(),
}).transform((v) => {
    return remap$(v, {
        "owner_id": "ownerId",
        "project_id": "projectId",
    });
});
/** @internal */
export const OidcTokenClaims$outboundSchema = z.object({
    iss: z.string(),
    sub: z.string(),
    scope: z.string(),
    aud: z.string(),
    owner: z.string(),
    ownerId: z.string(),
    project: z.string(),
    projectId: z.string(),
    environment: z.string(),
}).transform((v) => {
    return remap$(v, {
        ownerId: "owner_id",
        projectId: "project_id",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var OidcTokenClaims$;
(function (OidcTokenClaims$) {
    /** @deprecated use `OidcTokenClaims$inboundSchema` instead. */
    OidcTokenClaims$.inboundSchema = OidcTokenClaims$inboundSchema;
    /** @deprecated use `OidcTokenClaims$outboundSchema` instead. */
    OidcTokenClaims$.outboundSchema = OidcTokenClaims$outboundSchema;
})(OidcTokenClaims$ || (OidcTokenClaims$ = {}));
export function oidcTokenClaimsToJSON(oidcTokenClaims) {
    return JSON.stringify(OidcTokenClaims$outboundSchema.parse(oidcTokenClaims));
}
export function oidcTokenClaimsFromJSON(jsonString) {
    return safeParse(jsonString, (x) => OidcTokenClaims$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'OidcTokenClaims' from JSON`);
}
/** @internal */
export const CreateDeploymentPlan$inboundSchema = z.nativeEnum(CreateDeploymentPlan);
/** @internal */
export const CreateDeploymentPlan$outboundSchema = CreateDeploymentPlan$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CreateDeploymentPlan$;
(function (CreateDeploymentPlan$) {
    /** @deprecated use `CreateDeploymentPlan$inboundSchema` instead. */
    CreateDeploymentPlan$.inboundSchema = CreateDeploymentPlan$inboundSchema;
    /** @deprecated use `CreateDeploymentPlan$outboundSchema` instead. */
    CreateDeploymentPlan$.outboundSchema = CreateDeploymentPlan$outboundSchema;
})(CreateDeploymentPlan$ || (CreateDeploymentPlan$ = {}));
/** @internal */
export const Applications$inboundSchema = z.object({
    productionHost: z.string(),
    deploymentAlias: z.string().optional(),
    deploymentHost: z.string().optional(),
});
/** @internal */
export const Applications$outboundSchema = z.object({
    productionHost: z.string(),
    deploymentAlias: z.string().optional(),
    deploymentHost: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var Applications$;
(function (Applications$) {
    /** @deprecated use `Applications$inboundSchema` instead. */
    Applications$.inboundSchema = Applications$inboundSchema;
    /** @deprecated use `Applications$outboundSchema` instead. */
    Applications$.outboundSchema = Applications$outboundSchema;
})(Applications$ || (Applications$ = {}));
export function applicationsToJSON(applications) {
    return JSON.stringify(Applications$outboundSchema.parse(applications));
}
export function applicationsFromJSON(jsonString) {
    return safeParse(jsonString, (x) => Applications$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'Applications' from JSON`);
}
/** @internal */
export const CreateDeploymentMicrofrontends2$inboundSchema = z.object({
    applications: z.record(z.lazy(() => Applications$inboundSchema)).optional(),
    isDefaultApp: z.boolean(),
    defaultAppProjectName: z.string(),
    defaultRoute: z.string().optional(),
    groupIds: z.array(z.string()),
});
/** @internal */
export const CreateDeploymentMicrofrontends2$outboundSchema = z.object({
    applications: z.record(z.lazy(() => Applications$outboundSchema)).optional(),
    isDefaultApp: z.boolean(),
    defaultAppProjectName: z.string(),
    defaultRoute: z.string().optional(),
    groupIds: z.array(z.string()),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CreateDeploymentMicrofrontends2$;
(function (CreateDeploymentMicrofrontends2$) {
    /** @deprecated use `CreateDeploymentMicrofrontends2$inboundSchema` instead. */
    CreateDeploymentMicrofrontends2$.inboundSchema = CreateDeploymentMicrofrontends2$inboundSchema;
    /** @deprecated use `CreateDeploymentMicrofrontends2$outboundSchema` instead. */
    CreateDeploymentMicrofrontends2$.outboundSchema = CreateDeploymentMicrofrontends2$outboundSchema;
})(CreateDeploymentMicrofrontends2$ || (CreateDeploymentMicrofrontends2$ = {}));
export function createDeploymentMicrofrontends2ToJSON(createDeploymentMicrofrontends2) {
    return JSON.stringify(CreateDeploymentMicrofrontends2$outboundSchema.parse(createDeploymentMicrofrontends2));
}
export function createDeploymentMicrofrontends2FromJSON(jsonString) {
    return safeParse(jsonString, (x) => CreateDeploymentMicrofrontends2$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CreateDeploymentMicrofrontends2' from JSON`);
}
/** @internal */
export const CreateDeploymentMicrofrontends1$inboundSchema = z.object({
    isDefaultApp: z.boolean().optional(),
    defaultAppProjectName: z.string(),
    defaultRoute: z.string().optional(),
    groupIds: z.array(z.string()),
});
/** @internal */
export const CreateDeploymentMicrofrontends1$outboundSchema = z.object({
    isDefaultApp: z.boolean().optional(),
    defaultAppProjectName: z.string(),
    defaultRoute: z.string().optional(),
    groupIds: z.array(z.string()),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CreateDeploymentMicrofrontends1$;
(function (CreateDeploymentMicrofrontends1$) {
    /** @deprecated use `CreateDeploymentMicrofrontends1$inboundSchema` instead. */
    CreateDeploymentMicrofrontends1$.inboundSchema = CreateDeploymentMicrofrontends1$inboundSchema;
    /** @deprecated use `CreateDeploymentMicrofrontends1$outboundSchema` instead. */
    CreateDeploymentMicrofrontends1$.outboundSchema = CreateDeploymentMicrofrontends1$outboundSchema;
})(CreateDeploymentMicrofrontends1$ || (CreateDeploymentMicrofrontends1$ = {}));
export function createDeploymentMicrofrontends1ToJSON(createDeploymentMicrofrontends1) {
    return JSON.stringify(CreateDeploymentMicrofrontends1$outboundSchema.parse(createDeploymentMicrofrontends1));
}
export function createDeploymentMicrofrontends1FromJSON(jsonString) {
    return safeParse(jsonString, (x) => CreateDeploymentMicrofrontends1$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CreateDeploymentMicrofrontends1' from JSON`);
}
/** @internal */
export const CreateDeploymentMicrofrontends$inboundSchema = z.union([
    z.lazy(() => CreateDeploymentMicrofrontends1$inboundSchema),
    z.lazy(() => CreateDeploymentMicrofrontends2$inboundSchema),
]);
/** @internal */
export const CreateDeploymentMicrofrontends$outboundSchema = z.union([
    z.lazy(() => CreateDeploymentMicrofrontends1$outboundSchema),
    z.lazy(() => CreateDeploymentMicrofrontends2$outboundSchema),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CreateDeploymentMicrofrontends$;
(function (CreateDeploymentMicrofrontends$) {
    /** @deprecated use `CreateDeploymentMicrofrontends$inboundSchema` instead. */
    CreateDeploymentMicrofrontends$.inboundSchema = CreateDeploymentMicrofrontends$inboundSchema;
    /** @deprecated use `CreateDeploymentMicrofrontends$outboundSchema` instead. */
    CreateDeploymentMicrofrontends$.outboundSchema = CreateDeploymentMicrofrontends$outboundSchema;
})(CreateDeploymentMicrofrontends$ || (CreateDeploymentMicrofrontends$ = {}));
export function createDeploymentMicrofrontendsToJSON(createDeploymentMicrofrontends) {
    return JSON.stringify(CreateDeploymentMicrofrontends$outboundSchema.parse(createDeploymentMicrofrontends));
}
export function createDeploymentMicrofrontendsFromJSON(jsonString) {
    return safeParse(jsonString, (x) => CreateDeploymentMicrofrontends$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CreateDeploymentMicrofrontends' from JSON`);
}
/** @internal */
export const FunctionType$inboundSchema = z.nativeEnum(FunctionType);
/** @internal */
export const FunctionType$outboundSchema = FunctionType$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var FunctionType$;
(function (FunctionType$) {
    /** @deprecated use `FunctionType$inboundSchema` instead. */
    FunctionType$.inboundSchema = FunctionType$inboundSchema;
    /** @deprecated use `FunctionType$outboundSchema` instead. */
    FunctionType$.outboundSchema = FunctionType$outboundSchema;
})(FunctionType$ || (FunctionType$ = {}));
/** @internal */
export const FunctionMemoryType$inboundSchema = z.nativeEnum(FunctionMemoryType);
/** @internal */
export const FunctionMemoryType$outboundSchema = FunctionMemoryType$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var FunctionMemoryType$;
(function (FunctionMemoryType$) {
    /** @deprecated use `FunctionMemoryType$inboundSchema` instead. */
    FunctionMemoryType$.inboundSchema = FunctionMemoryType$inboundSchema;
    /** @deprecated use `FunctionMemoryType$outboundSchema` instead. */
    FunctionMemoryType$.outboundSchema = FunctionMemoryType$outboundSchema;
})(FunctionMemoryType$ || (FunctionMemoryType$ = {}));
/** @internal */
export const Config$inboundSchema = z
    .object({
    version: z.number().optional(),
    functionType: FunctionType$inboundSchema,
    functionMemoryType: FunctionMemoryType$inboundSchema,
    functionTimeout: z.nullable(z.number()),
    secureComputePrimaryRegion: z.nullable(z.string()),
    secureComputeFallbackRegion: z.nullable(z.string()),
});
/** @internal */
export const Config$outboundSchema = z.object({
    version: z.number().optional(),
    functionType: FunctionType$outboundSchema,
    functionMemoryType: FunctionMemoryType$outboundSchema,
    functionTimeout: z.nullable(z.number()),
    secureComputePrimaryRegion: z.nullable(z.string()),
    secureComputeFallbackRegion: z.nullable(z.string()),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var Config$;
(function (Config$) {
    /** @deprecated use `Config$inboundSchema` instead. */
    Config$.inboundSchema = Config$inboundSchema;
    /** @deprecated use `Config$outboundSchema` instead. */
    Config$.outboundSchema = Config$outboundSchema;
})(Config$ || (Config$ = {}));
export function configToJSON(config) {
    return JSON.stringify(Config$outboundSchema.parse(config));
}
export function configFromJSON(jsonString) {
    return safeParse(jsonString, (x) => Config$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'Config' from JSON`);
}
/** @internal */
export const Functions$inboundSchema = z.object({
    memory: z.number().optional(),
    maxDuration: z.number().optional(),
    runtime: z.string().optional(),
    includeFiles: z.string().optional(),
    excludeFiles: z.string().optional(),
});
/** @internal */
export const Functions$outboundSchema = z.object({
    memory: z.number().optional(),
    maxDuration: z.number().optional(),
    runtime: z.string().optional(),
    includeFiles: z.string().optional(),
    excludeFiles: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var Functions$;
(function (Functions$) {
    /** @deprecated use `Functions$inboundSchema` instead. */
    Functions$.inboundSchema = Functions$inboundSchema;
    /** @deprecated use `Functions$outboundSchema` instead. */
    Functions$.outboundSchema = Functions$outboundSchema;
})(Functions$ || (Functions$ = {}));
export function functionsToJSON(functions) {
    return JSON.stringify(Functions$outboundSchema.parse(functions));
}
export function functionsFromJSON(jsonString) {
    return safeParse(jsonString, (x) => Functions$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'Functions' from JSON`);
}
/** @internal */
export const Routes3$inboundSchema = z.object({
    src: z.string(),
    continue: z.boolean(),
    middleware: z.number(),
});
/** @internal */
export const Routes3$outboundSchema = z.object({
    src: z.string(),
    continue: z.boolean(),
    middleware: z.number(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var Routes3$;
(function (Routes3$) {
    /** @deprecated use `Routes3$inboundSchema` instead. */
    Routes3$.inboundSchema = Routes3$inboundSchema;
    /** @deprecated use `Routes3$outboundSchema` instead. */
    Routes3$.outboundSchema = Routes3$outboundSchema;
})(Routes3$ || (Routes3$ = {}));
export function routes3ToJSON(routes3) {
    return JSON.stringify(Routes3$outboundSchema.parse(routes3));
}
export function routes3FromJSON(jsonString) {
    return safeParse(jsonString, (x) => Routes3$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'Routes3' from JSON`);
}
/** @internal */
export const RoutesHandle$inboundSchema = z.nativeEnum(RoutesHandle);
/** @internal */
export const RoutesHandle$outboundSchema = RoutesHandle$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var RoutesHandle$;
(function (RoutesHandle$) {
    /** @deprecated use `RoutesHandle$inboundSchema` instead. */
    RoutesHandle$.inboundSchema = RoutesHandle$inboundSchema;
    /** @deprecated use `RoutesHandle$outboundSchema` instead. */
    RoutesHandle$.outboundSchema = RoutesHandle$outboundSchema;
})(RoutesHandle$ || (RoutesHandle$ = {}));
/** @internal */
export const Routes2$inboundSchema = z.object({
    handle: RoutesHandle$inboundSchema,
    src: z.string().optional(),
    dest: z.string().optional(),
    status: z.number().optional(),
});
/** @internal */
export const Routes2$outboundSchema = z.object({
    handle: RoutesHandle$outboundSchema,
    src: z.string().optional(),
    dest: z.string().optional(),
    status: z.number().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var Routes2$;
(function (Routes2$) {
    /** @deprecated use `Routes2$inboundSchema` instead. */
    Routes2$.inboundSchema = Routes2$inboundSchema;
    /** @deprecated use `Routes2$outboundSchema` instead. */
    Routes2$.outboundSchema = Routes2$outboundSchema;
})(Routes2$ || (Routes2$ = {}));
export function routes2ToJSON(routes2) {
    return JSON.stringify(Routes2$outboundSchema.parse(routes2));
}
export function routes2FromJSON(jsonString) {
    return safeParse(jsonString, (x) => Routes2$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'Routes2' from JSON`);
}
/** @internal */
export const CreateDeploymentHasType$inboundSchema = z.nativeEnum(CreateDeploymentHasType);
/** @internal */
export const CreateDeploymentHasType$outboundSchema = CreateDeploymentHasType$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CreateDeploymentHasType$;
(function (CreateDeploymentHasType$) {
    /** @deprecated use `CreateDeploymentHasType$inboundSchema` instead. */
    CreateDeploymentHasType$.inboundSchema = CreateDeploymentHasType$inboundSchema;
    /** @deprecated use `CreateDeploymentHasType$outboundSchema` instead. */
    CreateDeploymentHasType$.outboundSchema = CreateDeploymentHasType$outboundSchema;
})(CreateDeploymentHasType$ || (CreateDeploymentHasType$ = {}));
/** @internal */
export const Has2$inboundSchema = z
    .object({
    type: CreateDeploymentHasType$inboundSchema,
    key: z.string(),
    value: z.string().optional(),
});
/** @internal */
export const Has2$outboundSchema = z.object({
    type: CreateDeploymentHasType$outboundSchema,
    key: z.string(),
    value: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var Has2$;
(function (Has2$) {
    /** @deprecated use `Has2$inboundSchema` instead. */
    Has2$.inboundSchema = Has2$inboundSchema;
    /** @deprecated use `Has2$outboundSchema` instead. */
    Has2$.outboundSchema = Has2$outboundSchema;
})(Has2$ || (Has2$ = {}));
export function has2ToJSON(has2) {
    return JSON.stringify(Has2$outboundSchema.parse(has2));
}
export function has2FromJSON(jsonString) {
    return safeParse(jsonString, (x) => Has2$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'Has2' from JSON`);
}
/** @internal */
export const HasType$inboundSchema = z
    .nativeEnum(HasType);
/** @internal */
export const HasType$outboundSchema = HasType$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var HasType$;
(function (HasType$) {
    /** @deprecated use `HasType$inboundSchema` instead. */
    HasType$.inboundSchema = HasType$inboundSchema;
    /** @deprecated use `HasType$outboundSchema` instead. */
    HasType$.outboundSchema = HasType$outboundSchema;
})(HasType$ || (HasType$ = {}));
/** @internal */
export const Has1$inboundSchema = z
    .object({
    type: HasType$inboundSchema,
    value: z.string(),
});
/** @internal */
export const Has1$outboundSchema = z.object({
    type: HasType$outboundSchema,
    value: z.string(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var Has1$;
(function (Has1$) {
    /** @deprecated use `Has1$inboundSchema` instead. */
    Has1$.inboundSchema = Has1$inboundSchema;
    /** @deprecated use `Has1$outboundSchema` instead. */
    Has1$.outboundSchema = Has1$outboundSchema;
})(Has1$ || (Has1$ = {}));
export function has1ToJSON(has1) {
    return JSON.stringify(Has1$outboundSchema.parse(has1));
}
export function has1FromJSON(jsonString) {
    return safeParse(jsonString, (x) => Has1$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'Has1' from JSON`);
}
/** @internal */
export const RoutesHas$inboundSchema = z.union([
    z.lazy(() => Has1$inboundSchema),
    z.lazy(() => Has2$inboundSchema),
]);
/** @internal */
export const RoutesHas$outboundSchema = z.union([
    z.lazy(() => Has1$outboundSchema),
    z.lazy(() => Has2$outboundSchema),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var RoutesHas$;
(function (RoutesHas$) {
    /** @deprecated use `RoutesHas$inboundSchema` instead. */
    RoutesHas$.inboundSchema = RoutesHas$inboundSchema;
    /** @deprecated use `RoutesHas$outboundSchema` instead. */
    RoutesHas$.outboundSchema = RoutesHas$outboundSchema;
})(RoutesHas$ || (RoutesHas$ = {}));
export function routesHasToJSON(routesHas) {
    return JSON.stringify(RoutesHas$outboundSchema.parse(routesHas));
}
export function routesHasFromJSON(jsonString) {
    return safeParse(jsonString, (x) => RoutesHas$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'RoutesHas' from JSON`);
}
/** @internal */
export const CreateDeploymentMissingType$inboundSchema = z.nativeEnum(CreateDeploymentMissingType);
/** @internal */
export const CreateDeploymentMissingType$outboundSchema = CreateDeploymentMissingType$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CreateDeploymentMissingType$;
(function (CreateDeploymentMissingType$) {
    /** @deprecated use `CreateDeploymentMissingType$inboundSchema` instead. */
    CreateDeploymentMissingType$.inboundSchema = CreateDeploymentMissingType$inboundSchema;
    /** @deprecated use `CreateDeploymentMissingType$outboundSchema` instead. */
    CreateDeploymentMissingType$.outboundSchema = CreateDeploymentMissingType$outboundSchema;
})(CreateDeploymentMissingType$ || (CreateDeploymentMissingType$ = {}));
/** @internal */
export const Missing2$inboundSchema = z.object({
    type: CreateDeploymentMissingType$inboundSchema,
    key: z.string(),
    value: z.string().optional(),
});
/** @internal */
export const Missing2$outboundSchema = z.object({
    type: CreateDeploymentMissingType$outboundSchema,
    key: z.string(),
    value: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var Missing2$;
(function (Missing2$) {
    /** @deprecated use `Missing2$inboundSchema` instead. */
    Missing2$.inboundSchema = Missing2$inboundSchema;
    /** @deprecated use `Missing2$outboundSchema` instead. */
    Missing2$.outboundSchema = Missing2$outboundSchema;
})(Missing2$ || (Missing2$ = {}));
export function missing2ToJSON(missing2) {
    return JSON.stringify(Missing2$outboundSchema.parse(missing2));
}
export function missing2FromJSON(jsonString) {
    return safeParse(jsonString, (x) => Missing2$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'Missing2' from JSON`);
}
/** @internal */
export const MissingType$inboundSchema = z
    .nativeEnum(MissingType);
/** @internal */
export const MissingType$outboundSchema = MissingType$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var MissingType$;
(function (MissingType$) {
    /** @deprecated use `MissingType$inboundSchema` instead. */
    MissingType$.inboundSchema = MissingType$inboundSchema;
    /** @deprecated use `MissingType$outboundSchema` instead. */
    MissingType$.outboundSchema = MissingType$outboundSchema;
})(MissingType$ || (MissingType$ = {}));
/** @internal */
export const Missing1$inboundSchema = z.object({
    type: MissingType$inboundSchema,
    value: z.string(),
});
/** @internal */
export const Missing1$outboundSchema = z.object({
    type: MissingType$outboundSchema,
    value: z.string(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var Missing1$;
(function (Missing1$) {
    /** @deprecated use `Missing1$inboundSchema` instead. */
    Missing1$.inboundSchema = Missing1$inboundSchema;
    /** @deprecated use `Missing1$outboundSchema` instead. */
    Missing1$.outboundSchema = Missing1$outboundSchema;
})(Missing1$ || (Missing1$ = {}));
export function missing1ToJSON(missing1) {
    return JSON.stringify(Missing1$outboundSchema.parse(missing1));
}
export function missing1FromJSON(jsonString) {
    return safeParse(jsonString, (x) => Missing1$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'Missing1' from JSON`);
}
/** @internal */
export const RoutesMissing$inboundSchema = z.union([
    z.lazy(() => Missing1$inboundSchema),
    z.lazy(() => Missing2$inboundSchema),
]);
/** @internal */
export const RoutesMissing$outboundSchema = z.union([
    z.lazy(() => Missing1$outboundSchema),
    z.lazy(() => Missing2$outboundSchema),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var RoutesMissing$;
(function (RoutesMissing$) {
    /** @deprecated use `RoutesMissing$inboundSchema` instead. */
    RoutesMissing$.inboundSchema = RoutesMissing$inboundSchema;
    /** @deprecated use `RoutesMissing$outboundSchema` instead. */
    RoutesMissing$.outboundSchema = RoutesMissing$outboundSchema;
})(RoutesMissing$ || (RoutesMissing$ = {}));
export function routesMissingToJSON(routesMissing) {
    return JSON.stringify(RoutesMissing$outboundSchema.parse(routesMissing));
}
export function routesMissingFromJSON(jsonString) {
    return safeParse(jsonString, (x) => RoutesMissing$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'RoutesMissing' from JSON`);
}
/** @internal */
export const Locale$inboundSchema = z
    .object({
    redirect: z.record(z.string()).optional(),
    cookie: z.string().optional(),
});
/** @internal */
export const Locale$outboundSchema = z.object({
    redirect: z.record(z.string()).optional(),
    cookie: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var Locale$;
(function (Locale$) {
    /** @deprecated use `Locale$inboundSchema` instead. */
    Locale$.inboundSchema = Locale$inboundSchema;
    /** @deprecated use `Locale$outboundSchema` instead. */
    Locale$.outboundSchema = Locale$outboundSchema;
})(Locale$ || (Locale$ = {}));
export function localeToJSON(locale) {
    return JSON.stringify(Locale$outboundSchema.parse(locale));
}
export function localeFromJSON(jsonString) {
    return safeParse(jsonString, (x) => Locale$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'Locale' from JSON`);
}
/** @internal */
export const Routes1$inboundSchema = z.object({
    src: z.string(),
    dest: z.string().optional(),
    headers: z.record(z.string()).optional(),
    methods: z.array(z.string()).optional(),
    continue: z.boolean().optional(),
    override: z.boolean().optional(),
    caseSensitive: z.boolean().optional(),
    check: z.boolean().optional(),
    important: z.boolean().optional(),
    status: z.number().optional(),
    has: z.array(z.union([
        z.lazy(() => Has1$inboundSchema),
        z.lazy(() => Has2$inboundSchema),
    ])).optional(),
    missing: z.array(z.union([
        z.lazy(() => Missing1$inboundSchema),
        z.lazy(() => Missing2$inboundSchema),
    ])).optional(),
    locale: z.lazy(() => Locale$inboundSchema).optional(),
    middlewarePath: z.string().optional(),
    middlewareRawSrc: z.array(z.string()).optional(),
    middleware: z.number().optional(),
});
/** @internal */
export const Routes1$outboundSchema = z.object({
    src: z.string(),
    dest: z.string().optional(),
    headers: z.record(z.string()).optional(),
    methods: z.array(z.string()).optional(),
    continue: z.boolean().optional(),
    override: z.boolean().optional(),
    caseSensitive: z.boolean().optional(),
    check: z.boolean().optional(),
    important: z.boolean().optional(),
    status: z.number().optional(),
    has: z.array(z.union([
        z.lazy(() => Has1$outboundSchema),
        z.lazy(() => Has2$outboundSchema),
    ])).optional(),
    missing: z.array(z.union([
        z.lazy(() => Missing1$outboundSchema),
        z.lazy(() => Missing2$outboundSchema),
    ])).optional(),
    locale: z.lazy(() => Locale$outboundSchema).optional(),
    middlewarePath: z.string().optional(),
    middlewareRawSrc: z.array(z.string()).optional(),
    middleware: z.number().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var Routes1$;
(function (Routes1$) {
    /** @deprecated use `Routes1$inboundSchema` instead. */
    Routes1$.inboundSchema = Routes1$inboundSchema;
    /** @deprecated use `Routes1$outboundSchema` instead. */
    Routes1$.outboundSchema = Routes1$outboundSchema;
})(Routes1$ || (Routes1$ = {}));
export function routes1ToJSON(routes1) {
    return JSON.stringify(Routes1$outboundSchema.parse(routes1));
}
export function routes1FromJSON(jsonString) {
    return safeParse(jsonString, (x) => Routes1$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'Routes1' from JSON`);
}
/** @internal */
export const Routes$inboundSchema = z
    .union([
    z.lazy(() => Routes3$inboundSchema),
    z.lazy(() => Routes2$inboundSchema),
    z.lazy(() => Routes1$inboundSchema),
]);
/** @internal */
export const Routes$outboundSchema = z.union([
    z.lazy(() => Routes3$outboundSchema),
    z.lazy(() => Routes2$outboundSchema),
    z.lazy(() => Routes1$outboundSchema),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var Routes$;
(function (Routes$) {
    /** @deprecated use `Routes$inboundSchema` instead. */
    Routes$.inboundSchema = Routes$inboundSchema;
    /** @deprecated use `Routes$outboundSchema` instead. */
    Routes$.outboundSchema = Routes$outboundSchema;
})(Routes$ || (Routes$ = {}));
export function routesToJSON(routes) {
    return JSON.stringify(Routes$outboundSchema.parse(routes));
}
export function routesFromJSON(jsonString) {
    return safeParse(jsonString, (x) => Routes$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'Routes' from JSON`);
}
/** @internal */
export const CreateDeploymentCrons$inboundSchema = z.object({
    schedule: z.string(),
    path: z.string(),
});
/** @internal */
export const CreateDeploymentCrons$outboundSchema = z.object({
    schedule: z.string(),
    path: z.string(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CreateDeploymentCrons$;
(function (CreateDeploymentCrons$) {
    /** @deprecated use `CreateDeploymentCrons$inboundSchema` instead. */
    CreateDeploymentCrons$.inboundSchema = CreateDeploymentCrons$inboundSchema;
    /** @deprecated use `CreateDeploymentCrons$outboundSchema` instead. */
    CreateDeploymentCrons$.outboundSchema = CreateDeploymentCrons$outboundSchema;
})(CreateDeploymentCrons$ || (CreateDeploymentCrons$ = {}));
export function createDeploymentCronsToJSON(createDeploymentCrons) {
    return JSON.stringify(CreateDeploymentCrons$outboundSchema.parse(createDeploymentCrons));
}
export function createDeploymentCronsFromJSON(jsonString) {
    return safeParse(jsonString, (x) => CreateDeploymentCrons$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CreateDeploymentCrons' from JSON`);
}
/** @internal */
export const CreateDeploymentGitRepoDeploymentsType$inboundSchema = z.nativeEnum(CreateDeploymentGitRepoDeploymentsType);
/** @internal */
export const CreateDeploymentGitRepoDeploymentsType$outboundSchema = CreateDeploymentGitRepoDeploymentsType$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CreateDeploymentGitRepoDeploymentsType$;
(function (CreateDeploymentGitRepoDeploymentsType$) {
    /** @deprecated use `CreateDeploymentGitRepoDeploymentsType$inboundSchema` instead. */
    CreateDeploymentGitRepoDeploymentsType$.inboundSchema = CreateDeploymentGitRepoDeploymentsType$inboundSchema;
    /** @deprecated use `CreateDeploymentGitRepoDeploymentsType$outboundSchema` instead. */
    CreateDeploymentGitRepoDeploymentsType$.outboundSchema = CreateDeploymentGitRepoDeploymentsType$outboundSchema;
})(CreateDeploymentGitRepoDeploymentsType$ || (CreateDeploymentGitRepoDeploymentsType$ = {}));
/** @internal */
export const CreateDeploymentGitRepoOwnerType$inboundSchema = z.nativeEnum(CreateDeploymentGitRepoOwnerType);
/** @internal */
export const CreateDeploymentGitRepoOwnerType$outboundSchema = CreateDeploymentGitRepoOwnerType$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CreateDeploymentGitRepoOwnerType$;
(function (CreateDeploymentGitRepoOwnerType$) {
    /** @deprecated use `CreateDeploymentGitRepoOwnerType$inboundSchema` instead. */
    CreateDeploymentGitRepoOwnerType$.inboundSchema = CreateDeploymentGitRepoOwnerType$inboundSchema;
    /** @deprecated use `CreateDeploymentGitRepoOwnerType$outboundSchema` instead. */
    CreateDeploymentGitRepoOwnerType$.outboundSchema = CreateDeploymentGitRepoOwnerType$outboundSchema;
})(CreateDeploymentGitRepoOwnerType$ || (CreateDeploymentGitRepoOwnerType$ = {}));
/** @internal */
export const GitRepo3$inboundSchema = z.object({
    owner: z.string(),
    repoUuid: z.string(),
    slug: z.string(),
    type: CreateDeploymentGitRepoDeploymentsType$inboundSchema,
    workspaceUuid: z.string(),
    path: z.string(),
    defaultBranch: z.string(),
    name: z.string(),
    private: z.boolean(),
    ownerType: CreateDeploymentGitRepoOwnerType$inboundSchema,
});
/** @internal */
export const GitRepo3$outboundSchema = z.object({
    owner: z.string(),
    repoUuid: z.string(),
    slug: z.string(),
    type: CreateDeploymentGitRepoDeploymentsType$outboundSchema,
    workspaceUuid: z.string(),
    path: z.string(),
    defaultBranch: z.string(),
    name: z.string(),
    private: z.boolean(),
    ownerType: CreateDeploymentGitRepoOwnerType$outboundSchema,
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GitRepo3$;
(function (GitRepo3$) {
    /** @deprecated use `GitRepo3$inboundSchema` instead. */
    GitRepo3$.inboundSchema = GitRepo3$inboundSchema;
    /** @deprecated use `GitRepo3$outboundSchema` instead. */
    GitRepo3$.outboundSchema = GitRepo3$outboundSchema;
})(GitRepo3$ || (GitRepo3$ = {}));
export function gitRepo3ToJSON(gitRepo3) {
    return JSON.stringify(GitRepo3$outboundSchema.parse(gitRepo3));
}
export function gitRepo3FromJSON(jsonString) {
    return safeParse(jsonString, (x) => GitRepo3$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'GitRepo3' from JSON`);
}
/** @internal */
export const CreateDeploymentGitRepoType$inboundSchema = z.nativeEnum(CreateDeploymentGitRepoType);
/** @internal */
export const CreateDeploymentGitRepoType$outboundSchema = CreateDeploymentGitRepoType$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CreateDeploymentGitRepoType$;
(function (CreateDeploymentGitRepoType$) {
    /** @deprecated use `CreateDeploymentGitRepoType$inboundSchema` instead. */
    CreateDeploymentGitRepoType$.inboundSchema = CreateDeploymentGitRepoType$inboundSchema;
    /** @deprecated use `CreateDeploymentGitRepoType$outboundSchema` instead. */
    CreateDeploymentGitRepoType$.outboundSchema = CreateDeploymentGitRepoType$outboundSchema;
})(CreateDeploymentGitRepoType$ || (CreateDeploymentGitRepoType$ = {}));
/** @internal */
export const GitRepoOwnerType$inboundSchema = z.nativeEnum(GitRepoOwnerType);
/** @internal */
export const GitRepoOwnerType$outboundSchema = GitRepoOwnerType$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GitRepoOwnerType$;
(function (GitRepoOwnerType$) {
    /** @deprecated use `GitRepoOwnerType$inboundSchema` instead. */
    GitRepoOwnerType$.inboundSchema = GitRepoOwnerType$inboundSchema;
    /** @deprecated use `GitRepoOwnerType$outboundSchema` instead. */
    GitRepoOwnerType$.outboundSchema = GitRepoOwnerType$outboundSchema;
})(GitRepoOwnerType$ || (GitRepoOwnerType$ = {}));
/** @internal */
export const GitRepo2$inboundSchema = z.object({
    org: z.string(),
    repo: z.string(),
    repoId: z.number(),
    type: CreateDeploymentGitRepoType$inboundSchema,
    repoOwnerId: z.number(),
    path: z.string(),
    defaultBranch: z.string(),
    name: z.string(),
    private: z.boolean(),
    ownerType: GitRepoOwnerType$inboundSchema,
});
/** @internal */
export const GitRepo2$outboundSchema = z.object({
    org: z.string(),
    repo: z.string(),
    repoId: z.number(),
    type: CreateDeploymentGitRepoType$outboundSchema,
    repoOwnerId: z.number(),
    path: z.string(),
    defaultBranch: z.string(),
    name: z.string(),
    private: z.boolean(),
    ownerType: GitRepoOwnerType$outboundSchema,
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GitRepo2$;
(function (GitRepo2$) {
    /** @deprecated use `GitRepo2$inboundSchema` instead. */
    GitRepo2$.inboundSchema = GitRepo2$inboundSchema;
    /** @deprecated use `GitRepo2$outboundSchema` instead. */
    GitRepo2$.outboundSchema = GitRepo2$outboundSchema;
})(GitRepo2$ || (GitRepo2$ = {}));
export function gitRepo2ToJSON(gitRepo2) {
    return JSON.stringify(GitRepo2$outboundSchema.parse(gitRepo2));
}
export function gitRepo2FromJSON(jsonString) {
    return safeParse(jsonString, (x) => GitRepo2$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'GitRepo2' from JSON`);
}
/** @internal */
export const GitRepoType$inboundSchema = z
    .nativeEnum(GitRepoType);
/** @internal */
export const GitRepoType$outboundSchema = GitRepoType$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GitRepoType$;
(function (GitRepoType$) {
    /** @deprecated use `GitRepoType$inboundSchema` instead. */
    GitRepoType$.inboundSchema = GitRepoType$inboundSchema;
    /** @deprecated use `GitRepoType$outboundSchema` instead. */
    GitRepoType$.outboundSchema = GitRepoType$outboundSchema;
})(GitRepoType$ || (GitRepoType$ = {}));
/** @internal */
export const OwnerType$inboundSchema = z
    .nativeEnum(OwnerType);
/** @internal */
export const OwnerType$outboundSchema = OwnerType$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var OwnerType$;
(function (OwnerType$) {
    /** @deprecated use `OwnerType$inboundSchema` instead. */
    OwnerType$.inboundSchema = OwnerType$inboundSchema;
    /** @deprecated use `OwnerType$outboundSchema` instead. */
    OwnerType$.outboundSchema = OwnerType$outboundSchema;
})(OwnerType$ || (OwnerType$ = {}));
/** @internal */
export const GitRepo1$inboundSchema = z.object({
    namespace: z.string(),
    projectId: z.number(),
    type: GitRepoType$inboundSchema,
    url: z.string(),
    path: z.string(),
    defaultBranch: z.string(),
    name: z.string(),
    private: z.boolean(),
    ownerType: OwnerType$inboundSchema,
});
/** @internal */
export const GitRepo1$outboundSchema = z.object({
    namespace: z.string(),
    projectId: z.number(),
    type: GitRepoType$outboundSchema,
    url: z.string(),
    path: z.string(),
    defaultBranch: z.string(),
    name: z.string(),
    private: z.boolean(),
    ownerType: OwnerType$outboundSchema,
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GitRepo1$;
(function (GitRepo1$) {
    /** @deprecated use `GitRepo1$inboundSchema` instead. */
    GitRepo1$.inboundSchema = GitRepo1$inboundSchema;
    /** @deprecated use `GitRepo1$outboundSchema` instead. */
    GitRepo1$.outboundSchema = GitRepo1$outboundSchema;
})(GitRepo1$ || (GitRepo1$ = {}));
export function gitRepo1ToJSON(gitRepo1) {
    return JSON.stringify(GitRepo1$outboundSchema.parse(gitRepo1));
}
export function gitRepo1FromJSON(jsonString) {
    return safeParse(jsonString, (x) => GitRepo1$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'GitRepo1' from JSON`);
}
/** @internal */
export const GitRepo$inboundSchema = z.union([
    z.lazy(() => GitRepo1$inboundSchema),
    z.lazy(() => GitRepo2$inboundSchema),
    z.lazy(() => GitRepo3$inboundSchema),
]);
/** @internal */
export const GitRepo$outboundSchema = z.union([
    z.lazy(() => GitRepo1$outboundSchema),
    z.lazy(() => GitRepo2$outboundSchema),
    z.lazy(() => GitRepo3$outboundSchema),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GitRepo$;
(function (GitRepo$) {
    /** @deprecated use `GitRepo$inboundSchema` instead. */
    GitRepo$.inboundSchema = GitRepo$inboundSchema;
    /** @deprecated use `GitRepo$outboundSchema` instead. */
    GitRepo$.outboundSchema = GitRepo$outboundSchema;
})(GitRepo$ || (GitRepo$ = {}));
export function gitRepoToJSON(gitRepo) {
    return JSON.stringify(GitRepo$outboundSchema.parse(gitRepo));
}
export function gitRepoFromJSON(jsonString) {
    return safeParse(jsonString, (x) => GitRepo$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'GitRepo' from JSON`);
}
/** @internal */
export const Flags2$inboundSchema = z
    .object({});
/** @internal */
export const Flags2$outboundSchema = z.object({});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var Flags2$;
(function (Flags2$) {
    /** @deprecated use `Flags2$inboundSchema` instead. */
    Flags2$.inboundSchema = Flags2$inboundSchema;
    /** @deprecated use `Flags2$outboundSchema` instead. */
    Flags2$.outboundSchema = Flags2$outboundSchema;
})(Flags2$ || (Flags2$ = {}));
export function flags2ToJSON(flags2) {
    return JSON.stringify(Flags2$outboundSchema.parse(flags2));
}
export function flags2FromJSON(jsonString) {
    return safeParse(jsonString, (x) => Flags2$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'Flags2' from JSON`);
}
/** @internal */
export const Options$inboundSchema = z.object({
    value: z.nullable(FlagJSONValue$inboundSchema),
    label: z.string().optional(),
});
/** @internal */
export const Options$outboundSchema = z.object({
    value: z.nullable(FlagJSONValue$outboundSchema),
    label: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var Options$;
(function (Options$) {
    /** @deprecated use `Options$inboundSchema` instead. */
    Options$.inboundSchema = Options$inboundSchema;
    /** @deprecated use `Options$outboundSchema` instead. */
    Options$.outboundSchema = Options$outboundSchema;
})(Options$ || (Options$ = {}));
export function optionsToJSON(options) {
    return JSON.stringify(Options$outboundSchema.parse(options));
}
export function optionsFromJSON(jsonString) {
    return safeParse(jsonString, (x) => Options$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'Options' from JSON`);
}
/** @internal */
export const FlagsDefinitions$inboundSchema = z.object({
    options: z.array(z.lazy(() => Options$inboundSchema)).optional(),
    url: z.string().optional(),
    description: z.string().optional(),
});
/** @internal */
export const FlagsDefinitions$outboundSchema = z.object({
    options: z.array(z.lazy(() => Options$outboundSchema)).optional(),
    url: z.string().optional(),
    description: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var FlagsDefinitions$;
(function (FlagsDefinitions$) {
    /** @deprecated use `FlagsDefinitions$inboundSchema` instead. */
    FlagsDefinitions$.inboundSchema = FlagsDefinitions$inboundSchema;
    /** @deprecated use `FlagsDefinitions$outboundSchema` instead. */
    FlagsDefinitions$.outboundSchema = FlagsDefinitions$outboundSchema;
})(FlagsDefinitions$ || (FlagsDefinitions$ = {}));
export function flagsDefinitionsToJSON(flagsDefinitions) {
    return JSON.stringify(FlagsDefinitions$outboundSchema.parse(flagsDefinitions));
}
export function flagsDefinitionsFromJSON(jsonString) {
    return safeParse(jsonString, (x) => FlagsDefinitions$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'FlagsDefinitions' from JSON`);
}
/** @internal */
export const Flags1$inboundSchema = z
    .object({
    definitions: z.record(z.lazy(() => FlagsDefinitions$inboundSchema)),
});
/** @internal */
export const Flags1$outboundSchema = z.object({
    definitions: z.record(z.lazy(() => FlagsDefinitions$outboundSchema)),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var Flags1$;
(function (Flags1$) {
    /** @deprecated use `Flags1$inboundSchema` instead. */
    Flags1$.inboundSchema = Flags1$inboundSchema;
    /** @deprecated use `Flags1$outboundSchema` instead. */
    Flags1$.outboundSchema = Flags1$outboundSchema;
})(Flags1$ || (Flags1$ = {}));
export function flags1ToJSON(flags1) {
    return JSON.stringify(Flags1$outboundSchema.parse(flags1));
}
export function flags1FromJSON(jsonString) {
    return safeParse(jsonString, (x) => Flags1$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'Flags1' from JSON`);
}
/** @internal */
export const Flags$inboundSchema = z
    .union([
    z.lazy(() => Flags1$inboundSchema),
    z.array(z.lazy(() => Flags2$inboundSchema)),
]);
/** @internal */
export const Flags$outboundSchema = z.union([
    z.lazy(() => Flags1$outboundSchema),
    z.array(z.lazy(() => Flags2$outboundSchema)),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var Flags$;
(function (Flags$) {
    /** @deprecated use `Flags$inboundSchema` instead. */
    Flags$.inboundSchema = Flags$inboundSchema;
    /** @deprecated use `Flags$outboundSchema` instead. */
    Flags$.outboundSchema = Flags$outboundSchema;
})(Flags$ || (Flags$ = {}));
export function flagsToJSON(flags) {
    return JSON.stringify(Flags$outboundSchema.parse(flags));
}
export function flagsFromJSON(jsonString) {
    return safeParse(jsonString, (x) => Flags$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'Flags' from JSON`);
}
/** @internal */
export const CreateDeploymentResponseBody$inboundSchema = z.object({
    aliasAssignedAt: z.nullable(z.union([z.number(), z.boolean()])).optional(),
    alwaysRefuseToBuild: z.boolean().optional(),
    build: z.lazy(() => Build$inboundSchema),
    buildArtifactUrls: z.array(z.string()).optional(),
    builds: z.array(z.lazy(() => Builds$inboundSchema)).optional(),
    env: z.array(z.string()),
    inspectorUrl: z.nullable(z.string()),
    isInConcurrentBuildsQueue: z.boolean(),
    isInSystemBuildsQueue: z.boolean(),
    projectSettings: z.lazy(() => CreateDeploymentProjectSettings$inboundSchema),
    readyStateReason: z.string().optional(),
    integrations: z.lazy(() => Integrations$inboundSchema).optional(),
    images: z.lazy(() => Images$inboundSchema).optional(),
    alias: z.array(z.string()).optional(),
    aliasAssigned: z.boolean(),
    bootedAt: z.number(),
    buildingAt: z.number(),
    buildContainerFinishedAt: z.number().optional(),
    buildSkipped: z.boolean(),
    creator: z.lazy(() => Creator$inboundSchema),
    initReadyAt: z.number().optional(),
    isFirstBranchDeployment: z.boolean().optional(),
    lambdas: z.array(z.lazy(() => Lambdas$inboundSchema)).optional(),
    public: z.boolean(),
    ready: z.number().optional(),
    status: CreateDeploymentStatus$inboundSchema,
    team: z.lazy(() => CreateDeploymentTeam$inboundSchema).optional(),
    userAliases: z.array(z.string()).optional(),
    previewCommentsEnabled: z.boolean().optional(),
    ttyBuildLogs: z.boolean().optional(),
    customEnvironment: z.union([
        z.lazy(() => CustomEnvironment2$inboundSchema),
        z.lazy(() => CustomEnvironment1$inboundSchema),
    ]).optional(),
    type: CreateDeploymentType$inboundSchema,
    name: z.string(),
    createdAt: z.number(),
    deletedAt: z.nullable(z.number()).optional(),
    id: z.string(),
    version: z.number(),
    autoAssignCustomDomains: z.boolean().optional(),
    gitSource: z.union([
        z.lazy(() => CreateDeploymentGitSource8$inboundSchema),
        z.lazy(() => CreateDeploymentGitSource11$inboundSchema),
        z.lazy(() => CreateDeploymentGitSource1$inboundSchema),
        z.lazy(() => CreateDeploymentGitSource5$inboundSchema),
        z.lazy(() => CreateDeploymentGitSource2$inboundSchema),
        z.lazy(() => CreateDeploymentGitSource3$inboundSchema),
        z.lazy(() => CreateDeploymentGitSource6$inboundSchema),
        z.lazy(() => CreateDeploymentGitSource7$inboundSchema),
        z.lazy(() => CreateDeploymentGitSource9$inboundSchema),
        z.lazy(() => CreateDeploymentGitSource4$inboundSchema),
        z.lazy(() => CreateDeploymentGitSource10$inboundSchema),
        z.lazy(() => CreateDeploymentGitSource12$inboundSchema),
    ]).optional(),
    meta: z.record(z.string()),
    project: z.lazy(() => CreateDeploymentProject$inboundSchema).optional(),
    readyState: ReadyState$inboundSchema,
    source: CreateDeploymentSource$inboundSchema.optional(),
    target: z.nullable(CreateDeploymentTarget$inboundSchema).optional(),
    passiveRegions: z.array(z.string()).optional(),
    regions: z.array(z.string()),
    errorMessage: z.nullable(z.string()).optional(),
    aliasWarning: z.nullable(z.lazy(() => AliasWarning$inboundSchema)).optional(),
    aliasError: z.nullable(z.lazy(() => AliasError$inboundSchema)).optional(),
    aliasFinal: z.nullable(z.string()).optional(),
    automaticAliases: z.array(z.string()).optional(),
    buildErrorAt: z.number().optional(),
    checksState: ChecksState$inboundSchema.optional(),
    checksConclusion: ChecksConclusion$inboundSchema.optional(),
    defaultRoute: z.string().optional(),
    canceledAt: z.number().optional(),
    errorCode: z.string().optional(),
    errorLink: z.string().optional(),
    errorStep: z.string().optional(),
    originCacheRegion: z.string().optional(),
    readySubstate: ReadySubstate$inboundSchema.optional(),
    softDeletedByRetention: z.boolean().optional(),
    undeletedAt: z.number().optional(),
    url: z.string(),
    oidcTokenClaims: z.lazy(() => OidcTokenClaims$inboundSchema).optional(),
    plan: CreateDeploymentPlan$inboundSchema,
    projectId: z.string(),
    ownerId: z.string(),
    microfrontends: z.union([
        z.lazy(() => CreateDeploymentMicrofrontends1$inboundSchema),
        z.lazy(() => CreateDeploymentMicrofrontends2$inboundSchema),
    ]).optional(),
    monorepoManager: z.nullable(z.string()).optional(),
    config: z.lazy(() => Config$inboundSchema).optional(),
    functions: z.nullable(z.record(z.lazy(() => Functions$inboundSchema)))
        .optional(),
    routes: z.nullable(z.array(z.union([
        z.lazy(() => Routes3$inboundSchema),
        z.lazy(() => Routes2$inboundSchema),
        z.lazy(() => Routes1$inboundSchema),
    ]))),
    crons: z.array(z.lazy(() => CreateDeploymentCrons$inboundSchema)).optional(),
    connectBuildsEnabled: z.boolean().optional(),
    connectConfigurationId: z.string().optional(),
    createdIn: z.string(),
    passiveConnectConfigurationId: z.string().optional(),
    gitRepo: z.nullable(z.union([
        z.lazy(() => GitRepo1$inboundSchema),
        z.lazy(() => GitRepo2$inboundSchema),
        z.lazy(() => GitRepo3$inboundSchema),
    ])).optional(),
    flags: z.union([
        z.lazy(() => Flags1$inboundSchema),
        z.array(z.lazy(() => Flags2$inboundSchema)),
    ]).optional(),
});
/** @internal */
export const CreateDeploymentResponseBody$outboundSchema = z.object({
    aliasAssignedAt: z.nullable(z.union([z.number(), z.boolean()])).optional(),
    alwaysRefuseToBuild: z.boolean().optional(),
    build: z.lazy(() => Build$outboundSchema),
    buildArtifactUrls: z.array(z.string()).optional(),
    builds: z.array(z.lazy(() => Builds$outboundSchema)).optional(),
    env: z.array(z.string()),
    inspectorUrl: z.nullable(z.string()),
    isInConcurrentBuildsQueue: z.boolean(),
    isInSystemBuildsQueue: z.boolean(),
    projectSettings: z.lazy(() => CreateDeploymentProjectSettings$outboundSchema),
    readyStateReason: z.string().optional(),
    integrations: z.lazy(() => Integrations$outboundSchema).optional(),
    images: z.lazy(() => Images$outboundSchema).optional(),
    alias: z.array(z.string()).optional(),
    aliasAssigned: z.boolean(),
    bootedAt: z.number(),
    buildingAt: z.number(),
    buildContainerFinishedAt: z.number().optional(),
    buildSkipped: z.boolean(),
    creator: z.lazy(() => Creator$outboundSchema),
    initReadyAt: z.number().optional(),
    isFirstBranchDeployment: z.boolean().optional(),
    lambdas: z.array(z.lazy(() => Lambdas$outboundSchema)).optional(),
    public: z.boolean(),
    ready: z.number().optional(),
    status: CreateDeploymentStatus$outboundSchema,
    team: z.lazy(() => CreateDeploymentTeam$outboundSchema).optional(),
    userAliases: z.array(z.string()).optional(),
    previewCommentsEnabled: z.boolean().optional(),
    ttyBuildLogs: z.boolean().optional(),
    customEnvironment: z.union([
        z.lazy(() => CustomEnvironment2$outboundSchema),
        z.lazy(() => CustomEnvironment1$outboundSchema),
    ]).optional(),
    type: CreateDeploymentType$outboundSchema,
    name: z.string(),
    createdAt: z.number(),
    deletedAt: z.nullable(z.number()).optional(),
    id: z.string(),
    version: z.number(),
    autoAssignCustomDomains: z.boolean().optional(),
    gitSource: z.union([
        z.lazy(() => CreateDeploymentGitSource8$outboundSchema),
        z.lazy(() => CreateDeploymentGitSource11$outboundSchema),
        z.lazy(() => CreateDeploymentGitSource1$outboundSchema),
        z.lazy(() => CreateDeploymentGitSource5$outboundSchema),
        z.lazy(() => CreateDeploymentGitSource2$outboundSchema),
        z.lazy(() => CreateDeploymentGitSource3$outboundSchema),
        z.lazy(() => CreateDeploymentGitSource6$outboundSchema),
        z.lazy(() => CreateDeploymentGitSource7$outboundSchema),
        z.lazy(() => CreateDeploymentGitSource9$outboundSchema),
        z.lazy(() => CreateDeploymentGitSource4$outboundSchema),
        z.lazy(() => CreateDeploymentGitSource10$outboundSchema),
        z.lazy(() => CreateDeploymentGitSource12$outboundSchema),
    ]).optional(),
    meta: z.record(z.string()),
    project: z.lazy(() => CreateDeploymentProject$outboundSchema).optional(),
    readyState: ReadyState$outboundSchema,
    source: CreateDeploymentSource$outboundSchema.optional(),
    target: z.nullable(CreateDeploymentTarget$outboundSchema).optional(),
    passiveRegions: z.array(z.string()).optional(),
    regions: z.array(z.string()),
    errorMessage: z.nullable(z.string()).optional(),
    aliasWarning: z.nullable(z.lazy(() => AliasWarning$outboundSchema))
        .optional(),
    aliasError: z.nullable(z.lazy(() => AliasError$outboundSchema)).optional(),
    aliasFinal: z.nullable(z.string()).optional(),
    automaticAliases: z.array(z.string()).optional(),
    buildErrorAt: z.number().optional(),
    checksState: ChecksState$outboundSchema.optional(),
    checksConclusion: ChecksConclusion$outboundSchema.optional(),
    defaultRoute: z.string().optional(),
    canceledAt: z.number().optional(),
    errorCode: z.string().optional(),
    errorLink: z.string().optional(),
    errorStep: z.string().optional(),
    originCacheRegion: z.string().optional(),
    readySubstate: ReadySubstate$outboundSchema.optional(),
    softDeletedByRetention: z.boolean().optional(),
    undeletedAt: z.number().optional(),
    url: z.string(),
    oidcTokenClaims: z.lazy(() => OidcTokenClaims$outboundSchema).optional(),
    plan: CreateDeploymentPlan$outboundSchema,
    projectId: z.string(),
    ownerId: z.string(),
    microfrontends: z.union([
        z.lazy(() => CreateDeploymentMicrofrontends1$outboundSchema),
        z.lazy(() => CreateDeploymentMicrofrontends2$outboundSchema),
    ]).optional(),
    monorepoManager: z.nullable(z.string()).optional(),
    config: z.lazy(() => Config$outboundSchema).optional(),
    functions: z.nullable(z.record(z.lazy(() => Functions$outboundSchema)))
        .optional(),
    routes: z.nullable(z.array(z.union([
        z.lazy(() => Routes3$outboundSchema),
        z.lazy(() => Routes2$outboundSchema),
        z.lazy(() => Routes1$outboundSchema),
    ]))),
    crons: z.array(z.lazy(() => CreateDeploymentCrons$outboundSchema)).optional(),
    connectBuildsEnabled: z.boolean().optional(),
    connectConfigurationId: z.string().optional(),
    createdIn: z.string(),
    passiveConnectConfigurationId: z.string().optional(),
    gitRepo: z.nullable(z.union([
        z.lazy(() => GitRepo1$outboundSchema),
        z.lazy(() => GitRepo2$outboundSchema),
        z.lazy(() => GitRepo3$outboundSchema),
    ])).optional(),
    flags: z.union([
        z.lazy(() => Flags1$outboundSchema),
        z.array(z.lazy(() => Flags2$outboundSchema)),
    ]).optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CreateDeploymentResponseBody$;
(function (CreateDeploymentResponseBody$) {
    /** @deprecated use `CreateDeploymentResponseBody$inboundSchema` instead. */
    CreateDeploymentResponseBody$.inboundSchema = CreateDeploymentResponseBody$inboundSchema;
    /** @deprecated use `CreateDeploymentResponseBody$outboundSchema` instead. */
    CreateDeploymentResponseBody$.outboundSchema = CreateDeploymentResponseBody$outboundSchema;
})(CreateDeploymentResponseBody$ || (CreateDeploymentResponseBody$ = {}));
export function createDeploymentResponseBodyToJSON(createDeploymentResponseBody) {
    return JSON.stringify(CreateDeploymentResponseBody$outboundSchema.parse(createDeploymentResponseBody));
}
export function createDeploymentResponseBodyFromJSON(jsonString) {
    return safeParse(jsonString, (x) => CreateDeploymentResponseBody$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CreateDeploymentResponseBody' from JSON`);
}
//# sourceMappingURL=createdeploymentop.js.map