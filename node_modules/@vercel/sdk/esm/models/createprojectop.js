/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { ACLAction$inboundSchema, ACLAction$outboundSchema, } from "./aclaction.js";
export const Target2 = {
    Production: "production",
    Preview: "preview",
    Development: "development",
};
export const Target1 = {
    Production: "production",
    Preview: "preview",
    Development: "development",
};
/**
 * Type of the ENV variable
 */
export const CreateProjectType = {
    System: "system",
    Secret: "secret",
    Encrypted: "encrypted",
    Plain: "plain",
    Sensitive: "sensitive",
};
/**
 * The framework that is being used for this project. When `null` is used no framework is selected
 */
export const CreateProjectFramework = {
    Blitzjs: "blitzjs",
    Nextjs: "nextjs",
    Gatsby: "gatsby",
    Remix: "remix",
    ReactRouter: "react-router",
    Astro: "astro",
    Hexo: "hexo",
    Eleventy: "eleventy",
    Docusaurus2: "docusaurus-2",
    Docusaurus: "docusaurus",
    Preact: "preact",
    Solidstart1: "solidstart-1",
    Solidstart: "solidstart",
    Dojo: "dojo",
    Ember: "ember",
    Vue: "vue",
    Scully: "scully",
    IonicAngular: "ionic-angular",
    Angular: "angular",
    Polymer: "polymer",
    Svelte: "svelte",
    Sveltekit: "sveltekit",
    Sveltekit1: "sveltekit-1",
    IonicReact: "ionic-react",
    CreateReactApp: "create-react-app",
    Gridsome: "gridsome",
    Umijs: "umijs",
    Sapper: "sapper",
    Saber: "saber",
    Stencil: "stencil",
    Nuxtjs: "nuxtjs",
    Redwoodjs: "redwoodjs",
    Hugo: "hugo",
    Jekyll: "jekyll",
    Brunch: "brunch",
    Middleman: "middleman",
    Zola: "zola",
    Hydrogen: "hydrogen",
    Vite: "vite",
    Vitepress: "vitepress",
    Vuepress: "vuepress",
    Parcel: "parcel",
    Fasthtml: "fasthtml",
    SanityV3: "sanity-v3",
    Sanity: "sanity",
    Storybook: "storybook",
};
/**
 * The Git Provider of the repository
 */
export const CreateProjectProjectsType = {
    Github: "github",
    Gitlab: "gitlab",
    Bitbucket: "bitbucket",
};
/**
 * team: `https://oidc.vercel.com/[team_slug]` global: `https://oidc.vercel.com`
 */
export const IssuerMode = {
    Team: "team",
    Global: "global",
};
export const FunctionDefaultMemoryType = {
    StandardLegacy: "standard_legacy",
    Standard: "standard",
    Performance: "performance",
};
export const BuildMachineType = {
    Enhanced: "enhanced",
    Ultra: "ultra",
};
export const CreateProjectEnvId2 = {
    Production: "production",
    Preview: "preview",
};
export const CreateProjectTarget2 = {
    Production: "production",
    Preview: "preview",
    Development: "development",
};
export const CreateProjectTarget1 = {
    Production: "production",
    Preview: "preview",
    Development: "development",
};
export const CreateProjectProjectsResponseType = {
    System: "system",
    Secret: "secret",
    Encrypted: "encrypted",
    Plain: "plain",
    Sensitive: "sensitive",
};
export const CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv15Type = {
    FlagsConnectionString: "flags-connection-string",
};
export const CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv14Type = {
    IntegrationStoreSecret: "integration-store-secret",
};
export const CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv13Type = {
    PostgresUrlNoSsl: "postgres-url-no-ssl",
};
export const CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv12Type = {
    PostgresDatabase: "postgres-database",
};
export const CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv11Type = {
    PostgresPassword: "postgres-password",
};
export const CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv10Type = {
    PostgresHost: "postgres-host",
};
export const CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv9Type = {
    PostgresUser: "postgres-user",
};
export const CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv8Type = {
    PostgresPrismaUrl: "postgres-prisma-url",
};
export const CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnvType = {
    PostgresUrlNonPooling: "postgres-url-non-pooling",
};
export const CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyType = {
    PostgresUrl: "postgres-url",
};
export const CreateProjectContentHintProjectsResponse200ApplicationJSONType = {
    BlobReadWriteToken: "blob-read-write-token",
};
export const CreateProjectContentHintProjectsResponse200Type = {
    RedisRestApiReadOnlyToken: "redis-rest-api-read-only-token",
};
export const CreateProjectContentHintProjectsResponseType = {
    RedisRestApiToken: "redis-rest-api-token",
};
export const CreateProjectContentHintProjectsType = {
    RedisRestApiUrl: "redis-rest-api-url",
};
export const CreateProjectContentHintType = {
    RedisUrl: "redis-url",
};
export const CreateProjectProjectsResponse200ApplicationJSONResponseBodyEnvType = {
    FlagsSecret: "flags-secret",
};
/**
 * The type of environment (production, preview, or development)
 */
export const CreateProjectProjectsResponse200Type = {
    Production: "production",
    Preview: "preview",
    Development: "development",
};
/**
 * The type of matching to perform
 */
export const CreateProjectProjectsResponse200ApplicationJSONResponseBodyCustomEnvironmentsType = {
    EndsWith: "endsWith",
    StartsWith: "startsWith",
    Equals: "equals",
};
export const CreateProjectProjectsFramework = {
    Blitzjs: "blitzjs",
    Nextjs: "nextjs",
    Gatsby: "gatsby",
    Remix: "remix",
    ReactRouter: "react-router",
    Astro: "astro",
    Hexo: "hexo",
    Eleventy: "eleventy",
    Docusaurus2: "docusaurus-2",
    Docusaurus: "docusaurus",
    Preact: "preact",
    Solidstart1: "solidstart-1",
    Solidstart: "solidstart",
    Dojo: "dojo",
    Ember: "ember",
    Vue: "vue",
    Scully: "scully",
    IonicAngular: "ionic-angular",
    Angular: "angular",
    Polymer: "polymer",
    Svelte: "svelte",
    Sveltekit: "sveltekit",
    Sveltekit1: "sveltekit-1",
    IonicReact: "ionic-react",
    CreateReactApp: "create-react-app",
    Gridsome: "gridsome",
    Umijs: "umijs",
    Sapper: "sapper",
    Saber: "saber",
    Stencil: "stencil",
    Nuxtjs: "nuxtjs",
    Redwoodjs: "redwoodjs",
    Hugo: "hugo",
    Jekyll: "jekyll",
    Brunch: "brunch",
    Middleman: "middleman",
    Zola: "zola",
    Hydrogen: "hydrogen",
    Vite: "vite",
    Vitepress: "vitepress",
    Vuepress: "vuepress",
    Parcel: "parcel",
    Fasthtml: "fasthtml",
    SanityV3: "sanity-v3",
    Sanity: "sanity",
    Storybook: "storybook",
};
/**
 * The type of matching to perform
 */
export const CreateProjectProjectsResponse200ApplicationJSONResponseBodyLatestDeploymentsType = {
    EndsWith: "endsWith",
    StartsWith: "startsWith",
    Equals: "equals",
};
export const CreateProjectChecksConclusion = {
    Succeeded: "succeeded",
    Failed: "failed",
    Skipped: "skipped",
    Canceled: "canceled",
};
export const CreateProjectChecksState = {
    Registered: "registered",
    Running: "running",
    Completed: "completed",
};
export const CreateProjectPlan = {
    Pro: "pro",
    Enterprise: "enterprise",
    Hobby: "hobby",
};
export const CreateProjectReadyState = {
    Building: "BUILDING",
    Error: "ERROR",
    Initializing: "INITIALIZING",
    Queued: "QUEUED",
    Ready: "READY",
    Canceled: "CANCELED",
};
export const CreateProjectReadySubstate = {
    Staged: "STAGED",
    Rolling: "ROLLING",
    Promoted: "PROMOTED",
};
export const CreateProjectProjectsResponse200ApplicationJSONType = {
    Lambdas: "LAMBDAS",
};
export const CreateProjectLinkProjectsResponse200Type = {
    GithubCustomHost: "github-custom-host",
};
export const CreateProjectLinkProjectsResponseType = {
    Bitbucket: "bitbucket",
};
export const CreateProjectLinkProjectsType = {
    Gitlab: "gitlab",
};
export const CreateProjectLinkType = {
    Github: "github",
};
export const CreateProjectNodeVersion = {
    TwentyTwoDotX: "22.x",
    TwentyDotX: "20.x",
    EighteenDotX: "18.x",
    SixteenDotX: "16.x",
    FourteenDotX: "14.x",
    TwelveDotX: "12.x",
    TenDotX: "10.x",
    EightDot10DotX: "8.10.x",
};
export const CreateProjectFunctionDefaultMemoryType = {
    StandardLegacy: "standard_legacy",
    Standard: "standard",
    Performance: "performance",
};
export const CreateProjectBuildMachineType = {
    Enhanced: "enhanced",
    Ultra: "ultra",
};
export const CreateProjectProjectsFunctionDefaultMemoryType = {
    StandardLegacy: "standard_legacy",
    Standard: "standard",
    Performance: "performance",
};
export const CreateProjectProjectsBuildMachineType = {
    Enhanced: "enhanced",
    Ultra: "ultra",
};
export const CreateProjectDeploymentType = {
    Preview: "preview",
    All: "all",
    ProdDeploymentUrlsAndAllPreviews: "prod_deployment_urls_and_all_previews",
};
/**
 * The type of matching to perform
 */
export const CreateProjectProjectsResponse200ApplicationJSONResponseBodyTargetsType = {
    EndsWith: "endsWith",
    StartsWith: "startsWith",
    Equals: "equals",
};
export const CreateProjectProjectsChecksConclusion = {
    Succeeded: "succeeded",
    Failed: "failed",
    Skipped: "skipped",
    Canceled: "canceled",
};
export const CreateProjectProjectsChecksState = {
    Registered: "registered",
    Running: "running",
    Completed: "completed",
};
export const CreateProjectProjectsPlan = {
    Pro: "pro",
    Enterprise: "enterprise",
    Hobby: "hobby",
};
export const CreateProjectProjectsReadyState = {
    Building: "BUILDING",
    Error: "ERROR",
    Initializing: "INITIALIZING",
    Queued: "QUEUED",
    Ready: "READY",
    Canceled: "CANCELED",
};
export const CreateProjectProjectsReadySubstate = {
    Staged: "STAGED",
    Rolling: "ROLLING",
    Promoted: "PROMOTED",
};
export const CreateProjectProjectsResponse200ApplicationJSONResponseBodyType = {
    Lambdas: "LAMBDAS",
};
export const CreateProjectJobStatus = {
    Succeeded: "succeeded",
    Failed: "failed",
    Skipped: "skipped",
    Pending: "pending",
    InProgress: "in-progress",
};
export const CreateProjectProjectsResponse200ApplicationJSONResponseBodyLastAliasRequestType = {
    Promote: "promote",
    Rollback: "rollback",
};
export const CreateProjectProtectionBypassProjectsScope = {
    AutomationBypass: "automation-bypass",
};
export const CreateProjectProtectionBypassScope = {
    IntegrationAutomationBypass: "integration-automation-bypass",
};
export const CreateProjectTrustedIpsProjectsDeploymentType = {
    Production: "production",
    Preview: "preview",
    All: "all",
    ProdDeploymentUrlsAndAllPreviews: "prod_deployment_urls_and_all_previews",
};
export const CreateProjectTrustedIpsDeploymentType = {
    Production: "production",
    Preview: "preview",
    All: "all",
    ProdDeploymentUrlsAndAllPreviews: "prod_deployment_urls_and_all_previews",
};
export const TrustedIpsProtectionMode = {
    Additional: "additional",
    Exclusive: "exclusive",
};
/**
 * Whether the Vercel bot should automatically create GitHub deployments https://docs.github.com/en/rest/deployments/deployments#about-deployments NOTE: repository-dispatch events should be used instead
 */
export const CreateProjectCreateDeployments = {
    Enabled: "enabled",
    Disabled: "disabled",
};
export const CreateProjectProjectsResponse200ApplicationJSONResponseBodySecurityType = {
    Host: "host",
    Path: "path",
    Method: "method",
    Header: "header",
    Cookie: "cookie",
    Query: "query",
    IpAddress: "ip_address",
    Protocol: "protocol",
    Scheme: "scheme",
    Environment: "environment",
    Region: "region",
    InitialRequestPath: "initial_request_path",
};
export const CreateProjectProjectsResponse200ApplicationJSONResponseBodySecurityFirewallRoutesType = {
    Host: "host",
    Path: "path",
    Method: "method",
    Header: "header",
    Cookie: "cookie",
    Query: "query",
    IpAddress: "ip_address",
    Protocol: "protocol",
    Scheme: "scheme",
    Environment: "environment",
    Region: "region",
    InitialRequestPath: "initial_request_path",
};
export const CreateProjectHandle = {
    Init: "init",
    Finalize: "finalize",
};
export const CreateProjectProjectsAction = {
    Deny: "deny",
    Challenge: "challenge",
    Log: "log",
    Bypass: "bypass",
    RateLimit: "rate_limit",
    Redirect: "redirect",
};
export const CreateProjectAlgo = {
    FixedWindow: "fixed_window",
    TokenBucket: "token_bucket",
};
export const CreateProjectAction = {
    Deny: "deny",
    Challenge: "challenge",
    Log: "log",
};
/**
 * - team: `https://oidc.vercel.com/[team_slug]` - global: `https://oidc.vercel.com`
 */
export const CreateProjectIssuerMode = {
    Team: "team",
    Global: "global",
};
export const CreateProjectTier = {
    Standard: "standard",
    Advanced: "advanced",
    Critical: "critical",
};
/** @internal */
export const Target2$inboundSchema = z
    .nativeEnum(Target2);
/** @internal */
export const Target2$outboundSchema = Target2$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var Target2$;
(function (Target2$) {
    /** @deprecated use `Target2$inboundSchema` instead. */
    Target2$.inboundSchema = Target2$inboundSchema;
    /** @deprecated use `Target2$outboundSchema` instead. */
    Target2$.outboundSchema = Target2$outboundSchema;
})(Target2$ || (Target2$ = {}));
/** @internal */
export const Target1$inboundSchema = z
    .nativeEnum(Target1);
/** @internal */
export const Target1$outboundSchema = Target1$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var Target1$;
(function (Target1$) {
    /** @deprecated use `Target1$inboundSchema` instead. */
    Target1$.inboundSchema = Target1$inboundSchema;
    /** @deprecated use `Target1$outboundSchema` instead. */
    Target1$.outboundSchema = Target1$outboundSchema;
})(Target1$ || (Target1$ = {}));
/** @internal */
export const CreateProjectTarget$inboundSchema = z.union([Target1$inboundSchema, z.array(Target2$inboundSchema)]);
/** @internal */
export const CreateProjectTarget$outboundSchema = z.union([Target1$outboundSchema, z.array(Target2$outboundSchema)]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CreateProjectTarget$;
(function (CreateProjectTarget$) {
    /** @deprecated use `CreateProjectTarget$inboundSchema` instead. */
    CreateProjectTarget$.inboundSchema = CreateProjectTarget$inboundSchema;
    /** @deprecated use `CreateProjectTarget$outboundSchema` instead. */
    CreateProjectTarget$.outboundSchema = CreateProjectTarget$outboundSchema;
})(CreateProjectTarget$ || (CreateProjectTarget$ = {}));
export function createProjectTargetToJSON(createProjectTarget) {
    return JSON.stringify(CreateProjectTarget$outboundSchema.parse(createProjectTarget));
}
export function createProjectTargetFromJSON(jsonString) {
    return safeParse(jsonString, (x) => CreateProjectTarget$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CreateProjectTarget' from JSON`);
}
/** @internal */
export const CreateProjectType$inboundSchema = z.nativeEnum(CreateProjectType);
/** @internal */
export const CreateProjectType$outboundSchema = CreateProjectType$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CreateProjectType$;
(function (CreateProjectType$) {
    /** @deprecated use `CreateProjectType$inboundSchema` instead. */
    CreateProjectType$.inboundSchema = CreateProjectType$inboundSchema;
    /** @deprecated use `CreateProjectType$outboundSchema` instead. */
    CreateProjectType$.outboundSchema = CreateProjectType$outboundSchema;
})(CreateProjectType$ || (CreateProjectType$ = {}));
/** @internal */
export const EnvironmentVariables$inboundSchema = z.object({
    key: z.string(),
    target: z.union([Target1$inboundSchema, z.array(Target2$inboundSchema)]),
    gitBranch: z.string().optional(),
    type: CreateProjectType$inboundSchema.optional(),
    value: z.string(),
});
/** @internal */
export const EnvironmentVariables$outboundSchema = z.object({
    key: z.string(),
    target: z.union([Target1$outboundSchema, z.array(Target2$outboundSchema)]),
    gitBranch: z.string().optional(),
    type: CreateProjectType$outboundSchema.optional(),
    value: z.string(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var EnvironmentVariables$;
(function (EnvironmentVariables$) {
    /** @deprecated use `EnvironmentVariables$inboundSchema` instead. */
    EnvironmentVariables$.inboundSchema = EnvironmentVariables$inboundSchema;
    /** @deprecated use `EnvironmentVariables$outboundSchema` instead. */
    EnvironmentVariables$.outboundSchema = EnvironmentVariables$outboundSchema;
})(EnvironmentVariables$ || (EnvironmentVariables$ = {}));
export function environmentVariablesToJSON(environmentVariables) {
    return JSON.stringify(EnvironmentVariables$outboundSchema.parse(environmentVariables));
}
export function environmentVariablesFromJSON(jsonString) {
    return safeParse(jsonString, (x) => EnvironmentVariables$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'EnvironmentVariables' from JSON`);
}
/** @internal */
export const CreateProjectFramework$inboundSchema = z.nativeEnum(CreateProjectFramework);
/** @internal */
export const CreateProjectFramework$outboundSchema = CreateProjectFramework$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CreateProjectFramework$;
(function (CreateProjectFramework$) {
    /** @deprecated use `CreateProjectFramework$inboundSchema` instead. */
    CreateProjectFramework$.inboundSchema = CreateProjectFramework$inboundSchema;
    /** @deprecated use `CreateProjectFramework$outboundSchema` instead. */
    CreateProjectFramework$.outboundSchema = CreateProjectFramework$outboundSchema;
})(CreateProjectFramework$ || (CreateProjectFramework$ = {}));
/** @internal */
export const CreateProjectProjectsType$inboundSchema = z.nativeEnum(CreateProjectProjectsType);
/** @internal */
export const CreateProjectProjectsType$outboundSchema = CreateProjectProjectsType$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CreateProjectProjectsType$;
(function (CreateProjectProjectsType$) {
    /** @deprecated use `CreateProjectProjectsType$inboundSchema` instead. */
    CreateProjectProjectsType$.inboundSchema = CreateProjectProjectsType$inboundSchema;
    /** @deprecated use `CreateProjectProjectsType$outboundSchema` instead. */
    CreateProjectProjectsType$.outboundSchema = CreateProjectProjectsType$outboundSchema;
})(CreateProjectProjectsType$ || (CreateProjectProjectsType$ = {}));
/** @internal */
export const GitRepository$inboundSchema = z.object({
    repo: z.string(),
    type: CreateProjectProjectsType$inboundSchema,
});
/** @internal */
export const GitRepository$outboundSchema = z.object({
    repo: z.string(),
    type: CreateProjectProjectsType$outboundSchema,
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GitRepository$;
(function (GitRepository$) {
    /** @deprecated use `GitRepository$inboundSchema` instead. */
    GitRepository$.inboundSchema = GitRepository$inboundSchema;
    /** @deprecated use `GitRepository$outboundSchema` instead. */
    GitRepository$.outboundSchema = GitRepository$outboundSchema;
})(GitRepository$ || (GitRepository$ = {}));
export function gitRepositoryToJSON(gitRepository) {
    return JSON.stringify(GitRepository$outboundSchema.parse(gitRepository));
}
export function gitRepositoryFromJSON(jsonString) {
    return safeParse(jsonString, (x) => GitRepository$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'GitRepository' from JSON`);
}
/** @internal */
export const IssuerMode$inboundSchema = z
    .nativeEnum(IssuerMode);
/** @internal */
export const IssuerMode$outboundSchema = IssuerMode$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var IssuerMode$;
(function (IssuerMode$) {
    /** @deprecated use `IssuerMode$inboundSchema` instead. */
    IssuerMode$.inboundSchema = IssuerMode$inboundSchema;
    /** @deprecated use `IssuerMode$outboundSchema` instead. */
    IssuerMode$.outboundSchema = IssuerMode$outboundSchema;
})(IssuerMode$ || (IssuerMode$ = {}));
/** @internal */
export const OidcTokenConfig$inboundSchema = z.object({
    enabled: z.boolean().default(true),
    issuerMode: IssuerMode$inboundSchema.default("team"),
});
/** @internal */
export const OidcTokenConfig$outboundSchema = z.object({
    enabled: z.boolean().default(true),
    issuerMode: IssuerMode$outboundSchema.default("team"),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var OidcTokenConfig$;
(function (OidcTokenConfig$) {
    /** @deprecated use `OidcTokenConfig$inboundSchema` instead. */
    OidcTokenConfig$.inboundSchema = OidcTokenConfig$inboundSchema;
    /** @deprecated use `OidcTokenConfig$outboundSchema` instead. */
    OidcTokenConfig$.outboundSchema = OidcTokenConfig$outboundSchema;
})(OidcTokenConfig$ || (OidcTokenConfig$ = {}));
export function oidcTokenConfigToJSON(oidcTokenConfig) {
    return JSON.stringify(OidcTokenConfig$outboundSchema.parse(oidcTokenConfig));
}
export function oidcTokenConfigFromJSON(jsonString) {
    return safeParse(jsonString, (x) => OidcTokenConfig$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'OidcTokenConfig' from JSON`);
}
/** @internal */
export const FunctionDefaultMemoryType$inboundSchema = z.nativeEnum(FunctionDefaultMemoryType);
/** @internal */
export const FunctionDefaultMemoryType$outboundSchema = FunctionDefaultMemoryType$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var FunctionDefaultMemoryType$;
(function (FunctionDefaultMemoryType$) {
    /** @deprecated use `FunctionDefaultMemoryType$inboundSchema` instead. */
    FunctionDefaultMemoryType$.inboundSchema = FunctionDefaultMemoryType$inboundSchema;
    /** @deprecated use `FunctionDefaultMemoryType$outboundSchema` instead. */
    FunctionDefaultMemoryType$.outboundSchema = FunctionDefaultMemoryType$outboundSchema;
})(FunctionDefaultMemoryType$ || (FunctionDefaultMemoryType$ = {}));
/** @internal */
export const BuildMachineType$inboundSchema = z.nativeEnum(BuildMachineType);
/** @internal */
export const BuildMachineType$outboundSchema = BuildMachineType$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var BuildMachineType$;
(function (BuildMachineType$) {
    /** @deprecated use `BuildMachineType$inboundSchema` instead. */
    BuildMachineType$.inboundSchema = BuildMachineType$inboundSchema;
    /** @deprecated use `BuildMachineType$outboundSchema` instead. */
    BuildMachineType$.outboundSchema = BuildMachineType$outboundSchema;
})(BuildMachineType$ || (BuildMachineType$ = {}));
/** @internal */
export const CreateProjectResourceConfig$inboundSchema = z.object({
    fluid: z.boolean().optional(),
    functionDefaultRegions: z.array(z.string()).optional(),
    functionDefaultTimeout: z.number().optional(),
    functionDefaultMemoryType: FunctionDefaultMemoryType$inboundSchema.optional(),
    functionZeroConfigFailover: z.boolean().optional(),
    elasticConcurrencyEnabled: z.boolean().optional(),
    buildMachineType: BuildMachineType$inboundSchema.optional(),
});
/** @internal */
export const CreateProjectResourceConfig$outboundSchema = z.object({
    fluid: z.boolean().optional(),
    functionDefaultRegions: z.array(z.string()).optional(),
    functionDefaultTimeout: z.number().optional(),
    functionDefaultMemoryType: FunctionDefaultMemoryType$outboundSchema
        .optional(),
    functionZeroConfigFailover: z.boolean().optional(),
    elasticConcurrencyEnabled: z.boolean().optional(),
    buildMachineType: BuildMachineType$outboundSchema.optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CreateProjectResourceConfig$;
(function (CreateProjectResourceConfig$) {
    /** @deprecated use `CreateProjectResourceConfig$inboundSchema` instead. */
    CreateProjectResourceConfig$.inboundSchema = CreateProjectResourceConfig$inboundSchema;
    /** @deprecated use `CreateProjectResourceConfig$outboundSchema` instead. */
    CreateProjectResourceConfig$.outboundSchema = CreateProjectResourceConfig$outboundSchema;
})(CreateProjectResourceConfig$ || (CreateProjectResourceConfig$ = {}));
export function createProjectResourceConfigToJSON(createProjectResourceConfig) {
    return JSON.stringify(CreateProjectResourceConfig$outboundSchema.parse(createProjectResourceConfig));
}
export function createProjectResourceConfigFromJSON(jsonString) {
    return safeParse(jsonString, (x) => CreateProjectResourceConfig$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CreateProjectResourceConfig' from JSON`);
}
/** @internal */
export const CreateProjectRequestBody$inboundSchema = z.object({
    enablePreviewFeedback: z.nullable(z.boolean()).optional(),
    enableProductionFeedback: z.nullable(z.boolean()).optional(),
    buildCommand: z.nullable(z.string()).optional(),
    commandForIgnoringBuildStep: z.nullable(z.string()).optional(),
    devCommand: z.nullable(z.string()).optional(),
    environmentVariables: z.array(z.lazy(() => EnvironmentVariables$inboundSchema)).optional(),
    framework: CreateProjectFramework$inboundSchema.optional(),
    gitRepository: z.lazy(() => GitRepository$inboundSchema).optional(),
    installCommand: z.nullable(z.string()).optional(),
    name: z.string(),
    skipGitConnectDuringLink: z.boolean().optional(),
    outputDirectory: z.nullable(z.string()).optional(),
    publicSource: z.nullable(z.boolean()).optional(),
    rootDirectory: z.nullable(z.string()).optional(),
    serverlessFunctionRegion: z.nullable(z.string()).optional(),
    serverlessFunctionZeroConfigFailover: z.boolean().optional(),
    oidcTokenConfig: z.lazy(() => OidcTokenConfig$inboundSchema).optional(),
    enableAffectedProjectsDeployments: z.boolean().optional(),
    resourceConfig: z.lazy(() => CreateProjectResourceConfig$inboundSchema)
        .optional(),
});
/** @internal */
export const CreateProjectRequestBody$outboundSchema = z.object({
    enablePreviewFeedback: z.nullable(z.boolean()).optional(),
    enableProductionFeedback: z.nullable(z.boolean()).optional(),
    buildCommand: z.nullable(z.string()).optional(),
    commandForIgnoringBuildStep: z.nullable(z.string()).optional(),
    devCommand: z.nullable(z.string()).optional(),
    environmentVariables: z.array(z.lazy(() => EnvironmentVariables$outboundSchema)).optional(),
    framework: CreateProjectFramework$outboundSchema.optional(),
    gitRepository: z.lazy(() => GitRepository$outboundSchema).optional(),
    installCommand: z.nullable(z.string()).optional(),
    name: z.string(),
    skipGitConnectDuringLink: z.boolean().optional(),
    outputDirectory: z.nullable(z.string()).optional(),
    publicSource: z.nullable(z.boolean()).optional(),
    rootDirectory: z.nullable(z.string()).optional(),
    serverlessFunctionRegion: z.nullable(z.string()).optional(),
    serverlessFunctionZeroConfigFailover: z.boolean().optional(),
    oidcTokenConfig: z.lazy(() => OidcTokenConfig$outboundSchema).optional(),
    enableAffectedProjectsDeployments: z.boolean().optional(),
    resourceConfig: z.lazy(() => CreateProjectResourceConfig$outboundSchema)
        .optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CreateProjectRequestBody$;
(function (CreateProjectRequestBody$) {
    /** @deprecated use `CreateProjectRequestBody$inboundSchema` instead. */
    CreateProjectRequestBody$.inboundSchema = CreateProjectRequestBody$inboundSchema;
    /** @deprecated use `CreateProjectRequestBody$outboundSchema` instead. */
    CreateProjectRequestBody$.outboundSchema = CreateProjectRequestBody$outboundSchema;
})(CreateProjectRequestBody$ || (CreateProjectRequestBody$ = {}));
export function createProjectRequestBodyToJSON(createProjectRequestBody) {
    return JSON.stringify(CreateProjectRequestBody$outboundSchema.parse(createProjectRequestBody));
}
export function createProjectRequestBodyFromJSON(jsonString) {
    return safeParse(jsonString, (x) => CreateProjectRequestBody$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CreateProjectRequestBody' from JSON`);
}
/** @internal */
export const CreateProjectRequest$inboundSchema = z.object({
    teamId: z.string().optional(),
    slug: z.string().optional(),
    RequestBody: z.lazy(() => CreateProjectRequestBody$inboundSchema).optional(),
}).transform((v) => {
    return remap$(v, {
        "RequestBody": "requestBody",
    });
});
/** @internal */
export const CreateProjectRequest$outboundSchema = z.object({
    teamId: z.string().optional(),
    slug: z.string().optional(),
    requestBody: z.lazy(() => CreateProjectRequestBody$outboundSchema).optional(),
}).transform((v) => {
    return remap$(v, {
        requestBody: "RequestBody",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CreateProjectRequest$;
(function (CreateProjectRequest$) {
    /** @deprecated use `CreateProjectRequest$inboundSchema` instead. */
    CreateProjectRequest$.inboundSchema = CreateProjectRequest$inboundSchema;
    /** @deprecated use `CreateProjectRequest$outboundSchema` instead. */
    CreateProjectRequest$.outboundSchema = CreateProjectRequest$outboundSchema;
})(CreateProjectRequest$ || (CreateProjectRequest$ = {}));
export function createProjectRequestToJSON(createProjectRequest) {
    return JSON.stringify(CreateProjectRequest$outboundSchema.parse(createProjectRequest));
}
export function createProjectRequestFromJSON(jsonString) {
    return safeParse(jsonString, (x) => CreateProjectRequest$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CreateProjectRequest' from JSON`);
}
/** @internal */
export const CreateProjectAnalytics$inboundSchema = z.object({
    id: z.string(),
    canceledAt: z.nullable(z.number()).optional(),
    disabledAt: z.number(),
    enabledAt: z.number(),
    paidAt: z.number().optional(),
    sampleRatePercent: z.nullable(z.number()).optional(),
    spendLimitInDollars: z.nullable(z.number()).optional(),
});
/** @internal */
export const CreateProjectAnalytics$outboundSchema = z.object({
    id: z.string(),
    canceledAt: z.nullable(z.number()).optional(),
    disabledAt: z.number(),
    enabledAt: z.number(),
    paidAt: z.number().optional(),
    sampleRatePercent: z.nullable(z.number()).optional(),
    spendLimitInDollars: z.nullable(z.number()).optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CreateProjectAnalytics$;
(function (CreateProjectAnalytics$) {
    /** @deprecated use `CreateProjectAnalytics$inboundSchema` instead. */
    CreateProjectAnalytics$.inboundSchema = CreateProjectAnalytics$inboundSchema;
    /** @deprecated use `CreateProjectAnalytics$outboundSchema` instead. */
    CreateProjectAnalytics$.outboundSchema = CreateProjectAnalytics$outboundSchema;
})(CreateProjectAnalytics$ || (CreateProjectAnalytics$ = {}));
export function createProjectAnalyticsToJSON(createProjectAnalytics) {
    return JSON.stringify(CreateProjectAnalytics$outboundSchema.parse(createProjectAnalytics));
}
export function createProjectAnalyticsFromJSON(jsonString) {
    return safeParse(jsonString, (x) => CreateProjectAnalytics$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CreateProjectAnalytics' from JSON`);
}
/** @internal */
export const CreateProjectSpeedInsights$inboundSchema = z.object({
    id: z.string(),
    enabledAt: z.number().optional(),
    disabledAt: z.number().optional(),
    canceledAt: z.number().optional(),
    hasData: z.boolean().optional(),
    paidAt: z.number().optional(),
});
/** @internal */
export const CreateProjectSpeedInsights$outboundSchema = z.object({
    id: z.string(),
    enabledAt: z.number().optional(),
    disabledAt: z.number().optional(),
    canceledAt: z.number().optional(),
    hasData: z.boolean().optional(),
    paidAt: z.number().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CreateProjectSpeedInsights$;
(function (CreateProjectSpeedInsights$) {
    /** @deprecated use `CreateProjectSpeedInsights$inboundSchema` instead. */
    CreateProjectSpeedInsights$.inboundSchema = CreateProjectSpeedInsights$inboundSchema;
    /** @deprecated use `CreateProjectSpeedInsights$outboundSchema` instead. */
    CreateProjectSpeedInsights$.outboundSchema = CreateProjectSpeedInsights$outboundSchema;
})(CreateProjectSpeedInsights$ || (CreateProjectSpeedInsights$ = {}));
export function createProjectSpeedInsightsToJSON(createProjectSpeedInsights) {
    return JSON.stringify(CreateProjectSpeedInsights$outboundSchema.parse(createProjectSpeedInsights));
}
export function createProjectSpeedInsightsFromJSON(jsonString) {
    return safeParse(jsonString, (x) => CreateProjectSpeedInsights$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CreateProjectSpeedInsights' from JSON`);
}
/** @internal */
export const CreateProjectEnvId2$inboundSchema = z.nativeEnum(CreateProjectEnvId2);
/** @internal */
export const CreateProjectEnvId2$outboundSchema = CreateProjectEnvId2$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CreateProjectEnvId2$;
(function (CreateProjectEnvId2$) {
    /** @deprecated use `CreateProjectEnvId2$inboundSchema` instead. */
    CreateProjectEnvId2$.inboundSchema = CreateProjectEnvId2$inboundSchema;
    /** @deprecated use `CreateProjectEnvId2$outboundSchema` instead. */
    CreateProjectEnvId2$.outboundSchema = CreateProjectEnvId2$outboundSchema;
})(CreateProjectEnvId2$ || (CreateProjectEnvId2$ = {}));
/** @internal */
export const CreateProjectEnvId$inboundSchema = z.union([z.string(), CreateProjectEnvId2$inboundSchema]);
/** @internal */
export const CreateProjectEnvId$outboundSchema = z.union([z.string(), CreateProjectEnvId2$outboundSchema]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CreateProjectEnvId$;
(function (CreateProjectEnvId$) {
    /** @deprecated use `CreateProjectEnvId$inboundSchema` instead. */
    CreateProjectEnvId$.inboundSchema = CreateProjectEnvId$inboundSchema;
    /** @deprecated use `CreateProjectEnvId$outboundSchema` instead. */
    CreateProjectEnvId$.outboundSchema = CreateProjectEnvId$outboundSchema;
})(CreateProjectEnvId$ || (CreateProjectEnvId$ = {}));
export function createProjectEnvIdToJSON(createProjectEnvId) {
    return JSON.stringify(CreateProjectEnvId$outboundSchema.parse(createProjectEnvId));
}
export function createProjectEnvIdFromJSON(jsonString) {
    return safeParse(jsonString, (x) => CreateProjectEnvId$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CreateProjectEnvId' from JSON`);
}
/** @internal */
export const CreateProjectAws$inboundSchema = z.object({
    subnetIds: z.array(z.string()),
    securityGroupId: z.string(),
});
/** @internal */
export const CreateProjectAws$outboundSchema = z.object({
    subnetIds: z.array(z.string()),
    securityGroupId: z.string(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CreateProjectAws$;
(function (CreateProjectAws$) {
    /** @deprecated use `CreateProjectAws$inboundSchema` instead. */
    CreateProjectAws$.inboundSchema = CreateProjectAws$inboundSchema;
    /** @deprecated use `CreateProjectAws$outboundSchema` instead. */
    CreateProjectAws$.outboundSchema = CreateProjectAws$outboundSchema;
})(CreateProjectAws$ || (CreateProjectAws$ = {}));
export function createProjectAwsToJSON(createProjectAws) {
    return JSON.stringify(CreateProjectAws$outboundSchema.parse(createProjectAws));
}
export function createProjectAwsFromJSON(jsonString) {
    return safeParse(jsonString, (x) => CreateProjectAws$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CreateProjectAws' from JSON`);
}
/** @internal */
export const CreateProjectConnectConfigurations$inboundSchema = z.object({
    envId: z.union([z.string(), CreateProjectEnvId2$inboundSchema]),
    connectConfigurationId: z.string(),
    passive: z.boolean(),
    buildsEnabled: z.boolean(),
    aws: z.lazy(() => CreateProjectAws$inboundSchema).optional(),
    createdAt: z.number(),
    updatedAt: z.number(),
});
/** @internal */
export const CreateProjectConnectConfigurations$outboundSchema = z.object({
    envId: z.union([z.string(), CreateProjectEnvId2$outboundSchema]),
    connectConfigurationId: z.string(),
    passive: z.boolean(),
    buildsEnabled: z.boolean(),
    aws: z.lazy(() => CreateProjectAws$outboundSchema).optional(),
    createdAt: z.number(),
    updatedAt: z.number(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CreateProjectConnectConfigurations$;
(function (CreateProjectConnectConfigurations$) {
    /** @deprecated use `CreateProjectConnectConfigurations$inboundSchema` instead. */
    CreateProjectConnectConfigurations$.inboundSchema = CreateProjectConnectConfigurations$inboundSchema;
    /** @deprecated use `CreateProjectConnectConfigurations$outboundSchema` instead. */
    CreateProjectConnectConfigurations$.outboundSchema = CreateProjectConnectConfigurations$outboundSchema;
})(CreateProjectConnectConfigurations$ || (CreateProjectConnectConfigurations$ = {}));
export function createProjectConnectConfigurationsToJSON(createProjectConnectConfigurations) {
    return JSON.stringify(CreateProjectConnectConfigurations$outboundSchema.parse(createProjectConnectConfigurations));
}
export function createProjectConnectConfigurationsFromJSON(jsonString) {
    return safeParse(jsonString, (x) => CreateProjectConnectConfigurations$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CreateProjectConnectConfigurations' from JSON`);
}
/** @internal */
export const CreateProjectDefinitions$inboundSchema = z.object({
    host: z.string(),
    path: z.string(),
    schedule: z.string(),
});
/** @internal */
export const CreateProjectDefinitions$outboundSchema = z.object({
    host: z.string(),
    path: z.string(),
    schedule: z.string(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CreateProjectDefinitions$;
(function (CreateProjectDefinitions$) {
    /** @deprecated use `CreateProjectDefinitions$inboundSchema` instead. */
    CreateProjectDefinitions$.inboundSchema = CreateProjectDefinitions$inboundSchema;
    /** @deprecated use `CreateProjectDefinitions$outboundSchema` instead. */
    CreateProjectDefinitions$.outboundSchema = CreateProjectDefinitions$outboundSchema;
})(CreateProjectDefinitions$ || (CreateProjectDefinitions$ = {}));
export function createProjectDefinitionsToJSON(createProjectDefinitions) {
    return JSON.stringify(CreateProjectDefinitions$outboundSchema.parse(createProjectDefinitions));
}
export function createProjectDefinitionsFromJSON(jsonString) {
    return safeParse(jsonString, (x) => CreateProjectDefinitions$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CreateProjectDefinitions' from JSON`);
}
/** @internal */
export const CreateProjectCrons$inboundSchema = z.object({
    enabledAt: z.number(),
    disabledAt: z.nullable(z.number()),
    updatedAt: z.number(),
    deploymentId: z.nullable(z.string()),
    definitions: z.array(z.lazy(() => CreateProjectDefinitions$inboundSchema)),
});
/** @internal */
export const CreateProjectCrons$outboundSchema = z.object({
    enabledAt: z.number(),
    disabledAt: z.nullable(z.number()),
    updatedAt: z.number(),
    deploymentId: z.nullable(z.string()),
    definitions: z.array(z.lazy(() => CreateProjectDefinitions$outboundSchema)),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CreateProjectCrons$;
(function (CreateProjectCrons$) {
    /** @deprecated use `CreateProjectCrons$inboundSchema` instead. */
    CreateProjectCrons$.inboundSchema = CreateProjectCrons$inboundSchema;
    /** @deprecated use `CreateProjectCrons$outboundSchema` instead. */
    CreateProjectCrons$.outboundSchema = CreateProjectCrons$outboundSchema;
})(CreateProjectCrons$ || (CreateProjectCrons$ = {}));
export function createProjectCronsToJSON(createProjectCrons) {
    return JSON.stringify(CreateProjectCrons$outboundSchema.parse(createProjectCrons));
}
export function createProjectCronsFromJSON(jsonString) {
    return safeParse(jsonString, (x) => CreateProjectCrons$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CreateProjectCrons' from JSON`);
}
/** @internal */
export const CreateProjectDataCache$inboundSchema = z.object({
    userDisabled: z.boolean(),
    storageSizeBytes: z.nullable(z.number()).optional(),
    unlimited: z.boolean().optional(),
});
/** @internal */
export const CreateProjectDataCache$outboundSchema = z.object({
    userDisabled: z.boolean(),
    storageSizeBytes: z.nullable(z.number()).optional(),
    unlimited: z.boolean().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CreateProjectDataCache$;
(function (CreateProjectDataCache$) {
    /** @deprecated use `CreateProjectDataCache$inboundSchema` instead. */
    CreateProjectDataCache$.inboundSchema = CreateProjectDataCache$inboundSchema;
    /** @deprecated use `CreateProjectDataCache$outboundSchema` instead. */
    CreateProjectDataCache$.outboundSchema = CreateProjectDataCache$outboundSchema;
})(CreateProjectDataCache$ || (CreateProjectDataCache$ = {}));
export function createProjectDataCacheToJSON(createProjectDataCache) {
    return JSON.stringify(CreateProjectDataCache$outboundSchema.parse(createProjectDataCache));
}
export function createProjectDataCacheFromJSON(jsonString) {
    return safeParse(jsonString, (x) => CreateProjectDataCache$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CreateProjectDataCache' from JSON`);
}
/** @internal */
export const CreateProjectDeploymentExpiration$inboundSchema = z.object({
    expirationDays: z.number().optional(),
    expirationDaysProduction: z.number().optional(),
    expirationDaysCanceled: z.number().optional(),
    expirationDaysErrored: z.number().optional(),
    deploymentsToKeep: z.number().optional(),
});
/** @internal */
export const CreateProjectDeploymentExpiration$outboundSchema = z.object({
    expirationDays: z.number().optional(),
    expirationDaysProduction: z.number().optional(),
    expirationDaysCanceled: z.number().optional(),
    expirationDaysErrored: z.number().optional(),
    deploymentsToKeep: z.number().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CreateProjectDeploymentExpiration$;
(function (CreateProjectDeploymentExpiration$) {
    /** @deprecated use `CreateProjectDeploymentExpiration$inboundSchema` instead. */
    CreateProjectDeploymentExpiration$.inboundSchema = CreateProjectDeploymentExpiration$inboundSchema;
    /** @deprecated use `CreateProjectDeploymentExpiration$outboundSchema` instead. */
    CreateProjectDeploymentExpiration$.outboundSchema = CreateProjectDeploymentExpiration$outboundSchema;
})(CreateProjectDeploymentExpiration$ || (CreateProjectDeploymentExpiration$ = {}));
export function createProjectDeploymentExpirationToJSON(createProjectDeploymentExpiration) {
    return JSON.stringify(CreateProjectDeploymentExpiration$outboundSchema.parse(createProjectDeploymentExpiration));
}
export function createProjectDeploymentExpirationFromJSON(jsonString) {
    return safeParse(jsonString, (x) => CreateProjectDeploymentExpiration$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CreateProjectDeploymentExpiration' from JSON`);
}
/** @internal */
export const CreateProjectTarget2$inboundSchema = z.nativeEnum(CreateProjectTarget2);
/** @internal */
export const CreateProjectTarget2$outboundSchema = CreateProjectTarget2$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CreateProjectTarget2$;
(function (CreateProjectTarget2$) {
    /** @deprecated use `CreateProjectTarget2$inboundSchema` instead. */
    CreateProjectTarget2$.inboundSchema = CreateProjectTarget2$inboundSchema;
    /** @deprecated use `CreateProjectTarget2$outboundSchema` instead. */
    CreateProjectTarget2$.outboundSchema = CreateProjectTarget2$outboundSchema;
})(CreateProjectTarget2$ || (CreateProjectTarget2$ = {}));
/** @internal */
export const CreateProjectTarget1$inboundSchema = z.nativeEnum(CreateProjectTarget1);
/** @internal */
export const CreateProjectTarget1$outboundSchema = CreateProjectTarget1$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CreateProjectTarget1$;
(function (CreateProjectTarget1$) {
    /** @deprecated use `CreateProjectTarget1$inboundSchema` instead. */
    CreateProjectTarget1$.inboundSchema = CreateProjectTarget1$inboundSchema;
    /** @deprecated use `CreateProjectTarget1$outboundSchema` instead. */
    CreateProjectTarget1$.outboundSchema = CreateProjectTarget1$outboundSchema;
})(CreateProjectTarget1$ || (CreateProjectTarget1$ = {}));
/** @internal */
export const CreateProjectProjectsTarget$inboundSchema = z.union([
    z.array(CreateProjectTarget1$inboundSchema),
    CreateProjectTarget2$inboundSchema,
]);
/** @internal */
export const CreateProjectProjectsTarget$outboundSchema = z.union([
    z.array(CreateProjectTarget1$outboundSchema),
    CreateProjectTarget2$outboundSchema,
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CreateProjectProjectsTarget$;
(function (CreateProjectProjectsTarget$) {
    /** @deprecated use `CreateProjectProjectsTarget$inboundSchema` instead. */
    CreateProjectProjectsTarget$.inboundSchema = CreateProjectProjectsTarget$inboundSchema;
    /** @deprecated use `CreateProjectProjectsTarget$outboundSchema` instead. */
    CreateProjectProjectsTarget$.outboundSchema = CreateProjectProjectsTarget$outboundSchema;
})(CreateProjectProjectsTarget$ || (CreateProjectProjectsTarget$ = {}));
export function createProjectProjectsTargetToJSON(createProjectProjectsTarget) {
    return JSON.stringify(CreateProjectProjectsTarget$outboundSchema.parse(createProjectProjectsTarget));
}
export function createProjectProjectsTargetFromJSON(jsonString) {
    return safeParse(jsonString, (x) => CreateProjectProjectsTarget$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CreateProjectProjectsTarget' from JSON`);
}
/** @internal */
export const CreateProjectProjectsResponseType$inboundSchema = z.nativeEnum(CreateProjectProjectsResponseType);
/** @internal */
export const CreateProjectProjectsResponseType$outboundSchema = CreateProjectProjectsResponseType$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CreateProjectProjectsResponseType$;
(function (CreateProjectProjectsResponseType$) {
    /** @deprecated use `CreateProjectProjectsResponseType$inboundSchema` instead. */
    CreateProjectProjectsResponseType$.inboundSchema = CreateProjectProjectsResponseType$inboundSchema;
    /** @deprecated use `CreateProjectProjectsResponseType$outboundSchema` instead. */
    CreateProjectProjectsResponseType$.outboundSchema = CreateProjectProjectsResponseType$outboundSchema;
})(CreateProjectProjectsResponseType$ || (CreateProjectProjectsResponseType$ = {}));
/** @internal */
export const CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv15Type$inboundSchema = z.nativeEnum(CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv15Type);
/** @internal */
export const CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv15Type$outboundSchema = CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv15Type$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv15Type$;
(function (CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv15Type$) {
    /** @deprecated use `CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv15Type$inboundSchema` instead. */
    CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv15Type$.inboundSchema = CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv15Type$inboundSchema;
    /** @deprecated use `CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv15Type$outboundSchema` instead. */
    CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv15Type$.outboundSchema = CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv15Type$outboundSchema;
})(CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv15Type$ || (CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv15Type$ = {}));
/** @internal */
export const CreateProjectContentHint15$inboundSchema = z.object({
    type: CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv15Type$inboundSchema,
    projectId: z.string(),
});
/** @internal */
export const CreateProjectContentHint15$outboundSchema = z.object({
    type: CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv15Type$outboundSchema,
    projectId: z.string(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CreateProjectContentHint15$;
(function (CreateProjectContentHint15$) {
    /** @deprecated use `CreateProjectContentHint15$inboundSchema` instead. */
    CreateProjectContentHint15$.inboundSchema = CreateProjectContentHint15$inboundSchema;
    /** @deprecated use `CreateProjectContentHint15$outboundSchema` instead. */
    CreateProjectContentHint15$.outboundSchema = CreateProjectContentHint15$outboundSchema;
})(CreateProjectContentHint15$ || (CreateProjectContentHint15$ = {}));
export function createProjectContentHint15ToJSON(createProjectContentHint15) {
    return JSON.stringify(CreateProjectContentHint15$outboundSchema.parse(createProjectContentHint15));
}
export function createProjectContentHint15FromJSON(jsonString) {
    return safeParse(jsonString, (x) => CreateProjectContentHint15$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CreateProjectContentHint15' from JSON`);
}
/** @internal */
export const CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv14Type$inboundSchema = z.nativeEnum(CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv14Type);
/** @internal */
export const CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv14Type$outboundSchema = CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv14Type$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv14Type$;
(function (CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv14Type$) {
    /** @deprecated use `CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv14Type$inboundSchema` instead. */
    CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv14Type$.inboundSchema = CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv14Type$inboundSchema;
    /** @deprecated use `CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv14Type$outboundSchema` instead. */
    CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv14Type$.outboundSchema = CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv14Type$outboundSchema;
})(CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv14Type$ || (CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv14Type$ = {}));
/** @internal */
export const CreateProjectContentHint14$inboundSchema = z.object({
    type: CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv14Type$inboundSchema,
    storeId: z.string(),
    integrationId: z.string(),
    integrationProductId: z.string(),
    integrationConfigurationId: z.string(),
});
/** @internal */
export const CreateProjectContentHint14$outboundSchema = z.object({
    type: CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv14Type$outboundSchema,
    storeId: z.string(),
    integrationId: z.string(),
    integrationProductId: z.string(),
    integrationConfigurationId: z.string(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CreateProjectContentHint14$;
(function (CreateProjectContentHint14$) {
    /** @deprecated use `CreateProjectContentHint14$inboundSchema` instead. */
    CreateProjectContentHint14$.inboundSchema = CreateProjectContentHint14$inboundSchema;
    /** @deprecated use `CreateProjectContentHint14$outboundSchema` instead. */
    CreateProjectContentHint14$.outboundSchema = CreateProjectContentHint14$outboundSchema;
})(CreateProjectContentHint14$ || (CreateProjectContentHint14$ = {}));
export function createProjectContentHint14ToJSON(createProjectContentHint14) {
    return JSON.stringify(CreateProjectContentHint14$outboundSchema.parse(createProjectContentHint14));
}
export function createProjectContentHint14FromJSON(jsonString) {
    return safeParse(jsonString, (x) => CreateProjectContentHint14$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CreateProjectContentHint14' from JSON`);
}
/** @internal */
export const CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv13Type$inboundSchema = z.nativeEnum(CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv13Type);
/** @internal */
export const CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv13Type$outboundSchema = CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv13Type$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv13Type$;
(function (CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv13Type$) {
    /** @deprecated use `CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv13Type$inboundSchema` instead. */
    CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv13Type$.inboundSchema = CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv13Type$inboundSchema;
    /** @deprecated use `CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv13Type$outboundSchema` instead. */
    CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv13Type$.outboundSchema = CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv13Type$outboundSchema;
})(CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv13Type$ || (CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv13Type$ = {}));
/** @internal */
export const CreateProjectContentHint13$inboundSchema = z.object({
    type: CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv13Type$inboundSchema,
    storeId: z.string(),
});
/** @internal */
export const CreateProjectContentHint13$outboundSchema = z.object({
    type: CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv13Type$outboundSchema,
    storeId: z.string(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CreateProjectContentHint13$;
(function (CreateProjectContentHint13$) {
    /** @deprecated use `CreateProjectContentHint13$inboundSchema` instead. */
    CreateProjectContentHint13$.inboundSchema = CreateProjectContentHint13$inboundSchema;
    /** @deprecated use `CreateProjectContentHint13$outboundSchema` instead. */
    CreateProjectContentHint13$.outboundSchema = CreateProjectContentHint13$outboundSchema;
})(CreateProjectContentHint13$ || (CreateProjectContentHint13$ = {}));
export function createProjectContentHint13ToJSON(createProjectContentHint13) {
    return JSON.stringify(CreateProjectContentHint13$outboundSchema.parse(createProjectContentHint13));
}
export function createProjectContentHint13FromJSON(jsonString) {
    return safeParse(jsonString, (x) => CreateProjectContentHint13$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CreateProjectContentHint13' from JSON`);
}
/** @internal */
export const CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv12Type$inboundSchema = z.nativeEnum(CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv12Type);
/** @internal */
export const CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv12Type$outboundSchema = CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv12Type$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv12Type$;
(function (CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv12Type$) {
    /** @deprecated use `CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv12Type$inboundSchema` instead. */
    CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv12Type$.inboundSchema = CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv12Type$inboundSchema;
    /** @deprecated use `CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv12Type$outboundSchema` instead. */
    CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv12Type$.outboundSchema = CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv12Type$outboundSchema;
})(CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv12Type$ || (CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv12Type$ = {}));
/** @internal */
export const CreateProjectContentHint12$inboundSchema = z.object({
    type: CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv12Type$inboundSchema,
    storeId: z.string(),
});
/** @internal */
export const CreateProjectContentHint12$outboundSchema = z.object({
    type: CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv12Type$outboundSchema,
    storeId: z.string(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CreateProjectContentHint12$;
(function (CreateProjectContentHint12$) {
    /** @deprecated use `CreateProjectContentHint12$inboundSchema` instead. */
    CreateProjectContentHint12$.inboundSchema = CreateProjectContentHint12$inboundSchema;
    /** @deprecated use `CreateProjectContentHint12$outboundSchema` instead. */
    CreateProjectContentHint12$.outboundSchema = CreateProjectContentHint12$outboundSchema;
})(CreateProjectContentHint12$ || (CreateProjectContentHint12$ = {}));
export function createProjectContentHint12ToJSON(createProjectContentHint12) {
    return JSON.stringify(CreateProjectContentHint12$outboundSchema.parse(createProjectContentHint12));
}
export function createProjectContentHint12FromJSON(jsonString) {
    return safeParse(jsonString, (x) => CreateProjectContentHint12$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CreateProjectContentHint12' from JSON`);
}
/** @internal */
export const CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv11Type$inboundSchema = z.nativeEnum(CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv11Type);
/** @internal */
export const CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv11Type$outboundSchema = CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv11Type$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv11Type$;
(function (CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv11Type$) {
    /** @deprecated use `CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv11Type$inboundSchema` instead. */
    CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv11Type$.inboundSchema = CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv11Type$inboundSchema;
    /** @deprecated use `CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv11Type$outboundSchema` instead. */
    CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv11Type$.outboundSchema = CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv11Type$outboundSchema;
})(CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv11Type$ || (CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv11Type$ = {}));
/** @internal */
export const CreateProjectContentHint11$inboundSchema = z.object({
    type: CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv11Type$inboundSchema,
    storeId: z.string(),
});
/** @internal */
export const CreateProjectContentHint11$outboundSchema = z.object({
    type: CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv11Type$outboundSchema,
    storeId: z.string(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CreateProjectContentHint11$;
(function (CreateProjectContentHint11$) {
    /** @deprecated use `CreateProjectContentHint11$inboundSchema` instead. */
    CreateProjectContentHint11$.inboundSchema = CreateProjectContentHint11$inboundSchema;
    /** @deprecated use `CreateProjectContentHint11$outboundSchema` instead. */
    CreateProjectContentHint11$.outboundSchema = CreateProjectContentHint11$outboundSchema;
})(CreateProjectContentHint11$ || (CreateProjectContentHint11$ = {}));
export function createProjectContentHint11ToJSON(createProjectContentHint11) {
    return JSON.stringify(CreateProjectContentHint11$outboundSchema.parse(createProjectContentHint11));
}
export function createProjectContentHint11FromJSON(jsonString) {
    return safeParse(jsonString, (x) => CreateProjectContentHint11$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CreateProjectContentHint11' from JSON`);
}
/** @internal */
export const CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv10Type$inboundSchema = z.nativeEnum(CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv10Type);
/** @internal */
export const CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv10Type$outboundSchema = CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv10Type$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv10Type$;
(function (CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv10Type$) {
    /** @deprecated use `CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv10Type$inboundSchema` instead. */
    CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv10Type$.inboundSchema = CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv10Type$inboundSchema;
    /** @deprecated use `CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv10Type$outboundSchema` instead. */
    CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv10Type$.outboundSchema = CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv10Type$outboundSchema;
})(CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv10Type$ || (CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv10Type$ = {}));
/** @internal */
export const CreateProjectContentHint10$inboundSchema = z.object({
    type: CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv10Type$inboundSchema,
    storeId: z.string(),
});
/** @internal */
export const CreateProjectContentHint10$outboundSchema = z.object({
    type: CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv10Type$outboundSchema,
    storeId: z.string(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CreateProjectContentHint10$;
(function (CreateProjectContentHint10$) {
    /** @deprecated use `CreateProjectContentHint10$inboundSchema` instead. */
    CreateProjectContentHint10$.inboundSchema = CreateProjectContentHint10$inboundSchema;
    /** @deprecated use `CreateProjectContentHint10$outboundSchema` instead. */
    CreateProjectContentHint10$.outboundSchema = CreateProjectContentHint10$outboundSchema;
})(CreateProjectContentHint10$ || (CreateProjectContentHint10$ = {}));
export function createProjectContentHint10ToJSON(createProjectContentHint10) {
    return JSON.stringify(CreateProjectContentHint10$outboundSchema.parse(createProjectContentHint10));
}
export function createProjectContentHint10FromJSON(jsonString) {
    return safeParse(jsonString, (x) => CreateProjectContentHint10$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CreateProjectContentHint10' from JSON`);
}
/** @internal */
export const CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv9Type$inboundSchema = z.nativeEnum(CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv9Type);
/** @internal */
export const CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv9Type$outboundSchema = CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv9Type$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv9Type$;
(function (CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv9Type$) {
    /** @deprecated use `CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv9Type$inboundSchema` instead. */
    CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv9Type$.inboundSchema = CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv9Type$inboundSchema;
    /** @deprecated use `CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv9Type$outboundSchema` instead. */
    CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv9Type$.outboundSchema = CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv9Type$outboundSchema;
})(CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv9Type$ || (CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv9Type$ = {}));
/** @internal */
export const CreateProjectContentHint9$inboundSchema = z.object({
    type: CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv9Type$inboundSchema,
    storeId: z.string(),
});
/** @internal */
export const CreateProjectContentHint9$outboundSchema = z.object({
    type: CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv9Type$outboundSchema,
    storeId: z.string(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CreateProjectContentHint9$;
(function (CreateProjectContentHint9$) {
    /** @deprecated use `CreateProjectContentHint9$inboundSchema` instead. */
    CreateProjectContentHint9$.inboundSchema = CreateProjectContentHint9$inboundSchema;
    /** @deprecated use `CreateProjectContentHint9$outboundSchema` instead. */
    CreateProjectContentHint9$.outboundSchema = CreateProjectContentHint9$outboundSchema;
})(CreateProjectContentHint9$ || (CreateProjectContentHint9$ = {}));
export function createProjectContentHint9ToJSON(createProjectContentHint9) {
    return JSON.stringify(CreateProjectContentHint9$outboundSchema.parse(createProjectContentHint9));
}
export function createProjectContentHint9FromJSON(jsonString) {
    return safeParse(jsonString, (x) => CreateProjectContentHint9$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CreateProjectContentHint9' from JSON`);
}
/** @internal */
export const CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv8Type$inboundSchema = z.nativeEnum(CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv8Type);
/** @internal */
export const CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv8Type$outboundSchema = CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv8Type$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv8Type$;
(function (CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv8Type$) {
    /** @deprecated use `CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv8Type$inboundSchema` instead. */
    CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv8Type$.inboundSchema = CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv8Type$inboundSchema;
    /** @deprecated use `CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv8Type$outboundSchema` instead. */
    CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv8Type$.outboundSchema = CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv8Type$outboundSchema;
})(CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv8Type$ || (CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv8Type$ = {}));
/** @internal */
export const CreateProjectContentHint8$inboundSchema = z.object({
    type: CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv8Type$inboundSchema,
    storeId: z.string(),
});
/** @internal */
export const CreateProjectContentHint8$outboundSchema = z.object({
    type: CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv8Type$outboundSchema,
    storeId: z.string(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CreateProjectContentHint8$;
(function (CreateProjectContentHint8$) {
    /** @deprecated use `CreateProjectContentHint8$inboundSchema` instead. */
    CreateProjectContentHint8$.inboundSchema = CreateProjectContentHint8$inboundSchema;
    /** @deprecated use `CreateProjectContentHint8$outboundSchema` instead. */
    CreateProjectContentHint8$.outboundSchema = CreateProjectContentHint8$outboundSchema;
})(CreateProjectContentHint8$ || (CreateProjectContentHint8$ = {}));
export function createProjectContentHint8ToJSON(createProjectContentHint8) {
    return JSON.stringify(CreateProjectContentHint8$outboundSchema.parse(createProjectContentHint8));
}
export function createProjectContentHint8FromJSON(jsonString) {
    return safeParse(jsonString, (x) => CreateProjectContentHint8$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CreateProjectContentHint8' from JSON`);
}
/** @internal */
export const CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnvType$inboundSchema = z.nativeEnum(CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnvType);
/** @internal */
export const CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnvType$outboundSchema = CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnvType$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnvType$;
(function (CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnvType$) {
    /** @deprecated use `CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnvType$inboundSchema` instead. */
    CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnvType$.inboundSchema = CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnvType$inboundSchema;
    /** @deprecated use `CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnvType$outboundSchema` instead. */
    CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnvType$.outboundSchema = CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnvType$outboundSchema;
})(CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnvType$ || (CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnvType$ = {}));
/** @internal */
export const CreateProjectContentHint7$inboundSchema = z.object({
    type: CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnvType$inboundSchema,
    storeId: z.string(),
});
/** @internal */
export const CreateProjectContentHint7$outboundSchema = z.object({
    type: CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnvType$outboundSchema,
    storeId: z.string(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CreateProjectContentHint7$;
(function (CreateProjectContentHint7$) {
    /** @deprecated use `CreateProjectContentHint7$inboundSchema` instead. */
    CreateProjectContentHint7$.inboundSchema = CreateProjectContentHint7$inboundSchema;
    /** @deprecated use `CreateProjectContentHint7$outboundSchema` instead. */
    CreateProjectContentHint7$.outboundSchema = CreateProjectContentHint7$outboundSchema;
})(CreateProjectContentHint7$ || (CreateProjectContentHint7$ = {}));
export function createProjectContentHint7ToJSON(createProjectContentHint7) {
    return JSON.stringify(CreateProjectContentHint7$outboundSchema.parse(createProjectContentHint7));
}
export function createProjectContentHint7FromJSON(jsonString) {
    return safeParse(jsonString, (x) => CreateProjectContentHint7$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CreateProjectContentHint7' from JSON`);
}
/** @internal */
export const CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyType$inboundSchema = z.nativeEnum(CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyType);
/** @internal */
export const CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyType$outboundSchema = CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyType$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyType$;
(function (CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyType$) {
    /** @deprecated use `CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyType$inboundSchema` instead. */
    CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyType$.inboundSchema = CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyType$inboundSchema;
    /** @deprecated use `CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyType$outboundSchema` instead. */
    CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyType$.outboundSchema = CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyType$outboundSchema;
})(CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyType$ || (CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyType$ = {}));
/** @internal */
export const CreateProjectContentHint6$inboundSchema = z.object({
    type: CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyType$inboundSchema,
    storeId: z.string(),
});
/** @internal */
export const CreateProjectContentHint6$outboundSchema = z.object({
    type: CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyType$outboundSchema,
    storeId: z.string(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CreateProjectContentHint6$;
(function (CreateProjectContentHint6$) {
    /** @deprecated use `CreateProjectContentHint6$inboundSchema` instead. */
    CreateProjectContentHint6$.inboundSchema = CreateProjectContentHint6$inboundSchema;
    /** @deprecated use `CreateProjectContentHint6$outboundSchema` instead. */
    CreateProjectContentHint6$.outboundSchema = CreateProjectContentHint6$outboundSchema;
})(CreateProjectContentHint6$ || (CreateProjectContentHint6$ = {}));
export function createProjectContentHint6ToJSON(createProjectContentHint6) {
    return JSON.stringify(CreateProjectContentHint6$outboundSchema.parse(createProjectContentHint6));
}
export function createProjectContentHint6FromJSON(jsonString) {
    return safeParse(jsonString, (x) => CreateProjectContentHint6$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CreateProjectContentHint6' from JSON`);
}
/** @internal */
export const CreateProjectContentHintProjectsResponse200ApplicationJSONType$inboundSchema = z.nativeEnum(CreateProjectContentHintProjectsResponse200ApplicationJSONType);
/** @internal */
export const CreateProjectContentHintProjectsResponse200ApplicationJSONType$outboundSchema = CreateProjectContentHintProjectsResponse200ApplicationJSONType$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CreateProjectContentHintProjectsResponse200ApplicationJSONType$;
(function (CreateProjectContentHintProjectsResponse200ApplicationJSONType$) {
    /** @deprecated use `CreateProjectContentHintProjectsResponse200ApplicationJSONType$inboundSchema` instead. */
    CreateProjectContentHintProjectsResponse200ApplicationJSONType$.inboundSchema = CreateProjectContentHintProjectsResponse200ApplicationJSONType$inboundSchema;
    /** @deprecated use `CreateProjectContentHintProjectsResponse200ApplicationJSONType$outboundSchema` instead. */
    CreateProjectContentHintProjectsResponse200ApplicationJSONType$.outboundSchema = CreateProjectContentHintProjectsResponse200ApplicationJSONType$outboundSchema;
})(CreateProjectContentHintProjectsResponse200ApplicationJSONType$ || (CreateProjectContentHintProjectsResponse200ApplicationJSONType$ = {}));
/** @internal */
export const CreateProjectContentHint5$inboundSchema = z.object({
    type: CreateProjectContentHintProjectsResponse200ApplicationJSONType$inboundSchema,
    storeId: z.string(),
});
/** @internal */
export const CreateProjectContentHint5$outboundSchema = z.object({
    type: CreateProjectContentHintProjectsResponse200ApplicationJSONType$outboundSchema,
    storeId: z.string(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CreateProjectContentHint5$;
(function (CreateProjectContentHint5$) {
    /** @deprecated use `CreateProjectContentHint5$inboundSchema` instead. */
    CreateProjectContentHint5$.inboundSchema = CreateProjectContentHint5$inboundSchema;
    /** @deprecated use `CreateProjectContentHint5$outboundSchema` instead. */
    CreateProjectContentHint5$.outboundSchema = CreateProjectContentHint5$outboundSchema;
})(CreateProjectContentHint5$ || (CreateProjectContentHint5$ = {}));
export function createProjectContentHint5ToJSON(createProjectContentHint5) {
    return JSON.stringify(CreateProjectContentHint5$outboundSchema.parse(createProjectContentHint5));
}
export function createProjectContentHint5FromJSON(jsonString) {
    return safeParse(jsonString, (x) => CreateProjectContentHint5$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CreateProjectContentHint5' from JSON`);
}
/** @internal */
export const CreateProjectContentHintProjectsResponse200Type$inboundSchema = z
    .nativeEnum(CreateProjectContentHintProjectsResponse200Type);
/** @internal */
export const CreateProjectContentHintProjectsResponse200Type$outboundSchema = CreateProjectContentHintProjectsResponse200Type$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CreateProjectContentHintProjectsResponse200Type$;
(function (CreateProjectContentHintProjectsResponse200Type$) {
    /** @deprecated use `CreateProjectContentHintProjectsResponse200Type$inboundSchema` instead. */
    CreateProjectContentHintProjectsResponse200Type$.inboundSchema = CreateProjectContentHintProjectsResponse200Type$inboundSchema;
    /** @deprecated use `CreateProjectContentHintProjectsResponse200Type$outboundSchema` instead. */
    CreateProjectContentHintProjectsResponse200Type$.outboundSchema = CreateProjectContentHintProjectsResponse200Type$outboundSchema;
})(CreateProjectContentHintProjectsResponse200Type$ || (CreateProjectContentHintProjectsResponse200Type$ = {}));
/** @internal */
export const CreateProjectContentHint4$inboundSchema = z.object({
    type: CreateProjectContentHintProjectsResponse200Type$inboundSchema,
    storeId: z.string(),
});
/** @internal */
export const CreateProjectContentHint4$outboundSchema = z.object({
    type: CreateProjectContentHintProjectsResponse200Type$outboundSchema,
    storeId: z.string(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CreateProjectContentHint4$;
(function (CreateProjectContentHint4$) {
    /** @deprecated use `CreateProjectContentHint4$inboundSchema` instead. */
    CreateProjectContentHint4$.inboundSchema = CreateProjectContentHint4$inboundSchema;
    /** @deprecated use `CreateProjectContentHint4$outboundSchema` instead. */
    CreateProjectContentHint4$.outboundSchema = CreateProjectContentHint4$outboundSchema;
})(CreateProjectContentHint4$ || (CreateProjectContentHint4$ = {}));
export function createProjectContentHint4ToJSON(createProjectContentHint4) {
    return JSON.stringify(CreateProjectContentHint4$outboundSchema.parse(createProjectContentHint4));
}
export function createProjectContentHint4FromJSON(jsonString) {
    return safeParse(jsonString, (x) => CreateProjectContentHint4$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CreateProjectContentHint4' from JSON`);
}
/** @internal */
export const CreateProjectContentHintProjectsResponseType$inboundSchema = z
    .nativeEnum(CreateProjectContentHintProjectsResponseType);
/** @internal */
export const CreateProjectContentHintProjectsResponseType$outboundSchema = CreateProjectContentHintProjectsResponseType$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CreateProjectContentHintProjectsResponseType$;
(function (CreateProjectContentHintProjectsResponseType$) {
    /** @deprecated use `CreateProjectContentHintProjectsResponseType$inboundSchema` instead. */
    CreateProjectContentHintProjectsResponseType$.inboundSchema = CreateProjectContentHintProjectsResponseType$inboundSchema;
    /** @deprecated use `CreateProjectContentHintProjectsResponseType$outboundSchema` instead. */
    CreateProjectContentHintProjectsResponseType$.outboundSchema = CreateProjectContentHintProjectsResponseType$outboundSchema;
})(CreateProjectContentHintProjectsResponseType$ || (CreateProjectContentHintProjectsResponseType$ = {}));
/** @internal */
export const CreateProjectContentHint3$inboundSchema = z.object({
    type: CreateProjectContentHintProjectsResponseType$inboundSchema,
    storeId: z.string(),
});
/** @internal */
export const CreateProjectContentHint3$outboundSchema = z.object({
    type: CreateProjectContentHintProjectsResponseType$outboundSchema,
    storeId: z.string(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CreateProjectContentHint3$;
(function (CreateProjectContentHint3$) {
    /** @deprecated use `CreateProjectContentHint3$inboundSchema` instead. */
    CreateProjectContentHint3$.inboundSchema = CreateProjectContentHint3$inboundSchema;
    /** @deprecated use `CreateProjectContentHint3$outboundSchema` instead. */
    CreateProjectContentHint3$.outboundSchema = CreateProjectContentHint3$outboundSchema;
})(CreateProjectContentHint3$ || (CreateProjectContentHint3$ = {}));
export function createProjectContentHint3ToJSON(createProjectContentHint3) {
    return JSON.stringify(CreateProjectContentHint3$outboundSchema.parse(createProjectContentHint3));
}
export function createProjectContentHint3FromJSON(jsonString) {
    return safeParse(jsonString, (x) => CreateProjectContentHint3$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CreateProjectContentHint3' from JSON`);
}
/** @internal */
export const CreateProjectContentHintProjectsType$inboundSchema = z.nativeEnum(CreateProjectContentHintProjectsType);
/** @internal */
export const CreateProjectContentHintProjectsType$outboundSchema = CreateProjectContentHintProjectsType$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CreateProjectContentHintProjectsType$;
(function (CreateProjectContentHintProjectsType$) {
    /** @deprecated use `CreateProjectContentHintProjectsType$inboundSchema` instead. */
    CreateProjectContentHintProjectsType$.inboundSchema = CreateProjectContentHintProjectsType$inboundSchema;
    /** @deprecated use `CreateProjectContentHintProjectsType$outboundSchema` instead. */
    CreateProjectContentHintProjectsType$.outboundSchema = CreateProjectContentHintProjectsType$outboundSchema;
})(CreateProjectContentHintProjectsType$ || (CreateProjectContentHintProjectsType$ = {}));
/** @internal */
export const CreateProjectContentHint2$inboundSchema = z.object({
    type: CreateProjectContentHintProjectsType$inboundSchema,
    storeId: z.string(),
});
/** @internal */
export const CreateProjectContentHint2$outboundSchema = z.object({
    type: CreateProjectContentHintProjectsType$outboundSchema,
    storeId: z.string(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CreateProjectContentHint2$;
(function (CreateProjectContentHint2$) {
    /** @deprecated use `CreateProjectContentHint2$inboundSchema` instead. */
    CreateProjectContentHint2$.inboundSchema = CreateProjectContentHint2$inboundSchema;
    /** @deprecated use `CreateProjectContentHint2$outboundSchema` instead. */
    CreateProjectContentHint2$.outboundSchema = CreateProjectContentHint2$outboundSchema;
})(CreateProjectContentHint2$ || (CreateProjectContentHint2$ = {}));
export function createProjectContentHint2ToJSON(createProjectContentHint2) {
    return JSON.stringify(CreateProjectContentHint2$outboundSchema.parse(createProjectContentHint2));
}
export function createProjectContentHint2FromJSON(jsonString) {
    return safeParse(jsonString, (x) => CreateProjectContentHint2$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CreateProjectContentHint2' from JSON`);
}
/** @internal */
export const CreateProjectContentHintType$inboundSchema = z.nativeEnum(CreateProjectContentHintType);
/** @internal */
export const CreateProjectContentHintType$outboundSchema = CreateProjectContentHintType$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CreateProjectContentHintType$;
(function (CreateProjectContentHintType$) {
    /** @deprecated use `CreateProjectContentHintType$inboundSchema` instead. */
    CreateProjectContentHintType$.inboundSchema = CreateProjectContentHintType$inboundSchema;
    /** @deprecated use `CreateProjectContentHintType$outboundSchema` instead. */
    CreateProjectContentHintType$.outboundSchema = CreateProjectContentHintType$outboundSchema;
})(CreateProjectContentHintType$ || (CreateProjectContentHintType$ = {}));
/** @internal */
export const CreateProjectContentHint1$inboundSchema = z.object({
    type: CreateProjectContentHintType$inboundSchema,
    storeId: z.string(),
});
/** @internal */
export const CreateProjectContentHint1$outboundSchema = z.object({
    type: CreateProjectContentHintType$outboundSchema,
    storeId: z.string(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CreateProjectContentHint1$;
(function (CreateProjectContentHint1$) {
    /** @deprecated use `CreateProjectContentHint1$inboundSchema` instead. */
    CreateProjectContentHint1$.inboundSchema = CreateProjectContentHint1$inboundSchema;
    /** @deprecated use `CreateProjectContentHint1$outboundSchema` instead. */
    CreateProjectContentHint1$.outboundSchema = CreateProjectContentHint1$outboundSchema;
})(CreateProjectContentHint1$ || (CreateProjectContentHint1$ = {}));
export function createProjectContentHint1ToJSON(createProjectContentHint1) {
    return JSON.stringify(CreateProjectContentHint1$outboundSchema.parse(createProjectContentHint1));
}
export function createProjectContentHint1FromJSON(jsonString) {
    return safeParse(jsonString, (x) => CreateProjectContentHint1$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CreateProjectContentHint1' from JSON`);
}
/** @internal */
export const CreateProjectContentHint$inboundSchema = z.union([
    z.lazy(() => CreateProjectContentHint1$inboundSchema),
    z.lazy(() => CreateProjectContentHint2$inboundSchema),
    z.lazy(() => CreateProjectContentHint3$inboundSchema),
    z.lazy(() => CreateProjectContentHint4$inboundSchema),
    z.lazy(() => CreateProjectContentHint5$inboundSchema),
    z.lazy(() => CreateProjectContentHint6$inboundSchema),
    z.lazy(() => CreateProjectContentHint7$inboundSchema),
    z.lazy(() => CreateProjectContentHint8$inboundSchema),
    z.lazy(() => CreateProjectContentHint9$inboundSchema),
    z.lazy(() => CreateProjectContentHint10$inboundSchema),
    z.lazy(() => CreateProjectContentHint11$inboundSchema),
    z.lazy(() => CreateProjectContentHint12$inboundSchema),
    z.lazy(() => CreateProjectContentHint13$inboundSchema),
    z.lazy(() => CreateProjectContentHint15$inboundSchema),
    z.lazy(() => CreateProjectContentHint14$inboundSchema),
]);
/** @internal */
export const CreateProjectContentHint$outboundSchema = z.union([
    z.lazy(() => CreateProjectContentHint1$outboundSchema),
    z.lazy(() => CreateProjectContentHint2$outboundSchema),
    z.lazy(() => CreateProjectContentHint3$outboundSchema),
    z.lazy(() => CreateProjectContentHint4$outboundSchema),
    z.lazy(() => CreateProjectContentHint5$outboundSchema),
    z.lazy(() => CreateProjectContentHint6$outboundSchema),
    z.lazy(() => CreateProjectContentHint7$outboundSchema),
    z.lazy(() => CreateProjectContentHint8$outboundSchema),
    z.lazy(() => CreateProjectContentHint9$outboundSchema),
    z.lazy(() => CreateProjectContentHint10$outboundSchema),
    z.lazy(() => CreateProjectContentHint11$outboundSchema),
    z.lazy(() => CreateProjectContentHint12$outboundSchema),
    z.lazy(() => CreateProjectContentHint13$outboundSchema),
    z.lazy(() => CreateProjectContentHint15$outboundSchema),
    z.lazy(() => CreateProjectContentHint14$outboundSchema),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CreateProjectContentHint$;
(function (CreateProjectContentHint$) {
    /** @deprecated use `CreateProjectContentHint$inboundSchema` instead. */
    CreateProjectContentHint$.inboundSchema = CreateProjectContentHint$inboundSchema;
    /** @deprecated use `CreateProjectContentHint$outboundSchema` instead. */
    CreateProjectContentHint$.outboundSchema = CreateProjectContentHint$outboundSchema;
})(CreateProjectContentHint$ || (CreateProjectContentHint$ = {}));
export function createProjectContentHintToJSON(createProjectContentHint) {
    return JSON.stringify(CreateProjectContentHint$outboundSchema.parse(createProjectContentHint));
}
export function createProjectContentHintFromJSON(jsonString) {
    return safeParse(jsonString, (x) => CreateProjectContentHint$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CreateProjectContentHint' from JSON`);
}
/** @internal */
export const CreateProjectProjectsResponse200ApplicationJSONResponseBodyEnvType$inboundSchema = z.nativeEnum(CreateProjectProjectsResponse200ApplicationJSONResponseBodyEnvType);
/** @internal */
export const CreateProjectProjectsResponse200ApplicationJSONResponseBodyEnvType$outboundSchema = CreateProjectProjectsResponse200ApplicationJSONResponseBodyEnvType$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CreateProjectProjectsResponse200ApplicationJSONResponseBodyEnvType$;
(function (CreateProjectProjectsResponse200ApplicationJSONResponseBodyEnvType$) {
    /** @deprecated use `CreateProjectProjectsResponse200ApplicationJSONResponseBodyEnvType$inboundSchema` instead. */
    CreateProjectProjectsResponse200ApplicationJSONResponseBodyEnvType$.inboundSchema = CreateProjectProjectsResponse200ApplicationJSONResponseBodyEnvType$inboundSchema;
    /** @deprecated use `CreateProjectProjectsResponse200ApplicationJSONResponseBodyEnvType$outboundSchema` instead. */
    CreateProjectProjectsResponse200ApplicationJSONResponseBodyEnvType$.outboundSchema = CreateProjectProjectsResponse200ApplicationJSONResponseBodyEnvType$outboundSchema;
})(CreateProjectProjectsResponse200ApplicationJSONResponseBodyEnvType$ || (CreateProjectProjectsResponse200ApplicationJSONResponseBodyEnvType$ = {}));
/** @internal */
export const CreateProjectInternalContentHint$inboundSchema = z.object({
    type: CreateProjectProjectsResponse200ApplicationJSONResponseBodyEnvType$inboundSchema,
    encryptedValue: z.string(),
});
/** @internal */
export const CreateProjectInternalContentHint$outboundSchema = z.object({
    type: CreateProjectProjectsResponse200ApplicationJSONResponseBodyEnvType$outboundSchema,
    encryptedValue: z.string(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CreateProjectInternalContentHint$;
(function (CreateProjectInternalContentHint$) {
    /** @deprecated use `CreateProjectInternalContentHint$inboundSchema` instead. */
    CreateProjectInternalContentHint$.inboundSchema = CreateProjectInternalContentHint$inboundSchema;
    /** @deprecated use `CreateProjectInternalContentHint$outboundSchema` instead. */
    CreateProjectInternalContentHint$.outboundSchema = CreateProjectInternalContentHint$outboundSchema;
})(CreateProjectInternalContentHint$ || (CreateProjectInternalContentHint$ = {}));
export function createProjectInternalContentHintToJSON(createProjectInternalContentHint) {
    return JSON.stringify(CreateProjectInternalContentHint$outboundSchema.parse(createProjectInternalContentHint));
}
export function createProjectInternalContentHintFromJSON(jsonString) {
    return safeParse(jsonString, (x) => CreateProjectInternalContentHint$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CreateProjectInternalContentHint' from JSON`);
}
/** @internal */
export const CreateProjectEnv$inboundSchema = z.object({
    target: z.union([
        z.array(CreateProjectTarget1$inboundSchema),
        CreateProjectTarget2$inboundSchema,
    ]).optional(),
    type: CreateProjectProjectsResponseType$inboundSchema,
    sunsetSecretId: z.string().optional(),
    decrypted: z.boolean().optional(),
    value: z.string(),
    vsmValue: z.string().optional(),
    id: z.string().optional(),
    key: z.string(),
    configurationId: z.nullable(z.string()).optional(),
    createdAt: z.number().optional(),
    updatedAt: z.number().optional(),
    createdBy: z.nullable(z.string()).optional(),
    updatedBy: z.nullable(z.string()).optional(),
    gitBranch: z.string().optional(),
    edgeConfigId: z.nullable(z.string()).optional(),
    edgeConfigTokenId: z.nullable(z.string()).optional(),
    contentHint: z.nullable(z.union([
        z.lazy(() => CreateProjectContentHint1$inboundSchema),
        z.lazy(() => CreateProjectContentHint2$inboundSchema),
        z.lazy(() => CreateProjectContentHint3$inboundSchema),
        z.lazy(() => CreateProjectContentHint4$inboundSchema),
        z.lazy(() => CreateProjectContentHint5$inboundSchema),
        z.lazy(() => CreateProjectContentHint6$inboundSchema),
        z.lazy(() => CreateProjectContentHint7$inboundSchema),
        z.lazy(() => CreateProjectContentHint8$inboundSchema),
        z.lazy(() => CreateProjectContentHint9$inboundSchema),
        z.lazy(() => CreateProjectContentHint10$inboundSchema),
        z.lazy(() => CreateProjectContentHint11$inboundSchema),
        z.lazy(() => CreateProjectContentHint12$inboundSchema),
        z.lazy(() => CreateProjectContentHint13$inboundSchema),
        z.lazy(() => CreateProjectContentHint15$inboundSchema),
        z.lazy(() => CreateProjectContentHint14$inboundSchema),
    ])).optional(),
    internalContentHint: z.nullable(z.lazy(() => CreateProjectInternalContentHint$inboundSchema)).optional(),
    comment: z.string().optional(),
    customEnvironmentIds: z.array(z.string()).optional(),
});
/** @internal */
export const CreateProjectEnv$outboundSchema = z.object({
    target: z.union([
        z.array(CreateProjectTarget1$outboundSchema),
        CreateProjectTarget2$outboundSchema,
    ]).optional(),
    type: CreateProjectProjectsResponseType$outboundSchema,
    sunsetSecretId: z.string().optional(),
    decrypted: z.boolean().optional(),
    value: z.string(),
    vsmValue: z.string().optional(),
    id: z.string().optional(),
    key: z.string(),
    configurationId: z.nullable(z.string()).optional(),
    createdAt: z.number().optional(),
    updatedAt: z.number().optional(),
    createdBy: z.nullable(z.string()).optional(),
    updatedBy: z.nullable(z.string()).optional(),
    gitBranch: z.string().optional(),
    edgeConfigId: z.nullable(z.string()).optional(),
    edgeConfigTokenId: z.nullable(z.string()).optional(),
    contentHint: z.nullable(z.union([
        z.lazy(() => CreateProjectContentHint1$outboundSchema),
        z.lazy(() => CreateProjectContentHint2$outboundSchema),
        z.lazy(() => CreateProjectContentHint3$outboundSchema),
        z.lazy(() => CreateProjectContentHint4$outboundSchema),
        z.lazy(() => CreateProjectContentHint5$outboundSchema),
        z.lazy(() => CreateProjectContentHint6$outboundSchema),
        z.lazy(() => CreateProjectContentHint7$outboundSchema),
        z.lazy(() => CreateProjectContentHint8$outboundSchema),
        z.lazy(() => CreateProjectContentHint9$outboundSchema),
        z.lazy(() => CreateProjectContentHint10$outboundSchema),
        z.lazy(() => CreateProjectContentHint11$outboundSchema),
        z.lazy(() => CreateProjectContentHint12$outboundSchema),
        z.lazy(() => CreateProjectContentHint13$outboundSchema),
        z.lazy(() => CreateProjectContentHint15$outboundSchema),
        z.lazy(() => CreateProjectContentHint14$outboundSchema),
    ])).optional(),
    internalContentHint: z.nullable(z.lazy(() => CreateProjectInternalContentHint$outboundSchema)).optional(),
    comment: z.string().optional(),
    customEnvironmentIds: z.array(z.string()).optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CreateProjectEnv$;
(function (CreateProjectEnv$) {
    /** @deprecated use `CreateProjectEnv$inboundSchema` instead. */
    CreateProjectEnv$.inboundSchema = CreateProjectEnv$inboundSchema;
    /** @deprecated use `CreateProjectEnv$outboundSchema` instead. */
    CreateProjectEnv$.outboundSchema = CreateProjectEnv$outboundSchema;
})(CreateProjectEnv$ || (CreateProjectEnv$ = {}));
export function createProjectEnvToJSON(createProjectEnv) {
    return JSON.stringify(CreateProjectEnv$outboundSchema.parse(createProjectEnv));
}
export function createProjectEnvFromJSON(jsonString) {
    return safeParse(jsonString, (x) => CreateProjectEnv$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CreateProjectEnv' from JSON`);
}
/** @internal */
export const CreateProjectProjectsResponse200Type$inboundSchema = z.nativeEnum(CreateProjectProjectsResponse200Type);
/** @internal */
export const CreateProjectProjectsResponse200Type$outboundSchema = CreateProjectProjectsResponse200Type$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CreateProjectProjectsResponse200Type$;
(function (CreateProjectProjectsResponse200Type$) {
    /** @deprecated use `CreateProjectProjectsResponse200Type$inboundSchema` instead. */
    CreateProjectProjectsResponse200Type$.inboundSchema = CreateProjectProjectsResponse200Type$inboundSchema;
    /** @deprecated use `CreateProjectProjectsResponse200Type$outboundSchema` instead. */
    CreateProjectProjectsResponse200Type$.outboundSchema = CreateProjectProjectsResponse200Type$outboundSchema;
})(CreateProjectProjectsResponse200Type$ || (CreateProjectProjectsResponse200Type$ = {}));
/** @internal */
export const CreateProjectProjectsResponse200ApplicationJSONResponseBodyCustomEnvironmentsType$inboundSchema = z.nativeEnum(CreateProjectProjectsResponse200ApplicationJSONResponseBodyCustomEnvironmentsType);
/** @internal */
export const CreateProjectProjectsResponse200ApplicationJSONResponseBodyCustomEnvironmentsType$outboundSchema = CreateProjectProjectsResponse200ApplicationJSONResponseBodyCustomEnvironmentsType$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CreateProjectProjectsResponse200ApplicationJSONResponseBodyCustomEnvironmentsType$;
(function (CreateProjectProjectsResponse200ApplicationJSONResponseBodyCustomEnvironmentsType$) {
    /** @deprecated use `CreateProjectProjectsResponse200ApplicationJSONResponseBodyCustomEnvironmentsType$inboundSchema` instead. */
    CreateProjectProjectsResponse200ApplicationJSONResponseBodyCustomEnvironmentsType$.inboundSchema = CreateProjectProjectsResponse200ApplicationJSONResponseBodyCustomEnvironmentsType$inboundSchema;
    /** @deprecated use `CreateProjectProjectsResponse200ApplicationJSONResponseBodyCustomEnvironmentsType$outboundSchema` instead. */
    CreateProjectProjectsResponse200ApplicationJSONResponseBodyCustomEnvironmentsType$.outboundSchema = CreateProjectProjectsResponse200ApplicationJSONResponseBodyCustomEnvironmentsType$outboundSchema;
})(CreateProjectProjectsResponse200ApplicationJSONResponseBodyCustomEnvironmentsType$ || (CreateProjectProjectsResponse200ApplicationJSONResponseBodyCustomEnvironmentsType$ = {}));
/** @internal */
export const CreateProjectBranchMatcher$inboundSchema = z.object({
    type: CreateProjectProjectsResponse200ApplicationJSONResponseBodyCustomEnvironmentsType$inboundSchema,
    pattern: z.string(),
});
/** @internal */
export const CreateProjectBranchMatcher$outboundSchema = z.object({
    type: CreateProjectProjectsResponse200ApplicationJSONResponseBodyCustomEnvironmentsType$outboundSchema,
    pattern: z.string(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CreateProjectBranchMatcher$;
(function (CreateProjectBranchMatcher$) {
    /** @deprecated use `CreateProjectBranchMatcher$inboundSchema` instead. */
    CreateProjectBranchMatcher$.inboundSchema = CreateProjectBranchMatcher$inboundSchema;
    /** @deprecated use `CreateProjectBranchMatcher$outboundSchema` instead. */
    CreateProjectBranchMatcher$.outboundSchema = CreateProjectBranchMatcher$outboundSchema;
})(CreateProjectBranchMatcher$ || (CreateProjectBranchMatcher$ = {}));
export function createProjectBranchMatcherToJSON(createProjectBranchMatcher) {
    return JSON.stringify(CreateProjectBranchMatcher$outboundSchema.parse(createProjectBranchMatcher));
}
export function createProjectBranchMatcherFromJSON(jsonString) {
    return safeParse(jsonString, (x) => CreateProjectBranchMatcher$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CreateProjectBranchMatcher' from JSON`);
}
/** @internal */
export const CreateProjectVerification$inboundSchema = z.object({
    type: z.string(),
    domain: z.string(),
    value: z.string(),
    reason: z.string(),
});
/** @internal */
export const CreateProjectVerification$outboundSchema = z.object({
    type: z.string(),
    domain: z.string(),
    value: z.string(),
    reason: z.string(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CreateProjectVerification$;
(function (CreateProjectVerification$) {
    /** @deprecated use `CreateProjectVerification$inboundSchema` instead. */
    CreateProjectVerification$.inboundSchema = CreateProjectVerification$inboundSchema;
    /** @deprecated use `CreateProjectVerification$outboundSchema` instead. */
    CreateProjectVerification$.outboundSchema = CreateProjectVerification$outboundSchema;
})(CreateProjectVerification$ || (CreateProjectVerification$ = {}));
export function createProjectVerificationToJSON(createProjectVerification) {
    return JSON.stringify(CreateProjectVerification$outboundSchema.parse(createProjectVerification));
}
export function createProjectVerificationFromJSON(jsonString) {
    return safeParse(jsonString, (x) => CreateProjectVerification$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CreateProjectVerification' from JSON`);
}
/** @internal */
export const CreateProjectDomains$inboundSchema = z.object({
    name: z.string(),
    apexName: z.string(),
    projectId: z.string(),
    redirect: z.nullable(z.string()).optional(),
    redirectStatusCode: z.nullable(z.number()).optional(),
    gitBranch: z.nullable(z.string()).optional(),
    customEnvironmentId: z.nullable(z.string()).optional(),
    updatedAt: z.number().optional(),
    createdAt: z.number().optional(),
    verified: z.boolean(),
    verification: z.array(z.lazy(() => CreateProjectVerification$inboundSchema))
        .optional(),
});
/** @internal */
export const CreateProjectDomains$outboundSchema = z.object({
    name: z.string(),
    apexName: z.string(),
    projectId: z.string(),
    redirect: z.nullable(z.string()).optional(),
    redirectStatusCode: z.nullable(z.number()).optional(),
    gitBranch: z.nullable(z.string()).optional(),
    customEnvironmentId: z.nullable(z.string()).optional(),
    updatedAt: z.number().optional(),
    createdAt: z.number().optional(),
    verified: z.boolean(),
    verification: z.array(z.lazy(() => CreateProjectVerification$outboundSchema))
        .optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CreateProjectDomains$;
(function (CreateProjectDomains$) {
    /** @deprecated use `CreateProjectDomains$inboundSchema` instead. */
    CreateProjectDomains$.inboundSchema = CreateProjectDomains$inboundSchema;
    /** @deprecated use `CreateProjectDomains$outboundSchema` instead. */
    CreateProjectDomains$.outboundSchema = CreateProjectDomains$outboundSchema;
})(CreateProjectDomains$ || (CreateProjectDomains$ = {}));
export function createProjectDomainsToJSON(createProjectDomains) {
    return JSON.stringify(CreateProjectDomains$outboundSchema.parse(createProjectDomains));
}
export function createProjectDomainsFromJSON(jsonString) {
    return safeParse(jsonString, (x) => CreateProjectDomains$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CreateProjectDomains' from JSON`);
}
/** @internal */
export const CreateProjectCustomEnvironments$inboundSchema = z.object({
    id: z.string(),
    slug: z.string(),
    type: CreateProjectProjectsResponse200Type$inboundSchema,
    description: z.string().optional(),
    branchMatcher: z.lazy(() => CreateProjectBranchMatcher$inboundSchema)
        .optional(),
    domains: z.array(z.lazy(() => CreateProjectDomains$inboundSchema)).optional(),
    currentDeploymentAliases: z.array(z.string()).optional(),
    createdAt: z.number(),
    updatedAt: z.number(),
});
/** @internal */
export const CreateProjectCustomEnvironments$outboundSchema = z.object({
    id: z.string(),
    slug: z.string(),
    type: CreateProjectProjectsResponse200Type$outboundSchema,
    description: z.string().optional(),
    branchMatcher: z.lazy(() => CreateProjectBranchMatcher$outboundSchema)
        .optional(),
    domains: z.array(z.lazy(() => CreateProjectDomains$outboundSchema))
        .optional(),
    currentDeploymentAliases: z.array(z.string()).optional(),
    createdAt: z.number(),
    updatedAt: z.number(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CreateProjectCustomEnvironments$;
(function (CreateProjectCustomEnvironments$) {
    /** @deprecated use `CreateProjectCustomEnvironments$inboundSchema` instead. */
    CreateProjectCustomEnvironments$.inboundSchema = CreateProjectCustomEnvironments$inboundSchema;
    /** @deprecated use `CreateProjectCustomEnvironments$outboundSchema` instead. */
    CreateProjectCustomEnvironments$.outboundSchema = CreateProjectCustomEnvironments$outboundSchema;
})(CreateProjectCustomEnvironments$ || (CreateProjectCustomEnvironments$ = {}));
export function createProjectCustomEnvironmentsToJSON(createProjectCustomEnvironments) {
    return JSON.stringify(CreateProjectCustomEnvironments$outboundSchema.parse(createProjectCustomEnvironments));
}
export function createProjectCustomEnvironmentsFromJSON(jsonString) {
    return safeParse(jsonString, (x) => CreateProjectCustomEnvironments$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CreateProjectCustomEnvironments' from JSON`);
}
/** @internal */
export const CreateProjectProjectsFramework$inboundSchema = z.nativeEnum(CreateProjectProjectsFramework);
/** @internal */
export const CreateProjectProjectsFramework$outboundSchema = CreateProjectProjectsFramework$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CreateProjectProjectsFramework$;
(function (CreateProjectProjectsFramework$) {
    /** @deprecated use `CreateProjectProjectsFramework$inboundSchema` instead. */
    CreateProjectProjectsFramework$.inboundSchema = CreateProjectProjectsFramework$inboundSchema;
    /** @deprecated use `CreateProjectProjectsFramework$outboundSchema` instead. */
    CreateProjectProjectsFramework$.outboundSchema = CreateProjectProjectsFramework$outboundSchema;
})(CreateProjectProjectsFramework$ || (CreateProjectProjectsFramework$ = {}));
/** @internal */
export const CreateProjectIpBuckets$inboundSchema = z.object({
    bucket: z.string(),
    supportUntil: z.number().optional(),
});
/** @internal */
export const CreateProjectIpBuckets$outboundSchema = z.object({
    bucket: z.string(),
    supportUntil: z.number().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CreateProjectIpBuckets$;
(function (CreateProjectIpBuckets$) {
    /** @deprecated use `CreateProjectIpBuckets$inboundSchema` instead. */
    CreateProjectIpBuckets$.inboundSchema = CreateProjectIpBuckets$inboundSchema;
    /** @deprecated use `CreateProjectIpBuckets$outboundSchema` instead. */
    CreateProjectIpBuckets$.outboundSchema = CreateProjectIpBuckets$outboundSchema;
})(CreateProjectIpBuckets$ || (CreateProjectIpBuckets$ = {}));
export function createProjectIpBucketsToJSON(createProjectIpBuckets) {
    return JSON.stringify(CreateProjectIpBuckets$outboundSchema.parse(createProjectIpBuckets));
}
export function createProjectIpBucketsFromJSON(jsonString) {
    return safeParse(jsonString, (x) => CreateProjectIpBuckets$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CreateProjectIpBuckets' from JSON`);
}
/** @internal */
export const CreateProjectAliasAssigned$inboundSchema = z.union([z.number(), z.boolean()]);
/** @internal */
export const CreateProjectAliasAssigned$outboundSchema = z.union([z.number(), z.boolean()]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CreateProjectAliasAssigned$;
(function (CreateProjectAliasAssigned$) {
    /** @deprecated use `CreateProjectAliasAssigned$inboundSchema` instead. */
    CreateProjectAliasAssigned$.inboundSchema = CreateProjectAliasAssigned$inboundSchema;
    /** @deprecated use `CreateProjectAliasAssigned$outboundSchema` instead. */
    CreateProjectAliasAssigned$.outboundSchema = CreateProjectAliasAssigned$outboundSchema;
})(CreateProjectAliasAssigned$ || (CreateProjectAliasAssigned$ = {}));
export function createProjectAliasAssignedToJSON(createProjectAliasAssigned) {
    return JSON.stringify(CreateProjectAliasAssigned$outboundSchema.parse(createProjectAliasAssigned));
}
export function createProjectAliasAssignedFromJSON(jsonString) {
    return safeParse(jsonString, (x) => CreateProjectAliasAssigned$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CreateProjectAliasAssigned' from JSON`);
}
/** @internal */
export const CreateProjectAliasError$inboundSchema = z.object({
    code: z.string(),
    message: z.string(),
});
/** @internal */
export const CreateProjectAliasError$outboundSchema = z.object({
    code: z.string(),
    message: z.string(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CreateProjectAliasError$;
(function (CreateProjectAliasError$) {
    /** @deprecated use `CreateProjectAliasError$inboundSchema` instead. */
    CreateProjectAliasError$.inboundSchema = CreateProjectAliasError$inboundSchema;
    /** @deprecated use `CreateProjectAliasError$outboundSchema` instead. */
    CreateProjectAliasError$.outboundSchema = CreateProjectAliasError$outboundSchema;
})(CreateProjectAliasError$ || (CreateProjectAliasError$ = {}));
export function createProjectAliasErrorToJSON(createProjectAliasError) {
    return JSON.stringify(CreateProjectAliasError$outboundSchema.parse(createProjectAliasError));
}
export function createProjectAliasErrorFromJSON(jsonString) {
    return safeParse(jsonString, (x) => CreateProjectAliasError$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CreateProjectAliasError' from JSON`);
}
/** @internal */
export const CreateProjectProjectsResponse200ApplicationJSONResponseBodyLatestDeploymentsType$inboundSchema = z.nativeEnum(CreateProjectProjectsResponse200ApplicationJSONResponseBodyLatestDeploymentsType);
/** @internal */
export const CreateProjectProjectsResponse200ApplicationJSONResponseBodyLatestDeploymentsType$outboundSchema = CreateProjectProjectsResponse200ApplicationJSONResponseBodyLatestDeploymentsType$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CreateProjectProjectsResponse200ApplicationJSONResponseBodyLatestDeploymentsType$;
(function (CreateProjectProjectsResponse200ApplicationJSONResponseBodyLatestDeploymentsType$) {
    /** @deprecated use `CreateProjectProjectsResponse200ApplicationJSONResponseBodyLatestDeploymentsType$inboundSchema` instead. */
    CreateProjectProjectsResponse200ApplicationJSONResponseBodyLatestDeploymentsType$.inboundSchema = CreateProjectProjectsResponse200ApplicationJSONResponseBodyLatestDeploymentsType$inboundSchema;
    /** @deprecated use `CreateProjectProjectsResponse200ApplicationJSONResponseBodyLatestDeploymentsType$outboundSchema` instead. */
    CreateProjectProjectsResponse200ApplicationJSONResponseBodyLatestDeploymentsType$.outboundSchema = CreateProjectProjectsResponse200ApplicationJSONResponseBodyLatestDeploymentsType$outboundSchema;
})(CreateProjectProjectsResponse200ApplicationJSONResponseBodyLatestDeploymentsType$ || (CreateProjectProjectsResponse200ApplicationJSONResponseBodyLatestDeploymentsType$ = {}));
/** @internal */
export const CreateProjectProjectsBranchMatcher$inboundSchema = z.object({
    type: CreateProjectProjectsResponse200ApplicationJSONResponseBodyLatestDeploymentsType$inboundSchema,
    pattern: z.string(),
});
/** @internal */
export const CreateProjectProjectsBranchMatcher$outboundSchema = z.object({
    type: CreateProjectProjectsResponse200ApplicationJSONResponseBodyLatestDeploymentsType$outboundSchema,
    pattern: z.string(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CreateProjectProjectsBranchMatcher$;
(function (CreateProjectProjectsBranchMatcher$) {
    /** @deprecated use `CreateProjectProjectsBranchMatcher$inboundSchema` instead. */
    CreateProjectProjectsBranchMatcher$.inboundSchema = CreateProjectProjectsBranchMatcher$inboundSchema;
    /** @deprecated use `CreateProjectProjectsBranchMatcher$outboundSchema` instead. */
    CreateProjectProjectsBranchMatcher$.outboundSchema = CreateProjectProjectsBranchMatcher$outboundSchema;
})(CreateProjectProjectsBranchMatcher$ || (CreateProjectProjectsBranchMatcher$ = {}));
export function createProjectProjectsBranchMatcherToJSON(createProjectProjectsBranchMatcher) {
    return JSON.stringify(CreateProjectProjectsBranchMatcher$outboundSchema.parse(createProjectProjectsBranchMatcher));
}
export function createProjectProjectsBranchMatcherFromJSON(jsonString) {
    return safeParse(jsonString, (x) => CreateProjectProjectsBranchMatcher$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CreateProjectProjectsBranchMatcher' from JSON`);
}
/** @internal */
export const CreateProjectBuilds$inboundSchema = z.object({
    use: z.string(),
    src: z.string().optional(),
    dest: z.string().optional(),
});
/** @internal */
export const CreateProjectBuilds$outboundSchema = z.object({
    use: z.string(),
    src: z.string().optional(),
    dest: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CreateProjectBuilds$;
(function (CreateProjectBuilds$) {
    /** @deprecated use `CreateProjectBuilds$inboundSchema` instead. */
    CreateProjectBuilds$.inboundSchema = CreateProjectBuilds$inboundSchema;
    /** @deprecated use `CreateProjectBuilds$outboundSchema` instead. */
    CreateProjectBuilds$.outboundSchema = CreateProjectBuilds$outboundSchema;
})(CreateProjectBuilds$ || (CreateProjectBuilds$ = {}));
export function createProjectBuildsToJSON(createProjectBuilds) {
    return JSON.stringify(CreateProjectBuilds$outboundSchema.parse(createProjectBuilds));
}
export function createProjectBuildsFromJSON(jsonString) {
    return safeParse(jsonString, (x) => CreateProjectBuilds$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CreateProjectBuilds' from JSON`);
}
/** @internal */
export const CreateProjectChecksConclusion$inboundSchema = z.nativeEnum(CreateProjectChecksConclusion);
/** @internal */
export const CreateProjectChecksConclusion$outboundSchema = CreateProjectChecksConclusion$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CreateProjectChecksConclusion$;
(function (CreateProjectChecksConclusion$) {
    /** @deprecated use `CreateProjectChecksConclusion$inboundSchema` instead. */
    CreateProjectChecksConclusion$.inboundSchema = CreateProjectChecksConclusion$inboundSchema;
    /** @deprecated use `CreateProjectChecksConclusion$outboundSchema` instead. */
    CreateProjectChecksConclusion$.outboundSchema = CreateProjectChecksConclusion$outboundSchema;
})(CreateProjectChecksConclusion$ || (CreateProjectChecksConclusion$ = {}));
/** @internal */
export const CreateProjectChecksState$inboundSchema = z.nativeEnum(CreateProjectChecksState);
/** @internal */
export const CreateProjectChecksState$outboundSchema = CreateProjectChecksState$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CreateProjectChecksState$;
(function (CreateProjectChecksState$) {
    /** @deprecated use `CreateProjectChecksState$inboundSchema` instead. */
    CreateProjectChecksState$.inboundSchema = CreateProjectChecksState$inboundSchema;
    /** @deprecated use `CreateProjectChecksState$outboundSchema` instead. */
    CreateProjectChecksState$.outboundSchema = CreateProjectChecksState$outboundSchema;
})(CreateProjectChecksState$ || (CreateProjectChecksState$ = {}));
/** @internal */
export const CreateProjectCreator$inboundSchema = z.object({
    email: z.string(),
    githubLogin: z.string().optional(),
    gitlabLogin: z.string().optional(),
    uid: z.string(),
    username: z.string(),
});
/** @internal */
export const CreateProjectCreator$outboundSchema = z.object({
    email: z.string(),
    githubLogin: z.string().optional(),
    gitlabLogin: z.string().optional(),
    uid: z.string(),
    username: z.string(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CreateProjectCreator$;
(function (CreateProjectCreator$) {
    /** @deprecated use `CreateProjectCreator$inboundSchema` instead. */
    CreateProjectCreator$.inboundSchema = CreateProjectCreator$inboundSchema;
    /** @deprecated use `CreateProjectCreator$outboundSchema` instead. */
    CreateProjectCreator$.outboundSchema = CreateProjectCreator$outboundSchema;
})(CreateProjectCreator$ || (CreateProjectCreator$ = {}));
export function createProjectCreatorToJSON(createProjectCreator) {
    return JSON.stringify(CreateProjectCreator$outboundSchema.parse(createProjectCreator));
}
export function createProjectCreatorFromJSON(jsonString) {
    return safeParse(jsonString, (x) => CreateProjectCreator$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CreateProjectCreator' from JSON`);
}
/** @internal */
export const CreateProjectOidcTokenClaims$inboundSchema = z.object({
    iss: z.string(),
    sub: z.string(),
    scope: z.string(),
    aud: z.string(),
    owner: z.string(),
    owner_id: z.string(),
    project: z.string(),
    project_id: z.string(),
    environment: z.string(),
}).transform((v) => {
    return remap$(v, {
        "owner_id": "ownerId",
        "project_id": "projectId",
    });
});
/** @internal */
export const CreateProjectOidcTokenClaims$outboundSchema = z.object({
    iss: z.string(),
    sub: z.string(),
    scope: z.string(),
    aud: z.string(),
    owner: z.string(),
    ownerId: z.string(),
    project: z.string(),
    projectId: z.string(),
    environment: z.string(),
}).transform((v) => {
    return remap$(v, {
        ownerId: "owner_id",
        projectId: "project_id",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CreateProjectOidcTokenClaims$;
(function (CreateProjectOidcTokenClaims$) {
    /** @deprecated use `CreateProjectOidcTokenClaims$inboundSchema` instead. */
    CreateProjectOidcTokenClaims$.inboundSchema = CreateProjectOidcTokenClaims$inboundSchema;
    /** @deprecated use `CreateProjectOidcTokenClaims$outboundSchema` instead. */
    CreateProjectOidcTokenClaims$.outboundSchema = CreateProjectOidcTokenClaims$outboundSchema;
})(CreateProjectOidcTokenClaims$ || (CreateProjectOidcTokenClaims$ = {}));
export function createProjectOidcTokenClaimsToJSON(createProjectOidcTokenClaims) {
    return JSON.stringify(CreateProjectOidcTokenClaims$outboundSchema.parse(createProjectOidcTokenClaims));
}
export function createProjectOidcTokenClaimsFromJSON(jsonString) {
    return safeParse(jsonString, (x) => CreateProjectOidcTokenClaims$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CreateProjectOidcTokenClaims' from JSON`);
}
/** @internal */
export const CreateProjectPlan$inboundSchema = z.nativeEnum(CreateProjectPlan);
/** @internal */
export const CreateProjectPlan$outboundSchema = CreateProjectPlan$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CreateProjectPlan$;
(function (CreateProjectPlan$) {
    /** @deprecated use `CreateProjectPlan$inboundSchema` instead. */
    CreateProjectPlan$.inboundSchema = CreateProjectPlan$inboundSchema;
    /** @deprecated use `CreateProjectPlan$outboundSchema` instead. */
    CreateProjectPlan$.outboundSchema = CreateProjectPlan$outboundSchema;
})(CreateProjectPlan$ || (CreateProjectPlan$ = {}));
/** @internal */
export const CreateProjectReadyState$inboundSchema = z.nativeEnum(CreateProjectReadyState);
/** @internal */
export const CreateProjectReadyState$outboundSchema = CreateProjectReadyState$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CreateProjectReadyState$;
(function (CreateProjectReadyState$) {
    /** @deprecated use `CreateProjectReadyState$inboundSchema` instead. */
    CreateProjectReadyState$.inboundSchema = CreateProjectReadyState$inboundSchema;
    /** @deprecated use `CreateProjectReadyState$outboundSchema` instead. */
    CreateProjectReadyState$.outboundSchema = CreateProjectReadyState$outboundSchema;
})(CreateProjectReadyState$ || (CreateProjectReadyState$ = {}));
/** @internal */
export const CreateProjectReadySubstate$inboundSchema = z.nativeEnum(CreateProjectReadySubstate);
/** @internal */
export const CreateProjectReadySubstate$outboundSchema = CreateProjectReadySubstate$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CreateProjectReadySubstate$;
(function (CreateProjectReadySubstate$) {
    /** @deprecated use `CreateProjectReadySubstate$inboundSchema` instead. */
    CreateProjectReadySubstate$.inboundSchema = CreateProjectReadySubstate$inboundSchema;
    /** @deprecated use `CreateProjectReadySubstate$outboundSchema` instead. */
    CreateProjectReadySubstate$.outboundSchema = CreateProjectReadySubstate$outboundSchema;
})(CreateProjectReadySubstate$ || (CreateProjectReadySubstate$ = {}));
/** @internal */
export const CreateProjectProjectsResponse200ApplicationJSONType$inboundSchema = z.nativeEnum(CreateProjectProjectsResponse200ApplicationJSONType);
/** @internal */
export const CreateProjectProjectsResponse200ApplicationJSONType$outboundSchema = CreateProjectProjectsResponse200ApplicationJSONType$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CreateProjectProjectsResponse200ApplicationJSONType$;
(function (CreateProjectProjectsResponse200ApplicationJSONType$) {
    /** @deprecated use `CreateProjectProjectsResponse200ApplicationJSONType$inboundSchema` instead. */
    CreateProjectProjectsResponse200ApplicationJSONType$.inboundSchema = CreateProjectProjectsResponse200ApplicationJSONType$inboundSchema;
    /** @deprecated use `CreateProjectProjectsResponse200ApplicationJSONType$outboundSchema` instead. */
    CreateProjectProjectsResponse200ApplicationJSONType$.outboundSchema = CreateProjectProjectsResponse200ApplicationJSONType$outboundSchema;
})(CreateProjectProjectsResponse200ApplicationJSONType$ || (CreateProjectProjectsResponse200ApplicationJSONType$ = {}));
/** @internal */
export const CreateProjectLatestDeployments$inboundSchema = z.object({
    id: z.string(),
    alias: z.array(z.string()).optional(),
    aliasAssigned: z.nullable(z.union([z.number(), z.boolean()])).optional(),
    aliasError: z.nullable(z.lazy(() => CreateProjectAliasError$inboundSchema))
        .optional(),
    aliasFinal: z.nullable(z.string()).optional(),
    automaticAliases: z.array(z.string()).optional(),
    branchMatcher: z.lazy(() => CreateProjectProjectsBranchMatcher$inboundSchema)
        .optional(),
    buildingAt: z.number().optional(),
    builds: z.array(z.lazy(() => CreateProjectBuilds$inboundSchema)).optional(),
    checksConclusion: CreateProjectChecksConclusion$inboundSchema.optional(),
    checksState: CreateProjectChecksState$inboundSchema.optional(),
    connectBuildsEnabled: z.boolean().optional(),
    connectConfigurationId: z.string().optional(),
    createdAt: z.number(),
    createdIn: z.string(),
    creator: z.nullable(z.lazy(() => CreateProjectCreator$inboundSchema)),
    deletedAt: z.number().optional(),
    deploymentHostname: z.string(),
    forced: z.boolean().optional(),
    name: z.string(),
    meta: z.record(z.string()).optional(),
    monorepoManager: z.nullable(z.string()).optional(),
    oidcTokenClaims: z.lazy(() => CreateProjectOidcTokenClaims$inboundSchema)
        .optional(),
    plan: CreateProjectPlan$inboundSchema,
    previewCommentsEnabled: z.boolean().optional(),
    private: z.boolean(),
    readyAt: z.number().optional(),
    readyState: CreateProjectReadyState$inboundSchema,
    readySubstate: CreateProjectReadySubstate$inboundSchema.optional(),
    requestedAt: z.number().optional(),
    target: z.nullable(z.string()).optional(),
    teamId: z.nullable(z.string()).optional(),
    type: CreateProjectProjectsResponse200ApplicationJSONType$inboundSchema,
    url: z.string(),
    userId: z.string(),
    withCache: z.boolean().optional(),
});
/** @internal */
export const CreateProjectLatestDeployments$outboundSchema = z.object({
    id: z.string(),
    alias: z.array(z.string()).optional(),
    aliasAssigned: z.nullable(z.union([z.number(), z.boolean()])).optional(),
    aliasError: z.nullable(z.lazy(() => CreateProjectAliasError$outboundSchema))
        .optional(),
    aliasFinal: z.nullable(z.string()).optional(),
    automaticAliases: z.array(z.string()).optional(),
    branchMatcher: z.lazy(() => CreateProjectProjectsBranchMatcher$outboundSchema)
        .optional(),
    buildingAt: z.number().optional(),
    builds: z.array(z.lazy(() => CreateProjectBuilds$outboundSchema)).optional(),
    checksConclusion: CreateProjectChecksConclusion$outboundSchema.optional(),
    checksState: CreateProjectChecksState$outboundSchema.optional(),
    connectBuildsEnabled: z.boolean().optional(),
    connectConfigurationId: z.string().optional(),
    createdAt: z.number(),
    createdIn: z.string(),
    creator: z.nullable(z.lazy(() => CreateProjectCreator$outboundSchema)),
    deletedAt: z.number().optional(),
    deploymentHostname: z.string(),
    forced: z.boolean().optional(),
    name: z.string(),
    meta: z.record(z.string()).optional(),
    monorepoManager: z.nullable(z.string()).optional(),
    oidcTokenClaims: z.lazy(() => CreateProjectOidcTokenClaims$outboundSchema)
        .optional(),
    plan: CreateProjectPlan$outboundSchema,
    previewCommentsEnabled: z.boolean().optional(),
    private: z.boolean(),
    readyAt: z.number().optional(),
    readyState: CreateProjectReadyState$outboundSchema,
    readySubstate: CreateProjectReadySubstate$outboundSchema.optional(),
    requestedAt: z.number().optional(),
    target: z.nullable(z.string()).optional(),
    teamId: z.nullable(z.string()).optional(),
    type: CreateProjectProjectsResponse200ApplicationJSONType$outboundSchema,
    url: z.string(),
    userId: z.string(),
    withCache: z.boolean().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CreateProjectLatestDeployments$;
(function (CreateProjectLatestDeployments$) {
    /** @deprecated use `CreateProjectLatestDeployments$inboundSchema` instead. */
    CreateProjectLatestDeployments$.inboundSchema = CreateProjectLatestDeployments$inboundSchema;
    /** @deprecated use `CreateProjectLatestDeployments$outboundSchema` instead. */
    CreateProjectLatestDeployments$.outboundSchema = CreateProjectLatestDeployments$outboundSchema;
})(CreateProjectLatestDeployments$ || (CreateProjectLatestDeployments$ = {}));
export function createProjectLatestDeploymentsToJSON(createProjectLatestDeployments) {
    return JSON.stringify(CreateProjectLatestDeployments$outboundSchema.parse(createProjectLatestDeployments));
}
export function createProjectLatestDeploymentsFromJSON(jsonString) {
    return safeParse(jsonString, (x) => CreateProjectLatestDeployments$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CreateProjectLatestDeployments' from JSON`);
}
/** @internal */
export const CreateProjectLinkProjectsResponse200Type$inboundSchema = z
    .nativeEnum(CreateProjectLinkProjectsResponse200Type);
/** @internal */
export const CreateProjectLinkProjectsResponse200Type$outboundSchema = CreateProjectLinkProjectsResponse200Type$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CreateProjectLinkProjectsResponse200Type$;
(function (CreateProjectLinkProjectsResponse200Type$) {
    /** @deprecated use `CreateProjectLinkProjectsResponse200Type$inboundSchema` instead. */
    CreateProjectLinkProjectsResponse200Type$.inboundSchema = CreateProjectLinkProjectsResponse200Type$inboundSchema;
    /** @deprecated use `CreateProjectLinkProjectsResponse200Type$outboundSchema` instead. */
    CreateProjectLinkProjectsResponse200Type$.outboundSchema = CreateProjectLinkProjectsResponse200Type$outboundSchema;
})(CreateProjectLinkProjectsResponse200Type$ || (CreateProjectLinkProjectsResponse200Type$ = {}));
/** @internal */
export const CreateProjectLinkProjectsResponse200DeployHooks$inboundSchema = z.object({
    createdAt: z.number().optional(),
    id: z.string(),
    name: z.string(),
    ref: z.string(),
    url: z.string(),
});
/** @internal */
export const CreateProjectLinkProjectsResponse200DeployHooks$outboundSchema = z.object({
    createdAt: z.number().optional(),
    id: z.string(),
    name: z.string(),
    ref: z.string(),
    url: z.string(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CreateProjectLinkProjectsResponse200DeployHooks$;
(function (CreateProjectLinkProjectsResponse200DeployHooks$) {
    /** @deprecated use `CreateProjectLinkProjectsResponse200DeployHooks$inboundSchema` instead. */
    CreateProjectLinkProjectsResponse200DeployHooks$.inboundSchema = CreateProjectLinkProjectsResponse200DeployHooks$inboundSchema;
    /** @deprecated use `CreateProjectLinkProjectsResponse200DeployHooks$outboundSchema` instead. */
    CreateProjectLinkProjectsResponse200DeployHooks$.outboundSchema = CreateProjectLinkProjectsResponse200DeployHooks$outboundSchema;
})(CreateProjectLinkProjectsResponse200DeployHooks$ || (CreateProjectLinkProjectsResponse200DeployHooks$ = {}));
export function createProjectLinkProjectsResponse200DeployHooksToJSON(createProjectLinkProjectsResponse200DeployHooks) {
    return JSON.stringify(CreateProjectLinkProjectsResponse200DeployHooks$outboundSchema.parse(createProjectLinkProjectsResponse200DeployHooks));
}
export function createProjectLinkProjectsResponse200DeployHooksFromJSON(jsonString) {
    return safeParse(jsonString, (x) => CreateProjectLinkProjectsResponse200DeployHooks$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CreateProjectLinkProjectsResponse200DeployHooks' from JSON`);
}
/** @internal */
export const CreateProjectLink4$inboundSchema = z.object({
    org: z.string().optional(),
    repoOwnerId: z.number().optional(),
    repo: z.string().optional(),
    repoId: z.number().optional(),
    type: CreateProjectLinkProjectsResponse200Type$inboundSchema.optional(),
    host: z.string().optional(),
    createdAt: z.number().optional(),
    deployHooks: z.array(z.lazy(() => CreateProjectLinkProjectsResponse200DeployHooks$inboundSchema)),
    gitCredentialId: z.string().optional(),
    updatedAt: z.number().optional(),
    sourceless: z.boolean().optional(),
    productionBranch: z.string().optional(),
});
/** @internal */
export const CreateProjectLink4$outboundSchema = z.object({
    org: z.string().optional(),
    repoOwnerId: z.number().optional(),
    repo: z.string().optional(),
    repoId: z.number().optional(),
    type: CreateProjectLinkProjectsResponse200Type$outboundSchema.optional(),
    host: z.string().optional(),
    createdAt: z.number().optional(),
    deployHooks: z.array(z.lazy(() => CreateProjectLinkProjectsResponse200DeployHooks$outboundSchema)),
    gitCredentialId: z.string().optional(),
    updatedAt: z.number().optional(),
    sourceless: z.boolean().optional(),
    productionBranch: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CreateProjectLink4$;
(function (CreateProjectLink4$) {
    /** @deprecated use `CreateProjectLink4$inboundSchema` instead. */
    CreateProjectLink4$.inboundSchema = CreateProjectLink4$inboundSchema;
    /** @deprecated use `CreateProjectLink4$outboundSchema` instead. */
    CreateProjectLink4$.outboundSchema = CreateProjectLink4$outboundSchema;
})(CreateProjectLink4$ || (CreateProjectLink4$ = {}));
export function createProjectLink4ToJSON(createProjectLink4) {
    return JSON.stringify(CreateProjectLink4$outboundSchema.parse(createProjectLink4));
}
export function createProjectLink4FromJSON(jsonString) {
    return safeParse(jsonString, (x) => CreateProjectLink4$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CreateProjectLink4' from JSON`);
}
/** @internal */
export const CreateProjectLinkProjectsResponseType$inboundSchema = z.nativeEnum(CreateProjectLinkProjectsResponseType);
/** @internal */
export const CreateProjectLinkProjectsResponseType$outboundSchema = CreateProjectLinkProjectsResponseType$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CreateProjectLinkProjectsResponseType$;
(function (CreateProjectLinkProjectsResponseType$) {
    /** @deprecated use `CreateProjectLinkProjectsResponseType$inboundSchema` instead. */
    CreateProjectLinkProjectsResponseType$.inboundSchema = CreateProjectLinkProjectsResponseType$inboundSchema;
    /** @deprecated use `CreateProjectLinkProjectsResponseType$outboundSchema` instead. */
    CreateProjectLinkProjectsResponseType$.outboundSchema = CreateProjectLinkProjectsResponseType$outboundSchema;
})(CreateProjectLinkProjectsResponseType$ || (CreateProjectLinkProjectsResponseType$ = {}));
/** @internal */
export const CreateProjectLinkProjectsResponseDeployHooks$inboundSchema = z.object({
    createdAt: z.number().optional(),
    id: z.string(),
    name: z.string(),
    ref: z.string(),
    url: z.string(),
});
/** @internal */
export const CreateProjectLinkProjectsResponseDeployHooks$outboundSchema = z.object({
    createdAt: z.number().optional(),
    id: z.string(),
    name: z.string(),
    ref: z.string(),
    url: z.string(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CreateProjectLinkProjectsResponseDeployHooks$;
(function (CreateProjectLinkProjectsResponseDeployHooks$) {
    /** @deprecated use `CreateProjectLinkProjectsResponseDeployHooks$inboundSchema` instead. */
    CreateProjectLinkProjectsResponseDeployHooks$.inboundSchema = CreateProjectLinkProjectsResponseDeployHooks$inboundSchema;
    /** @deprecated use `CreateProjectLinkProjectsResponseDeployHooks$outboundSchema` instead. */
    CreateProjectLinkProjectsResponseDeployHooks$.outboundSchema = CreateProjectLinkProjectsResponseDeployHooks$outboundSchema;
})(CreateProjectLinkProjectsResponseDeployHooks$ || (CreateProjectLinkProjectsResponseDeployHooks$ = {}));
export function createProjectLinkProjectsResponseDeployHooksToJSON(createProjectLinkProjectsResponseDeployHooks) {
    return JSON.stringify(CreateProjectLinkProjectsResponseDeployHooks$outboundSchema.parse(createProjectLinkProjectsResponseDeployHooks));
}
export function createProjectLinkProjectsResponseDeployHooksFromJSON(jsonString) {
    return safeParse(jsonString, (x) => CreateProjectLinkProjectsResponseDeployHooks$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CreateProjectLinkProjectsResponseDeployHooks' from JSON`);
}
/** @internal */
export const CreateProjectLink3$inboundSchema = z.object({
    name: z.string().optional(),
    slug: z.string().optional(),
    owner: z.string().optional(),
    type: CreateProjectLinkProjectsResponseType$inboundSchema.optional(),
    uuid: z.string().optional(),
    workspaceUuid: z.string().optional(),
    createdAt: z.number().optional(),
    deployHooks: z.array(z.lazy(() => CreateProjectLinkProjectsResponseDeployHooks$inboundSchema)),
    gitCredentialId: z.string().optional(),
    updatedAt: z.number().optional(),
    sourceless: z.boolean().optional(),
    productionBranch: z.string().optional(),
});
/** @internal */
export const CreateProjectLink3$outboundSchema = z.object({
    name: z.string().optional(),
    slug: z.string().optional(),
    owner: z.string().optional(),
    type: CreateProjectLinkProjectsResponseType$outboundSchema.optional(),
    uuid: z.string().optional(),
    workspaceUuid: z.string().optional(),
    createdAt: z.number().optional(),
    deployHooks: z.array(z.lazy(() => CreateProjectLinkProjectsResponseDeployHooks$outboundSchema)),
    gitCredentialId: z.string().optional(),
    updatedAt: z.number().optional(),
    sourceless: z.boolean().optional(),
    productionBranch: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CreateProjectLink3$;
(function (CreateProjectLink3$) {
    /** @deprecated use `CreateProjectLink3$inboundSchema` instead. */
    CreateProjectLink3$.inboundSchema = CreateProjectLink3$inboundSchema;
    /** @deprecated use `CreateProjectLink3$outboundSchema` instead. */
    CreateProjectLink3$.outboundSchema = CreateProjectLink3$outboundSchema;
})(CreateProjectLink3$ || (CreateProjectLink3$ = {}));
export function createProjectLink3ToJSON(createProjectLink3) {
    return JSON.stringify(CreateProjectLink3$outboundSchema.parse(createProjectLink3));
}
export function createProjectLink3FromJSON(jsonString) {
    return safeParse(jsonString, (x) => CreateProjectLink3$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CreateProjectLink3' from JSON`);
}
/** @internal */
export const CreateProjectLinkProjectsType$inboundSchema = z.nativeEnum(CreateProjectLinkProjectsType);
/** @internal */
export const CreateProjectLinkProjectsType$outboundSchema = CreateProjectLinkProjectsType$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CreateProjectLinkProjectsType$;
(function (CreateProjectLinkProjectsType$) {
    /** @deprecated use `CreateProjectLinkProjectsType$inboundSchema` instead. */
    CreateProjectLinkProjectsType$.inboundSchema = CreateProjectLinkProjectsType$inboundSchema;
    /** @deprecated use `CreateProjectLinkProjectsType$outboundSchema` instead. */
    CreateProjectLinkProjectsType$.outboundSchema = CreateProjectLinkProjectsType$outboundSchema;
})(CreateProjectLinkProjectsType$ || (CreateProjectLinkProjectsType$ = {}));
/** @internal */
export const CreateProjectLinkProjectsDeployHooks$inboundSchema = z.object({
    createdAt: z.number().optional(),
    id: z.string(),
    name: z.string(),
    ref: z.string(),
    url: z.string(),
});
/** @internal */
export const CreateProjectLinkProjectsDeployHooks$outboundSchema = z.object({
    createdAt: z.number().optional(),
    id: z.string(),
    name: z.string(),
    ref: z.string(),
    url: z.string(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CreateProjectLinkProjectsDeployHooks$;
(function (CreateProjectLinkProjectsDeployHooks$) {
    /** @deprecated use `CreateProjectLinkProjectsDeployHooks$inboundSchema` instead. */
    CreateProjectLinkProjectsDeployHooks$.inboundSchema = CreateProjectLinkProjectsDeployHooks$inboundSchema;
    /** @deprecated use `CreateProjectLinkProjectsDeployHooks$outboundSchema` instead. */
    CreateProjectLinkProjectsDeployHooks$.outboundSchema = CreateProjectLinkProjectsDeployHooks$outboundSchema;
})(CreateProjectLinkProjectsDeployHooks$ || (CreateProjectLinkProjectsDeployHooks$ = {}));
export function createProjectLinkProjectsDeployHooksToJSON(createProjectLinkProjectsDeployHooks) {
    return JSON.stringify(CreateProjectLinkProjectsDeployHooks$outboundSchema.parse(createProjectLinkProjectsDeployHooks));
}
export function createProjectLinkProjectsDeployHooksFromJSON(jsonString) {
    return safeParse(jsonString, (x) => CreateProjectLinkProjectsDeployHooks$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CreateProjectLinkProjectsDeployHooks' from JSON`);
}
/** @internal */
export const CreateProjectLink2$inboundSchema = z.object({
    projectId: z.string().optional(),
    projectName: z.string().optional(),
    projectNameWithNamespace: z.string().optional(),
    projectNamespace: z.string().optional(),
    projectOwnerId: z.number().optional(),
    projectUrl: z.string().optional(),
    type: CreateProjectLinkProjectsType$inboundSchema.optional(),
    createdAt: z.number().optional(),
    deployHooks: z.array(z.lazy(() => CreateProjectLinkProjectsDeployHooks$inboundSchema)),
    gitCredentialId: z.string().optional(),
    updatedAt: z.number().optional(),
    sourceless: z.boolean().optional(),
    productionBranch: z.string().optional(),
});
/** @internal */
export const CreateProjectLink2$outboundSchema = z.object({
    projectId: z.string().optional(),
    projectName: z.string().optional(),
    projectNameWithNamespace: z.string().optional(),
    projectNamespace: z.string().optional(),
    projectOwnerId: z.number().optional(),
    projectUrl: z.string().optional(),
    type: CreateProjectLinkProjectsType$outboundSchema.optional(),
    createdAt: z.number().optional(),
    deployHooks: z.array(z.lazy(() => CreateProjectLinkProjectsDeployHooks$outboundSchema)),
    gitCredentialId: z.string().optional(),
    updatedAt: z.number().optional(),
    sourceless: z.boolean().optional(),
    productionBranch: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CreateProjectLink2$;
(function (CreateProjectLink2$) {
    /** @deprecated use `CreateProjectLink2$inboundSchema` instead. */
    CreateProjectLink2$.inboundSchema = CreateProjectLink2$inboundSchema;
    /** @deprecated use `CreateProjectLink2$outboundSchema` instead. */
    CreateProjectLink2$.outboundSchema = CreateProjectLink2$outboundSchema;
})(CreateProjectLink2$ || (CreateProjectLink2$ = {}));
export function createProjectLink2ToJSON(createProjectLink2) {
    return JSON.stringify(CreateProjectLink2$outboundSchema.parse(createProjectLink2));
}
export function createProjectLink2FromJSON(jsonString) {
    return safeParse(jsonString, (x) => CreateProjectLink2$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CreateProjectLink2' from JSON`);
}
/** @internal */
export const CreateProjectLinkType$inboundSchema = z.nativeEnum(CreateProjectLinkType);
/** @internal */
export const CreateProjectLinkType$outboundSchema = CreateProjectLinkType$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CreateProjectLinkType$;
(function (CreateProjectLinkType$) {
    /** @deprecated use `CreateProjectLinkType$inboundSchema` instead. */
    CreateProjectLinkType$.inboundSchema = CreateProjectLinkType$inboundSchema;
    /** @deprecated use `CreateProjectLinkType$outboundSchema` instead. */
    CreateProjectLinkType$.outboundSchema = CreateProjectLinkType$outboundSchema;
})(CreateProjectLinkType$ || (CreateProjectLinkType$ = {}));
/** @internal */
export const CreateProjectLinkDeployHooks$inboundSchema = z.object({
    createdAt: z.number().optional(),
    id: z.string(),
    name: z.string(),
    ref: z.string(),
    url: z.string(),
});
/** @internal */
export const CreateProjectLinkDeployHooks$outboundSchema = z.object({
    createdAt: z.number().optional(),
    id: z.string(),
    name: z.string(),
    ref: z.string(),
    url: z.string(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CreateProjectLinkDeployHooks$;
(function (CreateProjectLinkDeployHooks$) {
    /** @deprecated use `CreateProjectLinkDeployHooks$inboundSchema` instead. */
    CreateProjectLinkDeployHooks$.inboundSchema = CreateProjectLinkDeployHooks$inboundSchema;
    /** @deprecated use `CreateProjectLinkDeployHooks$outboundSchema` instead. */
    CreateProjectLinkDeployHooks$.outboundSchema = CreateProjectLinkDeployHooks$outboundSchema;
})(CreateProjectLinkDeployHooks$ || (CreateProjectLinkDeployHooks$ = {}));
export function createProjectLinkDeployHooksToJSON(createProjectLinkDeployHooks) {
    return JSON.stringify(CreateProjectLinkDeployHooks$outboundSchema.parse(createProjectLinkDeployHooks));
}
export function createProjectLinkDeployHooksFromJSON(jsonString) {
    return safeParse(jsonString, (x) => CreateProjectLinkDeployHooks$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CreateProjectLinkDeployHooks' from JSON`);
}
/** @internal */
export const CreateProjectLink1$inboundSchema = z.object({
    org: z.string().optional(),
    repoOwnerId: z.number().optional(),
    repo: z.string().optional(),
    repoId: z.number().optional(),
    type: CreateProjectLinkType$inboundSchema.optional(),
    createdAt: z.number().optional(),
    deployHooks: z.array(z.lazy(() => CreateProjectLinkDeployHooks$inboundSchema)),
    gitCredentialId: z.string().optional(),
    updatedAt: z.number().optional(),
    sourceless: z.boolean().optional(),
    productionBranch: z.string().optional(),
});
/** @internal */
export const CreateProjectLink1$outboundSchema = z.object({
    org: z.string().optional(),
    repoOwnerId: z.number().optional(),
    repo: z.string().optional(),
    repoId: z.number().optional(),
    type: CreateProjectLinkType$outboundSchema.optional(),
    createdAt: z.number().optional(),
    deployHooks: z.array(z.lazy(() => CreateProjectLinkDeployHooks$outboundSchema)),
    gitCredentialId: z.string().optional(),
    updatedAt: z.number().optional(),
    sourceless: z.boolean().optional(),
    productionBranch: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CreateProjectLink1$;
(function (CreateProjectLink1$) {
    /** @deprecated use `CreateProjectLink1$inboundSchema` instead. */
    CreateProjectLink1$.inboundSchema = CreateProjectLink1$inboundSchema;
    /** @deprecated use `CreateProjectLink1$outboundSchema` instead. */
    CreateProjectLink1$.outboundSchema = CreateProjectLink1$outboundSchema;
})(CreateProjectLink1$ || (CreateProjectLink1$ = {}));
export function createProjectLink1ToJSON(createProjectLink1) {
    return JSON.stringify(CreateProjectLink1$outboundSchema.parse(createProjectLink1));
}
export function createProjectLink1FromJSON(jsonString) {
    return safeParse(jsonString, (x) => CreateProjectLink1$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CreateProjectLink1' from JSON`);
}
/** @internal */
export const CreateProjectLink$inboundSchema = z.union([
    z.lazy(() => CreateProjectLink1$inboundSchema),
    z.lazy(() => CreateProjectLink3$inboundSchema),
    z.lazy(() => CreateProjectLink4$inboundSchema),
    z.lazy(() => CreateProjectLink2$inboundSchema),
]);
/** @internal */
export const CreateProjectLink$outboundSchema = z.union([
    z.lazy(() => CreateProjectLink1$outboundSchema),
    z.lazy(() => CreateProjectLink3$outboundSchema),
    z.lazy(() => CreateProjectLink4$outboundSchema),
    z.lazy(() => CreateProjectLink2$outboundSchema),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CreateProjectLink$;
(function (CreateProjectLink$) {
    /** @deprecated use `CreateProjectLink$inboundSchema` instead. */
    CreateProjectLink$.inboundSchema = CreateProjectLink$inboundSchema;
    /** @deprecated use `CreateProjectLink$outboundSchema` instead. */
    CreateProjectLink$.outboundSchema = CreateProjectLink$outboundSchema;
})(CreateProjectLink$ || (CreateProjectLink$ = {}));
export function createProjectLinkToJSON(createProjectLink) {
    return JSON.stringify(CreateProjectLink$outboundSchema.parse(createProjectLink));
}
export function createProjectLinkFromJSON(jsonString) {
    return safeParse(jsonString, (x) => CreateProjectLink$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CreateProjectLink' from JSON`);
}
/** @internal */
export const CreateProjectMicrofrontends2$inboundSchema = z.object({
    updatedAt: z.number(),
    groupIds: z.array(z.any()),
    enabled: z.boolean(),
});
/** @internal */
export const CreateProjectMicrofrontends2$outboundSchema = z.object({
    updatedAt: z.number(),
    groupIds: z.array(z.any()),
    enabled: z.boolean(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CreateProjectMicrofrontends2$;
(function (CreateProjectMicrofrontends2$) {
    /** @deprecated use `CreateProjectMicrofrontends2$inboundSchema` instead. */
    CreateProjectMicrofrontends2$.inboundSchema = CreateProjectMicrofrontends2$inboundSchema;
    /** @deprecated use `CreateProjectMicrofrontends2$outboundSchema` instead. */
    CreateProjectMicrofrontends2$.outboundSchema = CreateProjectMicrofrontends2$outboundSchema;
})(CreateProjectMicrofrontends2$ || (CreateProjectMicrofrontends2$ = {}));
export function createProjectMicrofrontends2ToJSON(createProjectMicrofrontends2) {
    return JSON.stringify(CreateProjectMicrofrontends2$outboundSchema.parse(createProjectMicrofrontends2));
}
export function createProjectMicrofrontends2FromJSON(jsonString) {
    return safeParse(jsonString, (x) => CreateProjectMicrofrontends2$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CreateProjectMicrofrontends2' from JSON`);
}
/** @internal */
export const CreateProjectMicrofrontends1$inboundSchema = z.object({
    updatedAt: z.number(),
    groupIds: z.array(z.string()),
    enabled: z.boolean(),
    isDefaultApp: z.boolean().optional(),
    defaultRoute: z.string().optional(),
    routeObservabilityToThisProject: z.boolean().optional(),
});
/** @internal */
export const CreateProjectMicrofrontends1$outboundSchema = z.object({
    updatedAt: z.number(),
    groupIds: z.array(z.string()),
    enabled: z.boolean(),
    isDefaultApp: z.boolean().optional(),
    defaultRoute: z.string().optional(),
    routeObservabilityToThisProject: z.boolean().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CreateProjectMicrofrontends1$;
(function (CreateProjectMicrofrontends1$) {
    /** @deprecated use `CreateProjectMicrofrontends1$inboundSchema` instead. */
    CreateProjectMicrofrontends1$.inboundSchema = CreateProjectMicrofrontends1$inboundSchema;
    /** @deprecated use `CreateProjectMicrofrontends1$outboundSchema` instead. */
    CreateProjectMicrofrontends1$.outboundSchema = CreateProjectMicrofrontends1$outboundSchema;
})(CreateProjectMicrofrontends1$ || (CreateProjectMicrofrontends1$ = {}));
export function createProjectMicrofrontends1ToJSON(createProjectMicrofrontends1) {
    return JSON.stringify(CreateProjectMicrofrontends1$outboundSchema.parse(createProjectMicrofrontends1));
}
export function createProjectMicrofrontends1FromJSON(jsonString) {
    return safeParse(jsonString, (x) => CreateProjectMicrofrontends1$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CreateProjectMicrofrontends1' from JSON`);
}
/** @internal */
export const CreateProjectMicrofrontends$inboundSchema = z.union([
    z.lazy(() => CreateProjectMicrofrontends2$inboundSchema),
    z.lazy(() => CreateProjectMicrofrontends1$inboundSchema),
]);
/** @internal */
export const CreateProjectMicrofrontends$outboundSchema = z.union([
    z.lazy(() => CreateProjectMicrofrontends2$outboundSchema),
    z.lazy(() => CreateProjectMicrofrontends1$outboundSchema),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CreateProjectMicrofrontends$;
(function (CreateProjectMicrofrontends$) {
    /** @deprecated use `CreateProjectMicrofrontends$inboundSchema` instead. */
    CreateProjectMicrofrontends$.inboundSchema = CreateProjectMicrofrontends$inboundSchema;
    /** @deprecated use `CreateProjectMicrofrontends$outboundSchema` instead. */
    CreateProjectMicrofrontends$.outboundSchema = CreateProjectMicrofrontends$outboundSchema;
})(CreateProjectMicrofrontends$ || (CreateProjectMicrofrontends$ = {}));
export function createProjectMicrofrontendsToJSON(createProjectMicrofrontends) {
    return JSON.stringify(CreateProjectMicrofrontends$outboundSchema.parse(createProjectMicrofrontends));
}
export function createProjectMicrofrontendsFromJSON(jsonString) {
    return safeParse(jsonString, (x) => CreateProjectMicrofrontends$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CreateProjectMicrofrontends' from JSON`);
}
/** @internal */
export const CreateProjectNodeVersion$inboundSchema = z.nativeEnum(CreateProjectNodeVersion);
/** @internal */
export const CreateProjectNodeVersion$outboundSchema = CreateProjectNodeVersion$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CreateProjectNodeVersion$;
(function (CreateProjectNodeVersion$) {
    /** @deprecated use `CreateProjectNodeVersion$inboundSchema` instead. */
    CreateProjectNodeVersion$.inboundSchema = CreateProjectNodeVersion$inboundSchema;
    /** @deprecated use `CreateProjectNodeVersion$outboundSchema` instead. */
    CreateProjectNodeVersion$.outboundSchema = CreateProjectNodeVersion$outboundSchema;
})(CreateProjectNodeVersion$ || (CreateProjectNodeVersion$ = {}));
/** @internal */
export const CreateProjectPaths$inboundSchema = z.object({
    value: z.string(),
});
/** @internal */
export const CreateProjectPaths$outboundSchema = z.object({
    value: z.string(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CreateProjectPaths$;
(function (CreateProjectPaths$) {
    /** @deprecated use `CreateProjectPaths$inboundSchema` instead. */
    CreateProjectPaths$.inboundSchema = CreateProjectPaths$inboundSchema;
    /** @deprecated use `CreateProjectPaths$outboundSchema` instead. */
    CreateProjectPaths$.outboundSchema = CreateProjectPaths$outboundSchema;
})(CreateProjectPaths$ || (CreateProjectPaths$ = {}));
export function createProjectPathsToJSON(createProjectPaths) {
    return JSON.stringify(CreateProjectPaths$outboundSchema.parse(createProjectPaths));
}
export function createProjectPathsFromJSON(jsonString) {
    return safeParse(jsonString, (x) => CreateProjectPaths$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CreateProjectPaths' from JSON`);
}
/** @internal */
export const CreateProjectOptionsAllowlist$inboundSchema = z.object({
    paths: z.array(z.lazy(() => CreateProjectPaths$inboundSchema)),
});
/** @internal */
export const CreateProjectOptionsAllowlist$outboundSchema = z.object({
    paths: z.array(z.lazy(() => CreateProjectPaths$outboundSchema)),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CreateProjectOptionsAllowlist$;
(function (CreateProjectOptionsAllowlist$) {
    /** @deprecated use `CreateProjectOptionsAllowlist$inboundSchema` instead. */
    CreateProjectOptionsAllowlist$.inboundSchema = CreateProjectOptionsAllowlist$inboundSchema;
    /** @deprecated use `CreateProjectOptionsAllowlist$outboundSchema` instead. */
    CreateProjectOptionsAllowlist$.outboundSchema = CreateProjectOptionsAllowlist$outboundSchema;
})(CreateProjectOptionsAllowlist$ || (CreateProjectOptionsAllowlist$ = {}));
export function createProjectOptionsAllowlistToJSON(createProjectOptionsAllowlist) {
    return JSON.stringify(CreateProjectOptionsAllowlist$outboundSchema.parse(createProjectOptionsAllowlist));
}
export function createProjectOptionsAllowlistFromJSON(jsonString) {
    return safeParse(jsonString, (x) => CreateProjectOptionsAllowlist$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CreateProjectOptionsAllowlist' from JSON`);
}
/** @internal */
export const CreateProjectPasswordProtection$inboundSchema = z.object({});
/** @internal */
export const CreateProjectPasswordProtection$outboundSchema = z.object({});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CreateProjectPasswordProtection$;
(function (CreateProjectPasswordProtection$) {
    /** @deprecated use `CreateProjectPasswordProtection$inboundSchema` instead. */
    CreateProjectPasswordProtection$.inboundSchema = CreateProjectPasswordProtection$inboundSchema;
    /** @deprecated use `CreateProjectPasswordProtection$outboundSchema` instead. */
    CreateProjectPasswordProtection$.outboundSchema = CreateProjectPasswordProtection$outboundSchema;
})(CreateProjectPasswordProtection$ || (CreateProjectPasswordProtection$ = {}));
export function createProjectPasswordProtectionToJSON(createProjectPasswordProtection) {
    return JSON.stringify(CreateProjectPasswordProtection$outboundSchema.parse(createProjectPasswordProtection));
}
export function createProjectPasswordProtectionFromJSON(jsonString) {
    return safeParse(jsonString, (x) => CreateProjectPasswordProtection$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CreateProjectPasswordProtection' from JSON`);
}
/** @internal */
export const CreateProjectFunctionDefaultMemoryType$inboundSchema = z.nativeEnum(CreateProjectFunctionDefaultMemoryType);
/** @internal */
export const CreateProjectFunctionDefaultMemoryType$outboundSchema = CreateProjectFunctionDefaultMemoryType$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CreateProjectFunctionDefaultMemoryType$;
(function (CreateProjectFunctionDefaultMemoryType$) {
    /** @deprecated use `CreateProjectFunctionDefaultMemoryType$inboundSchema` instead. */
    CreateProjectFunctionDefaultMemoryType$.inboundSchema = CreateProjectFunctionDefaultMemoryType$inboundSchema;
    /** @deprecated use `CreateProjectFunctionDefaultMemoryType$outboundSchema` instead. */
    CreateProjectFunctionDefaultMemoryType$.outboundSchema = CreateProjectFunctionDefaultMemoryType$outboundSchema;
})(CreateProjectFunctionDefaultMemoryType$ || (CreateProjectFunctionDefaultMemoryType$ = {}));
/** @internal */
export const CreateProjectBuildMachineType$inboundSchema = z.nativeEnum(CreateProjectBuildMachineType);
/** @internal */
export const CreateProjectBuildMachineType$outboundSchema = CreateProjectBuildMachineType$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CreateProjectBuildMachineType$;
(function (CreateProjectBuildMachineType$) {
    /** @deprecated use `CreateProjectBuildMachineType$inboundSchema` instead. */
    CreateProjectBuildMachineType$.inboundSchema = CreateProjectBuildMachineType$inboundSchema;
    /** @deprecated use `CreateProjectBuildMachineType$outboundSchema` instead. */
    CreateProjectBuildMachineType$.outboundSchema = CreateProjectBuildMachineType$outboundSchema;
})(CreateProjectBuildMachineType$ || (CreateProjectBuildMachineType$ = {}));
/** @internal */
export const CreateProjectProjectsResourceConfig$inboundSchema = z.object({
    fluid: z.boolean().optional(),
    functionDefaultRegions: z.array(z.string()),
    functionDefaultTimeout: z.number().optional(),
    functionDefaultMemoryType: CreateProjectFunctionDefaultMemoryType$inboundSchema.optional(),
    functionZeroConfigFailover: z.boolean().optional(),
    elasticConcurrencyEnabled: z.boolean().optional(),
    buildMachineType: CreateProjectBuildMachineType$inboundSchema.optional(),
});
/** @internal */
export const CreateProjectProjectsResourceConfig$outboundSchema = z.object({
    fluid: z.boolean().optional(),
    functionDefaultRegions: z.array(z.string()),
    functionDefaultTimeout: z.number().optional(),
    functionDefaultMemoryType: CreateProjectFunctionDefaultMemoryType$outboundSchema.optional(),
    functionZeroConfigFailover: z.boolean().optional(),
    elasticConcurrencyEnabled: z.boolean().optional(),
    buildMachineType: CreateProjectBuildMachineType$outboundSchema.optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CreateProjectProjectsResourceConfig$;
(function (CreateProjectProjectsResourceConfig$) {
    /** @deprecated use `CreateProjectProjectsResourceConfig$inboundSchema` instead. */
    CreateProjectProjectsResourceConfig$.inboundSchema = CreateProjectProjectsResourceConfig$inboundSchema;
    /** @deprecated use `CreateProjectProjectsResourceConfig$outboundSchema` instead. */
    CreateProjectProjectsResourceConfig$.outboundSchema = CreateProjectProjectsResourceConfig$outboundSchema;
})(CreateProjectProjectsResourceConfig$ || (CreateProjectProjectsResourceConfig$ = {}));
export function createProjectProjectsResourceConfigToJSON(createProjectProjectsResourceConfig) {
    return JSON.stringify(CreateProjectProjectsResourceConfig$outboundSchema.parse(createProjectProjectsResourceConfig));
}
export function createProjectProjectsResourceConfigFromJSON(jsonString) {
    return safeParse(jsonString, (x) => CreateProjectProjectsResourceConfig$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CreateProjectProjectsResourceConfig' from JSON`);
}
/** @internal */
export const CreateProjectStages$inboundSchema = z.object({
    targetPercentage: z.number(),
    minutesToRelease: z.number().optional(),
    requireApproval: z.boolean().optional(),
    duration: z.number().optional(),
});
/** @internal */
export const CreateProjectStages$outboundSchema = z.object({
    targetPercentage: z.number(),
    minutesToRelease: z.number().optional(),
    requireApproval: z.boolean().optional(),
    duration: z.number().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CreateProjectStages$;
(function (CreateProjectStages$) {
    /** @deprecated use `CreateProjectStages$inboundSchema` instead. */
    CreateProjectStages$.inboundSchema = CreateProjectStages$inboundSchema;
    /** @deprecated use `CreateProjectStages$outboundSchema` instead. */
    CreateProjectStages$.outboundSchema = CreateProjectStages$outboundSchema;
})(CreateProjectStages$ || (CreateProjectStages$ = {}));
export function createProjectStagesToJSON(createProjectStages) {
    return JSON.stringify(CreateProjectStages$outboundSchema.parse(createProjectStages));
}
export function createProjectStagesFromJSON(jsonString) {
    return safeParse(jsonString, (x) => CreateProjectStages$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CreateProjectStages' from JSON`);
}
/** @internal */
export const CreateProjectRollingRelease$inboundSchema = z.object({
    target: z.string(),
    minutesToRelease: z.number().optional(),
    stages: z.nullable(z.array(z.lazy(() => CreateProjectStages$inboundSchema)))
        .optional(),
});
/** @internal */
export const CreateProjectRollingRelease$outboundSchema = z.object({
    target: z.string(),
    minutesToRelease: z.number().optional(),
    stages: z.nullable(z.array(z.lazy(() => CreateProjectStages$outboundSchema)))
        .optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CreateProjectRollingRelease$;
(function (CreateProjectRollingRelease$) {
    /** @deprecated use `CreateProjectRollingRelease$inboundSchema` instead. */
    CreateProjectRollingRelease$.inboundSchema = CreateProjectRollingRelease$inboundSchema;
    /** @deprecated use `CreateProjectRollingRelease$outboundSchema` instead. */
    CreateProjectRollingRelease$.outboundSchema = CreateProjectRollingRelease$outboundSchema;
})(CreateProjectRollingRelease$ || (CreateProjectRollingRelease$ = {}));
export function createProjectRollingReleaseToJSON(createProjectRollingRelease) {
    return JSON.stringify(CreateProjectRollingRelease$outboundSchema.parse(createProjectRollingRelease));
}
export function createProjectRollingReleaseFromJSON(jsonString) {
    return safeParse(jsonString, (x) => CreateProjectRollingRelease$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CreateProjectRollingRelease' from JSON`);
}
/** @internal */
export const CreateProjectProjectsFunctionDefaultMemoryType$inboundSchema = z
    .nativeEnum(CreateProjectProjectsFunctionDefaultMemoryType);
/** @internal */
export const CreateProjectProjectsFunctionDefaultMemoryType$outboundSchema = CreateProjectProjectsFunctionDefaultMemoryType$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CreateProjectProjectsFunctionDefaultMemoryType$;
(function (CreateProjectProjectsFunctionDefaultMemoryType$) {
    /** @deprecated use `CreateProjectProjectsFunctionDefaultMemoryType$inboundSchema` instead. */
    CreateProjectProjectsFunctionDefaultMemoryType$.inboundSchema = CreateProjectProjectsFunctionDefaultMemoryType$inboundSchema;
    /** @deprecated use `CreateProjectProjectsFunctionDefaultMemoryType$outboundSchema` instead. */
    CreateProjectProjectsFunctionDefaultMemoryType$.outboundSchema = CreateProjectProjectsFunctionDefaultMemoryType$outboundSchema;
})(CreateProjectProjectsFunctionDefaultMemoryType$ || (CreateProjectProjectsFunctionDefaultMemoryType$ = {}));
/** @internal */
export const CreateProjectProjectsBuildMachineType$inboundSchema = z.nativeEnum(CreateProjectProjectsBuildMachineType);
/** @internal */
export const CreateProjectProjectsBuildMachineType$outboundSchema = CreateProjectProjectsBuildMachineType$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CreateProjectProjectsBuildMachineType$;
(function (CreateProjectProjectsBuildMachineType$) {
    /** @deprecated use `CreateProjectProjectsBuildMachineType$inboundSchema` instead. */
    CreateProjectProjectsBuildMachineType$.inboundSchema = CreateProjectProjectsBuildMachineType$inboundSchema;
    /** @deprecated use `CreateProjectProjectsBuildMachineType$outboundSchema` instead. */
    CreateProjectProjectsBuildMachineType$.outboundSchema = CreateProjectProjectsBuildMachineType$outboundSchema;
})(CreateProjectProjectsBuildMachineType$ || (CreateProjectProjectsBuildMachineType$ = {}));
/** @internal */
export const CreateProjectDefaultResourceConfig$inboundSchema = z.object({
    fluid: z.boolean().optional(),
    functionDefaultRegions: z.array(z.string()),
    functionDefaultTimeout: z.number().optional(),
    functionDefaultMemoryType: CreateProjectProjectsFunctionDefaultMemoryType$inboundSchema.optional(),
    functionZeroConfigFailover: z.boolean().optional(),
    elasticConcurrencyEnabled: z.boolean().optional(),
    buildMachineType: CreateProjectProjectsBuildMachineType$inboundSchema
        .optional(),
});
/** @internal */
export const CreateProjectDefaultResourceConfig$outboundSchema = z.object({
    fluid: z.boolean().optional(),
    functionDefaultRegions: z.array(z.string()),
    functionDefaultTimeout: z.number().optional(),
    functionDefaultMemoryType: CreateProjectProjectsFunctionDefaultMemoryType$outboundSchema.optional(),
    functionZeroConfigFailover: z.boolean().optional(),
    elasticConcurrencyEnabled: z.boolean().optional(),
    buildMachineType: CreateProjectProjectsBuildMachineType$outboundSchema
        .optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CreateProjectDefaultResourceConfig$;
(function (CreateProjectDefaultResourceConfig$) {
    /** @deprecated use `CreateProjectDefaultResourceConfig$inboundSchema` instead. */
    CreateProjectDefaultResourceConfig$.inboundSchema = CreateProjectDefaultResourceConfig$inboundSchema;
    /** @deprecated use `CreateProjectDefaultResourceConfig$outboundSchema` instead. */
    CreateProjectDefaultResourceConfig$.outboundSchema = CreateProjectDefaultResourceConfig$outboundSchema;
})(CreateProjectDefaultResourceConfig$ || (CreateProjectDefaultResourceConfig$ = {}));
export function createProjectDefaultResourceConfigToJSON(createProjectDefaultResourceConfig) {
    return JSON.stringify(CreateProjectDefaultResourceConfig$outboundSchema.parse(createProjectDefaultResourceConfig));
}
export function createProjectDefaultResourceConfigFromJSON(jsonString) {
    return safeParse(jsonString, (x) => CreateProjectDefaultResourceConfig$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CreateProjectDefaultResourceConfig' from JSON`);
}
/** @internal */
export const CreateProjectDeploymentType$inboundSchema = z.nativeEnum(CreateProjectDeploymentType);
/** @internal */
export const CreateProjectDeploymentType$outboundSchema = CreateProjectDeploymentType$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CreateProjectDeploymentType$;
(function (CreateProjectDeploymentType$) {
    /** @deprecated use `CreateProjectDeploymentType$inboundSchema` instead. */
    CreateProjectDeploymentType$.inboundSchema = CreateProjectDeploymentType$inboundSchema;
    /** @deprecated use `CreateProjectDeploymentType$outboundSchema` instead. */
    CreateProjectDeploymentType$.outboundSchema = CreateProjectDeploymentType$outboundSchema;
})(CreateProjectDeploymentType$ || (CreateProjectDeploymentType$ = {}));
/** @internal */
export const CreateProjectSsoProtection$inboundSchema = z.object({
    deploymentType: CreateProjectDeploymentType$inboundSchema,
});
/** @internal */
export const CreateProjectSsoProtection$outboundSchema = z.object({
    deploymentType: CreateProjectDeploymentType$outboundSchema,
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CreateProjectSsoProtection$;
(function (CreateProjectSsoProtection$) {
    /** @deprecated use `CreateProjectSsoProtection$inboundSchema` instead. */
    CreateProjectSsoProtection$.inboundSchema = CreateProjectSsoProtection$inboundSchema;
    /** @deprecated use `CreateProjectSsoProtection$outboundSchema` instead. */
    CreateProjectSsoProtection$.outboundSchema = CreateProjectSsoProtection$outboundSchema;
})(CreateProjectSsoProtection$ || (CreateProjectSsoProtection$ = {}));
export function createProjectSsoProtectionToJSON(createProjectSsoProtection) {
    return JSON.stringify(CreateProjectSsoProtection$outboundSchema.parse(createProjectSsoProtection));
}
export function createProjectSsoProtectionFromJSON(jsonString) {
    return safeParse(jsonString, (x) => CreateProjectSsoProtection$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CreateProjectSsoProtection' from JSON`);
}
/** @internal */
export const CreateProjectProjectsAliasAssigned$inboundSchema = z.union([z.number(), z.boolean()]);
/** @internal */
export const CreateProjectProjectsAliasAssigned$outboundSchema = z.union([z.number(), z.boolean()]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CreateProjectProjectsAliasAssigned$;
(function (CreateProjectProjectsAliasAssigned$) {
    /** @deprecated use `CreateProjectProjectsAliasAssigned$inboundSchema` instead. */
    CreateProjectProjectsAliasAssigned$.inboundSchema = CreateProjectProjectsAliasAssigned$inboundSchema;
    /** @deprecated use `CreateProjectProjectsAliasAssigned$outboundSchema` instead. */
    CreateProjectProjectsAliasAssigned$.outboundSchema = CreateProjectProjectsAliasAssigned$outboundSchema;
})(CreateProjectProjectsAliasAssigned$ || (CreateProjectProjectsAliasAssigned$ = {}));
export function createProjectProjectsAliasAssignedToJSON(createProjectProjectsAliasAssigned) {
    return JSON.stringify(CreateProjectProjectsAliasAssigned$outboundSchema.parse(createProjectProjectsAliasAssigned));
}
export function createProjectProjectsAliasAssignedFromJSON(jsonString) {
    return safeParse(jsonString, (x) => CreateProjectProjectsAliasAssigned$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CreateProjectProjectsAliasAssigned' from JSON`);
}
/** @internal */
export const CreateProjectProjectsAliasError$inboundSchema = z.object({
    code: z.string(),
    message: z.string(),
});
/** @internal */
export const CreateProjectProjectsAliasError$outboundSchema = z.object({
    code: z.string(),
    message: z.string(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CreateProjectProjectsAliasError$;
(function (CreateProjectProjectsAliasError$) {
    /** @deprecated use `CreateProjectProjectsAliasError$inboundSchema` instead. */
    CreateProjectProjectsAliasError$.inboundSchema = CreateProjectProjectsAliasError$inboundSchema;
    /** @deprecated use `CreateProjectProjectsAliasError$outboundSchema` instead. */
    CreateProjectProjectsAliasError$.outboundSchema = CreateProjectProjectsAliasError$outboundSchema;
})(CreateProjectProjectsAliasError$ || (CreateProjectProjectsAliasError$ = {}));
export function createProjectProjectsAliasErrorToJSON(createProjectProjectsAliasError) {
    return JSON.stringify(CreateProjectProjectsAliasError$outboundSchema.parse(createProjectProjectsAliasError));
}
export function createProjectProjectsAliasErrorFromJSON(jsonString) {
    return safeParse(jsonString, (x) => CreateProjectProjectsAliasError$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CreateProjectProjectsAliasError' from JSON`);
}
/** @internal */
export const CreateProjectProjectsResponse200ApplicationJSONResponseBodyTargetsType$inboundSchema = z.nativeEnum(CreateProjectProjectsResponse200ApplicationJSONResponseBodyTargetsType);
/** @internal */
export const CreateProjectProjectsResponse200ApplicationJSONResponseBodyTargetsType$outboundSchema = CreateProjectProjectsResponse200ApplicationJSONResponseBodyTargetsType$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CreateProjectProjectsResponse200ApplicationJSONResponseBodyTargetsType$;
(function (CreateProjectProjectsResponse200ApplicationJSONResponseBodyTargetsType$) {
    /** @deprecated use `CreateProjectProjectsResponse200ApplicationJSONResponseBodyTargetsType$inboundSchema` instead. */
    CreateProjectProjectsResponse200ApplicationJSONResponseBodyTargetsType$.inboundSchema = CreateProjectProjectsResponse200ApplicationJSONResponseBodyTargetsType$inboundSchema;
    /** @deprecated use `CreateProjectProjectsResponse200ApplicationJSONResponseBodyTargetsType$outboundSchema` instead. */
    CreateProjectProjectsResponse200ApplicationJSONResponseBodyTargetsType$.outboundSchema = CreateProjectProjectsResponse200ApplicationJSONResponseBodyTargetsType$outboundSchema;
})(CreateProjectProjectsResponse200ApplicationJSONResponseBodyTargetsType$ || (CreateProjectProjectsResponse200ApplicationJSONResponseBodyTargetsType$ = {}));
/** @internal */
export const CreateProjectProjectsResponseBranchMatcher$inboundSchema = z.object({
    type: CreateProjectProjectsResponse200ApplicationJSONResponseBodyTargetsType$inboundSchema,
    pattern: z.string(),
});
/** @internal */
export const CreateProjectProjectsResponseBranchMatcher$outboundSchema = z.object({
    type: CreateProjectProjectsResponse200ApplicationJSONResponseBodyTargetsType$outboundSchema,
    pattern: z.string(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CreateProjectProjectsResponseBranchMatcher$;
(function (CreateProjectProjectsResponseBranchMatcher$) {
    /** @deprecated use `CreateProjectProjectsResponseBranchMatcher$inboundSchema` instead. */
    CreateProjectProjectsResponseBranchMatcher$.inboundSchema = CreateProjectProjectsResponseBranchMatcher$inboundSchema;
    /** @deprecated use `CreateProjectProjectsResponseBranchMatcher$outboundSchema` instead. */
    CreateProjectProjectsResponseBranchMatcher$.outboundSchema = CreateProjectProjectsResponseBranchMatcher$outboundSchema;
})(CreateProjectProjectsResponseBranchMatcher$ || (CreateProjectProjectsResponseBranchMatcher$ = {}));
export function createProjectProjectsResponseBranchMatcherToJSON(createProjectProjectsResponseBranchMatcher) {
    return JSON.stringify(CreateProjectProjectsResponseBranchMatcher$outboundSchema.parse(createProjectProjectsResponseBranchMatcher));
}
export function createProjectProjectsResponseBranchMatcherFromJSON(jsonString) {
    return safeParse(jsonString, (x) => CreateProjectProjectsResponseBranchMatcher$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CreateProjectProjectsResponseBranchMatcher' from JSON`);
}
/** @internal */
export const CreateProjectProjectsBuilds$inboundSchema = z.object({
    use: z.string(),
    src: z.string().optional(),
    dest: z.string().optional(),
});
/** @internal */
export const CreateProjectProjectsBuilds$outboundSchema = z.object({
    use: z.string(),
    src: z.string().optional(),
    dest: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CreateProjectProjectsBuilds$;
(function (CreateProjectProjectsBuilds$) {
    /** @deprecated use `CreateProjectProjectsBuilds$inboundSchema` instead. */
    CreateProjectProjectsBuilds$.inboundSchema = CreateProjectProjectsBuilds$inboundSchema;
    /** @deprecated use `CreateProjectProjectsBuilds$outboundSchema` instead. */
    CreateProjectProjectsBuilds$.outboundSchema = CreateProjectProjectsBuilds$outboundSchema;
})(CreateProjectProjectsBuilds$ || (CreateProjectProjectsBuilds$ = {}));
export function createProjectProjectsBuildsToJSON(createProjectProjectsBuilds) {
    return JSON.stringify(CreateProjectProjectsBuilds$outboundSchema.parse(createProjectProjectsBuilds));
}
export function createProjectProjectsBuildsFromJSON(jsonString) {
    return safeParse(jsonString, (x) => CreateProjectProjectsBuilds$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CreateProjectProjectsBuilds' from JSON`);
}
/** @internal */
export const CreateProjectProjectsChecksConclusion$inboundSchema = z.nativeEnum(CreateProjectProjectsChecksConclusion);
/** @internal */
export const CreateProjectProjectsChecksConclusion$outboundSchema = CreateProjectProjectsChecksConclusion$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CreateProjectProjectsChecksConclusion$;
(function (CreateProjectProjectsChecksConclusion$) {
    /** @deprecated use `CreateProjectProjectsChecksConclusion$inboundSchema` instead. */
    CreateProjectProjectsChecksConclusion$.inboundSchema = CreateProjectProjectsChecksConclusion$inboundSchema;
    /** @deprecated use `CreateProjectProjectsChecksConclusion$outboundSchema` instead. */
    CreateProjectProjectsChecksConclusion$.outboundSchema = CreateProjectProjectsChecksConclusion$outboundSchema;
})(CreateProjectProjectsChecksConclusion$ || (CreateProjectProjectsChecksConclusion$ = {}));
/** @internal */
export const CreateProjectProjectsChecksState$inboundSchema = z.nativeEnum(CreateProjectProjectsChecksState);
/** @internal */
export const CreateProjectProjectsChecksState$outboundSchema = CreateProjectProjectsChecksState$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CreateProjectProjectsChecksState$;
(function (CreateProjectProjectsChecksState$) {
    /** @deprecated use `CreateProjectProjectsChecksState$inboundSchema` instead. */
    CreateProjectProjectsChecksState$.inboundSchema = CreateProjectProjectsChecksState$inboundSchema;
    /** @deprecated use `CreateProjectProjectsChecksState$outboundSchema` instead. */
    CreateProjectProjectsChecksState$.outboundSchema = CreateProjectProjectsChecksState$outboundSchema;
})(CreateProjectProjectsChecksState$ || (CreateProjectProjectsChecksState$ = {}));
/** @internal */
export const CreateProjectProjectsCreator$inboundSchema = z.object({
    email: z.string(),
    githubLogin: z.string().optional(),
    gitlabLogin: z.string().optional(),
    uid: z.string(),
    username: z.string(),
});
/** @internal */
export const CreateProjectProjectsCreator$outboundSchema = z.object({
    email: z.string(),
    githubLogin: z.string().optional(),
    gitlabLogin: z.string().optional(),
    uid: z.string(),
    username: z.string(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CreateProjectProjectsCreator$;
(function (CreateProjectProjectsCreator$) {
    /** @deprecated use `CreateProjectProjectsCreator$inboundSchema` instead. */
    CreateProjectProjectsCreator$.inboundSchema = CreateProjectProjectsCreator$inboundSchema;
    /** @deprecated use `CreateProjectProjectsCreator$outboundSchema` instead. */
    CreateProjectProjectsCreator$.outboundSchema = CreateProjectProjectsCreator$outboundSchema;
})(CreateProjectProjectsCreator$ || (CreateProjectProjectsCreator$ = {}));
export function createProjectProjectsCreatorToJSON(createProjectProjectsCreator) {
    return JSON.stringify(CreateProjectProjectsCreator$outboundSchema.parse(createProjectProjectsCreator));
}
export function createProjectProjectsCreatorFromJSON(jsonString) {
    return safeParse(jsonString, (x) => CreateProjectProjectsCreator$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CreateProjectProjectsCreator' from JSON`);
}
/** @internal */
export const CreateProjectProjectsOidcTokenClaims$inboundSchema = z.object({
    iss: z.string(),
    sub: z.string(),
    scope: z.string(),
    aud: z.string(),
    owner: z.string(),
    owner_id: z.string(),
    project: z.string(),
    project_id: z.string(),
    environment: z.string(),
}).transform((v) => {
    return remap$(v, {
        "owner_id": "ownerId",
        "project_id": "projectId",
    });
});
/** @internal */
export const CreateProjectProjectsOidcTokenClaims$outboundSchema = z.object({
    iss: z.string(),
    sub: z.string(),
    scope: z.string(),
    aud: z.string(),
    owner: z.string(),
    ownerId: z.string(),
    project: z.string(),
    projectId: z.string(),
    environment: z.string(),
}).transform((v) => {
    return remap$(v, {
        ownerId: "owner_id",
        projectId: "project_id",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CreateProjectProjectsOidcTokenClaims$;
(function (CreateProjectProjectsOidcTokenClaims$) {
    /** @deprecated use `CreateProjectProjectsOidcTokenClaims$inboundSchema` instead. */
    CreateProjectProjectsOidcTokenClaims$.inboundSchema = CreateProjectProjectsOidcTokenClaims$inboundSchema;
    /** @deprecated use `CreateProjectProjectsOidcTokenClaims$outboundSchema` instead. */
    CreateProjectProjectsOidcTokenClaims$.outboundSchema = CreateProjectProjectsOidcTokenClaims$outboundSchema;
})(CreateProjectProjectsOidcTokenClaims$ || (CreateProjectProjectsOidcTokenClaims$ = {}));
export function createProjectProjectsOidcTokenClaimsToJSON(createProjectProjectsOidcTokenClaims) {
    return JSON.stringify(CreateProjectProjectsOidcTokenClaims$outboundSchema.parse(createProjectProjectsOidcTokenClaims));
}
export function createProjectProjectsOidcTokenClaimsFromJSON(jsonString) {
    return safeParse(jsonString, (x) => CreateProjectProjectsOidcTokenClaims$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CreateProjectProjectsOidcTokenClaims' from JSON`);
}
/** @internal */
export const CreateProjectProjectsPlan$inboundSchema = z.nativeEnum(CreateProjectProjectsPlan);
/** @internal */
export const CreateProjectProjectsPlan$outboundSchema = CreateProjectProjectsPlan$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CreateProjectProjectsPlan$;
(function (CreateProjectProjectsPlan$) {
    /** @deprecated use `CreateProjectProjectsPlan$inboundSchema` instead. */
    CreateProjectProjectsPlan$.inboundSchema = CreateProjectProjectsPlan$inboundSchema;
    /** @deprecated use `CreateProjectProjectsPlan$outboundSchema` instead. */
    CreateProjectProjectsPlan$.outboundSchema = CreateProjectProjectsPlan$outboundSchema;
})(CreateProjectProjectsPlan$ || (CreateProjectProjectsPlan$ = {}));
/** @internal */
export const CreateProjectProjectsReadyState$inboundSchema = z.nativeEnum(CreateProjectProjectsReadyState);
/** @internal */
export const CreateProjectProjectsReadyState$outboundSchema = CreateProjectProjectsReadyState$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CreateProjectProjectsReadyState$;
(function (CreateProjectProjectsReadyState$) {
    /** @deprecated use `CreateProjectProjectsReadyState$inboundSchema` instead. */
    CreateProjectProjectsReadyState$.inboundSchema = CreateProjectProjectsReadyState$inboundSchema;
    /** @deprecated use `CreateProjectProjectsReadyState$outboundSchema` instead. */
    CreateProjectProjectsReadyState$.outboundSchema = CreateProjectProjectsReadyState$outboundSchema;
})(CreateProjectProjectsReadyState$ || (CreateProjectProjectsReadyState$ = {}));
/** @internal */
export const CreateProjectProjectsReadySubstate$inboundSchema = z.nativeEnum(CreateProjectProjectsReadySubstate);
/** @internal */
export const CreateProjectProjectsReadySubstate$outboundSchema = CreateProjectProjectsReadySubstate$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CreateProjectProjectsReadySubstate$;
(function (CreateProjectProjectsReadySubstate$) {
    /** @deprecated use `CreateProjectProjectsReadySubstate$inboundSchema` instead. */
    CreateProjectProjectsReadySubstate$.inboundSchema = CreateProjectProjectsReadySubstate$inboundSchema;
    /** @deprecated use `CreateProjectProjectsReadySubstate$outboundSchema` instead. */
    CreateProjectProjectsReadySubstate$.outboundSchema = CreateProjectProjectsReadySubstate$outboundSchema;
})(CreateProjectProjectsReadySubstate$ || (CreateProjectProjectsReadySubstate$ = {}));
/** @internal */
export const CreateProjectProjectsResponse200ApplicationJSONResponseBodyType$inboundSchema = z.nativeEnum(CreateProjectProjectsResponse200ApplicationJSONResponseBodyType);
/** @internal */
export const CreateProjectProjectsResponse200ApplicationJSONResponseBodyType$outboundSchema = CreateProjectProjectsResponse200ApplicationJSONResponseBodyType$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CreateProjectProjectsResponse200ApplicationJSONResponseBodyType$;
(function (CreateProjectProjectsResponse200ApplicationJSONResponseBodyType$) {
    /** @deprecated use `CreateProjectProjectsResponse200ApplicationJSONResponseBodyType$inboundSchema` instead. */
    CreateProjectProjectsResponse200ApplicationJSONResponseBodyType$.inboundSchema = CreateProjectProjectsResponse200ApplicationJSONResponseBodyType$inboundSchema;
    /** @deprecated use `CreateProjectProjectsResponse200ApplicationJSONResponseBodyType$outboundSchema` instead. */
    CreateProjectProjectsResponse200ApplicationJSONResponseBodyType$.outboundSchema = CreateProjectProjectsResponse200ApplicationJSONResponseBodyType$outboundSchema;
})(CreateProjectProjectsResponse200ApplicationJSONResponseBodyType$ || (CreateProjectProjectsResponse200ApplicationJSONResponseBodyType$ = {}));
/** @internal */
export const CreateProjectTargets$inboundSchema = z.object({
    id: z.string(),
    alias: z.array(z.string()).optional(),
    aliasAssigned: z.nullable(z.union([z.number(), z.boolean()])).optional(),
    aliasError: z.nullable(z.lazy(() => CreateProjectProjectsAliasError$inboundSchema)).optional(),
    aliasFinal: z.nullable(z.string()).optional(),
    automaticAliases: z.array(z.string()).optional(),
    branchMatcher: z.lazy(() => CreateProjectProjectsResponseBranchMatcher$inboundSchema).optional(),
    buildingAt: z.number().optional(),
    builds: z.array(z.lazy(() => CreateProjectProjectsBuilds$inboundSchema))
        .optional(),
    checksConclusion: CreateProjectProjectsChecksConclusion$inboundSchema
        .optional(),
    checksState: CreateProjectProjectsChecksState$inboundSchema.optional(),
    connectBuildsEnabled: z.boolean().optional(),
    connectConfigurationId: z.string().optional(),
    createdAt: z.number(),
    createdIn: z.string(),
    creator: z.nullable(z.lazy(() => CreateProjectProjectsCreator$inboundSchema)),
    deletedAt: z.number().optional(),
    deploymentHostname: z.string(),
    forced: z.boolean().optional(),
    name: z.string(),
    meta: z.record(z.string()).optional(),
    monorepoManager: z.nullable(z.string()).optional(),
    oidcTokenClaims: z.lazy(() => CreateProjectProjectsOidcTokenClaims$inboundSchema).optional(),
    plan: CreateProjectProjectsPlan$inboundSchema,
    previewCommentsEnabled: z.boolean().optional(),
    private: z.boolean(),
    readyAt: z.number().optional(),
    readyState: CreateProjectProjectsReadyState$inboundSchema,
    readySubstate: CreateProjectProjectsReadySubstate$inboundSchema.optional(),
    requestedAt: z.number().optional(),
    target: z.nullable(z.string()).optional(),
    teamId: z.nullable(z.string()).optional(),
    type: CreateProjectProjectsResponse200ApplicationJSONResponseBodyType$inboundSchema,
    url: z.string(),
    userId: z.string(),
    withCache: z.boolean().optional(),
});
/** @internal */
export const CreateProjectTargets$outboundSchema = z.object({
    id: z.string(),
    alias: z.array(z.string()).optional(),
    aliasAssigned: z.nullable(z.union([z.number(), z.boolean()])).optional(),
    aliasError: z.nullable(z.lazy(() => CreateProjectProjectsAliasError$outboundSchema)).optional(),
    aliasFinal: z.nullable(z.string()).optional(),
    automaticAliases: z.array(z.string()).optional(),
    branchMatcher: z.lazy(() => CreateProjectProjectsResponseBranchMatcher$outboundSchema).optional(),
    buildingAt: z.number().optional(),
    builds: z.array(z.lazy(() => CreateProjectProjectsBuilds$outboundSchema))
        .optional(),
    checksConclusion: CreateProjectProjectsChecksConclusion$outboundSchema
        .optional(),
    checksState: CreateProjectProjectsChecksState$outboundSchema.optional(),
    connectBuildsEnabled: z.boolean().optional(),
    connectConfigurationId: z.string().optional(),
    createdAt: z.number(),
    createdIn: z.string(),
    creator: z.nullable(z.lazy(() => CreateProjectProjectsCreator$outboundSchema)),
    deletedAt: z.number().optional(),
    deploymentHostname: z.string(),
    forced: z.boolean().optional(),
    name: z.string(),
    meta: z.record(z.string()).optional(),
    monorepoManager: z.nullable(z.string()).optional(),
    oidcTokenClaims: z.lazy(() => CreateProjectProjectsOidcTokenClaims$outboundSchema).optional(),
    plan: CreateProjectProjectsPlan$outboundSchema,
    previewCommentsEnabled: z.boolean().optional(),
    private: z.boolean(),
    readyAt: z.number().optional(),
    readyState: CreateProjectProjectsReadyState$outboundSchema,
    readySubstate: CreateProjectProjectsReadySubstate$outboundSchema.optional(),
    requestedAt: z.number().optional(),
    target: z.nullable(z.string()).optional(),
    teamId: z.nullable(z.string()).optional(),
    type: CreateProjectProjectsResponse200ApplicationJSONResponseBodyType$outboundSchema,
    url: z.string(),
    userId: z.string(),
    withCache: z.boolean().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CreateProjectTargets$;
(function (CreateProjectTargets$) {
    /** @deprecated use `CreateProjectTargets$inboundSchema` instead. */
    CreateProjectTargets$.inboundSchema = CreateProjectTargets$inboundSchema;
    /** @deprecated use `CreateProjectTargets$outboundSchema` instead. */
    CreateProjectTargets$.outboundSchema = CreateProjectTargets$outboundSchema;
})(CreateProjectTargets$ || (CreateProjectTargets$ = {}));
export function createProjectTargetsToJSON(createProjectTargets) {
    return JSON.stringify(CreateProjectTargets$outboundSchema.parse(createProjectTargets));
}
export function createProjectTargetsFromJSON(jsonString) {
    return safeParse(jsonString, (x) => CreateProjectTargets$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CreateProjectTargets' from JSON`);
}
/** @internal */
export const CreateProjectPermissions$inboundSchema = z.object({
    user: z.array(ACLAction$inboundSchema).optional(),
    userConnection: z.array(ACLAction$inboundSchema).optional(),
    userSudo: z.array(ACLAction$inboundSchema).optional(),
    webAuthn: z.array(ACLAction$inboundSchema).optional(),
    oauth2Connection: z.array(ACLAction$inboundSchema).optional(),
    accessGroup: z.array(ACLAction$inboundSchema).optional(),
    aliasGlobal: z.array(ACLAction$inboundSchema).optional(),
    analyticsSampling: z.array(ACLAction$inboundSchema).optional(),
    analyticsUsage: z.array(ACLAction$inboundSchema).optional(),
    auditLog: z.array(ACLAction$inboundSchema).optional(),
    billingAddress: z.array(ACLAction$inboundSchema).optional(),
    billingInformation: z.array(ACLAction$inboundSchema).optional(),
    billingInvoice: z.array(ACLAction$inboundSchema).optional(),
    billingInvoiceEmailRecipient: z.array(ACLAction$inboundSchema).optional(),
    billingInvoiceLanguage: z.array(ACLAction$inboundSchema).optional(),
    billingPlan: z.array(ACLAction$inboundSchema).optional(),
    billingPurchaseOrder: z.array(ACLAction$inboundSchema).optional(),
    billingTaxId: z.array(ACLAction$inboundSchema).optional(),
    blob: z.array(ACLAction$inboundSchema).optional(),
    budget: z.array(ACLAction$inboundSchema).optional(),
    cacheArtifact: z.array(ACLAction$inboundSchema).optional(),
    cacheArtifactUsageEvent: z.array(ACLAction$inboundSchema).optional(),
    codeChecks: z.array(ACLAction$inboundSchema).optional(),
    concurrentBuilds: z.array(ACLAction$inboundSchema).optional(),
    connect: z.array(ACLAction$inboundSchema).optional(),
    connectConfiguration: z.array(ACLAction$inboundSchema).optional(),
    domain: z.array(ACLAction$inboundSchema).optional(),
    domainAcceptDelegation: z.array(ACLAction$inboundSchema).optional(),
    domainAuthCodes: z.array(ACLAction$inboundSchema).optional(),
    domainCertificate: z.array(ACLAction$inboundSchema).optional(),
    domainCheckConfig: z.array(ACLAction$inboundSchema).optional(),
    domainMove: z.array(ACLAction$inboundSchema).optional(),
    domainPurchase: z.array(ACLAction$inboundSchema).optional(),
    domainRecord: z.array(ACLAction$inboundSchema).optional(),
    domainTransferIn: z.array(ACLAction$inboundSchema).optional(),
    event: z.array(ACLAction$inboundSchema).optional(),
    ownEvent: z.array(ACLAction$inboundSchema).optional(),
    sensitiveEnvironmentVariablePolicy: z.array(ACLAction$inboundSchema)
        .optional(),
    fileUpload: z.array(ACLAction$inboundSchema).optional(),
    flagsExplorerSubscription: z.array(ACLAction$inboundSchema).optional(),
    gitRepository: z.array(ACLAction$inboundSchema).optional(),
    ipBlocking: z.array(ACLAction$inboundSchema).optional(),
    imageOptimizationNewPrice: z.array(ACLAction$inboundSchema).optional(),
    integration: z.array(ACLAction$inboundSchema).optional(),
    integrationAccount: z.array(ACLAction$inboundSchema).optional(),
    integrationConfiguration: z.array(ACLAction$inboundSchema).optional(),
    integrationConfigurationTransfer: z.array(ACLAction$inboundSchema).optional(),
    integrationConfigurationProjects: z.array(ACLAction$inboundSchema).optional(),
    integrationVercelConfigurationOverride: z.array(ACLAction$inboundSchema)
        .optional(),
    integrationConfigurationRole: z.array(ACLAction$inboundSchema).optional(),
    integrationSSOSession: z.array(ACLAction$inboundSchema).optional(),
    integrationResource: z.array(ACLAction$inboundSchema).optional(),
    integrationEvent: z.array(ACLAction$inboundSchema).optional(),
    integrationResourceSecrets: z.array(ACLAction$inboundSchema).optional(),
    integrationDeploymentAction: z.array(ACLAction$inboundSchema).optional(),
    marketplaceInstallationMember: z.array(ACLAction$inboundSchema).optional(),
    marketplaceBillingData: z.array(ACLAction$inboundSchema).optional(),
    marketplaceInvoice: z.array(ACLAction$inboundSchema).optional(),
    marketplaceExperimentationItem: z.array(ACLAction$inboundSchema).optional(),
    marketplaceExperimentationEdgeConfigData: z.array(ACLAction$inboundSchema)
        .optional(),
    jobGlobal: z.array(ACLAction$inboundSchema).optional(),
    drain: z.array(ACLAction$inboundSchema).optional(),
    logDrain: z.array(ACLAction$inboundSchema).optional(),
    Monitoring: z.array(ACLAction$inboundSchema).optional(),
    monitoringSettings: z.array(ACLAction$inboundSchema).optional(),
    monitoringQuery: z.array(ACLAction$inboundSchema).optional(),
    monitoringChart: z.array(ACLAction$inboundSchema).optional(),
    monitoringAlert: z.array(ACLAction$inboundSchema).optional(),
    notificationDeploymentFailed: z.array(ACLAction$inboundSchema).optional(),
    notificationDomainConfiguration: z.array(ACLAction$inboundSchema).optional(),
    notificationDomainExpire: z.array(ACLAction$inboundSchema).optional(),
    notificationDomainMoved: z.array(ACLAction$inboundSchema).optional(),
    notificationDomainPurchase: z.array(ACLAction$inboundSchema).optional(),
    notificationDomainRenewal: z.array(ACLAction$inboundSchema).optional(),
    notificationDomainTransfer: z.array(ACLAction$inboundSchema).optional(),
    notificationDomainUnverified: z.array(ACLAction$inboundSchema).optional(),
    NotificationMonitoringAlert: z.array(ACLAction$inboundSchema).optional(),
    notificationPaymentFailed: z.array(ACLAction$inboundSchema).optional(),
    notificationUsageAlert: z.array(ACLAction$inboundSchema).optional(),
    notificationCustomerBudget: z.array(ACLAction$inboundSchema).optional(),
    notificationStatementOfReasons: z.array(ACLAction$inboundSchema).optional(),
    observabilityConfiguration: z.array(ACLAction$inboundSchema).optional(),
    observabilityNotebook: z.array(ACLAction$inboundSchema).optional(),
    openTelemetryEndpoint: z.array(ACLAction$inboundSchema).optional(),
    vercelAppInstallation: z.array(ACLAction$inboundSchema).optional(),
    paymentMethod: z.array(ACLAction$inboundSchema).optional(),
    permissions: z.array(ACLAction$inboundSchema).optional(),
    postgres: z.array(ACLAction$inboundSchema).optional(),
    previewDeploymentSuffix: z.array(ACLAction$inboundSchema).optional(),
    proTrialOnboarding: z.array(ACLAction$inboundSchema).optional(),
    sharedEnvVars: z.array(ACLAction$inboundSchema).optional(),
    sharedEnvVarsProduction: z.array(ACLAction$inboundSchema).optional(),
    space: z.array(ACLAction$inboundSchema).optional(),
    spaceRun: z.array(ACLAction$inboundSchema).optional(),
    passwordProtectionInvoiceItem: z.array(ACLAction$inboundSchema).optional(),
    rateLimit: z.array(ACLAction$inboundSchema).optional(),
    redis: z.array(ACLAction$inboundSchema).optional(),
    repository: z.array(ACLAction$inboundSchema).optional(),
    remoteCaching: z.array(ACLAction$inboundSchema).optional(),
    samlConfig: z.array(ACLAction$inboundSchema).optional(),
    secret: z.array(ACLAction$inboundSchema).optional(),
    redisStoreTokenSet: z.array(ACLAction$inboundSchema).optional(),
    blobStoreTokenSet: z.array(ACLAction$inboundSchema).optional(),
    postgresStoreTokenSet: z.array(ACLAction$inboundSchema).optional(),
    integrationStoreTokenSet: z.array(ACLAction$inboundSchema).optional(),
    integrationResourceReplCommand: z.array(ACLAction$inboundSchema).optional(),
    storeTransfer: z.array(ACLAction$inboundSchema).optional(),
    supportCase: z.array(ACLAction$inboundSchema).optional(),
    supportCaseComment: z.array(ACLAction$inboundSchema).optional(),
    dataCacheBillingSettings: z.array(ACLAction$inboundSchema).optional(),
    team: z.array(ACLAction$inboundSchema).optional(),
    teamAccessRequest: z.array(ACLAction$inboundSchema).optional(),
    teamFellowMembership: z.array(ACLAction$inboundSchema).optional(),
    teamGitExclusivity: z.array(ACLAction$inboundSchema).optional(),
    teamInvite: z.array(ACLAction$inboundSchema).optional(),
    teamInviteCode: z.array(ACLAction$inboundSchema).optional(),
    teamJoin: z.array(ACLAction$inboundSchema).optional(),
    teamMemberMfaStatus: z.array(ACLAction$inboundSchema).optional(),
    teamMicrofrontends: z.array(ACLAction$inboundSchema).optional(),
    teamOwnMembership: z.array(ACLAction$inboundSchema).optional(),
    teamOwnMembershipDisconnectSAML: z.array(ACLAction$inboundSchema).optional(),
    token: z.array(ACLAction$inboundSchema).optional(),
    usage: z.array(ACLAction$inboundSchema).optional(),
    usageCycle: z.array(ACLAction$inboundSchema).optional(),
    vpcPeeringConnection: z.array(ACLAction$inboundSchema).optional(),
    webAnalyticsPlan: z.array(ACLAction$inboundSchema).optional(),
    edgeConfig: z.array(ACLAction$inboundSchema).optional(),
    edgeConfigItem: z.array(ACLAction$inboundSchema).optional(),
    edgeConfigSchema: z.array(ACLAction$inboundSchema).optional(),
    edgeConfigToken: z.array(ACLAction$inboundSchema).optional(),
    webhook: z.array(ACLAction$inboundSchema).optional(),
    "webhook-event": z.array(ACLAction$inboundSchema).optional(),
    endpointVerification: z.array(ACLAction$inboundSchema).optional(),
    projectTransferIn: z.array(ACLAction$inboundSchema).optional(),
    oauth2Application: z.array(ACLAction$inboundSchema).optional(),
    vercelRun: z.array(ACLAction$inboundSchema).optional(),
    vercelRunExec: z.array(ACLAction$inboundSchema).optional(),
    aliasProject: z.array(ACLAction$inboundSchema).optional(),
    aliasProtectionBypass: z.array(ACLAction$inboundSchema).optional(),
    productionAliasProtectionBypass: z.array(ACLAction$inboundSchema).optional(),
    connectConfigurationLink: z.array(ACLAction$inboundSchema).optional(),
    dataCacheNamespace: z.array(ACLAction$inboundSchema).optional(),
    deployment: z.array(ACLAction$inboundSchema).optional(),
    deploymentCheck: z.array(ACLAction$inboundSchema).optional(),
    deploymentCheckPreview: z.array(ACLAction$inboundSchema).optional(),
    deploymentCheckReRunFromProductionBranch: z.array(ACLAction$inboundSchema)
        .optional(),
    deploymentProductionGit: z.array(ACLAction$inboundSchema).optional(),
    deploymentV0: z.array(ACLAction$inboundSchema).optional(),
    deploymentPreview: z.array(ACLAction$inboundSchema).optional(),
    deploymentPrivate: z.array(ACLAction$inboundSchema).optional(),
    deploymentPromote: z.array(ACLAction$inboundSchema).optional(),
    deploymentRollback: z.array(ACLAction$inboundSchema).optional(),
    edgeCacheNamespace: z.array(ACLAction$inboundSchema).optional(),
    environments: z.array(ACLAction$inboundSchema).optional(),
    logs: z.array(ACLAction$inboundSchema).optional(),
    logsPreset: z.array(ACLAction$inboundSchema).optional(),
    passwordProtection: z.array(ACLAction$inboundSchema).optional(),
    optionsAllowlist: z.array(ACLAction$inboundSchema).optional(),
    job: z.array(ACLAction$inboundSchema).optional(),
    observabilityData: z.array(ACLAction$inboundSchema).optional(),
    project: z.array(ACLAction$inboundSchema).optional(),
    projectFromV0: z.array(ACLAction$inboundSchema).optional(),
    projectAccessGroup: z.array(ACLAction$inboundSchema).optional(),
    projectAnalyticsSampling: z.array(ACLAction$inboundSchema).optional(),
    projectDeploymentHook: z.array(ACLAction$inboundSchema).optional(),
    projectDomain: z.array(ACLAction$inboundSchema).optional(),
    projectDomainMove: z.array(ACLAction$inboundSchema).optional(),
    projectDomainCheckConfig: z.array(ACLAction$inboundSchema).optional(),
    projectEnvVars: z.array(ACLAction$inboundSchema).optional(),
    projectEnvVarsProduction: z.array(ACLAction$inboundSchema).optional(),
    projectEnvVarsUnownedByIntegration: z.array(ACLAction$inboundSchema)
        .optional(),
    projectFlags: z.array(ACLAction$inboundSchema).optional(),
    projectId: z.array(ACLAction$inboundSchema).optional(),
    projectIntegrationConfiguration: z.array(ACLAction$inboundSchema).optional(),
    projectLink: z.array(ACLAction$inboundSchema).optional(),
    projectMember: z.array(ACLAction$inboundSchema).optional(),
    projectMonitoring: z.array(ACLAction$inboundSchema).optional(),
    projectPermissions: z.array(ACLAction$inboundSchema).optional(),
    projectProductionBranch: z.array(ACLAction$inboundSchema).optional(),
    projectTransfer: z.array(ACLAction$inboundSchema).optional(),
    projectTransferOut: z.array(ACLAction$inboundSchema).optional(),
    projectProtectionBypass: z.array(ACLAction$inboundSchema).optional(),
    projectUsage: z.array(ACLAction$inboundSchema).optional(),
    projectAnalyticsUsage: z.array(ACLAction$inboundSchema).optional(),
    projectSupportCase: z.array(ACLAction$inboundSchema).optional(),
    projectSupportCaseComment: z.array(ACLAction$inboundSchema).optional(),
    projectDeploymentExpiration: z.array(ACLAction$inboundSchema).optional(),
    projectRollingRelease: z.array(ACLAction$inboundSchema).optional(),
    projectTier: z.array(ACLAction$inboundSchema).optional(),
    seawallConfig: z.array(ACLAction$inboundSchema).optional(),
    skewProtection: z.array(ACLAction$inboundSchema).optional(),
    analytics: z.array(ACLAction$inboundSchema).optional(),
    trustedIps: z.array(ACLAction$inboundSchema).optional(),
    webAnalytics: z.array(ACLAction$inboundSchema).optional(),
    sharedEnvVarConnection: z.array(ACLAction$inboundSchema).optional(),
    sonar: z.array(ACLAction$inboundSchema).optional(),
}).transform((v) => {
    return remap$(v, {
        "Monitoring": "monitoring",
        "NotificationMonitoringAlert": "notificationMonitoringAlert",
        "webhook-event": "webhookEvent",
    });
});
/** @internal */
export const CreateProjectPermissions$outboundSchema = z.object({
    user: z.array(ACLAction$outboundSchema).optional(),
    userConnection: z.array(ACLAction$outboundSchema).optional(),
    userSudo: z.array(ACLAction$outboundSchema).optional(),
    webAuthn: z.array(ACLAction$outboundSchema).optional(),
    oauth2Connection: z.array(ACLAction$outboundSchema).optional(),
    accessGroup: z.array(ACLAction$outboundSchema).optional(),
    aliasGlobal: z.array(ACLAction$outboundSchema).optional(),
    analyticsSampling: z.array(ACLAction$outboundSchema).optional(),
    analyticsUsage: z.array(ACLAction$outboundSchema).optional(),
    auditLog: z.array(ACLAction$outboundSchema).optional(),
    billingAddress: z.array(ACLAction$outboundSchema).optional(),
    billingInformation: z.array(ACLAction$outboundSchema).optional(),
    billingInvoice: z.array(ACLAction$outboundSchema).optional(),
    billingInvoiceEmailRecipient: z.array(ACLAction$outboundSchema).optional(),
    billingInvoiceLanguage: z.array(ACLAction$outboundSchema).optional(),
    billingPlan: z.array(ACLAction$outboundSchema).optional(),
    billingPurchaseOrder: z.array(ACLAction$outboundSchema).optional(),
    billingTaxId: z.array(ACLAction$outboundSchema).optional(),
    blob: z.array(ACLAction$outboundSchema).optional(),
    budget: z.array(ACLAction$outboundSchema).optional(),
    cacheArtifact: z.array(ACLAction$outboundSchema).optional(),
    cacheArtifactUsageEvent: z.array(ACLAction$outboundSchema).optional(),
    codeChecks: z.array(ACLAction$outboundSchema).optional(),
    concurrentBuilds: z.array(ACLAction$outboundSchema).optional(),
    connect: z.array(ACLAction$outboundSchema).optional(),
    connectConfiguration: z.array(ACLAction$outboundSchema).optional(),
    domain: z.array(ACLAction$outboundSchema).optional(),
    domainAcceptDelegation: z.array(ACLAction$outboundSchema).optional(),
    domainAuthCodes: z.array(ACLAction$outboundSchema).optional(),
    domainCertificate: z.array(ACLAction$outboundSchema).optional(),
    domainCheckConfig: z.array(ACLAction$outboundSchema).optional(),
    domainMove: z.array(ACLAction$outboundSchema).optional(),
    domainPurchase: z.array(ACLAction$outboundSchema).optional(),
    domainRecord: z.array(ACLAction$outboundSchema).optional(),
    domainTransferIn: z.array(ACLAction$outboundSchema).optional(),
    event: z.array(ACLAction$outboundSchema).optional(),
    ownEvent: z.array(ACLAction$outboundSchema).optional(),
    sensitiveEnvironmentVariablePolicy: z.array(ACLAction$outboundSchema)
        .optional(),
    fileUpload: z.array(ACLAction$outboundSchema).optional(),
    flagsExplorerSubscription: z.array(ACLAction$outboundSchema).optional(),
    gitRepository: z.array(ACLAction$outboundSchema).optional(),
    ipBlocking: z.array(ACLAction$outboundSchema).optional(),
    imageOptimizationNewPrice: z.array(ACLAction$outboundSchema).optional(),
    integration: z.array(ACLAction$outboundSchema).optional(),
    integrationAccount: z.array(ACLAction$outboundSchema).optional(),
    integrationConfiguration: z.array(ACLAction$outboundSchema).optional(),
    integrationConfigurationTransfer: z.array(ACLAction$outboundSchema)
        .optional(),
    integrationConfigurationProjects: z.array(ACLAction$outboundSchema)
        .optional(),
    integrationVercelConfigurationOverride: z.array(ACLAction$outboundSchema)
        .optional(),
    integrationConfigurationRole: z.array(ACLAction$outboundSchema).optional(),
    integrationSSOSession: z.array(ACLAction$outboundSchema).optional(),
    integrationResource: z.array(ACLAction$outboundSchema).optional(),
    integrationEvent: z.array(ACLAction$outboundSchema).optional(),
    integrationResourceSecrets: z.array(ACLAction$outboundSchema).optional(),
    integrationDeploymentAction: z.array(ACLAction$outboundSchema).optional(),
    marketplaceInstallationMember: z.array(ACLAction$outboundSchema).optional(),
    marketplaceBillingData: z.array(ACLAction$outboundSchema).optional(),
    marketplaceInvoice: z.array(ACLAction$outboundSchema).optional(),
    marketplaceExperimentationItem: z.array(ACLAction$outboundSchema).optional(),
    marketplaceExperimentationEdgeConfigData: z.array(ACLAction$outboundSchema)
        .optional(),
    jobGlobal: z.array(ACLAction$outboundSchema).optional(),
    drain: z.array(ACLAction$outboundSchema).optional(),
    logDrain: z.array(ACLAction$outboundSchema).optional(),
    monitoring: z.array(ACLAction$outboundSchema).optional(),
    monitoringSettings: z.array(ACLAction$outboundSchema).optional(),
    monitoringQuery: z.array(ACLAction$outboundSchema).optional(),
    monitoringChart: z.array(ACLAction$outboundSchema).optional(),
    monitoringAlert: z.array(ACLAction$outboundSchema).optional(),
    notificationDeploymentFailed: z.array(ACLAction$outboundSchema).optional(),
    notificationDomainConfiguration: z.array(ACLAction$outboundSchema).optional(),
    notificationDomainExpire: z.array(ACLAction$outboundSchema).optional(),
    notificationDomainMoved: z.array(ACLAction$outboundSchema).optional(),
    notificationDomainPurchase: z.array(ACLAction$outboundSchema).optional(),
    notificationDomainRenewal: z.array(ACLAction$outboundSchema).optional(),
    notificationDomainTransfer: z.array(ACLAction$outboundSchema).optional(),
    notificationDomainUnverified: z.array(ACLAction$outboundSchema).optional(),
    notificationMonitoringAlert: z.array(ACLAction$outboundSchema).optional(),
    notificationPaymentFailed: z.array(ACLAction$outboundSchema).optional(),
    notificationUsageAlert: z.array(ACLAction$outboundSchema).optional(),
    notificationCustomerBudget: z.array(ACLAction$outboundSchema).optional(),
    notificationStatementOfReasons: z.array(ACLAction$outboundSchema).optional(),
    observabilityConfiguration: z.array(ACLAction$outboundSchema).optional(),
    observabilityNotebook: z.array(ACLAction$outboundSchema).optional(),
    openTelemetryEndpoint: z.array(ACLAction$outboundSchema).optional(),
    vercelAppInstallation: z.array(ACLAction$outboundSchema).optional(),
    paymentMethod: z.array(ACLAction$outboundSchema).optional(),
    permissions: z.array(ACLAction$outboundSchema).optional(),
    postgres: z.array(ACLAction$outboundSchema).optional(),
    previewDeploymentSuffix: z.array(ACLAction$outboundSchema).optional(),
    proTrialOnboarding: z.array(ACLAction$outboundSchema).optional(),
    sharedEnvVars: z.array(ACLAction$outboundSchema).optional(),
    sharedEnvVarsProduction: z.array(ACLAction$outboundSchema).optional(),
    space: z.array(ACLAction$outboundSchema).optional(),
    spaceRun: z.array(ACLAction$outboundSchema).optional(),
    passwordProtectionInvoiceItem: z.array(ACLAction$outboundSchema).optional(),
    rateLimit: z.array(ACLAction$outboundSchema).optional(),
    redis: z.array(ACLAction$outboundSchema).optional(),
    repository: z.array(ACLAction$outboundSchema).optional(),
    remoteCaching: z.array(ACLAction$outboundSchema).optional(),
    samlConfig: z.array(ACLAction$outboundSchema).optional(),
    secret: z.array(ACLAction$outboundSchema).optional(),
    redisStoreTokenSet: z.array(ACLAction$outboundSchema).optional(),
    blobStoreTokenSet: z.array(ACLAction$outboundSchema).optional(),
    postgresStoreTokenSet: z.array(ACLAction$outboundSchema).optional(),
    integrationStoreTokenSet: z.array(ACLAction$outboundSchema).optional(),
    integrationResourceReplCommand: z.array(ACLAction$outboundSchema).optional(),
    storeTransfer: z.array(ACLAction$outboundSchema).optional(),
    supportCase: z.array(ACLAction$outboundSchema).optional(),
    supportCaseComment: z.array(ACLAction$outboundSchema).optional(),
    dataCacheBillingSettings: z.array(ACLAction$outboundSchema).optional(),
    team: z.array(ACLAction$outboundSchema).optional(),
    teamAccessRequest: z.array(ACLAction$outboundSchema).optional(),
    teamFellowMembership: z.array(ACLAction$outboundSchema).optional(),
    teamGitExclusivity: z.array(ACLAction$outboundSchema).optional(),
    teamInvite: z.array(ACLAction$outboundSchema).optional(),
    teamInviteCode: z.array(ACLAction$outboundSchema).optional(),
    teamJoin: z.array(ACLAction$outboundSchema).optional(),
    teamMemberMfaStatus: z.array(ACLAction$outboundSchema).optional(),
    teamMicrofrontends: z.array(ACLAction$outboundSchema).optional(),
    teamOwnMembership: z.array(ACLAction$outboundSchema).optional(),
    teamOwnMembershipDisconnectSAML: z.array(ACLAction$outboundSchema).optional(),
    token: z.array(ACLAction$outboundSchema).optional(),
    usage: z.array(ACLAction$outboundSchema).optional(),
    usageCycle: z.array(ACLAction$outboundSchema).optional(),
    vpcPeeringConnection: z.array(ACLAction$outboundSchema).optional(),
    webAnalyticsPlan: z.array(ACLAction$outboundSchema).optional(),
    edgeConfig: z.array(ACLAction$outboundSchema).optional(),
    edgeConfigItem: z.array(ACLAction$outboundSchema).optional(),
    edgeConfigSchema: z.array(ACLAction$outboundSchema).optional(),
    edgeConfigToken: z.array(ACLAction$outboundSchema).optional(),
    webhook: z.array(ACLAction$outboundSchema).optional(),
    webhookEvent: z.array(ACLAction$outboundSchema).optional(),
    endpointVerification: z.array(ACLAction$outboundSchema).optional(),
    projectTransferIn: z.array(ACLAction$outboundSchema).optional(),
    oauth2Application: z.array(ACLAction$outboundSchema).optional(),
    vercelRun: z.array(ACLAction$outboundSchema).optional(),
    vercelRunExec: z.array(ACLAction$outboundSchema).optional(),
    aliasProject: z.array(ACLAction$outboundSchema).optional(),
    aliasProtectionBypass: z.array(ACLAction$outboundSchema).optional(),
    productionAliasProtectionBypass: z.array(ACLAction$outboundSchema).optional(),
    connectConfigurationLink: z.array(ACLAction$outboundSchema).optional(),
    dataCacheNamespace: z.array(ACLAction$outboundSchema).optional(),
    deployment: z.array(ACLAction$outboundSchema).optional(),
    deploymentCheck: z.array(ACLAction$outboundSchema).optional(),
    deploymentCheckPreview: z.array(ACLAction$outboundSchema).optional(),
    deploymentCheckReRunFromProductionBranch: z.array(ACLAction$outboundSchema)
        .optional(),
    deploymentProductionGit: z.array(ACLAction$outboundSchema).optional(),
    deploymentV0: z.array(ACLAction$outboundSchema).optional(),
    deploymentPreview: z.array(ACLAction$outboundSchema).optional(),
    deploymentPrivate: z.array(ACLAction$outboundSchema).optional(),
    deploymentPromote: z.array(ACLAction$outboundSchema).optional(),
    deploymentRollback: z.array(ACLAction$outboundSchema).optional(),
    edgeCacheNamespace: z.array(ACLAction$outboundSchema).optional(),
    environments: z.array(ACLAction$outboundSchema).optional(),
    logs: z.array(ACLAction$outboundSchema).optional(),
    logsPreset: z.array(ACLAction$outboundSchema).optional(),
    passwordProtection: z.array(ACLAction$outboundSchema).optional(),
    optionsAllowlist: z.array(ACLAction$outboundSchema).optional(),
    job: z.array(ACLAction$outboundSchema).optional(),
    observabilityData: z.array(ACLAction$outboundSchema).optional(),
    project: z.array(ACLAction$outboundSchema).optional(),
    projectFromV0: z.array(ACLAction$outboundSchema).optional(),
    projectAccessGroup: z.array(ACLAction$outboundSchema).optional(),
    projectAnalyticsSampling: z.array(ACLAction$outboundSchema).optional(),
    projectDeploymentHook: z.array(ACLAction$outboundSchema).optional(),
    projectDomain: z.array(ACLAction$outboundSchema).optional(),
    projectDomainMove: z.array(ACLAction$outboundSchema).optional(),
    projectDomainCheckConfig: z.array(ACLAction$outboundSchema).optional(),
    projectEnvVars: z.array(ACLAction$outboundSchema).optional(),
    projectEnvVarsProduction: z.array(ACLAction$outboundSchema).optional(),
    projectEnvVarsUnownedByIntegration: z.array(ACLAction$outboundSchema)
        .optional(),
    projectFlags: z.array(ACLAction$outboundSchema).optional(),
    projectId: z.array(ACLAction$outboundSchema).optional(),
    projectIntegrationConfiguration: z.array(ACLAction$outboundSchema).optional(),
    projectLink: z.array(ACLAction$outboundSchema).optional(),
    projectMember: z.array(ACLAction$outboundSchema).optional(),
    projectMonitoring: z.array(ACLAction$outboundSchema).optional(),
    projectPermissions: z.array(ACLAction$outboundSchema).optional(),
    projectProductionBranch: z.array(ACLAction$outboundSchema).optional(),
    projectTransfer: z.array(ACLAction$outboundSchema).optional(),
    projectTransferOut: z.array(ACLAction$outboundSchema).optional(),
    projectProtectionBypass: z.array(ACLAction$outboundSchema).optional(),
    projectUsage: z.array(ACLAction$outboundSchema).optional(),
    projectAnalyticsUsage: z.array(ACLAction$outboundSchema).optional(),
    projectSupportCase: z.array(ACLAction$outboundSchema).optional(),
    projectSupportCaseComment: z.array(ACLAction$outboundSchema).optional(),
    projectDeploymentExpiration: z.array(ACLAction$outboundSchema).optional(),
    projectRollingRelease: z.array(ACLAction$outboundSchema).optional(),
    projectTier: z.array(ACLAction$outboundSchema).optional(),
    seawallConfig: z.array(ACLAction$outboundSchema).optional(),
    skewProtection: z.array(ACLAction$outboundSchema).optional(),
    analytics: z.array(ACLAction$outboundSchema).optional(),
    trustedIps: z.array(ACLAction$outboundSchema).optional(),
    webAnalytics: z.array(ACLAction$outboundSchema).optional(),
    sharedEnvVarConnection: z.array(ACLAction$outboundSchema).optional(),
    sonar: z.array(ACLAction$outboundSchema).optional(),
}).transform((v) => {
    return remap$(v, {
        monitoring: "Monitoring",
        notificationMonitoringAlert: "NotificationMonitoringAlert",
        webhookEvent: "webhook-event",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CreateProjectPermissions$;
(function (CreateProjectPermissions$) {
    /** @deprecated use `CreateProjectPermissions$inboundSchema` instead. */
    CreateProjectPermissions$.inboundSchema = CreateProjectPermissions$inboundSchema;
    /** @deprecated use `CreateProjectPermissions$outboundSchema` instead. */
    CreateProjectPermissions$.outboundSchema = CreateProjectPermissions$outboundSchema;
})(CreateProjectPermissions$ || (CreateProjectPermissions$ = {}));
export function createProjectPermissionsToJSON(createProjectPermissions) {
    return JSON.stringify(CreateProjectPermissions$outboundSchema.parse(createProjectPermissions));
}
export function createProjectPermissionsFromJSON(jsonString) {
    return safeParse(jsonString, (x) => CreateProjectPermissions$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CreateProjectPermissions' from JSON`);
}
/** @internal */
export const CreateProjectLastRollbackTarget$inboundSchema = z.object({});
/** @internal */
export const CreateProjectLastRollbackTarget$outboundSchema = z.object({});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CreateProjectLastRollbackTarget$;
(function (CreateProjectLastRollbackTarget$) {
    /** @deprecated use `CreateProjectLastRollbackTarget$inboundSchema` instead. */
    CreateProjectLastRollbackTarget$.inboundSchema = CreateProjectLastRollbackTarget$inboundSchema;
    /** @deprecated use `CreateProjectLastRollbackTarget$outboundSchema` instead. */
    CreateProjectLastRollbackTarget$.outboundSchema = CreateProjectLastRollbackTarget$outboundSchema;
})(CreateProjectLastRollbackTarget$ || (CreateProjectLastRollbackTarget$ = {}));
export function createProjectLastRollbackTargetToJSON(createProjectLastRollbackTarget) {
    return JSON.stringify(CreateProjectLastRollbackTarget$outboundSchema.parse(createProjectLastRollbackTarget));
}
export function createProjectLastRollbackTargetFromJSON(jsonString) {
    return safeParse(jsonString, (x) => CreateProjectLastRollbackTarget$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CreateProjectLastRollbackTarget' from JSON`);
}
/** @internal */
export const CreateProjectJobStatus$inboundSchema = z.nativeEnum(CreateProjectJobStatus);
/** @internal */
export const CreateProjectJobStatus$outboundSchema = CreateProjectJobStatus$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CreateProjectJobStatus$;
(function (CreateProjectJobStatus$) {
    /** @deprecated use `CreateProjectJobStatus$inboundSchema` instead. */
    CreateProjectJobStatus$.inboundSchema = CreateProjectJobStatus$inboundSchema;
    /** @deprecated use `CreateProjectJobStatus$outboundSchema` instead. */
    CreateProjectJobStatus$.outboundSchema = CreateProjectJobStatus$outboundSchema;
})(CreateProjectJobStatus$ || (CreateProjectJobStatus$ = {}));
/** @internal */
export const CreateProjectProjectsResponse200ApplicationJSONResponseBodyLastAliasRequestType$inboundSchema = z.nativeEnum(CreateProjectProjectsResponse200ApplicationJSONResponseBodyLastAliasRequestType);
/** @internal */
export const CreateProjectProjectsResponse200ApplicationJSONResponseBodyLastAliasRequestType$outboundSchema = CreateProjectProjectsResponse200ApplicationJSONResponseBodyLastAliasRequestType$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CreateProjectProjectsResponse200ApplicationJSONResponseBodyLastAliasRequestType$;
(function (CreateProjectProjectsResponse200ApplicationJSONResponseBodyLastAliasRequestType$) {
    /** @deprecated use `CreateProjectProjectsResponse200ApplicationJSONResponseBodyLastAliasRequestType$inboundSchema` instead. */
    CreateProjectProjectsResponse200ApplicationJSONResponseBodyLastAliasRequestType$.inboundSchema = CreateProjectProjectsResponse200ApplicationJSONResponseBodyLastAliasRequestType$inboundSchema;
    /** @deprecated use `CreateProjectProjectsResponse200ApplicationJSONResponseBodyLastAliasRequestType$outboundSchema` instead. */
    CreateProjectProjectsResponse200ApplicationJSONResponseBodyLastAliasRequestType$.outboundSchema = CreateProjectProjectsResponse200ApplicationJSONResponseBodyLastAliasRequestType$outboundSchema;
})(CreateProjectProjectsResponse200ApplicationJSONResponseBodyLastAliasRequestType$ || (CreateProjectProjectsResponse200ApplicationJSONResponseBodyLastAliasRequestType$ = {}));
/** @internal */
export const CreateProjectLastAliasRequest$inboundSchema = z.object({
    fromDeploymentId: z.string(),
    toDeploymentId: z.string(),
    fromRollingReleaseId: z.string().optional(),
    jobStatus: CreateProjectJobStatus$inboundSchema,
    requestedAt: z.number(),
    type: CreateProjectProjectsResponse200ApplicationJSONResponseBodyLastAliasRequestType$inboundSchema,
});
/** @internal */
export const CreateProjectLastAliasRequest$outboundSchema = z.object({
    fromDeploymentId: z.string(),
    toDeploymentId: z.string(),
    fromRollingReleaseId: z.string().optional(),
    jobStatus: CreateProjectJobStatus$outboundSchema,
    requestedAt: z.number(),
    type: CreateProjectProjectsResponse200ApplicationJSONResponseBodyLastAliasRequestType$outboundSchema,
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CreateProjectLastAliasRequest$;
(function (CreateProjectLastAliasRequest$) {
    /** @deprecated use `CreateProjectLastAliasRequest$inboundSchema` instead. */
    CreateProjectLastAliasRequest$.inboundSchema = CreateProjectLastAliasRequest$inboundSchema;
    /** @deprecated use `CreateProjectLastAliasRequest$outboundSchema` instead. */
    CreateProjectLastAliasRequest$.outboundSchema = CreateProjectLastAliasRequest$outboundSchema;
})(CreateProjectLastAliasRequest$ || (CreateProjectLastAliasRequest$ = {}));
export function createProjectLastAliasRequestToJSON(createProjectLastAliasRequest) {
    return JSON.stringify(CreateProjectLastAliasRequest$outboundSchema.parse(createProjectLastAliasRequest));
}
export function createProjectLastAliasRequestFromJSON(jsonString) {
    return safeParse(jsonString, (x) => CreateProjectLastAliasRequest$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CreateProjectLastAliasRequest' from JSON`);
}
/** @internal */
export const CreateProjectProtectionBypassProjectsScope$inboundSchema = z
    .nativeEnum(CreateProjectProtectionBypassProjectsScope);
/** @internal */
export const CreateProjectProtectionBypassProjectsScope$outboundSchema = CreateProjectProtectionBypassProjectsScope$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CreateProjectProtectionBypassProjectsScope$;
(function (CreateProjectProtectionBypassProjectsScope$) {
    /** @deprecated use `CreateProjectProtectionBypassProjectsScope$inboundSchema` instead. */
    CreateProjectProtectionBypassProjectsScope$.inboundSchema = CreateProjectProtectionBypassProjectsScope$inboundSchema;
    /** @deprecated use `CreateProjectProtectionBypassProjectsScope$outboundSchema` instead. */
    CreateProjectProtectionBypassProjectsScope$.outboundSchema = CreateProjectProtectionBypassProjectsScope$outboundSchema;
})(CreateProjectProtectionBypassProjectsScope$ || (CreateProjectProtectionBypassProjectsScope$ = {}));
/** @internal */
export const CreateProjectProtectionBypass2$inboundSchema = z.object({
    createdAt: z.number(),
    createdBy: z.string(),
    scope: CreateProjectProtectionBypassProjectsScope$inboundSchema,
});
/** @internal */
export const CreateProjectProtectionBypass2$outboundSchema = z.object({
    createdAt: z.number(),
    createdBy: z.string(),
    scope: CreateProjectProtectionBypassProjectsScope$outboundSchema,
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CreateProjectProtectionBypass2$;
(function (CreateProjectProtectionBypass2$) {
    /** @deprecated use `CreateProjectProtectionBypass2$inboundSchema` instead. */
    CreateProjectProtectionBypass2$.inboundSchema = CreateProjectProtectionBypass2$inboundSchema;
    /** @deprecated use `CreateProjectProtectionBypass2$outboundSchema` instead. */
    CreateProjectProtectionBypass2$.outboundSchema = CreateProjectProtectionBypass2$outboundSchema;
})(CreateProjectProtectionBypass2$ || (CreateProjectProtectionBypass2$ = {}));
export function createProjectProtectionBypass2ToJSON(createProjectProtectionBypass2) {
    return JSON.stringify(CreateProjectProtectionBypass2$outboundSchema.parse(createProjectProtectionBypass2));
}
export function createProjectProtectionBypass2FromJSON(jsonString) {
    return safeParse(jsonString, (x) => CreateProjectProtectionBypass2$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CreateProjectProtectionBypass2' from JSON`);
}
/** @internal */
export const CreateProjectProtectionBypassScope$inboundSchema = z.nativeEnum(CreateProjectProtectionBypassScope);
/** @internal */
export const CreateProjectProtectionBypassScope$outboundSchema = CreateProjectProtectionBypassScope$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CreateProjectProtectionBypassScope$;
(function (CreateProjectProtectionBypassScope$) {
    /** @deprecated use `CreateProjectProtectionBypassScope$inboundSchema` instead. */
    CreateProjectProtectionBypassScope$.inboundSchema = CreateProjectProtectionBypassScope$inboundSchema;
    /** @deprecated use `CreateProjectProtectionBypassScope$outboundSchema` instead. */
    CreateProjectProtectionBypassScope$.outboundSchema = CreateProjectProtectionBypassScope$outboundSchema;
})(CreateProjectProtectionBypassScope$ || (CreateProjectProtectionBypassScope$ = {}));
/** @internal */
export const CreateProjectProtectionBypass1$inboundSchema = z.object({
    createdAt: z.number(),
    createdBy: z.string(),
    scope: CreateProjectProtectionBypassScope$inboundSchema,
    integrationId: z.string(),
    configurationId: z.string(),
});
/** @internal */
export const CreateProjectProtectionBypass1$outboundSchema = z.object({
    createdAt: z.number(),
    createdBy: z.string(),
    scope: CreateProjectProtectionBypassScope$outboundSchema,
    integrationId: z.string(),
    configurationId: z.string(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CreateProjectProtectionBypass1$;
(function (CreateProjectProtectionBypass1$) {
    /** @deprecated use `CreateProjectProtectionBypass1$inboundSchema` instead. */
    CreateProjectProtectionBypass1$.inboundSchema = CreateProjectProtectionBypass1$inboundSchema;
    /** @deprecated use `CreateProjectProtectionBypass1$outboundSchema` instead. */
    CreateProjectProtectionBypass1$.outboundSchema = CreateProjectProtectionBypass1$outboundSchema;
})(CreateProjectProtectionBypass1$ || (CreateProjectProtectionBypass1$ = {}));
export function createProjectProtectionBypass1ToJSON(createProjectProtectionBypass1) {
    return JSON.stringify(CreateProjectProtectionBypass1$outboundSchema.parse(createProjectProtectionBypass1));
}
export function createProjectProtectionBypass1FromJSON(jsonString) {
    return safeParse(jsonString, (x) => CreateProjectProtectionBypass1$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CreateProjectProtectionBypass1' from JSON`);
}
/** @internal */
export const CreateProjectProtectionBypass$inboundSchema = z.union([
    z.lazy(() => CreateProjectProtectionBypass2$inboundSchema),
    z.lazy(() => CreateProjectProtectionBypass1$inboundSchema),
]);
/** @internal */
export const CreateProjectProtectionBypass$outboundSchema = z.union([
    z.lazy(() => CreateProjectProtectionBypass2$outboundSchema),
    z.lazy(() => CreateProjectProtectionBypass1$outboundSchema),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CreateProjectProtectionBypass$;
(function (CreateProjectProtectionBypass$) {
    /** @deprecated use `CreateProjectProtectionBypass$inboundSchema` instead. */
    CreateProjectProtectionBypass$.inboundSchema = CreateProjectProtectionBypass$inboundSchema;
    /** @deprecated use `CreateProjectProtectionBypass$outboundSchema` instead. */
    CreateProjectProtectionBypass$.outboundSchema = CreateProjectProtectionBypass$outboundSchema;
})(CreateProjectProtectionBypass$ || (CreateProjectProtectionBypass$ = {}));
export function createProjectProtectionBypassToJSON(createProjectProtectionBypass) {
    return JSON.stringify(CreateProjectProtectionBypass$outboundSchema.parse(createProjectProtectionBypass));
}
export function createProjectProtectionBypassFromJSON(jsonString) {
    return safeParse(jsonString, (x) => CreateProjectProtectionBypass$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CreateProjectProtectionBypass' from JSON`);
}
/** @internal */
export const CreateProjectTrustedIpsProjectsDeploymentType$inboundSchema = z
    .nativeEnum(CreateProjectTrustedIpsProjectsDeploymentType);
/** @internal */
export const CreateProjectTrustedIpsProjectsDeploymentType$outboundSchema = CreateProjectTrustedIpsProjectsDeploymentType$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CreateProjectTrustedIpsProjectsDeploymentType$;
(function (CreateProjectTrustedIpsProjectsDeploymentType$) {
    /** @deprecated use `CreateProjectTrustedIpsProjectsDeploymentType$inboundSchema` instead. */
    CreateProjectTrustedIpsProjectsDeploymentType$.inboundSchema = CreateProjectTrustedIpsProjectsDeploymentType$inboundSchema;
    /** @deprecated use `CreateProjectTrustedIpsProjectsDeploymentType$outboundSchema` instead. */
    CreateProjectTrustedIpsProjectsDeploymentType$.outboundSchema = CreateProjectTrustedIpsProjectsDeploymentType$outboundSchema;
})(CreateProjectTrustedIpsProjectsDeploymentType$ || (CreateProjectTrustedIpsProjectsDeploymentType$ = {}));
/** @internal */
export const CreateProjectTrustedIps2$inboundSchema = z.object({
    deploymentType: CreateProjectTrustedIpsProjectsDeploymentType$inboundSchema,
});
/** @internal */
export const CreateProjectTrustedIps2$outboundSchema = z.object({
    deploymentType: CreateProjectTrustedIpsProjectsDeploymentType$outboundSchema,
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CreateProjectTrustedIps2$;
(function (CreateProjectTrustedIps2$) {
    /** @deprecated use `CreateProjectTrustedIps2$inboundSchema` instead. */
    CreateProjectTrustedIps2$.inboundSchema = CreateProjectTrustedIps2$inboundSchema;
    /** @deprecated use `CreateProjectTrustedIps2$outboundSchema` instead. */
    CreateProjectTrustedIps2$.outboundSchema = CreateProjectTrustedIps2$outboundSchema;
})(CreateProjectTrustedIps2$ || (CreateProjectTrustedIps2$ = {}));
export function createProjectTrustedIps2ToJSON(createProjectTrustedIps2) {
    return JSON.stringify(CreateProjectTrustedIps2$outboundSchema.parse(createProjectTrustedIps2));
}
export function createProjectTrustedIps2FromJSON(jsonString) {
    return safeParse(jsonString, (x) => CreateProjectTrustedIps2$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CreateProjectTrustedIps2' from JSON`);
}
/** @internal */
export const CreateProjectTrustedIpsDeploymentType$inboundSchema = z.nativeEnum(CreateProjectTrustedIpsDeploymentType);
/** @internal */
export const CreateProjectTrustedIpsDeploymentType$outboundSchema = CreateProjectTrustedIpsDeploymentType$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CreateProjectTrustedIpsDeploymentType$;
(function (CreateProjectTrustedIpsDeploymentType$) {
    /** @deprecated use `CreateProjectTrustedIpsDeploymentType$inboundSchema` instead. */
    CreateProjectTrustedIpsDeploymentType$.inboundSchema = CreateProjectTrustedIpsDeploymentType$inboundSchema;
    /** @deprecated use `CreateProjectTrustedIpsDeploymentType$outboundSchema` instead. */
    CreateProjectTrustedIpsDeploymentType$.outboundSchema = CreateProjectTrustedIpsDeploymentType$outboundSchema;
})(CreateProjectTrustedIpsDeploymentType$ || (CreateProjectTrustedIpsDeploymentType$ = {}));
/** @internal */
export const TrustedIpsAddresses$inboundSchema = z.object({
    value: z.string(),
    note: z.string().optional(),
});
/** @internal */
export const TrustedIpsAddresses$outboundSchema = z.object({
    value: z.string(),
    note: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var TrustedIpsAddresses$;
(function (TrustedIpsAddresses$) {
    /** @deprecated use `TrustedIpsAddresses$inboundSchema` instead. */
    TrustedIpsAddresses$.inboundSchema = TrustedIpsAddresses$inboundSchema;
    /** @deprecated use `TrustedIpsAddresses$outboundSchema` instead. */
    TrustedIpsAddresses$.outboundSchema = TrustedIpsAddresses$outboundSchema;
})(TrustedIpsAddresses$ || (TrustedIpsAddresses$ = {}));
export function trustedIpsAddressesToJSON(trustedIpsAddresses) {
    return JSON.stringify(TrustedIpsAddresses$outboundSchema.parse(trustedIpsAddresses));
}
export function trustedIpsAddressesFromJSON(jsonString) {
    return safeParse(jsonString, (x) => TrustedIpsAddresses$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'TrustedIpsAddresses' from JSON`);
}
/** @internal */
export const TrustedIpsProtectionMode$inboundSchema = z.nativeEnum(TrustedIpsProtectionMode);
/** @internal */
export const TrustedIpsProtectionMode$outboundSchema = TrustedIpsProtectionMode$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var TrustedIpsProtectionMode$;
(function (TrustedIpsProtectionMode$) {
    /** @deprecated use `TrustedIpsProtectionMode$inboundSchema` instead. */
    TrustedIpsProtectionMode$.inboundSchema = TrustedIpsProtectionMode$inboundSchema;
    /** @deprecated use `TrustedIpsProtectionMode$outboundSchema` instead. */
    TrustedIpsProtectionMode$.outboundSchema = TrustedIpsProtectionMode$outboundSchema;
})(TrustedIpsProtectionMode$ || (TrustedIpsProtectionMode$ = {}));
/** @internal */
export const CreateProjectTrustedIps1$inboundSchema = z.object({
    deploymentType: CreateProjectTrustedIpsDeploymentType$inboundSchema,
    addresses: z.array(z.lazy(() => TrustedIpsAddresses$inboundSchema)),
    protectionMode: TrustedIpsProtectionMode$inboundSchema,
});
/** @internal */
export const CreateProjectTrustedIps1$outboundSchema = z.object({
    deploymentType: CreateProjectTrustedIpsDeploymentType$outboundSchema,
    addresses: z.array(z.lazy(() => TrustedIpsAddresses$outboundSchema)),
    protectionMode: TrustedIpsProtectionMode$outboundSchema,
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CreateProjectTrustedIps1$;
(function (CreateProjectTrustedIps1$) {
    /** @deprecated use `CreateProjectTrustedIps1$inboundSchema` instead. */
    CreateProjectTrustedIps1$.inboundSchema = CreateProjectTrustedIps1$inboundSchema;
    /** @deprecated use `CreateProjectTrustedIps1$outboundSchema` instead. */
    CreateProjectTrustedIps1$.outboundSchema = CreateProjectTrustedIps1$outboundSchema;
})(CreateProjectTrustedIps1$ || (CreateProjectTrustedIps1$ = {}));
export function createProjectTrustedIps1ToJSON(createProjectTrustedIps1) {
    return JSON.stringify(CreateProjectTrustedIps1$outboundSchema.parse(createProjectTrustedIps1));
}
export function createProjectTrustedIps1FromJSON(jsonString) {
    return safeParse(jsonString, (x) => CreateProjectTrustedIps1$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CreateProjectTrustedIps1' from JSON`);
}
/** @internal */
export const CreateProjectTrustedIps$inboundSchema = z.union([
    z.lazy(() => CreateProjectTrustedIps2$inboundSchema),
    z.lazy(() => CreateProjectTrustedIps1$inboundSchema),
]);
/** @internal */
export const CreateProjectTrustedIps$outboundSchema = z.union([
    z.lazy(() => CreateProjectTrustedIps2$outboundSchema),
    z.lazy(() => CreateProjectTrustedIps1$outboundSchema),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CreateProjectTrustedIps$;
(function (CreateProjectTrustedIps$) {
    /** @deprecated use `CreateProjectTrustedIps$inboundSchema` instead. */
    CreateProjectTrustedIps$.inboundSchema = CreateProjectTrustedIps$inboundSchema;
    /** @deprecated use `CreateProjectTrustedIps$outboundSchema` instead. */
    CreateProjectTrustedIps$.outboundSchema = CreateProjectTrustedIps$outboundSchema;
})(CreateProjectTrustedIps$ || (CreateProjectTrustedIps$ = {}));
export function createProjectTrustedIpsToJSON(createProjectTrustedIps) {
    return JSON.stringify(CreateProjectTrustedIps$outboundSchema.parse(createProjectTrustedIps));
}
export function createProjectTrustedIpsFromJSON(jsonString) {
    return safeParse(jsonString, (x) => CreateProjectTrustedIps$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CreateProjectTrustedIps' from JSON`);
}
/** @internal */
export const CreateProjectGitComments$inboundSchema = z.object({
    onPullRequest: z.boolean(),
    onCommit: z.boolean(),
});
/** @internal */
export const CreateProjectGitComments$outboundSchema = z.object({
    onPullRequest: z.boolean(),
    onCommit: z.boolean(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CreateProjectGitComments$;
(function (CreateProjectGitComments$) {
    /** @deprecated use `CreateProjectGitComments$inboundSchema` instead. */
    CreateProjectGitComments$.inboundSchema = CreateProjectGitComments$inboundSchema;
    /** @deprecated use `CreateProjectGitComments$outboundSchema` instead. */
    CreateProjectGitComments$.outboundSchema = CreateProjectGitComments$outboundSchema;
})(CreateProjectGitComments$ || (CreateProjectGitComments$ = {}));
export function createProjectGitCommentsToJSON(createProjectGitComments) {
    return JSON.stringify(CreateProjectGitComments$outboundSchema.parse(createProjectGitComments));
}
export function createProjectGitCommentsFromJSON(jsonString) {
    return safeParse(jsonString, (x) => CreateProjectGitComments$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CreateProjectGitComments' from JSON`);
}
/** @internal */
export const CreateProjectCreateDeployments$inboundSchema = z.nativeEnum(CreateProjectCreateDeployments);
/** @internal */
export const CreateProjectCreateDeployments$outboundSchema = CreateProjectCreateDeployments$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CreateProjectCreateDeployments$;
(function (CreateProjectCreateDeployments$) {
    /** @deprecated use `CreateProjectCreateDeployments$inboundSchema` instead. */
    CreateProjectCreateDeployments$.inboundSchema = CreateProjectCreateDeployments$inboundSchema;
    /** @deprecated use `CreateProjectCreateDeployments$outboundSchema` instead. */
    CreateProjectCreateDeployments$.outboundSchema = CreateProjectCreateDeployments$outboundSchema;
})(CreateProjectCreateDeployments$ || (CreateProjectCreateDeployments$ = {}));
/** @internal */
export const CreateProjectGitProviderOptions$inboundSchema = z.object({
    createDeployments: CreateProjectCreateDeployments$inboundSchema,
});
/** @internal */
export const CreateProjectGitProviderOptions$outboundSchema = z.object({
    createDeployments: CreateProjectCreateDeployments$outboundSchema,
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CreateProjectGitProviderOptions$;
(function (CreateProjectGitProviderOptions$) {
    /** @deprecated use `CreateProjectGitProviderOptions$inboundSchema` instead. */
    CreateProjectGitProviderOptions$.inboundSchema = CreateProjectGitProviderOptions$inboundSchema;
    /** @deprecated use `CreateProjectGitProviderOptions$outboundSchema` instead. */
    CreateProjectGitProviderOptions$.outboundSchema = CreateProjectGitProviderOptions$outboundSchema;
})(CreateProjectGitProviderOptions$ || (CreateProjectGitProviderOptions$ = {}));
export function createProjectGitProviderOptionsToJSON(createProjectGitProviderOptions) {
    return JSON.stringify(CreateProjectGitProviderOptions$outboundSchema.parse(createProjectGitProviderOptions));
}
export function createProjectGitProviderOptionsFromJSON(jsonString) {
    return safeParse(jsonString, (x) => CreateProjectGitProviderOptions$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CreateProjectGitProviderOptions' from JSON`);
}
/** @internal */
export const CreateProjectWebAnalytics$inboundSchema = z.object({
    id: z.string(),
    disabledAt: z.number().optional(),
    canceledAt: z.number().optional(),
    enabledAt: z.number().optional(),
    hasData: z.boolean().optional(),
});
/** @internal */
export const CreateProjectWebAnalytics$outboundSchema = z.object({
    id: z.string(),
    disabledAt: z.number().optional(),
    canceledAt: z.number().optional(),
    enabledAt: z.number().optional(),
    hasData: z.boolean().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CreateProjectWebAnalytics$;
(function (CreateProjectWebAnalytics$) {
    /** @deprecated use `CreateProjectWebAnalytics$inboundSchema` instead. */
    CreateProjectWebAnalytics$.inboundSchema = CreateProjectWebAnalytics$inboundSchema;
    /** @deprecated use `CreateProjectWebAnalytics$outboundSchema` instead. */
    CreateProjectWebAnalytics$.outboundSchema = CreateProjectWebAnalytics$outboundSchema;
})(CreateProjectWebAnalytics$ || (CreateProjectWebAnalytics$ = {}));
export function createProjectWebAnalyticsToJSON(createProjectWebAnalytics) {
    return JSON.stringify(CreateProjectWebAnalytics$outboundSchema.parse(createProjectWebAnalytics));
}
export function createProjectWebAnalyticsFromJSON(jsonString) {
    return safeParse(jsonString, (x) => CreateProjectWebAnalytics$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CreateProjectWebAnalytics' from JSON`);
}
/** @internal */
export const CreateProjectSrc2$inboundSchema = z.object({
    re: z.string().optional(),
    eq: z.string().optional(),
    neq: z.string().optional(),
    inc: z.array(z.string()).optional(),
    ninc: z.array(z.string()).optional(),
    pre: z.string().optional(),
    suf: z.string().optional(),
    gt: z.number().optional(),
    gte: z.number().optional(),
    lt: z.number().optional(),
    lte: z.number().optional(),
});
/** @internal */
export const CreateProjectSrc2$outboundSchema = z.object({
    re: z.string().optional(),
    eq: z.string().optional(),
    neq: z.string().optional(),
    inc: z.array(z.string()).optional(),
    ninc: z.array(z.string()).optional(),
    pre: z.string().optional(),
    suf: z.string().optional(),
    gt: z.number().optional(),
    gte: z.number().optional(),
    lt: z.number().optional(),
    lte: z.number().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CreateProjectSrc2$;
(function (CreateProjectSrc2$) {
    /** @deprecated use `CreateProjectSrc2$inboundSchema` instead. */
    CreateProjectSrc2$.inboundSchema = CreateProjectSrc2$inboundSchema;
    /** @deprecated use `CreateProjectSrc2$outboundSchema` instead. */
    CreateProjectSrc2$.outboundSchema = CreateProjectSrc2$outboundSchema;
})(CreateProjectSrc2$ || (CreateProjectSrc2$ = {}));
export function createProjectSrc2ToJSON(createProjectSrc2) {
    return JSON.stringify(CreateProjectSrc2$outboundSchema.parse(createProjectSrc2));
}
export function createProjectSrc2FromJSON(jsonString) {
    return safeParse(jsonString, (x) => CreateProjectSrc2$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CreateProjectSrc2' from JSON`);
}
/** @internal */
export const CreateProjectSrc$inboundSchema = z.union([z.lazy(() => CreateProjectSrc2$inboundSchema), z.string()]);
/** @internal */
export const CreateProjectSrc$outboundSchema = z.union([z.lazy(() => CreateProjectSrc2$outboundSchema), z.string()]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CreateProjectSrc$;
(function (CreateProjectSrc$) {
    /** @deprecated use `CreateProjectSrc$inboundSchema` instead. */
    CreateProjectSrc$.inboundSchema = CreateProjectSrc$inboundSchema;
    /** @deprecated use `CreateProjectSrc$outboundSchema` instead. */
    CreateProjectSrc$.outboundSchema = CreateProjectSrc$outboundSchema;
})(CreateProjectSrc$ || (CreateProjectSrc$ = {}));
export function createProjectSrcToJSON(createProjectSrc) {
    return JSON.stringify(CreateProjectSrc$outboundSchema.parse(createProjectSrc));
}
export function createProjectSrcFromJSON(jsonString) {
    return safeParse(jsonString, (x) => CreateProjectSrc$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CreateProjectSrc' from JSON`);
}
/** @internal */
export const CreateProjectProjectsResponse200ApplicationJSONResponseBodySecurityType$inboundSchema = z.nativeEnum(CreateProjectProjectsResponse200ApplicationJSONResponseBodySecurityType);
/** @internal */
export const CreateProjectProjectsResponse200ApplicationJSONResponseBodySecurityType$outboundSchema = CreateProjectProjectsResponse200ApplicationJSONResponseBodySecurityType$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CreateProjectProjectsResponse200ApplicationJSONResponseBodySecurityType$;
(function (CreateProjectProjectsResponse200ApplicationJSONResponseBodySecurityType$) {
    /** @deprecated use `CreateProjectProjectsResponse200ApplicationJSONResponseBodySecurityType$inboundSchema` instead. */
    CreateProjectProjectsResponse200ApplicationJSONResponseBodySecurityType$.inboundSchema = CreateProjectProjectsResponse200ApplicationJSONResponseBodySecurityType$inboundSchema;
    /** @deprecated use `CreateProjectProjectsResponse200ApplicationJSONResponseBodySecurityType$outboundSchema` instead. */
    CreateProjectProjectsResponse200ApplicationJSONResponseBodySecurityType$.outboundSchema = CreateProjectProjectsResponse200ApplicationJSONResponseBodySecurityType$outboundSchema;
})(CreateProjectProjectsResponse200ApplicationJSONResponseBodySecurityType$ || (CreateProjectProjectsResponse200ApplicationJSONResponseBodySecurityType$ = {}));
/** @internal */
export const CreateProjectValue2$inboundSchema = z.object({
    re: z.string().optional(),
    eq: z.string().optional(),
    neq: z.string().optional(),
    inc: z.array(z.string()).optional(),
    ninc: z.array(z.string()).optional(),
    pre: z.string().optional(),
    suf: z.string().optional(),
    gt: z.number().optional(),
    gte: z.number().optional(),
    lt: z.number().optional(),
    lte: z.number().optional(),
});
/** @internal */
export const CreateProjectValue2$outboundSchema = z.object({
    re: z.string().optional(),
    eq: z.string().optional(),
    neq: z.string().optional(),
    inc: z.array(z.string()).optional(),
    ninc: z.array(z.string()).optional(),
    pre: z.string().optional(),
    suf: z.string().optional(),
    gt: z.number().optional(),
    gte: z.number().optional(),
    lt: z.number().optional(),
    lte: z.number().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CreateProjectValue2$;
(function (CreateProjectValue2$) {
    /** @deprecated use `CreateProjectValue2$inboundSchema` instead. */
    CreateProjectValue2$.inboundSchema = CreateProjectValue2$inboundSchema;
    /** @deprecated use `CreateProjectValue2$outboundSchema` instead. */
    CreateProjectValue2$.outboundSchema = CreateProjectValue2$outboundSchema;
})(CreateProjectValue2$ || (CreateProjectValue2$ = {}));
export function createProjectValue2ToJSON(createProjectValue2) {
    return JSON.stringify(CreateProjectValue2$outboundSchema.parse(createProjectValue2));
}
export function createProjectValue2FromJSON(jsonString) {
    return safeParse(jsonString, (x) => CreateProjectValue2$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CreateProjectValue2' from JSON`);
}
/** @internal */
export const CreateProjectValue$inboundSchema = z.union([z.lazy(() => CreateProjectValue2$inboundSchema), z.string()]);
/** @internal */
export const CreateProjectValue$outboundSchema = z.union([z.lazy(() => CreateProjectValue2$outboundSchema), z.string()]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CreateProjectValue$;
(function (CreateProjectValue$) {
    /** @deprecated use `CreateProjectValue$inboundSchema` instead. */
    CreateProjectValue$.inboundSchema = CreateProjectValue$inboundSchema;
    /** @deprecated use `CreateProjectValue$outboundSchema` instead. */
    CreateProjectValue$.outboundSchema = CreateProjectValue$outboundSchema;
})(CreateProjectValue$ || (CreateProjectValue$ = {}));
export function createProjectValueToJSON(createProjectValue) {
    return JSON.stringify(CreateProjectValue$outboundSchema.parse(createProjectValue));
}
export function createProjectValueFromJSON(jsonString) {
    return safeParse(jsonString, (x) => CreateProjectValue$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CreateProjectValue' from JSON`);
}
/** @internal */
export const CreateProjectHas$inboundSchema = z.object({
    type: CreateProjectProjectsResponse200ApplicationJSONResponseBodySecurityType$inboundSchema,
    key: z.string().optional(),
    value: z.union([z.lazy(() => CreateProjectValue2$inboundSchema), z.string()])
        .optional(),
});
/** @internal */
export const CreateProjectHas$outboundSchema = z.object({
    type: CreateProjectProjectsResponse200ApplicationJSONResponseBodySecurityType$outboundSchema,
    key: z.string().optional(),
    value: z.union([z.lazy(() => CreateProjectValue2$outboundSchema), z.string()])
        .optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CreateProjectHas$;
(function (CreateProjectHas$) {
    /** @deprecated use `CreateProjectHas$inboundSchema` instead. */
    CreateProjectHas$.inboundSchema = CreateProjectHas$inboundSchema;
    /** @deprecated use `CreateProjectHas$outboundSchema` instead. */
    CreateProjectHas$.outboundSchema = CreateProjectHas$outboundSchema;
})(CreateProjectHas$ || (CreateProjectHas$ = {}));
export function createProjectHasToJSON(createProjectHas) {
    return JSON.stringify(CreateProjectHas$outboundSchema.parse(createProjectHas));
}
export function createProjectHasFromJSON(jsonString) {
    return safeParse(jsonString, (x) => CreateProjectHas$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CreateProjectHas' from JSON`);
}
/** @internal */
export const CreateProjectProjectsResponse200ApplicationJSONResponseBodySecurityFirewallRoutesType$inboundSchema = z.nativeEnum(CreateProjectProjectsResponse200ApplicationJSONResponseBodySecurityFirewallRoutesType);
/** @internal */
export const CreateProjectProjectsResponse200ApplicationJSONResponseBodySecurityFirewallRoutesType$outboundSchema = CreateProjectProjectsResponse200ApplicationJSONResponseBodySecurityFirewallRoutesType$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CreateProjectProjectsResponse200ApplicationJSONResponseBodySecurityFirewallRoutesType$;
(function (CreateProjectProjectsResponse200ApplicationJSONResponseBodySecurityFirewallRoutesType$) {
    /** @deprecated use `CreateProjectProjectsResponse200ApplicationJSONResponseBodySecurityFirewallRoutesType$inboundSchema` instead. */
    CreateProjectProjectsResponse200ApplicationJSONResponseBodySecurityFirewallRoutesType$.inboundSchema = CreateProjectProjectsResponse200ApplicationJSONResponseBodySecurityFirewallRoutesType$inboundSchema;
    /** @deprecated use `CreateProjectProjectsResponse200ApplicationJSONResponseBodySecurityFirewallRoutesType$outboundSchema` instead. */
    CreateProjectProjectsResponse200ApplicationJSONResponseBodySecurityFirewallRoutesType$.outboundSchema = CreateProjectProjectsResponse200ApplicationJSONResponseBodySecurityFirewallRoutesType$outboundSchema;
})(CreateProjectProjectsResponse200ApplicationJSONResponseBodySecurityFirewallRoutesType$ || (CreateProjectProjectsResponse200ApplicationJSONResponseBodySecurityFirewallRoutesType$ = {}));
/** @internal */
export const CreateProjectValueProjects2$inboundSchema = z.object({
    re: z.string().optional(),
    eq: z.string().optional(),
    neq: z.string().optional(),
    inc: z.array(z.string()).optional(),
    ninc: z.array(z.string()).optional(),
    pre: z.string().optional(),
    suf: z.string().optional(),
    gt: z.number().optional(),
    gte: z.number().optional(),
    lt: z.number().optional(),
    lte: z.number().optional(),
});
/** @internal */
export const CreateProjectValueProjects2$outboundSchema = z.object({
    re: z.string().optional(),
    eq: z.string().optional(),
    neq: z.string().optional(),
    inc: z.array(z.string()).optional(),
    ninc: z.array(z.string()).optional(),
    pre: z.string().optional(),
    suf: z.string().optional(),
    gt: z.number().optional(),
    gte: z.number().optional(),
    lt: z.number().optional(),
    lte: z.number().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CreateProjectValueProjects2$;
(function (CreateProjectValueProjects2$) {
    /** @deprecated use `CreateProjectValueProjects2$inboundSchema` instead. */
    CreateProjectValueProjects2$.inboundSchema = CreateProjectValueProjects2$inboundSchema;
    /** @deprecated use `CreateProjectValueProjects2$outboundSchema` instead. */
    CreateProjectValueProjects2$.outboundSchema = CreateProjectValueProjects2$outboundSchema;
})(CreateProjectValueProjects2$ || (CreateProjectValueProjects2$ = {}));
export function createProjectValueProjects2ToJSON(createProjectValueProjects2) {
    return JSON.stringify(CreateProjectValueProjects2$outboundSchema.parse(createProjectValueProjects2));
}
export function createProjectValueProjects2FromJSON(jsonString) {
    return safeParse(jsonString, (x) => CreateProjectValueProjects2$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CreateProjectValueProjects2' from JSON`);
}
/** @internal */
export const CreateProjectProjectsValue$inboundSchema = z.union([
    z.lazy(() => CreateProjectValueProjects2$inboundSchema),
    z.string(),
]);
/** @internal */
export const CreateProjectProjectsValue$outboundSchema = z.union([
    z.lazy(() => CreateProjectValueProjects2$outboundSchema),
    z.string(),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CreateProjectProjectsValue$;
(function (CreateProjectProjectsValue$) {
    /** @deprecated use `CreateProjectProjectsValue$inboundSchema` instead. */
    CreateProjectProjectsValue$.inboundSchema = CreateProjectProjectsValue$inboundSchema;
    /** @deprecated use `CreateProjectProjectsValue$outboundSchema` instead. */
    CreateProjectProjectsValue$.outboundSchema = CreateProjectProjectsValue$outboundSchema;
})(CreateProjectProjectsValue$ || (CreateProjectProjectsValue$ = {}));
export function createProjectProjectsValueToJSON(createProjectProjectsValue) {
    return JSON.stringify(CreateProjectProjectsValue$outboundSchema.parse(createProjectProjectsValue));
}
export function createProjectProjectsValueFromJSON(jsonString) {
    return safeParse(jsonString, (x) => CreateProjectProjectsValue$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CreateProjectProjectsValue' from JSON`);
}
/** @internal */
export const CreateProjectMissing$inboundSchema = z.object({
    type: CreateProjectProjectsResponse200ApplicationJSONResponseBodySecurityFirewallRoutesType$inboundSchema,
    key: z.string().optional(),
    value: z.union([
        z.lazy(() => CreateProjectValueProjects2$inboundSchema),
        z.string(),
    ]).optional(),
});
/** @internal */
export const CreateProjectMissing$outboundSchema = z.object({
    type: CreateProjectProjectsResponse200ApplicationJSONResponseBodySecurityFirewallRoutesType$outboundSchema,
    key: z.string().optional(),
    value: z.union([
        z.lazy(() => CreateProjectValueProjects2$outboundSchema),
        z.string(),
    ]).optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CreateProjectMissing$;
(function (CreateProjectMissing$) {
    /** @deprecated use `CreateProjectMissing$inboundSchema` instead. */
    CreateProjectMissing$.inboundSchema = CreateProjectMissing$inboundSchema;
    /** @deprecated use `CreateProjectMissing$outboundSchema` instead. */
    CreateProjectMissing$.outboundSchema = CreateProjectMissing$outboundSchema;
})(CreateProjectMissing$ || (CreateProjectMissing$ = {}));
export function createProjectMissingToJSON(createProjectMissing) {
    return JSON.stringify(CreateProjectMissing$outboundSchema.parse(createProjectMissing));
}
export function createProjectMissingFromJSON(jsonString) {
    return safeParse(jsonString, (x) => CreateProjectMissing$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CreateProjectMissing' from JSON`);
}
/** @internal */
export const CreateProjectHandle$inboundSchema = z.nativeEnum(CreateProjectHandle);
/** @internal */
export const CreateProjectHandle$outboundSchema = CreateProjectHandle$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CreateProjectHandle$;
(function (CreateProjectHandle$) {
    /** @deprecated use `CreateProjectHandle$inboundSchema` instead. */
    CreateProjectHandle$.inboundSchema = CreateProjectHandle$inboundSchema;
    /** @deprecated use `CreateProjectHandle$outboundSchema` instead. */
    CreateProjectHandle$.outboundSchema = CreateProjectHandle$outboundSchema;
})(CreateProjectHandle$ || (CreateProjectHandle$ = {}));
/** @internal */
export const CreateProjectProjectsAction$inboundSchema = z.nativeEnum(CreateProjectProjectsAction);
/** @internal */
export const CreateProjectProjectsAction$outboundSchema = CreateProjectProjectsAction$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CreateProjectProjectsAction$;
(function (CreateProjectProjectsAction$) {
    /** @deprecated use `CreateProjectProjectsAction$inboundSchema` instead. */
    CreateProjectProjectsAction$.inboundSchema = CreateProjectProjectsAction$inboundSchema;
    /** @deprecated use `CreateProjectProjectsAction$outboundSchema` instead. */
    CreateProjectProjectsAction$.outboundSchema = CreateProjectProjectsAction$outboundSchema;
})(CreateProjectProjectsAction$ || (CreateProjectProjectsAction$ = {}));
/** @internal */
export const CreateProjectAlgo$inboundSchema = z.nativeEnum(CreateProjectAlgo);
/** @internal */
export const CreateProjectAlgo$outboundSchema = CreateProjectAlgo$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CreateProjectAlgo$;
(function (CreateProjectAlgo$) {
    /** @deprecated use `CreateProjectAlgo$inboundSchema` instead. */
    CreateProjectAlgo$.inboundSchema = CreateProjectAlgo$inboundSchema;
    /** @deprecated use `CreateProjectAlgo$outboundSchema` instead. */
    CreateProjectAlgo$.outboundSchema = CreateProjectAlgo$outboundSchema;
})(CreateProjectAlgo$ || (CreateProjectAlgo$ = {}));
/** @internal */
export const CreateProjectErl$inboundSchema = z.object({
    algo: CreateProjectAlgo$inboundSchema,
    window: z.number(),
    limit: z.number(),
    keys: z.array(z.string()),
});
/** @internal */
export const CreateProjectErl$outboundSchema = z.object({
    algo: CreateProjectAlgo$outboundSchema,
    window: z.number(),
    limit: z.number(),
    keys: z.array(z.string()),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CreateProjectErl$;
(function (CreateProjectErl$) {
    /** @deprecated use `CreateProjectErl$inboundSchema` instead. */
    CreateProjectErl$.inboundSchema = CreateProjectErl$inboundSchema;
    /** @deprecated use `CreateProjectErl$outboundSchema` instead. */
    CreateProjectErl$.outboundSchema = CreateProjectErl$outboundSchema;
})(CreateProjectErl$ || (CreateProjectErl$ = {}));
export function createProjectErlToJSON(createProjectErl) {
    return JSON.stringify(CreateProjectErl$outboundSchema.parse(createProjectErl));
}
export function createProjectErlFromJSON(jsonString) {
    return safeParse(jsonString, (x) => CreateProjectErl$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CreateProjectErl' from JSON`);
}
/** @internal */
export const CreateProjectMitigate$inboundSchema = z.object({
    action: CreateProjectProjectsAction$inboundSchema,
    rule_id: z.string(),
    ttl: z.number().optional(),
    erl: z.lazy(() => CreateProjectErl$inboundSchema).optional(),
}).transform((v) => {
    return remap$(v, {
        "rule_id": "ruleId",
    });
});
/** @internal */
export const CreateProjectMitigate$outboundSchema = z.object({
    action: CreateProjectProjectsAction$outboundSchema,
    ruleId: z.string(),
    ttl: z.number().optional(),
    erl: z.lazy(() => CreateProjectErl$outboundSchema).optional(),
}).transform((v) => {
    return remap$(v, {
        ruleId: "rule_id",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CreateProjectMitigate$;
(function (CreateProjectMitigate$) {
    /** @deprecated use `CreateProjectMitigate$inboundSchema` instead. */
    CreateProjectMitigate$.inboundSchema = CreateProjectMitigate$inboundSchema;
    /** @deprecated use `CreateProjectMitigate$outboundSchema` instead. */
    CreateProjectMitigate$.outboundSchema = CreateProjectMitigate$outboundSchema;
})(CreateProjectMitigate$ || (CreateProjectMitigate$ = {}));
export function createProjectMitigateToJSON(createProjectMitigate) {
    return JSON.stringify(CreateProjectMitigate$outboundSchema.parse(createProjectMitigate));
}
export function createProjectMitigateFromJSON(jsonString) {
    return safeParse(jsonString, (x) => CreateProjectMitigate$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CreateProjectMitigate' from JSON`);
}
/** @internal */
export const CreateProjectFirewallRoutes$inboundSchema = z.object({
    src: z.union([z.lazy(() => CreateProjectSrc2$inboundSchema), z.string()])
        .optional(),
    has: z.array(z.lazy(() => CreateProjectHas$inboundSchema)).optional(),
    missing: z.array(z.lazy(() => CreateProjectMissing$inboundSchema)).optional(),
    dest: z.string().optional(),
    status: z.number().optional(),
    handle: CreateProjectHandle$inboundSchema.optional(),
    mitigate: z.lazy(() => CreateProjectMitigate$inboundSchema).optional(),
});
/** @internal */
export const CreateProjectFirewallRoutes$outboundSchema = z.object({
    src: z.union([z.lazy(() => CreateProjectSrc2$outboundSchema), z.string()])
        .optional(),
    has: z.array(z.lazy(() => CreateProjectHas$outboundSchema)).optional(),
    missing: z.array(z.lazy(() => CreateProjectMissing$outboundSchema))
        .optional(),
    dest: z.string().optional(),
    status: z.number().optional(),
    handle: CreateProjectHandle$outboundSchema.optional(),
    mitigate: z.lazy(() => CreateProjectMitigate$outboundSchema).optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CreateProjectFirewallRoutes$;
(function (CreateProjectFirewallRoutes$) {
    /** @deprecated use `CreateProjectFirewallRoutes$inboundSchema` instead. */
    CreateProjectFirewallRoutes$.inboundSchema = CreateProjectFirewallRoutes$inboundSchema;
    /** @deprecated use `CreateProjectFirewallRoutes$outboundSchema` instead. */
    CreateProjectFirewallRoutes$.outboundSchema = CreateProjectFirewallRoutes$outboundSchema;
})(CreateProjectFirewallRoutes$ || (CreateProjectFirewallRoutes$ = {}));
export function createProjectFirewallRoutesToJSON(createProjectFirewallRoutes) {
    return JSON.stringify(CreateProjectFirewallRoutes$outboundSchema.parse(createProjectFirewallRoutes));
}
export function createProjectFirewallRoutesFromJSON(jsonString) {
    return safeParse(jsonString, (x) => CreateProjectFirewallRoutes$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CreateProjectFirewallRoutes' from JSON`);
}
/** @internal */
export const CreateProjectAction$inboundSchema = z.nativeEnum(CreateProjectAction);
/** @internal */
export const CreateProjectAction$outboundSchema = CreateProjectAction$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CreateProjectAction$;
(function (CreateProjectAction$) {
    /** @deprecated use `CreateProjectAction$inboundSchema` instead. */
    CreateProjectAction$.inboundSchema = CreateProjectAction$inboundSchema;
    /** @deprecated use `CreateProjectAction$outboundSchema` instead. */
    CreateProjectAction$.outboundSchema = CreateProjectAction$outboundSchema;
})(CreateProjectAction$ || (CreateProjectAction$ = {}));
/** @internal */
export const CreateProjectManagedRules$inboundSchema = z.object({
    active: z.boolean(),
    action: CreateProjectAction$inboundSchema.optional(),
});
/** @internal */
export const CreateProjectManagedRules$outboundSchema = z.object({
    active: z.boolean(),
    action: CreateProjectAction$outboundSchema.optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CreateProjectManagedRules$;
(function (CreateProjectManagedRules$) {
    /** @deprecated use `CreateProjectManagedRules$inboundSchema` instead. */
    CreateProjectManagedRules$.inboundSchema = CreateProjectManagedRules$inboundSchema;
    /** @deprecated use `CreateProjectManagedRules$outboundSchema` instead. */
    CreateProjectManagedRules$.outboundSchema = CreateProjectManagedRules$outboundSchema;
})(CreateProjectManagedRules$ || (CreateProjectManagedRules$ = {}));
export function createProjectManagedRulesToJSON(createProjectManagedRules) {
    return JSON.stringify(CreateProjectManagedRules$outboundSchema.parse(createProjectManagedRules));
}
export function createProjectManagedRulesFromJSON(jsonString) {
    return safeParse(jsonString, (x) => CreateProjectManagedRules$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CreateProjectManagedRules' from JSON`);
}
/** @internal */
export const CreateProjectSecurity$inboundSchema = z.object({
    attackModeEnabled: z.boolean().optional(),
    attackModeUpdatedAt: z.number().optional(),
    firewallEnabled: z.boolean().optional(),
    firewallUpdatedAt: z.number().optional(),
    attackModeActiveUntil: z.nullable(z.number()).optional(),
    firewallConfigVersion: z.number().optional(),
    firewallRoutes: z.array(z.lazy(() => CreateProjectFirewallRoutes$inboundSchema)).optional(),
    firewallSeawallEnabled: z.boolean().optional(),
    ja3Enabled: z.boolean().optional(),
    ja4Enabled: z.boolean().optional(),
    firewallBypassIps: z.array(z.string()).optional(),
    managedRules: z.nullable(z.record(z.lazy(() => CreateProjectManagedRules$inboundSchema))).optional(),
});
/** @internal */
export const CreateProjectSecurity$outboundSchema = z.object({
    attackModeEnabled: z.boolean().optional(),
    attackModeUpdatedAt: z.number().optional(),
    firewallEnabled: z.boolean().optional(),
    firewallUpdatedAt: z.number().optional(),
    attackModeActiveUntil: z.nullable(z.number()).optional(),
    firewallConfigVersion: z.number().optional(),
    firewallRoutes: z.array(z.lazy(() => CreateProjectFirewallRoutes$outboundSchema)).optional(),
    firewallSeawallEnabled: z.boolean().optional(),
    ja3Enabled: z.boolean().optional(),
    ja4Enabled: z.boolean().optional(),
    firewallBypassIps: z.array(z.string()).optional(),
    managedRules: z.nullable(z.record(z.lazy(() => CreateProjectManagedRules$outboundSchema))).optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CreateProjectSecurity$;
(function (CreateProjectSecurity$) {
    /** @deprecated use `CreateProjectSecurity$inboundSchema` instead. */
    CreateProjectSecurity$.inboundSchema = CreateProjectSecurity$inboundSchema;
    /** @deprecated use `CreateProjectSecurity$outboundSchema` instead. */
    CreateProjectSecurity$.outboundSchema = CreateProjectSecurity$outboundSchema;
})(CreateProjectSecurity$ || (CreateProjectSecurity$ = {}));
export function createProjectSecurityToJSON(createProjectSecurity) {
    return JSON.stringify(CreateProjectSecurity$outboundSchema.parse(createProjectSecurity));
}
export function createProjectSecurityFromJSON(jsonString) {
    return safeParse(jsonString, (x) => CreateProjectSecurity$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CreateProjectSecurity' from JSON`);
}
/** @internal */
export const CreateProjectIssuerMode$inboundSchema = z.nativeEnum(CreateProjectIssuerMode);
/** @internal */
export const CreateProjectIssuerMode$outboundSchema = CreateProjectIssuerMode$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CreateProjectIssuerMode$;
(function (CreateProjectIssuerMode$) {
    /** @deprecated use `CreateProjectIssuerMode$inboundSchema` instead. */
    CreateProjectIssuerMode$.inboundSchema = CreateProjectIssuerMode$inboundSchema;
    /** @deprecated use `CreateProjectIssuerMode$outboundSchema` instead. */
    CreateProjectIssuerMode$.outboundSchema = CreateProjectIssuerMode$outboundSchema;
})(CreateProjectIssuerMode$ || (CreateProjectIssuerMode$ = {}));
/** @internal */
export const CreateProjectOidcTokenConfig$inboundSchema = z.object({
    enabled: z.boolean(),
    issuerMode: CreateProjectIssuerMode$inboundSchema.optional(),
});
/** @internal */
export const CreateProjectOidcTokenConfig$outboundSchema = z.object({
    enabled: z.boolean(),
    issuerMode: CreateProjectIssuerMode$outboundSchema.optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CreateProjectOidcTokenConfig$;
(function (CreateProjectOidcTokenConfig$) {
    /** @deprecated use `CreateProjectOidcTokenConfig$inboundSchema` instead. */
    CreateProjectOidcTokenConfig$.inboundSchema = CreateProjectOidcTokenConfig$inboundSchema;
    /** @deprecated use `CreateProjectOidcTokenConfig$outboundSchema` instead. */
    CreateProjectOidcTokenConfig$.outboundSchema = CreateProjectOidcTokenConfig$outboundSchema;
})(CreateProjectOidcTokenConfig$ || (CreateProjectOidcTokenConfig$ = {}));
export function createProjectOidcTokenConfigToJSON(createProjectOidcTokenConfig) {
    return JSON.stringify(CreateProjectOidcTokenConfig$outboundSchema.parse(createProjectOidcTokenConfig));
}
export function createProjectOidcTokenConfigFromJSON(jsonString) {
    return safeParse(jsonString, (x) => CreateProjectOidcTokenConfig$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CreateProjectOidcTokenConfig' from JSON`);
}
/** @internal */
export const CreateProjectTier$inboundSchema = z.nativeEnum(CreateProjectTier);
/** @internal */
export const CreateProjectTier$outboundSchema = CreateProjectTier$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CreateProjectTier$;
(function (CreateProjectTier$) {
    /** @deprecated use `CreateProjectTier$inboundSchema` instead. */
    CreateProjectTier$.inboundSchema = CreateProjectTier$inboundSchema;
    /** @deprecated use `CreateProjectTier$outboundSchema` instead. */
    CreateProjectTier$.outboundSchema = CreateProjectTier$outboundSchema;
})(CreateProjectTier$ || (CreateProjectTier$ = {}));
/** @internal */
export const CreateProjectResponseBody$inboundSchema = z.object({
    accountId: z.string(),
    analytics: z.lazy(() => CreateProjectAnalytics$inboundSchema).optional(),
    speedInsights: z.lazy(() => CreateProjectSpeedInsights$inboundSchema)
        .optional(),
    autoExposeSystemEnvs: z.boolean().optional(),
    autoAssignCustomDomains: z.boolean().optional(),
    autoAssignCustomDomainsUpdatedBy: z.string().optional(),
    buildCommand: z.nullable(z.string()).optional(),
    commandForIgnoringBuildStep: z.nullable(z.string()).optional(),
    connectConfigurations: z.nullable(z.array(z.lazy(() => CreateProjectConnectConfigurations$inboundSchema))).optional(),
    connectConfigurationId: z.nullable(z.string()).optional(),
    connectBuildsEnabled: z.boolean().optional(),
    passiveConnectConfigurationId: z.nullable(z.string()).optional(),
    createdAt: z.number().optional(),
    customerSupportCodeVisibility: z.boolean().optional(),
    crons: z.lazy(() => CreateProjectCrons$inboundSchema).optional(),
    dataCache: z.lazy(() => CreateProjectDataCache$inboundSchema).optional(),
    deploymentExpiration: z.nullable(z.lazy(() => CreateProjectDeploymentExpiration$inboundSchema)).optional(),
    devCommand: z.nullable(z.string()).optional(),
    directoryListing: z.boolean(),
    installCommand: z.nullable(z.string()).optional(),
    env: z.array(z.lazy(() => CreateProjectEnv$inboundSchema)).optional(),
    customEnvironments: z.array(z.lazy(() => CreateProjectCustomEnvironments$inboundSchema)).optional(),
    framework: z.nullable(CreateProjectProjectsFramework$inboundSchema)
        .optional(),
    gitForkProtection: z.boolean().optional(),
    gitLFS: z.boolean().optional(),
    id: z.string(),
    ipBuckets: z.array(z.lazy(() => CreateProjectIpBuckets$inboundSchema))
        .optional(),
    latestDeployments: z.array(z.lazy(() => CreateProjectLatestDeployments$inboundSchema)).optional(),
    link: z.union([
        z.lazy(() => CreateProjectLink1$inboundSchema),
        z.lazy(() => CreateProjectLink3$inboundSchema),
        z.lazy(() => CreateProjectLink4$inboundSchema),
        z.lazy(() => CreateProjectLink2$inboundSchema),
    ]).optional(),
    microfrontends: z.union([
        z.lazy(() => CreateProjectMicrofrontends2$inboundSchema),
        z.lazy(() => CreateProjectMicrofrontends1$inboundSchema),
    ]).optional(),
    name: z.string(),
    nodeVersion: CreateProjectNodeVersion$inboundSchema,
    optionsAllowlist: z.nullable(z.lazy(() => CreateProjectOptionsAllowlist$inboundSchema)).optional(),
    outputDirectory: z.nullable(z.string()).optional(),
    passwordProtection: z.nullable(z.lazy(() => CreateProjectPasswordProtection$inboundSchema)).optional(),
    productionDeploymentsFastLane: z.boolean().optional(),
    publicSource: z.nullable(z.boolean()).optional(),
    resourceConfig: z.lazy(() => CreateProjectProjectsResourceConfig$inboundSchema),
    rollingRelease: z.nullable(z.lazy(() => CreateProjectRollingRelease$inboundSchema)).optional(),
    defaultResourceConfig: z.lazy(() => CreateProjectDefaultResourceConfig$inboundSchema),
    rootDirectory: z.nullable(z.string()).optional(),
    serverlessFunctionRegion: z.nullable(z.string()).optional(),
    serverlessFunctionZeroConfigFailover: z.boolean().optional(),
    skewProtectionBoundaryAt: z.number().optional(),
    skewProtectionMaxAge: z.number().optional(),
    skipGitConnectDuringLink: z.boolean().optional(),
    sourceFilesOutsideRootDirectory: z.boolean().optional(),
    enableAffectedProjectsDeployments: z.boolean().optional(),
    ssoProtection: z.nullable(z.lazy(() => CreateProjectSsoProtection$inboundSchema)).optional(),
    targets: z.record(z.nullable(z.lazy(() => CreateProjectTargets$inboundSchema))).optional(),
    transferCompletedAt: z.number().optional(),
    transferStartedAt: z.number().optional(),
    transferToAccountId: z.string().optional(),
    transferredFromAccountId: z.string().optional(),
    updatedAt: z.number().optional(),
    live: z.boolean().optional(),
    enablePreviewFeedback: z.nullable(z.boolean()).optional(),
    enableProductionFeedback: z.nullable(z.boolean()).optional(),
    permissions: z.lazy(() => CreateProjectPermissions$inboundSchema).optional(),
    lastRollbackTarget: z.nullable(z.lazy(() => CreateProjectLastRollbackTarget$inboundSchema)).optional(),
    lastAliasRequest: z.nullable(z.lazy(() => CreateProjectLastAliasRequest$inboundSchema)).optional(),
    protectionBypass: z.record(z.union([
        z.lazy(() => CreateProjectProtectionBypass2$inboundSchema),
        z.lazy(() => CreateProjectProtectionBypass1$inboundSchema),
    ])).optional(),
    hasActiveBranches: z.boolean().optional(),
    trustedIps: z.nullable(z.union([
        z.lazy(() => CreateProjectTrustedIps2$inboundSchema),
        z.lazy(() => CreateProjectTrustedIps1$inboundSchema),
    ])).optional(),
    gitComments: z.lazy(() => CreateProjectGitComments$inboundSchema).optional(),
    gitProviderOptions: z.lazy(() => CreateProjectGitProviderOptions$inboundSchema).optional(),
    paused: z.boolean().optional(),
    concurrencyBucketName: z.string().optional(),
    webAnalytics: z.lazy(() => CreateProjectWebAnalytics$inboundSchema)
        .optional(),
    security: z.lazy(() => CreateProjectSecurity$inboundSchema).optional(),
    oidcTokenConfig: z.lazy(() => CreateProjectOidcTokenConfig$inboundSchema)
        .optional(),
    tier: CreateProjectTier$inboundSchema.optional(),
});
/** @internal */
export const CreateProjectResponseBody$outboundSchema = z.object({
    accountId: z.string(),
    analytics: z.lazy(() => CreateProjectAnalytics$outboundSchema).optional(),
    speedInsights: z.lazy(() => CreateProjectSpeedInsights$outboundSchema)
        .optional(),
    autoExposeSystemEnvs: z.boolean().optional(),
    autoAssignCustomDomains: z.boolean().optional(),
    autoAssignCustomDomainsUpdatedBy: z.string().optional(),
    buildCommand: z.nullable(z.string()).optional(),
    commandForIgnoringBuildStep: z.nullable(z.string()).optional(),
    connectConfigurations: z.nullable(z.array(z.lazy(() => CreateProjectConnectConfigurations$outboundSchema))).optional(),
    connectConfigurationId: z.nullable(z.string()).optional(),
    connectBuildsEnabled: z.boolean().optional(),
    passiveConnectConfigurationId: z.nullable(z.string()).optional(),
    createdAt: z.number().optional(),
    customerSupportCodeVisibility: z.boolean().optional(),
    crons: z.lazy(() => CreateProjectCrons$outboundSchema).optional(),
    dataCache: z.lazy(() => CreateProjectDataCache$outboundSchema).optional(),
    deploymentExpiration: z.nullable(z.lazy(() => CreateProjectDeploymentExpiration$outboundSchema)).optional(),
    devCommand: z.nullable(z.string()).optional(),
    directoryListing: z.boolean(),
    installCommand: z.nullable(z.string()).optional(),
    env: z.array(z.lazy(() => CreateProjectEnv$outboundSchema)).optional(),
    customEnvironments: z.array(z.lazy(() => CreateProjectCustomEnvironments$outboundSchema)).optional(),
    framework: z.nullable(CreateProjectProjectsFramework$outboundSchema)
        .optional(),
    gitForkProtection: z.boolean().optional(),
    gitLFS: z.boolean().optional(),
    id: z.string(),
    ipBuckets: z.array(z.lazy(() => CreateProjectIpBuckets$outboundSchema))
        .optional(),
    latestDeployments: z.array(z.lazy(() => CreateProjectLatestDeployments$outboundSchema)).optional(),
    link: z.union([
        z.lazy(() => CreateProjectLink1$outboundSchema),
        z.lazy(() => CreateProjectLink3$outboundSchema),
        z.lazy(() => CreateProjectLink4$outboundSchema),
        z.lazy(() => CreateProjectLink2$outboundSchema),
    ]).optional(),
    microfrontends: z.union([
        z.lazy(() => CreateProjectMicrofrontends2$outboundSchema),
        z.lazy(() => CreateProjectMicrofrontends1$outboundSchema),
    ]).optional(),
    name: z.string(),
    nodeVersion: CreateProjectNodeVersion$outboundSchema,
    optionsAllowlist: z.nullable(z.lazy(() => CreateProjectOptionsAllowlist$outboundSchema)).optional(),
    outputDirectory: z.nullable(z.string()).optional(),
    passwordProtection: z.nullable(z.lazy(() => CreateProjectPasswordProtection$outboundSchema)).optional(),
    productionDeploymentsFastLane: z.boolean().optional(),
    publicSource: z.nullable(z.boolean()).optional(),
    resourceConfig: z.lazy(() => CreateProjectProjectsResourceConfig$outboundSchema),
    rollingRelease: z.nullable(z.lazy(() => CreateProjectRollingRelease$outboundSchema)).optional(),
    defaultResourceConfig: z.lazy(() => CreateProjectDefaultResourceConfig$outboundSchema),
    rootDirectory: z.nullable(z.string()).optional(),
    serverlessFunctionRegion: z.nullable(z.string()).optional(),
    serverlessFunctionZeroConfigFailover: z.boolean().optional(),
    skewProtectionBoundaryAt: z.number().optional(),
    skewProtectionMaxAge: z.number().optional(),
    skipGitConnectDuringLink: z.boolean().optional(),
    sourceFilesOutsideRootDirectory: z.boolean().optional(),
    enableAffectedProjectsDeployments: z.boolean().optional(),
    ssoProtection: z.nullable(z.lazy(() => CreateProjectSsoProtection$outboundSchema)).optional(),
    targets: z.record(z.nullable(z.lazy(() => CreateProjectTargets$outboundSchema))).optional(),
    transferCompletedAt: z.number().optional(),
    transferStartedAt: z.number().optional(),
    transferToAccountId: z.string().optional(),
    transferredFromAccountId: z.string().optional(),
    updatedAt: z.number().optional(),
    live: z.boolean().optional(),
    enablePreviewFeedback: z.nullable(z.boolean()).optional(),
    enableProductionFeedback: z.nullable(z.boolean()).optional(),
    permissions: z.lazy(() => CreateProjectPermissions$outboundSchema).optional(),
    lastRollbackTarget: z.nullable(z.lazy(() => CreateProjectLastRollbackTarget$outboundSchema)).optional(),
    lastAliasRequest: z.nullable(z.lazy(() => CreateProjectLastAliasRequest$outboundSchema)).optional(),
    protectionBypass: z.record(z.union([
        z.lazy(() => CreateProjectProtectionBypass2$outboundSchema),
        z.lazy(() => CreateProjectProtectionBypass1$outboundSchema),
    ])).optional(),
    hasActiveBranches: z.boolean().optional(),
    trustedIps: z.nullable(z.union([
        z.lazy(() => CreateProjectTrustedIps2$outboundSchema),
        z.lazy(() => CreateProjectTrustedIps1$outboundSchema),
    ])).optional(),
    gitComments: z.lazy(() => CreateProjectGitComments$outboundSchema).optional(),
    gitProviderOptions: z.lazy(() => CreateProjectGitProviderOptions$outboundSchema).optional(),
    paused: z.boolean().optional(),
    concurrencyBucketName: z.string().optional(),
    webAnalytics: z.lazy(() => CreateProjectWebAnalytics$outboundSchema)
        .optional(),
    security: z.lazy(() => CreateProjectSecurity$outboundSchema).optional(),
    oidcTokenConfig: z.lazy(() => CreateProjectOidcTokenConfig$outboundSchema)
        .optional(),
    tier: CreateProjectTier$outboundSchema.optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CreateProjectResponseBody$;
(function (CreateProjectResponseBody$) {
    /** @deprecated use `CreateProjectResponseBody$inboundSchema` instead. */
    CreateProjectResponseBody$.inboundSchema = CreateProjectResponseBody$inboundSchema;
    /** @deprecated use `CreateProjectResponseBody$outboundSchema` instead. */
    CreateProjectResponseBody$.outboundSchema = CreateProjectResponseBody$outboundSchema;
})(CreateProjectResponseBody$ || (CreateProjectResponseBody$ = {}));
export function createProjectResponseBodyToJSON(createProjectResponseBody) {
    return JSON.stringify(CreateProjectResponseBody$outboundSchema.parse(createProjectResponseBody));
}
export function createProjectResponseBodyFromJSON(jsonString) {
    return safeParse(jsonString, (x) => CreateProjectResponseBody$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CreateProjectResponseBody' from JSON`);
}
//# sourceMappingURL=createprojectop.js.map