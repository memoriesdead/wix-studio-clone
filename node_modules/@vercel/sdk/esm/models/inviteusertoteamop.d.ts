import * as z from "zod";
import { ClosedEnum } from "../types/enums.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./sdkvalidationerror.js";
/**
 * The role of the user to invite
 */
export declare const InviteUserToTeamRole: {
    readonly Owner: "OWNER";
    readonly Member: "MEMBER";
    readonly Developer: "DEVELOPER";
    readonly Security: "SECURITY";
    readonly Billing: "BILLING";
    readonly Viewer: "VIEWER";
    readonly Contributor: "CONTRIBUTOR";
};
/**
 * The role of the user to invite
 */
export type InviteUserToTeamRole = ClosedEnum<typeof InviteUserToTeamRole>;
/**
 * Sets the project roles for the invited user
 */
export declare const InviteUserToTeamTeamsRole: {
    readonly Admin: "ADMIN";
    readonly ProjectViewer: "PROJECT_VIEWER";
    readonly ProjectDeveloper: "PROJECT_DEVELOPER";
};
/**
 * Sets the project roles for the invited user
 */
export type InviteUserToTeamTeamsRole = ClosedEnum<typeof InviteUserToTeamTeamsRole>;
export type InviteUserToTeamProjects = {
    /**
     * The ID of the project.
     */
    projectId: string;
    /**
     * Sets the project roles for the invited user
     */
    role: InviteUserToTeamTeamsRole;
};
export type InviteUserToTeamRequestBody = {
    /**
     * The id of the user to invite
     */
    uid?: string | undefined;
    /**
     * The email address of the user to invite
     */
    email?: string | undefined;
    /**
     * The role of the user to invite
     */
    role?: InviteUserToTeamRole | undefined;
    projects?: Array<InviteUserToTeamProjects> | undefined;
};
export type InviteUserToTeamRequest = {
    teamId: string;
    requestBody: InviteUserToTeamRequestBody;
};
export declare const InviteUserToTeamResponseBodyRole: {
    readonly Owner: "OWNER";
    readonly Member: "MEMBER";
    readonly Developer: "DEVELOPER";
    readonly Security: "SECURITY";
    readonly Billing: "BILLING";
    readonly Viewer: "VIEWER";
    readonly Contributor: "CONTRIBUTOR";
};
export type InviteUserToTeamResponseBodyRole = ClosedEnum<typeof InviteUserToTeamResponseBodyRole>;
export declare const InviteUserToTeamResponseBodyTeamRoles: {
    readonly Owner: "OWNER";
    readonly Member: "MEMBER";
    readonly Developer: "DEVELOPER";
    readonly Security: "SECURITY";
    readonly Billing: "BILLING";
    readonly Viewer: "VIEWER";
    readonly Contributor: "CONTRIBUTOR";
};
export type InviteUserToTeamResponseBodyTeamRoles = ClosedEnum<typeof InviteUserToTeamResponseBodyTeamRoles>;
export declare const InviteUserToTeamResponseBodyTeamPermissions: {
    readonly CreateProject: "CreateProject";
    readonly FullProductionDeployment: "FullProductionDeployment";
    readonly UsageViewer: "UsageViewer";
    readonly EnvVariableManager: "EnvVariableManager";
    readonly EnvironmentManager: "EnvironmentManager";
};
export type InviteUserToTeamResponseBodyTeamPermissions = ClosedEnum<typeof InviteUserToTeamResponseBodyTeamPermissions>;
export type InviteUserToTeamResponseBody2 = {
    uid: string;
    username: string;
    role: InviteUserToTeamResponseBodyRole;
    teamRoles?: Array<InviteUserToTeamResponseBodyTeamRoles> | undefined;
    teamPermissions?: Array<InviteUserToTeamResponseBodyTeamPermissions> | undefined;
};
/**
 * The role used for the invitation
 */
export declare const ResponseBodyRole: {
    readonly Owner: "OWNER";
    readonly Member: "MEMBER";
    readonly Developer: "DEVELOPER";
    readonly Security: "SECURITY";
    readonly Billing: "BILLING";
    readonly Viewer: "VIEWER";
    readonly Contributor: "CONTRIBUTOR";
};
/**
 * The role used for the invitation
 */
export type ResponseBodyRole = ClosedEnum<typeof ResponseBodyRole>;
/**
 * The team roles of the user
 */
export declare const ResponseBodyTeamRoles: {
    readonly Owner: "OWNER";
    readonly Member: "MEMBER";
    readonly Developer: "DEVELOPER";
    readonly Security: "SECURITY";
    readonly Billing: "BILLING";
    readonly Viewer: "VIEWER";
    readonly Contributor: "CONTRIBUTOR";
};
/**
 * The team roles of the user
 */
export type ResponseBodyTeamRoles = ClosedEnum<typeof ResponseBodyTeamRoles>;
/**
 * The team permissions of the user
 */
export declare const ResponseBodyTeamPermissions: {
    readonly CreateProject: "CreateProject";
    readonly FullProductionDeployment: "FullProductionDeployment";
    readonly UsageViewer: "UsageViewer";
    readonly EnvVariableManager: "EnvVariableManager";
    readonly EnvironmentManager: "EnvironmentManager";
};
/**
 * The team permissions of the user
 */
export type ResponseBodyTeamPermissions = ClosedEnum<typeof ResponseBodyTeamPermissions>;
/**
 * The member was successfully added to the team
 */
export type InviteUserToTeamResponseBody1 = {
    /**
     * The ID of the invited user
     */
    uid: string;
    /**
     * The username of the invited user
     */
    username: string;
    /**
     * The email of the invited user. Not included if the user was invited via their UID.
     */
    email?: string | undefined;
    /**
     * The role used for the invitation
     */
    role: ResponseBodyRole;
    /**
     * The team roles of the user
     */
    teamRoles?: Array<ResponseBodyTeamRoles> | undefined;
    /**
     * The team permissions of the user
     */
    teamPermissions?: Array<ResponseBodyTeamPermissions> | undefined;
};
/**
 * The member was successfully added to the team
 */
export type InviteUserToTeamResponseBody = InviteUserToTeamResponseBody2 | InviteUserToTeamResponseBody1;
/** @internal */
export declare const InviteUserToTeamRole$inboundSchema: z.ZodNativeEnum<typeof InviteUserToTeamRole>;
/** @internal */
export declare const InviteUserToTeamRole$outboundSchema: z.ZodNativeEnum<typeof InviteUserToTeamRole>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace InviteUserToTeamRole$ {
    /** @deprecated use `InviteUserToTeamRole$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Owner: "OWNER";
        readonly Member: "MEMBER";
        readonly Developer: "DEVELOPER";
        readonly Security: "SECURITY";
        readonly Billing: "BILLING";
        readonly Viewer: "VIEWER";
        readonly Contributor: "CONTRIBUTOR";
    }>;
    /** @deprecated use `InviteUserToTeamRole$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Owner: "OWNER";
        readonly Member: "MEMBER";
        readonly Developer: "DEVELOPER";
        readonly Security: "SECURITY";
        readonly Billing: "BILLING";
        readonly Viewer: "VIEWER";
        readonly Contributor: "CONTRIBUTOR";
    }>;
}
/** @internal */
export declare const InviteUserToTeamTeamsRole$inboundSchema: z.ZodNativeEnum<typeof InviteUserToTeamTeamsRole>;
/** @internal */
export declare const InviteUserToTeamTeamsRole$outboundSchema: z.ZodNativeEnum<typeof InviteUserToTeamTeamsRole>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace InviteUserToTeamTeamsRole$ {
    /** @deprecated use `InviteUserToTeamTeamsRole$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Admin: "ADMIN";
        readonly ProjectViewer: "PROJECT_VIEWER";
        readonly ProjectDeveloper: "PROJECT_DEVELOPER";
    }>;
    /** @deprecated use `InviteUserToTeamTeamsRole$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Admin: "ADMIN";
        readonly ProjectViewer: "PROJECT_VIEWER";
        readonly ProjectDeveloper: "PROJECT_DEVELOPER";
    }>;
}
/** @internal */
export declare const InviteUserToTeamProjects$inboundSchema: z.ZodType<InviteUserToTeamProjects, z.ZodTypeDef, unknown>;
/** @internal */
export type InviteUserToTeamProjects$Outbound = {
    projectId: string;
    role: string;
};
/** @internal */
export declare const InviteUserToTeamProjects$outboundSchema: z.ZodType<InviteUserToTeamProjects$Outbound, z.ZodTypeDef, InviteUserToTeamProjects>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace InviteUserToTeamProjects$ {
    /** @deprecated use `InviteUserToTeamProjects$inboundSchema` instead. */
    const inboundSchema: z.ZodType<InviteUserToTeamProjects, z.ZodTypeDef, unknown>;
    /** @deprecated use `InviteUserToTeamProjects$outboundSchema` instead. */
    const outboundSchema: z.ZodType<InviteUserToTeamProjects$Outbound, z.ZodTypeDef, InviteUserToTeamProjects>;
    /** @deprecated use `InviteUserToTeamProjects$Outbound` instead. */
    type Outbound = InviteUserToTeamProjects$Outbound;
}
export declare function inviteUserToTeamProjectsToJSON(inviteUserToTeamProjects: InviteUserToTeamProjects): string;
export declare function inviteUserToTeamProjectsFromJSON(jsonString: string): SafeParseResult<InviteUserToTeamProjects, SDKValidationError>;
/** @internal */
export declare const InviteUserToTeamRequestBody$inboundSchema: z.ZodType<InviteUserToTeamRequestBody, z.ZodTypeDef, unknown>;
/** @internal */
export type InviteUserToTeamRequestBody$Outbound = {
    uid?: string | undefined;
    email?: string | undefined;
    role: string;
    projects?: Array<InviteUserToTeamProjects$Outbound> | undefined;
};
/** @internal */
export declare const InviteUserToTeamRequestBody$outboundSchema: z.ZodType<InviteUserToTeamRequestBody$Outbound, z.ZodTypeDef, InviteUserToTeamRequestBody>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace InviteUserToTeamRequestBody$ {
    /** @deprecated use `InviteUserToTeamRequestBody$inboundSchema` instead. */
    const inboundSchema: z.ZodType<InviteUserToTeamRequestBody, z.ZodTypeDef, unknown>;
    /** @deprecated use `InviteUserToTeamRequestBody$outboundSchema` instead. */
    const outboundSchema: z.ZodType<InviteUserToTeamRequestBody$Outbound, z.ZodTypeDef, InviteUserToTeamRequestBody>;
    /** @deprecated use `InviteUserToTeamRequestBody$Outbound` instead. */
    type Outbound = InviteUserToTeamRequestBody$Outbound;
}
export declare function inviteUserToTeamRequestBodyToJSON(inviteUserToTeamRequestBody: InviteUserToTeamRequestBody): string;
export declare function inviteUserToTeamRequestBodyFromJSON(jsonString: string): SafeParseResult<InviteUserToTeamRequestBody, SDKValidationError>;
/** @internal */
export declare const InviteUserToTeamRequest$inboundSchema: z.ZodType<InviteUserToTeamRequest, z.ZodTypeDef, unknown>;
/** @internal */
export type InviteUserToTeamRequest$Outbound = {
    teamId: string;
    RequestBody: InviteUserToTeamRequestBody$Outbound;
};
/** @internal */
export declare const InviteUserToTeamRequest$outboundSchema: z.ZodType<InviteUserToTeamRequest$Outbound, z.ZodTypeDef, InviteUserToTeamRequest>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace InviteUserToTeamRequest$ {
    /** @deprecated use `InviteUserToTeamRequest$inboundSchema` instead. */
    const inboundSchema: z.ZodType<InviteUserToTeamRequest, z.ZodTypeDef, unknown>;
    /** @deprecated use `InviteUserToTeamRequest$outboundSchema` instead. */
    const outboundSchema: z.ZodType<InviteUserToTeamRequest$Outbound, z.ZodTypeDef, InviteUserToTeamRequest>;
    /** @deprecated use `InviteUserToTeamRequest$Outbound` instead. */
    type Outbound = InviteUserToTeamRequest$Outbound;
}
export declare function inviteUserToTeamRequestToJSON(inviteUserToTeamRequest: InviteUserToTeamRequest): string;
export declare function inviteUserToTeamRequestFromJSON(jsonString: string): SafeParseResult<InviteUserToTeamRequest, SDKValidationError>;
/** @internal */
export declare const InviteUserToTeamResponseBodyRole$inboundSchema: z.ZodNativeEnum<typeof InviteUserToTeamResponseBodyRole>;
/** @internal */
export declare const InviteUserToTeamResponseBodyRole$outboundSchema: z.ZodNativeEnum<typeof InviteUserToTeamResponseBodyRole>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace InviteUserToTeamResponseBodyRole$ {
    /** @deprecated use `InviteUserToTeamResponseBodyRole$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Owner: "OWNER";
        readonly Member: "MEMBER";
        readonly Developer: "DEVELOPER";
        readonly Security: "SECURITY";
        readonly Billing: "BILLING";
        readonly Viewer: "VIEWER";
        readonly Contributor: "CONTRIBUTOR";
    }>;
    /** @deprecated use `InviteUserToTeamResponseBodyRole$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Owner: "OWNER";
        readonly Member: "MEMBER";
        readonly Developer: "DEVELOPER";
        readonly Security: "SECURITY";
        readonly Billing: "BILLING";
        readonly Viewer: "VIEWER";
        readonly Contributor: "CONTRIBUTOR";
    }>;
}
/** @internal */
export declare const InviteUserToTeamResponseBodyTeamRoles$inboundSchema: z.ZodNativeEnum<typeof InviteUserToTeamResponseBodyTeamRoles>;
/** @internal */
export declare const InviteUserToTeamResponseBodyTeamRoles$outboundSchema: z.ZodNativeEnum<typeof InviteUserToTeamResponseBodyTeamRoles>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace InviteUserToTeamResponseBodyTeamRoles$ {
    /** @deprecated use `InviteUserToTeamResponseBodyTeamRoles$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Owner: "OWNER";
        readonly Member: "MEMBER";
        readonly Developer: "DEVELOPER";
        readonly Security: "SECURITY";
        readonly Billing: "BILLING";
        readonly Viewer: "VIEWER";
        readonly Contributor: "CONTRIBUTOR";
    }>;
    /** @deprecated use `InviteUserToTeamResponseBodyTeamRoles$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Owner: "OWNER";
        readonly Member: "MEMBER";
        readonly Developer: "DEVELOPER";
        readonly Security: "SECURITY";
        readonly Billing: "BILLING";
        readonly Viewer: "VIEWER";
        readonly Contributor: "CONTRIBUTOR";
    }>;
}
/** @internal */
export declare const InviteUserToTeamResponseBodyTeamPermissions$inboundSchema: z.ZodNativeEnum<typeof InviteUserToTeamResponseBodyTeamPermissions>;
/** @internal */
export declare const InviteUserToTeamResponseBodyTeamPermissions$outboundSchema: z.ZodNativeEnum<typeof InviteUserToTeamResponseBodyTeamPermissions>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace InviteUserToTeamResponseBodyTeamPermissions$ {
    /** @deprecated use `InviteUserToTeamResponseBodyTeamPermissions$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly CreateProject: "CreateProject";
        readonly FullProductionDeployment: "FullProductionDeployment";
        readonly UsageViewer: "UsageViewer";
        readonly EnvVariableManager: "EnvVariableManager";
        readonly EnvironmentManager: "EnvironmentManager";
    }>;
    /** @deprecated use `InviteUserToTeamResponseBodyTeamPermissions$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly CreateProject: "CreateProject";
        readonly FullProductionDeployment: "FullProductionDeployment";
        readonly UsageViewer: "UsageViewer";
        readonly EnvVariableManager: "EnvVariableManager";
        readonly EnvironmentManager: "EnvironmentManager";
    }>;
}
/** @internal */
export declare const InviteUserToTeamResponseBody2$inboundSchema: z.ZodType<InviteUserToTeamResponseBody2, z.ZodTypeDef, unknown>;
/** @internal */
export type InviteUserToTeamResponseBody2$Outbound = {
    uid: string;
    username: string;
    role: string;
    teamRoles?: Array<string> | undefined;
    teamPermissions?: Array<string> | undefined;
};
/** @internal */
export declare const InviteUserToTeamResponseBody2$outboundSchema: z.ZodType<InviteUserToTeamResponseBody2$Outbound, z.ZodTypeDef, InviteUserToTeamResponseBody2>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace InviteUserToTeamResponseBody2$ {
    /** @deprecated use `InviteUserToTeamResponseBody2$inboundSchema` instead. */
    const inboundSchema: z.ZodType<InviteUserToTeamResponseBody2, z.ZodTypeDef, unknown>;
    /** @deprecated use `InviteUserToTeamResponseBody2$outboundSchema` instead. */
    const outboundSchema: z.ZodType<InviteUserToTeamResponseBody2$Outbound, z.ZodTypeDef, InviteUserToTeamResponseBody2>;
    /** @deprecated use `InviteUserToTeamResponseBody2$Outbound` instead. */
    type Outbound = InviteUserToTeamResponseBody2$Outbound;
}
export declare function inviteUserToTeamResponseBody2ToJSON(inviteUserToTeamResponseBody2: InviteUserToTeamResponseBody2): string;
export declare function inviteUserToTeamResponseBody2FromJSON(jsonString: string): SafeParseResult<InviteUserToTeamResponseBody2, SDKValidationError>;
/** @internal */
export declare const ResponseBodyRole$inboundSchema: z.ZodNativeEnum<typeof ResponseBodyRole>;
/** @internal */
export declare const ResponseBodyRole$outboundSchema: z.ZodNativeEnum<typeof ResponseBodyRole>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace ResponseBodyRole$ {
    /** @deprecated use `ResponseBodyRole$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Owner: "OWNER";
        readonly Member: "MEMBER";
        readonly Developer: "DEVELOPER";
        readonly Security: "SECURITY";
        readonly Billing: "BILLING";
        readonly Viewer: "VIEWER";
        readonly Contributor: "CONTRIBUTOR";
    }>;
    /** @deprecated use `ResponseBodyRole$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Owner: "OWNER";
        readonly Member: "MEMBER";
        readonly Developer: "DEVELOPER";
        readonly Security: "SECURITY";
        readonly Billing: "BILLING";
        readonly Viewer: "VIEWER";
        readonly Contributor: "CONTRIBUTOR";
    }>;
}
/** @internal */
export declare const ResponseBodyTeamRoles$inboundSchema: z.ZodNativeEnum<typeof ResponseBodyTeamRoles>;
/** @internal */
export declare const ResponseBodyTeamRoles$outboundSchema: z.ZodNativeEnum<typeof ResponseBodyTeamRoles>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace ResponseBodyTeamRoles$ {
    /** @deprecated use `ResponseBodyTeamRoles$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Owner: "OWNER";
        readonly Member: "MEMBER";
        readonly Developer: "DEVELOPER";
        readonly Security: "SECURITY";
        readonly Billing: "BILLING";
        readonly Viewer: "VIEWER";
        readonly Contributor: "CONTRIBUTOR";
    }>;
    /** @deprecated use `ResponseBodyTeamRoles$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Owner: "OWNER";
        readonly Member: "MEMBER";
        readonly Developer: "DEVELOPER";
        readonly Security: "SECURITY";
        readonly Billing: "BILLING";
        readonly Viewer: "VIEWER";
        readonly Contributor: "CONTRIBUTOR";
    }>;
}
/** @internal */
export declare const ResponseBodyTeamPermissions$inboundSchema: z.ZodNativeEnum<typeof ResponseBodyTeamPermissions>;
/** @internal */
export declare const ResponseBodyTeamPermissions$outboundSchema: z.ZodNativeEnum<typeof ResponseBodyTeamPermissions>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace ResponseBodyTeamPermissions$ {
    /** @deprecated use `ResponseBodyTeamPermissions$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly CreateProject: "CreateProject";
        readonly FullProductionDeployment: "FullProductionDeployment";
        readonly UsageViewer: "UsageViewer";
        readonly EnvVariableManager: "EnvVariableManager";
        readonly EnvironmentManager: "EnvironmentManager";
    }>;
    /** @deprecated use `ResponseBodyTeamPermissions$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly CreateProject: "CreateProject";
        readonly FullProductionDeployment: "FullProductionDeployment";
        readonly UsageViewer: "UsageViewer";
        readonly EnvVariableManager: "EnvVariableManager";
        readonly EnvironmentManager: "EnvironmentManager";
    }>;
}
/** @internal */
export declare const InviteUserToTeamResponseBody1$inboundSchema: z.ZodType<InviteUserToTeamResponseBody1, z.ZodTypeDef, unknown>;
/** @internal */
export type InviteUserToTeamResponseBody1$Outbound = {
    uid: string;
    username: string;
    email?: string | undefined;
    role: string;
    teamRoles?: Array<string> | undefined;
    teamPermissions?: Array<string> | undefined;
};
/** @internal */
export declare const InviteUserToTeamResponseBody1$outboundSchema: z.ZodType<InviteUserToTeamResponseBody1$Outbound, z.ZodTypeDef, InviteUserToTeamResponseBody1>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace InviteUserToTeamResponseBody1$ {
    /** @deprecated use `InviteUserToTeamResponseBody1$inboundSchema` instead. */
    const inboundSchema: z.ZodType<InviteUserToTeamResponseBody1, z.ZodTypeDef, unknown>;
    /** @deprecated use `InviteUserToTeamResponseBody1$outboundSchema` instead. */
    const outboundSchema: z.ZodType<InviteUserToTeamResponseBody1$Outbound, z.ZodTypeDef, InviteUserToTeamResponseBody1>;
    /** @deprecated use `InviteUserToTeamResponseBody1$Outbound` instead. */
    type Outbound = InviteUserToTeamResponseBody1$Outbound;
}
export declare function inviteUserToTeamResponseBody1ToJSON(inviteUserToTeamResponseBody1: InviteUserToTeamResponseBody1): string;
export declare function inviteUserToTeamResponseBody1FromJSON(jsonString: string): SafeParseResult<InviteUserToTeamResponseBody1, SDKValidationError>;
/** @internal */
export declare const InviteUserToTeamResponseBody$inboundSchema: z.ZodType<InviteUserToTeamResponseBody, z.ZodTypeDef, unknown>;
/** @internal */
export type InviteUserToTeamResponseBody$Outbound = InviteUserToTeamResponseBody2$Outbound | InviteUserToTeamResponseBody1$Outbound;
/** @internal */
export declare const InviteUserToTeamResponseBody$outboundSchema: z.ZodType<InviteUserToTeamResponseBody$Outbound, z.ZodTypeDef, InviteUserToTeamResponseBody>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace InviteUserToTeamResponseBody$ {
    /** @deprecated use `InviteUserToTeamResponseBody$inboundSchema` instead. */
    const inboundSchema: z.ZodType<InviteUserToTeamResponseBody, z.ZodTypeDef, unknown>;
    /** @deprecated use `InviteUserToTeamResponseBody$outboundSchema` instead. */
    const outboundSchema: z.ZodType<InviteUserToTeamResponseBody$Outbound, z.ZodTypeDef, InviteUserToTeamResponseBody>;
    /** @deprecated use `InviteUserToTeamResponseBody$Outbound` instead. */
    type Outbound = InviteUserToTeamResponseBody$Outbound;
}
export declare function inviteUserToTeamResponseBodyToJSON(inviteUserToTeamResponseBody: InviteUserToTeamResponseBody): string;
export declare function inviteUserToTeamResponseBodyFromJSON(jsonString: string): SafeParseResult<InviteUserToTeamResponseBody, SDKValidationError>;
//# sourceMappingURL=inviteusertoteamop.d.ts.map