/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
/** @internal */
export const PaidFeatures$inboundSchema = z.object({
    concurrentBuilds: z.nullable(z.number().int()).optional(),
    passwordProtection: z.nullable(z.boolean()).optional(),
    previewDeploymentSuffix: z.nullable(z.boolean()).optional(),
});
/** @internal */
export const PaidFeatures$outboundSchema = z.object({
    concurrentBuilds: z.nullable(z.number().int()).optional(),
    passwordProtection: z.nullable(z.boolean()).optional(),
    previewDeploymentSuffix: z.nullable(z.boolean()).optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var PaidFeatures$;
(function (PaidFeatures$) {
    /** @deprecated use `PaidFeatures$inboundSchema` instead. */
    PaidFeatures$.inboundSchema = PaidFeatures$inboundSchema;
    /** @deprecated use `PaidFeatures$outboundSchema` instead. */
    PaidFeatures$.outboundSchema = PaidFeatures$outboundSchema;
})(PaidFeatures$ || (PaidFeatures$ = {}));
export function paidFeaturesToJSON(paidFeatures) {
    return JSON.stringify(PaidFeatures$outboundSchema.parse(paidFeatures));
}
export function paidFeaturesFromJSON(jsonString) {
    return safeParse(jsonString, (x) => PaidFeatures$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'PaidFeatures' from JSON`);
}
/** @internal */
export const AcceptProjectTransferRequestRequestBody$inboundSchema = z.object({
    newProjectName: z.string().optional(),
    paidFeatures: z.lazy(() => PaidFeatures$inboundSchema).optional(),
});
/** @internal */
export const AcceptProjectTransferRequestRequestBody$outboundSchema = z.object({
    newProjectName: z.string().optional(),
    paidFeatures: z.lazy(() => PaidFeatures$outboundSchema).optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var AcceptProjectTransferRequestRequestBody$;
(function (AcceptProjectTransferRequestRequestBody$) {
    /** @deprecated use `AcceptProjectTransferRequestRequestBody$inboundSchema` instead. */
    AcceptProjectTransferRequestRequestBody$.inboundSchema = AcceptProjectTransferRequestRequestBody$inboundSchema;
    /** @deprecated use `AcceptProjectTransferRequestRequestBody$outboundSchema` instead. */
    AcceptProjectTransferRequestRequestBody$.outboundSchema = AcceptProjectTransferRequestRequestBody$outboundSchema;
})(AcceptProjectTransferRequestRequestBody$ || (AcceptProjectTransferRequestRequestBody$ = {}));
export function acceptProjectTransferRequestRequestBodyToJSON(acceptProjectTransferRequestRequestBody) {
    return JSON.stringify(AcceptProjectTransferRequestRequestBody$outboundSchema.parse(acceptProjectTransferRequestRequestBody));
}
export function acceptProjectTransferRequestRequestBodyFromJSON(jsonString) {
    return safeParse(jsonString, (x) => AcceptProjectTransferRequestRequestBody$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'AcceptProjectTransferRequestRequestBody' from JSON`);
}
/** @internal */
export const AcceptProjectTransferRequestRequest$inboundSchema = z.object({
    code: z.string(),
    teamId: z.string().optional(),
    slug: z.string().optional(),
    RequestBody: z.lazy(() => AcceptProjectTransferRequestRequestBody$inboundSchema).optional(),
}).transform((v) => {
    return remap$(v, {
        "RequestBody": "requestBody",
    });
});
/** @internal */
export const AcceptProjectTransferRequestRequest$outboundSchema = z.object({
    code: z.string(),
    teamId: z.string().optional(),
    slug: z.string().optional(),
    requestBody: z.lazy(() => AcceptProjectTransferRequestRequestBody$outboundSchema).optional(),
}).transform((v) => {
    return remap$(v, {
        requestBody: "RequestBody",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var AcceptProjectTransferRequestRequest$;
(function (AcceptProjectTransferRequestRequest$) {
    /** @deprecated use `AcceptProjectTransferRequestRequest$inboundSchema` instead. */
    AcceptProjectTransferRequestRequest$.inboundSchema = AcceptProjectTransferRequestRequest$inboundSchema;
    /** @deprecated use `AcceptProjectTransferRequestRequest$outboundSchema` instead. */
    AcceptProjectTransferRequestRequest$.outboundSchema = AcceptProjectTransferRequestRequest$outboundSchema;
})(AcceptProjectTransferRequestRequest$ || (AcceptProjectTransferRequestRequest$ = {}));
export function acceptProjectTransferRequestRequestToJSON(acceptProjectTransferRequestRequest) {
    return JSON.stringify(AcceptProjectTransferRequestRequest$outboundSchema.parse(acceptProjectTransferRequestRequest));
}
export function acceptProjectTransferRequestRequestFromJSON(jsonString) {
    return safeParse(jsonString, (x) => AcceptProjectTransferRequestRequest$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'AcceptProjectTransferRequestRequest' from JSON`);
}
/** @internal */
export const AcceptProjectTransferRequestResponseBody$inboundSchema = z.object({});
/** @internal */
export const AcceptProjectTransferRequestResponseBody$outboundSchema = z.object({});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var AcceptProjectTransferRequestResponseBody$;
(function (AcceptProjectTransferRequestResponseBody$) {
    /** @deprecated use `AcceptProjectTransferRequestResponseBody$inboundSchema` instead. */
    AcceptProjectTransferRequestResponseBody$.inboundSchema = AcceptProjectTransferRequestResponseBody$inboundSchema;
    /** @deprecated use `AcceptProjectTransferRequestResponseBody$outboundSchema` instead. */
    AcceptProjectTransferRequestResponseBody$.outboundSchema = AcceptProjectTransferRequestResponseBody$outboundSchema;
})(AcceptProjectTransferRequestResponseBody$ || (AcceptProjectTransferRequestResponseBody$ = {}));
export function acceptProjectTransferRequestResponseBodyToJSON(acceptProjectTransferRequestResponseBody) {
    return JSON.stringify(AcceptProjectTransferRequestResponseBody$outboundSchema.parse(acceptProjectTransferRequestResponseBody));
}
export function acceptProjectTransferRequestResponseBodyFromJSON(jsonString) {
    return safeParse(jsonString, (x) => AcceptProjectTransferRequestResponseBody$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'AcceptProjectTransferRequestResponseBody' from JSON`);
}
//# sourceMappingURL=acceptprojecttransferrequestop.js.map