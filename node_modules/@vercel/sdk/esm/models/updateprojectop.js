/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { ACLAction$inboundSchema, ACLAction$outboundSchema, } from "./aclaction.js";
/**
 * The framework that is being used for this project. When `null` is used no framework is selected
 */
export const UpdateProjectFramework = {
    Blitzjs: "blitzjs",
    Nextjs: "nextjs",
    Gatsby: "gatsby",
    Remix: "remix",
    ReactRouter: "react-router",
    Astro: "astro",
    Hexo: "hexo",
    Eleventy: "eleventy",
    Docusaurus2: "docusaurus-2",
    Docusaurus: "docusaurus",
    Preact: "preact",
    Solidstart1: "solidstart-1",
    Solidstart: "solidstart",
    Dojo: "dojo",
    Ember: "ember",
    Vue: "vue",
    Scully: "scully",
    IonicAngular: "ionic-angular",
    Angular: "angular",
    Polymer: "polymer",
    Svelte: "svelte",
    Sveltekit: "sveltekit",
    Sveltekit1: "sveltekit-1",
    IonicReact: "ionic-react",
    CreateReactApp: "create-react-app",
    Gridsome: "gridsome",
    Umijs: "umijs",
    Sapper: "sapper",
    Saber: "saber",
    Stencil: "stencil",
    Nuxtjs: "nuxtjs",
    Redwoodjs: "redwoodjs",
    Hugo: "hugo",
    Jekyll: "jekyll",
    Brunch: "brunch",
    Middleman: "middleman",
    Zola: "zola",
    Hydrogen: "hydrogen",
    Vite: "vite",
    Vitepress: "vitepress",
    Vuepress: "vuepress",
    Parcel: "parcel",
    Fasthtml: "fasthtml",
    SanityV3: "sanity-v3",
    Sanity: "sanity",
    Storybook: "storybook",
};
export const UpdateProjectNodeVersion = {
    TwentyTwoDotX: "22.x",
    TwentyDotX: "20.x",
    EighteenDotX: "18.x",
    SixteenDotX: "16.x",
    FourteenDotX: "14.x",
    TwelveDotX: "12.x",
    TenDotX: "10.x",
};
export const UpdateProjectBuildMachineType = {
    Enhanced: "enhanced",
    Ultra: "ultra",
};
export const UpdateProjectFunctionDefaultMemoryType = {
    StandardLegacy: "standard_legacy",
    Standard: "standard",
    Performance: "performance",
};
/**
 * team: `https://oidc.vercel.com/[team_slug]` global: `https://oidc.vercel.com`
 */
export const UpdateProjectIssuerMode = {
    Team: "team",
    Global: "global",
};
/**
 * Specify if the password will apply to every Deployment Target or just Preview
 */
export const UpdateProjectDeploymentType = {
    All: "all",
    Preview: "preview",
    ProdDeploymentUrlsAndAllPreviews: "prod_deployment_urls_and_all_previews",
};
/**
 * Specify if the Vercel Authentication (SSO Protection) will apply to every Deployment Target or just Preview
 */
export const UpdateProjectProjectsDeploymentType = {
    All: "all",
    Preview: "preview",
    ProdDeploymentUrlsAndAllPreviews: "prod_deployment_urls_and_all_previews",
};
/**
 * Specify if the Trusted IPs will apply to every Deployment Target or just Preview
 */
export const UpdateProjectProjectsRequestDeploymentType = {
    All: "all",
    Preview: "preview",
    Production: "production",
    ProdDeploymentUrlsAndAllPreviews: "prod_deployment_urls_and_all_previews",
};
/**
 * exclusive: ip match is enough to bypass deployment protection (regardless of other settings). additional: ip must match + any other protection should be also provided (password, vercel auth, shareable link, automation bypass header, automation bypass query param)
 */
export const ProtectionMode = {
    Exclusive: "exclusive",
    Additional: "additional",
};
export const UpdateProjectEnvId2 = {
    Production: "production",
    Preview: "preview",
};
export const UpdateProjectTarget2 = {
    Production: "production",
    Preview: "preview",
    Development: "development",
};
export const UpdateProjectType = {
    System: "system",
    Secret: "secret",
    Encrypted: "encrypted",
    Plain: "plain",
    Sensitive: "sensitive",
};
export const UpdateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv15Type = {
    FlagsConnectionString: "flags-connection-string",
};
export const UpdateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv14Type = {
    IntegrationStoreSecret: "integration-store-secret",
};
export const UpdateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv13Type = {
    PostgresUrlNoSsl: "postgres-url-no-ssl",
};
export const UpdateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv12Type = {
    PostgresDatabase: "postgres-database",
};
export const UpdateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv11Type = {
    PostgresPassword: "postgres-password",
};
export const UpdateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv10Type = {
    PostgresHost: "postgres-host",
};
export const UpdateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv9Type = {
    PostgresUser: "postgres-user",
};
export const UpdateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv8Type = {
    PostgresPrismaUrl: "postgres-prisma-url",
};
export const UpdateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnvType = {
    PostgresUrlNonPooling: "postgres-url-non-pooling",
};
export const UpdateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyType = {
    PostgresUrl: "postgres-url",
};
export const UpdateProjectContentHintProjectsResponse200ApplicationJSONType = {
    BlobReadWriteToken: "blob-read-write-token",
};
export const UpdateProjectContentHintProjectsResponse200Type = {
    RedisRestApiReadOnlyToken: "redis-rest-api-read-only-token",
};
export const UpdateProjectContentHintProjectsResponseType = {
    RedisRestApiToken: "redis-rest-api-token",
};
export const UpdateProjectContentHintProjectsType = {
    RedisRestApiUrl: "redis-rest-api-url",
};
export const UpdateProjectContentHintType = {
    RedisUrl: "redis-url",
};
export const UpdateProjectProjectsResponse200ApplicationJSONResponseBodyType = {
    FlagsSecret: "flags-secret",
};
/**
 * The type of environment (production, preview, or development)
 */
export const UpdateProjectProjectsType = {
    Production: "production",
    Preview: "preview",
    Development: "development",
};
/**
 * The type of matching to perform
 */
export const UpdateProjectProjectsResponse200ApplicationJSONResponseBodyCustomEnvironmentsType = {
    EndsWith: "endsWith",
    StartsWith: "startsWith",
    Equals: "equals",
};
export const UpdateProjectProjectsFramework = {
    Blitzjs: "blitzjs",
    Nextjs: "nextjs",
    Gatsby: "gatsby",
    Remix: "remix",
    ReactRouter: "react-router",
    Astro: "astro",
    Hexo: "hexo",
    Eleventy: "eleventy",
    Docusaurus2: "docusaurus-2",
    Docusaurus: "docusaurus",
    Preact: "preact",
    Solidstart1: "solidstart-1",
    Solidstart: "solidstart",
    Dojo: "dojo",
    Ember: "ember",
    Vue: "vue",
    Scully: "scully",
    IonicAngular: "ionic-angular",
    Angular: "angular",
    Polymer: "polymer",
    Svelte: "svelte",
    Sveltekit: "sveltekit",
    Sveltekit1: "sveltekit-1",
    IonicReact: "ionic-react",
    CreateReactApp: "create-react-app",
    Gridsome: "gridsome",
    Umijs: "umijs",
    Sapper: "sapper",
    Saber: "saber",
    Stencil: "stencil",
    Nuxtjs: "nuxtjs",
    Redwoodjs: "redwoodjs",
    Hugo: "hugo",
    Jekyll: "jekyll",
    Brunch: "brunch",
    Middleman: "middleman",
    Zola: "zola",
    Hydrogen: "hydrogen",
    Vite: "vite",
    Vitepress: "vitepress",
    Vuepress: "vuepress",
    Parcel: "parcel",
    Fasthtml: "fasthtml",
    SanityV3: "sanity-v3",
    Sanity: "sanity",
    Storybook: "storybook",
};
/**
 * The type of matching to perform
 */
export const UpdateProjectProjectsResponse200ApplicationJSONResponseBodyLatestDeploymentsType = {
    EndsWith: "endsWith",
    StartsWith: "startsWith",
    Equals: "equals",
};
export const UpdateProjectChecksConclusion = {
    Succeeded: "succeeded",
    Failed: "failed",
    Skipped: "skipped",
    Canceled: "canceled",
};
export const UpdateProjectChecksState = {
    Registered: "registered",
    Running: "running",
    Completed: "completed",
};
export const UpdateProjectPlan = {
    Pro: "pro",
    Enterprise: "enterprise",
    Hobby: "hobby",
};
export const UpdateProjectReadyState = {
    Building: "BUILDING",
    Error: "ERROR",
    Initializing: "INITIALIZING",
    Queued: "QUEUED",
    Ready: "READY",
    Canceled: "CANCELED",
};
export const UpdateProjectReadySubstate = {
    Staged: "STAGED",
    Rolling: "ROLLING",
    Promoted: "PROMOTED",
};
export const UpdateProjectProjectsResponseType = {
    Lambdas: "LAMBDAS",
};
export const UpdateProjectLinkProjectsResponse200Type = {
    GithubCustomHost: "github-custom-host",
};
export const UpdateProjectLinkProjectsResponseType = {
    Bitbucket: "bitbucket",
};
export const UpdateProjectLinkProjectsType = {
    Gitlab: "gitlab",
};
export const UpdateProjectLinkType = {
    Github: "github",
};
export const UpdateProjectProjectsNodeVersion = {
    TwentyTwoDotX: "22.x",
    TwentyDotX: "20.x",
    EighteenDotX: "18.x",
    SixteenDotX: "16.x",
    FourteenDotX: "14.x",
    TwelveDotX: "12.x",
    TenDotX: "10.x",
    EightDot10DotX: "8.10.x",
};
export const UpdateProjectProjectsFunctionDefaultMemoryType = {
    StandardLegacy: "standard_legacy",
    Standard: "standard",
    Performance: "performance",
};
export const UpdateProjectProjectsBuildMachineType = {
    Enhanced: "enhanced",
    Ultra: "ultra",
};
export const UpdateProjectProjectsResponseFunctionDefaultMemoryType = {
    StandardLegacy: "standard_legacy",
    Standard: "standard",
    Performance: "performance",
};
export const UpdateProjectProjectsResponseBuildMachineType = {
    Enhanced: "enhanced",
    Ultra: "ultra",
};
export const UpdateProjectProjectsResponseDeploymentType = {
    Preview: "preview",
    All: "all",
    ProdDeploymentUrlsAndAllPreviews: "prod_deployment_urls_and_all_previews",
};
/**
 * The type of matching to perform
 */
export const UpdateProjectProjectsResponse200ApplicationJSONResponseBodyTargetsType = {
    EndsWith: "endsWith",
    StartsWith: "startsWith",
    Equals: "equals",
};
export const UpdateProjectProjectsChecksConclusion = {
    Succeeded: "succeeded",
    Failed: "failed",
    Skipped: "skipped",
    Canceled: "canceled",
};
export const UpdateProjectProjectsChecksState = {
    Registered: "registered",
    Running: "running",
    Completed: "completed",
};
export const UpdateProjectProjectsPlan = {
    Pro: "pro",
    Enterprise: "enterprise",
    Hobby: "hobby",
};
export const UpdateProjectProjectsReadyState = {
    Building: "BUILDING",
    Error: "ERROR",
    Initializing: "INITIALIZING",
    Queued: "QUEUED",
    Ready: "READY",
    Canceled: "CANCELED",
};
export const UpdateProjectProjectsReadySubstate = {
    Staged: "STAGED",
    Rolling: "ROLLING",
    Promoted: "PROMOTED",
};
export const UpdateProjectProjectsResponse200Type = {
    Lambdas: "LAMBDAS",
};
export const UpdateProjectJobStatus = {
    Succeeded: "succeeded",
    Failed: "failed",
    Skipped: "skipped",
    Pending: "pending",
    InProgress: "in-progress",
};
export const UpdateProjectProjectsResponse200ApplicationJSONType = {
    Promote: "promote",
    Rollback: "rollback",
};
export const UpdateProjectProtectionBypassProjectsScope = {
    AutomationBypass: "automation-bypass",
};
export const UpdateProjectProtectionBypassScope = {
    IntegrationAutomationBypass: "integration-automation-bypass",
};
export const UpdateProjectTrustedIpsProjectsDeploymentType = {
    Production: "production",
    Preview: "preview",
    All: "all",
    ProdDeploymentUrlsAndAllPreviews: "prod_deployment_urls_and_all_previews",
};
export const UpdateProjectTrustedIpsDeploymentType = {
    Production: "production",
    Preview: "preview",
    All: "all",
    ProdDeploymentUrlsAndAllPreviews: "prod_deployment_urls_and_all_previews",
};
export const UpdateProjectTrustedIpsProtectionMode = {
    Additional: "additional",
    Exclusive: "exclusive",
};
/**
 * Whether the Vercel bot should automatically create GitHub deployments https://docs.github.com/en/rest/deployments/deployments#about-deployments NOTE: repository-dispatch events should be used instead
 */
export const UpdateProjectCreateDeployments = {
    Enabled: "enabled",
    Disabled: "disabled",
};
export const UpdateProjectProjectsResponse200ApplicationJSONResponseBodySecurityType = {
    Host: "host",
    Path: "path",
    Method: "method",
    Header: "header",
    Cookie: "cookie",
    Query: "query",
    IpAddress: "ip_address",
    Protocol: "protocol",
    Scheme: "scheme",
    Environment: "environment",
    Region: "region",
    InitialRequestPath: "initial_request_path",
};
export const UpdateProjectProjectsResponse200ApplicationJSONResponseBodySecurityFirewallRoutesType = {
    Host: "host",
    Path: "path",
    Method: "method",
    Header: "header",
    Cookie: "cookie",
    Query: "query",
    IpAddress: "ip_address",
    Protocol: "protocol",
    Scheme: "scheme",
    Environment: "environment",
    Region: "region",
    InitialRequestPath: "initial_request_path",
};
export const UpdateProjectHandle = {
    Init: "init",
    Finalize: "finalize",
};
export const UpdateProjectProjectsAction = {
    Deny: "deny",
    Challenge: "challenge",
    Log: "log",
    Bypass: "bypass",
    RateLimit: "rate_limit",
    Redirect: "redirect",
};
export const UpdateProjectAlgo = {
    FixedWindow: "fixed_window",
    TokenBucket: "token_bucket",
};
export const UpdateProjectAction = {
    Deny: "deny",
    Challenge: "challenge",
    Log: "log",
};
/**
 * - team: `https://oidc.vercel.com/[team_slug]` - global: `https://oidc.vercel.com`
 */
export const UpdateProjectProjectsIssuerMode = {
    Team: "team",
    Global: "global",
};
export const UpdateProjectTier = {
    Standard: "standard",
    Advanced: "advanced",
    Critical: "critical",
};
/** @internal */
export const UpdateProjectFramework$inboundSchema = z.nativeEnum(UpdateProjectFramework);
/** @internal */
export const UpdateProjectFramework$outboundSchema = UpdateProjectFramework$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UpdateProjectFramework$;
(function (UpdateProjectFramework$) {
    /** @deprecated use `UpdateProjectFramework$inboundSchema` instead. */
    UpdateProjectFramework$.inboundSchema = UpdateProjectFramework$inboundSchema;
    /** @deprecated use `UpdateProjectFramework$outboundSchema` instead. */
    UpdateProjectFramework$.outboundSchema = UpdateProjectFramework$outboundSchema;
})(UpdateProjectFramework$ || (UpdateProjectFramework$ = {}));
/** @internal */
export const UpdateProjectNodeVersion$inboundSchema = z.nativeEnum(UpdateProjectNodeVersion);
/** @internal */
export const UpdateProjectNodeVersion$outboundSchema = UpdateProjectNodeVersion$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UpdateProjectNodeVersion$;
(function (UpdateProjectNodeVersion$) {
    /** @deprecated use `UpdateProjectNodeVersion$inboundSchema` instead. */
    UpdateProjectNodeVersion$.inboundSchema = UpdateProjectNodeVersion$inboundSchema;
    /** @deprecated use `UpdateProjectNodeVersion$outboundSchema` instead. */
    UpdateProjectNodeVersion$.outboundSchema = UpdateProjectNodeVersion$outboundSchema;
})(UpdateProjectNodeVersion$ || (UpdateProjectNodeVersion$ = {}));
/** @internal */
export const UpdateProjectBuildMachineType$inboundSchema = z.nativeEnum(UpdateProjectBuildMachineType);
/** @internal */
export const UpdateProjectBuildMachineType$outboundSchema = UpdateProjectBuildMachineType$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UpdateProjectBuildMachineType$;
(function (UpdateProjectBuildMachineType$) {
    /** @deprecated use `UpdateProjectBuildMachineType$inboundSchema` instead. */
    UpdateProjectBuildMachineType$.inboundSchema = UpdateProjectBuildMachineType$inboundSchema;
    /** @deprecated use `UpdateProjectBuildMachineType$outboundSchema` instead. */
    UpdateProjectBuildMachineType$.outboundSchema = UpdateProjectBuildMachineType$outboundSchema;
})(UpdateProjectBuildMachineType$ || (UpdateProjectBuildMachineType$ = {}));
/** @internal */
export const UpdateProjectFunctionDefaultMemoryType$inboundSchema = z.nativeEnum(UpdateProjectFunctionDefaultMemoryType);
/** @internal */
export const UpdateProjectFunctionDefaultMemoryType$outboundSchema = UpdateProjectFunctionDefaultMemoryType$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UpdateProjectFunctionDefaultMemoryType$;
(function (UpdateProjectFunctionDefaultMemoryType$) {
    /** @deprecated use `UpdateProjectFunctionDefaultMemoryType$inboundSchema` instead. */
    UpdateProjectFunctionDefaultMemoryType$.inboundSchema = UpdateProjectFunctionDefaultMemoryType$inboundSchema;
    /** @deprecated use `UpdateProjectFunctionDefaultMemoryType$outboundSchema` instead. */
    UpdateProjectFunctionDefaultMemoryType$.outboundSchema = UpdateProjectFunctionDefaultMemoryType$outboundSchema;
})(UpdateProjectFunctionDefaultMemoryType$ || (UpdateProjectFunctionDefaultMemoryType$ = {}));
/** @internal */
export const UpdateProjectResourceConfig$inboundSchema = z.object({
    buildMachineType: UpdateProjectBuildMachineType$inboundSchema.optional(),
    fluid: z.boolean().optional(),
    functionDefaultRegions: z.array(z.string()).optional(),
    functionDefaultTimeout: z.number().optional(),
    functionDefaultMemoryType: UpdateProjectFunctionDefaultMemoryType$inboundSchema.optional(),
    functionZeroConfigFailover: z.boolean().optional(),
    elasticConcurrencyEnabled: z.boolean().optional(),
});
/** @internal */
export const UpdateProjectResourceConfig$outboundSchema = z.object({
    buildMachineType: UpdateProjectBuildMachineType$outboundSchema.optional(),
    fluid: z.boolean().optional(),
    functionDefaultRegions: z.array(z.string()).optional(),
    functionDefaultTimeout: z.number().optional(),
    functionDefaultMemoryType: UpdateProjectFunctionDefaultMemoryType$outboundSchema.optional(),
    functionZeroConfigFailover: z.boolean().optional(),
    elasticConcurrencyEnabled: z.boolean().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UpdateProjectResourceConfig$;
(function (UpdateProjectResourceConfig$) {
    /** @deprecated use `UpdateProjectResourceConfig$inboundSchema` instead. */
    UpdateProjectResourceConfig$.inboundSchema = UpdateProjectResourceConfig$inboundSchema;
    /** @deprecated use `UpdateProjectResourceConfig$outboundSchema` instead. */
    UpdateProjectResourceConfig$.outboundSchema = UpdateProjectResourceConfig$outboundSchema;
})(UpdateProjectResourceConfig$ || (UpdateProjectResourceConfig$ = {}));
export function updateProjectResourceConfigToJSON(updateProjectResourceConfig) {
    return JSON.stringify(UpdateProjectResourceConfig$outboundSchema.parse(updateProjectResourceConfig));
}
export function updateProjectResourceConfigFromJSON(jsonString) {
    return safeParse(jsonString, (x) => UpdateProjectResourceConfig$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'UpdateProjectResourceConfig' from JSON`);
}
/** @internal */
export const UpdateProjectIssuerMode$inboundSchema = z.nativeEnum(UpdateProjectIssuerMode);
/** @internal */
export const UpdateProjectIssuerMode$outboundSchema = UpdateProjectIssuerMode$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UpdateProjectIssuerMode$;
(function (UpdateProjectIssuerMode$) {
    /** @deprecated use `UpdateProjectIssuerMode$inboundSchema` instead. */
    UpdateProjectIssuerMode$.inboundSchema = UpdateProjectIssuerMode$inboundSchema;
    /** @deprecated use `UpdateProjectIssuerMode$outboundSchema` instead. */
    UpdateProjectIssuerMode$.outboundSchema = UpdateProjectIssuerMode$outboundSchema;
})(UpdateProjectIssuerMode$ || (UpdateProjectIssuerMode$ = {}));
/** @internal */
export const UpdateProjectOidcTokenConfig$inboundSchema = z.object({
    enabled: z.boolean().default(true),
    issuerMode: UpdateProjectIssuerMode$inboundSchema.default("team"),
});
/** @internal */
export const UpdateProjectOidcTokenConfig$outboundSchema = z.object({
    enabled: z.boolean().default(true),
    issuerMode: UpdateProjectIssuerMode$outboundSchema.default("team"),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UpdateProjectOidcTokenConfig$;
(function (UpdateProjectOidcTokenConfig$) {
    /** @deprecated use `UpdateProjectOidcTokenConfig$inboundSchema` instead. */
    UpdateProjectOidcTokenConfig$.inboundSchema = UpdateProjectOidcTokenConfig$inboundSchema;
    /** @deprecated use `UpdateProjectOidcTokenConfig$outboundSchema` instead. */
    UpdateProjectOidcTokenConfig$.outboundSchema = UpdateProjectOidcTokenConfig$outboundSchema;
})(UpdateProjectOidcTokenConfig$ || (UpdateProjectOidcTokenConfig$ = {}));
export function updateProjectOidcTokenConfigToJSON(updateProjectOidcTokenConfig) {
    return JSON.stringify(UpdateProjectOidcTokenConfig$outboundSchema.parse(updateProjectOidcTokenConfig));
}
export function updateProjectOidcTokenConfigFromJSON(jsonString) {
    return safeParse(jsonString, (x) => UpdateProjectOidcTokenConfig$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'UpdateProjectOidcTokenConfig' from JSON`);
}
/** @internal */
export const UpdateProjectDeploymentType$inboundSchema = z.nativeEnum(UpdateProjectDeploymentType);
/** @internal */
export const UpdateProjectDeploymentType$outboundSchema = UpdateProjectDeploymentType$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UpdateProjectDeploymentType$;
(function (UpdateProjectDeploymentType$) {
    /** @deprecated use `UpdateProjectDeploymentType$inboundSchema` instead. */
    UpdateProjectDeploymentType$.inboundSchema = UpdateProjectDeploymentType$inboundSchema;
    /** @deprecated use `UpdateProjectDeploymentType$outboundSchema` instead. */
    UpdateProjectDeploymentType$.outboundSchema = UpdateProjectDeploymentType$outboundSchema;
})(UpdateProjectDeploymentType$ || (UpdateProjectDeploymentType$ = {}));
/** @internal */
export const UpdateProjectPasswordProtection$inboundSchema = z.object({
    deploymentType: UpdateProjectDeploymentType$inboundSchema,
    password: z.nullable(z.string()).optional(),
});
/** @internal */
export const UpdateProjectPasswordProtection$outboundSchema = z.object({
    deploymentType: UpdateProjectDeploymentType$outboundSchema,
    password: z.nullable(z.string()).optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UpdateProjectPasswordProtection$;
(function (UpdateProjectPasswordProtection$) {
    /** @deprecated use `UpdateProjectPasswordProtection$inboundSchema` instead. */
    UpdateProjectPasswordProtection$.inboundSchema = UpdateProjectPasswordProtection$inboundSchema;
    /** @deprecated use `UpdateProjectPasswordProtection$outboundSchema` instead. */
    UpdateProjectPasswordProtection$.outboundSchema = UpdateProjectPasswordProtection$outboundSchema;
})(UpdateProjectPasswordProtection$ || (UpdateProjectPasswordProtection$ = {}));
export function updateProjectPasswordProtectionToJSON(updateProjectPasswordProtection) {
    return JSON.stringify(UpdateProjectPasswordProtection$outboundSchema.parse(updateProjectPasswordProtection));
}
export function updateProjectPasswordProtectionFromJSON(jsonString) {
    return safeParse(jsonString, (x) => UpdateProjectPasswordProtection$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'UpdateProjectPasswordProtection' from JSON`);
}
/** @internal */
export const UpdateProjectProjectsDeploymentType$inboundSchema = z.nativeEnum(UpdateProjectProjectsDeploymentType);
/** @internal */
export const UpdateProjectProjectsDeploymentType$outboundSchema = UpdateProjectProjectsDeploymentType$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UpdateProjectProjectsDeploymentType$;
(function (UpdateProjectProjectsDeploymentType$) {
    /** @deprecated use `UpdateProjectProjectsDeploymentType$inboundSchema` instead. */
    UpdateProjectProjectsDeploymentType$.inboundSchema = UpdateProjectProjectsDeploymentType$inboundSchema;
    /** @deprecated use `UpdateProjectProjectsDeploymentType$outboundSchema` instead. */
    UpdateProjectProjectsDeploymentType$.outboundSchema = UpdateProjectProjectsDeploymentType$outboundSchema;
})(UpdateProjectProjectsDeploymentType$ || (UpdateProjectProjectsDeploymentType$ = {}));
/** @internal */
export const UpdateProjectSsoProtection$inboundSchema = z.object({
    deploymentType: UpdateProjectProjectsDeploymentType$inboundSchema.default("preview"),
});
/** @internal */
export const UpdateProjectSsoProtection$outboundSchema = z.object({
    deploymentType: UpdateProjectProjectsDeploymentType$outboundSchema.default("preview"),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UpdateProjectSsoProtection$;
(function (UpdateProjectSsoProtection$) {
    /** @deprecated use `UpdateProjectSsoProtection$inboundSchema` instead. */
    UpdateProjectSsoProtection$.inboundSchema = UpdateProjectSsoProtection$inboundSchema;
    /** @deprecated use `UpdateProjectSsoProtection$outboundSchema` instead. */
    UpdateProjectSsoProtection$.outboundSchema = UpdateProjectSsoProtection$outboundSchema;
})(UpdateProjectSsoProtection$ || (UpdateProjectSsoProtection$ = {}));
export function updateProjectSsoProtectionToJSON(updateProjectSsoProtection) {
    return JSON.stringify(UpdateProjectSsoProtection$outboundSchema.parse(updateProjectSsoProtection));
}
export function updateProjectSsoProtectionFromJSON(jsonString) {
    return safeParse(jsonString, (x) => UpdateProjectSsoProtection$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'UpdateProjectSsoProtection' from JSON`);
}
/** @internal */
export const UpdateProjectProjectsRequestDeploymentType$inboundSchema = z
    .nativeEnum(UpdateProjectProjectsRequestDeploymentType);
/** @internal */
export const UpdateProjectProjectsRequestDeploymentType$outboundSchema = UpdateProjectProjectsRequestDeploymentType$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UpdateProjectProjectsRequestDeploymentType$;
(function (UpdateProjectProjectsRequestDeploymentType$) {
    /** @deprecated use `UpdateProjectProjectsRequestDeploymentType$inboundSchema` instead. */
    UpdateProjectProjectsRequestDeploymentType$.inboundSchema = UpdateProjectProjectsRequestDeploymentType$inboundSchema;
    /** @deprecated use `UpdateProjectProjectsRequestDeploymentType$outboundSchema` instead. */
    UpdateProjectProjectsRequestDeploymentType$.outboundSchema = UpdateProjectProjectsRequestDeploymentType$outboundSchema;
})(UpdateProjectProjectsRequestDeploymentType$ || (UpdateProjectProjectsRequestDeploymentType$ = {}));
/** @internal */
export const Addresses$inboundSchema = z.object({
    value: z.string(),
    note: z.string().optional(),
});
/** @internal */
export const Addresses$outboundSchema = z.object({
    value: z.string(),
    note: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var Addresses$;
(function (Addresses$) {
    /** @deprecated use `Addresses$inboundSchema` instead. */
    Addresses$.inboundSchema = Addresses$inboundSchema;
    /** @deprecated use `Addresses$outboundSchema` instead. */
    Addresses$.outboundSchema = Addresses$outboundSchema;
})(Addresses$ || (Addresses$ = {}));
export function addressesToJSON(addresses) {
    return JSON.stringify(Addresses$outboundSchema.parse(addresses));
}
export function addressesFromJSON(jsonString) {
    return safeParse(jsonString, (x) => Addresses$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'Addresses' from JSON`);
}
/** @internal */
export const ProtectionMode$inboundSchema = z.nativeEnum(ProtectionMode);
/** @internal */
export const ProtectionMode$outboundSchema = ProtectionMode$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ProtectionMode$;
(function (ProtectionMode$) {
    /** @deprecated use `ProtectionMode$inboundSchema` instead. */
    ProtectionMode$.inboundSchema = ProtectionMode$inboundSchema;
    /** @deprecated use `ProtectionMode$outboundSchema` instead. */
    ProtectionMode$.outboundSchema = ProtectionMode$outboundSchema;
})(ProtectionMode$ || (ProtectionMode$ = {}));
/** @internal */
export const UpdateProjectTrustedIps$inboundSchema = z.object({
    deploymentType: UpdateProjectProjectsRequestDeploymentType$inboundSchema,
    addresses: z.array(z.lazy(() => Addresses$inboundSchema)),
    protectionMode: ProtectionMode$inboundSchema,
});
/** @internal */
export const UpdateProjectTrustedIps$outboundSchema = z.object({
    deploymentType: UpdateProjectProjectsRequestDeploymentType$outboundSchema,
    addresses: z.array(z.lazy(() => Addresses$outboundSchema)),
    protectionMode: ProtectionMode$outboundSchema,
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UpdateProjectTrustedIps$;
(function (UpdateProjectTrustedIps$) {
    /** @deprecated use `UpdateProjectTrustedIps$inboundSchema` instead. */
    UpdateProjectTrustedIps$.inboundSchema = UpdateProjectTrustedIps$inboundSchema;
    /** @deprecated use `UpdateProjectTrustedIps$outboundSchema` instead. */
    UpdateProjectTrustedIps$.outboundSchema = UpdateProjectTrustedIps$outboundSchema;
})(UpdateProjectTrustedIps$ || (UpdateProjectTrustedIps$ = {}));
export function updateProjectTrustedIpsToJSON(updateProjectTrustedIps) {
    return JSON.stringify(UpdateProjectTrustedIps$outboundSchema.parse(updateProjectTrustedIps));
}
export function updateProjectTrustedIpsFromJSON(jsonString) {
    return safeParse(jsonString, (x) => UpdateProjectTrustedIps$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'UpdateProjectTrustedIps' from JSON`);
}
/** @internal */
export const UpdateProjectPaths$inboundSchema = z.object({
    value: z.string(),
});
/** @internal */
export const UpdateProjectPaths$outboundSchema = z.object({
    value: z.string(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UpdateProjectPaths$;
(function (UpdateProjectPaths$) {
    /** @deprecated use `UpdateProjectPaths$inboundSchema` instead. */
    UpdateProjectPaths$.inboundSchema = UpdateProjectPaths$inboundSchema;
    /** @deprecated use `UpdateProjectPaths$outboundSchema` instead. */
    UpdateProjectPaths$.outboundSchema = UpdateProjectPaths$outboundSchema;
})(UpdateProjectPaths$ || (UpdateProjectPaths$ = {}));
export function updateProjectPathsToJSON(updateProjectPaths) {
    return JSON.stringify(UpdateProjectPaths$outboundSchema.parse(updateProjectPaths));
}
export function updateProjectPathsFromJSON(jsonString) {
    return safeParse(jsonString, (x) => UpdateProjectPaths$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'UpdateProjectPaths' from JSON`);
}
/** @internal */
export const UpdateProjectOptionsAllowlist$inboundSchema = z.object({
    paths: z.array(z.lazy(() => UpdateProjectPaths$inboundSchema)),
});
/** @internal */
export const UpdateProjectOptionsAllowlist$outboundSchema = z.object({
    paths: z.array(z.lazy(() => UpdateProjectPaths$outboundSchema)),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UpdateProjectOptionsAllowlist$;
(function (UpdateProjectOptionsAllowlist$) {
    /** @deprecated use `UpdateProjectOptionsAllowlist$inboundSchema` instead. */
    UpdateProjectOptionsAllowlist$.inboundSchema = UpdateProjectOptionsAllowlist$inboundSchema;
    /** @deprecated use `UpdateProjectOptionsAllowlist$outboundSchema` instead. */
    UpdateProjectOptionsAllowlist$.outboundSchema = UpdateProjectOptionsAllowlist$outboundSchema;
})(UpdateProjectOptionsAllowlist$ || (UpdateProjectOptionsAllowlist$ = {}));
export function updateProjectOptionsAllowlistToJSON(updateProjectOptionsAllowlist) {
    return JSON.stringify(UpdateProjectOptionsAllowlist$outboundSchema.parse(updateProjectOptionsAllowlist));
}
export function updateProjectOptionsAllowlistFromJSON(jsonString) {
    return safeParse(jsonString, (x) => UpdateProjectOptionsAllowlist$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'UpdateProjectOptionsAllowlist' from JSON`);
}
/** @internal */
export const ConnectConfigurations1$inboundSchema = z.object({
    envId: z.string(),
    connectConfigurationId: z.string(),
    passive: z.boolean(),
    buildsEnabled: z.boolean(),
});
/** @internal */
export const ConnectConfigurations1$outboundSchema = z.object({
    envId: z.string(),
    connectConfigurationId: z.string(),
    passive: z.boolean(),
    buildsEnabled: z.boolean(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ConnectConfigurations1$;
(function (ConnectConfigurations1$) {
    /** @deprecated use `ConnectConfigurations1$inboundSchema` instead. */
    ConnectConfigurations1$.inboundSchema = ConnectConfigurations1$inboundSchema;
    /** @deprecated use `ConnectConfigurations1$outboundSchema` instead. */
    ConnectConfigurations1$.outboundSchema = ConnectConfigurations1$outboundSchema;
})(ConnectConfigurations1$ || (ConnectConfigurations1$ = {}));
export function connectConfigurations1ToJSON(connectConfigurations1) {
    return JSON.stringify(ConnectConfigurations1$outboundSchema.parse(connectConfigurations1));
}
export function connectConfigurations1FromJSON(jsonString) {
    return safeParse(jsonString, (x) => ConnectConfigurations1$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'ConnectConfigurations1' from JSON`);
}
/** @internal */
export const ConnectConfigurations$inboundSchema = z.lazy(() => ConnectConfigurations1$inboundSchema);
/** @internal */
export const ConnectConfigurations$outboundSchema = z.lazy(() => ConnectConfigurations1$outboundSchema);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ConnectConfigurations$;
(function (ConnectConfigurations$) {
    /** @deprecated use `ConnectConfigurations$inboundSchema` instead. */
    ConnectConfigurations$.inboundSchema = ConnectConfigurations$inboundSchema;
    /** @deprecated use `ConnectConfigurations$outboundSchema` instead. */
    ConnectConfigurations$.outboundSchema = ConnectConfigurations$outboundSchema;
})(ConnectConfigurations$ || (ConnectConfigurations$ = {}));
export function connectConfigurationsToJSON(connectConfigurations) {
    return JSON.stringify(ConnectConfigurations$outboundSchema.parse(connectConfigurations));
}
export function connectConfigurationsFromJSON(jsonString) {
    return safeParse(jsonString, (x) => ConnectConfigurations$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'ConnectConfigurations' from JSON`);
}
/** @internal */
export const UpdateProjectRequestBody$inboundSchema = z.object({
    autoExposeSystemEnvs: z.boolean().optional(),
    autoAssignCustomDomains: z.boolean().optional(),
    autoAssignCustomDomainsUpdatedBy: z.string().optional(),
    buildCommand: z.nullable(z.string()).optional(),
    commandForIgnoringBuildStep: z.nullable(z.string()).optional(),
    customerSupportCodeVisibility: z.boolean().optional(),
    devCommand: z.nullable(z.string()).optional(),
    directoryListing: z.boolean().optional(),
    framework: z.nullable(UpdateProjectFramework$inboundSchema).optional(),
    gitForkProtection: z.boolean().optional(),
    gitLFS: z.boolean().optional(),
    installCommand: z.nullable(z.string()).optional(),
    name: z.string().optional(),
    nodeVersion: UpdateProjectNodeVersion$inboundSchema.optional(),
    outputDirectory: z.nullable(z.string()).optional(),
    previewDeploymentsDisabled: z.nullable(z.boolean()).optional(),
    publicSource: z.nullable(z.boolean()).optional(),
    resourceConfig: z.lazy(() => UpdateProjectResourceConfig$inboundSchema)
        .optional(),
    rootDirectory: z.nullable(z.string()).optional(),
    serverlessFunctionRegion: z.nullable(z.string()).optional(),
    serverlessFunctionZeroConfigFailover: z.boolean().optional(),
    skewProtectionBoundaryAt: z.number().int().optional(),
    skewProtectionMaxAge: z.number().int().optional(),
    skipGitConnectDuringLink: z.boolean().optional(),
    sourceFilesOutsideRootDirectory: z.boolean().optional(),
    enablePreviewFeedback: z.nullable(z.boolean()).optional(),
    enableProductionFeedback: z.nullable(z.boolean()).optional(),
    enableAffectedProjectsDeployments: z.boolean().optional(),
    oidcTokenConfig: z.lazy(() => UpdateProjectOidcTokenConfig$inboundSchema)
        .optional(),
    passwordProtection: z.nullable(z.lazy(() => UpdateProjectPasswordProtection$inboundSchema)).optional(),
    ssoProtection: z.nullable(z.lazy(() => UpdateProjectSsoProtection$inboundSchema)).optional(),
    trustedIps: z.nullable(z.lazy(() => UpdateProjectTrustedIps$inboundSchema))
        .optional(),
    optionsAllowlist: z.nullable(z.lazy(() => UpdateProjectOptionsAllowlist$inboundSchema)).optional(),
    connectConfigurations: z.nullable(z.array(z.lazy(() => ConnectConfigurations1$inboundSchema))).optional(),
});
/** @internal */
export const UpdateProjectRequestBody$outboundSchema = z.object({
    autoExposeSystemEnvs: z.boolean().optional(),
    autoAssignCustomDomains: z.boolean().optional(),
    autoAssignCustomDomainsUpdatedBy: z.string().optional(),
    buildCommand: z.nullable(z.string()).optional(),
    commandForIgnoringBuildStep: z.nullable(z.string()).optional(),
    customerSupportCodeVisibility: z.boolean().optional(),
    devCommand: z.nullable(z.string()).optional(),
    directoryListing: z.boolean().optional(),
    framework: z.nullable(UpdateProjectFramework$outboundSchema).optional(),
    gitForkProtection: z.boolean().optional(),
    gitLFS: z.boolean().optional(),
    installCommand: z.nullable(z.string()).optional(),
    name: z.string().optional(),
    nodeVersion: UpdateProjectNodeVersion$outboundSchema.optional(),
    outputDirectory: z.nullable(z.string()).optional(),
    previewDeploymentsDisabled: z.nullable(z.boolean()).optional(),
    publicSource: z.nullable(z.boolean()).optional(),
    resourceConfig: z.lazy(() => UpdateProjectResourceConfig$outboundSchema)
        .optional(),
    rootDirectory: z.nullable(z.string()).optional(),
    serverlessFunctionRegion: z.nullable(z.string()).optional(),
    serverlessFunctionZeroConfigFailover: z.boolean().optional(),
    skewProtectionBoundaryAt: z.number().int().optional(),
    skewProtectionMaxAge: z.number().int().optional(),
    skipGitConnectDuringLink: z.boolean().optional(),
    sourceFilesOutsideRootDirectory: z.boolean().optional(),
    enablePreviewFeedback: z.nullable(z.boolean()).optional(),
    enableProductionFeedback: z.nullable(z.boolean()).optional(),
    enableAffectedProjectsDeployments: z.boolean().optional(),
    oidcTokenConfig: z.lazy(() => UpdateProjectOidcTokenConfig$outboundSchema)
        .optional(),
    passwordProtection: z.nullable(z.lazy(() => UpdateProjectPasswordProtection$outboundSchema)).optional(),
    ssoProtection: z.nullable(z.lazy(() => UpdateProjectSsoProtection$outboundSchema)).optional(),
    trustedIps: z.nullable(z.lazy(() => UpdateProjectTrustedIps$outboundSchema))
        .optional(),
    optionsAllowlist: z.nullable(z.lazy(() => UpdateProjectOptionsAllowlist$outboundSchema)).optional(),
    connectConfigurations: z.nullable(z.array(z.lazy(() => ConnectConfigurations1$outboundSchema))).optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UpdateProjectRequestBody$;
(function (UpdateProjectRequestBody$) {
    /** @deprecated use `UpdateProjectRequestBody$inboundSchema` instead. */
    UpdateProjectRequestBody$.inboundSchema = UpdateProjectRequestBody$inboundSchema;
    /** @deprecated use `UpdateProjectRequestBody$outboundSchema` instead. */
    UpdateProjectRequestBody$.outboundSchema = UpdateProjectRequestBody$outboundSchema;
})(UpdateProjectRequestBody$ || (UpdateProjectRequestBody$ = {}));
export function updateProjectRequestBodyToJSON(updateProjectRequestBody) {
    return JSON.stringify(UpdateProjectRequestBody$outboundSchema.parse(updateProjectRequestBody));
}
export function updateProjectRequestBodyFromJSON(jsonString) {
    return safeParse(jsonString, (x) => UpdateProjectRequestBody$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'UpdateProjectRequestBody' from JSON`);
}
/** @internal */
export const UpdateProjectRequest$inboundSchema = z.object({
    idOrName: z.string(),
    teamId: z.string().optional(),
    slug: z.string().optional(),
    RequestBody: z.lazy(() => UpdateProjectRequestBody$inboundSchema),
}).transform((v) => {
    return remap$(v, {
        "RequestBody": "requestBody",
    });
});
/** @internal */
export const UpdateProjectRequest$outboundSchema = z.object({
    idOrName: z.string(),
    teamId: z.string().optional(),
    slug: z.string().optional(),
    requestBody: z.lazy(() => UpdateProjectRequestBody$outboundSchema),
}).transform((v) => {
    return remap$(v, {
        requestBody: "RequestBody",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UpdateProjectRequest$;
(function (UpdateProjectRequest$) {
    /** @deprecated use `UpdateProjectRequest$inboundSchema` instead. */
    UpdateProjectRequest$.inboundSchema = UpdateProjectRequest$inboundSchema;
    /** @deprecated use `UpdateProjectRequest$outboundSchema` instead. */
    UpdateProjectRequest$.outboundSchema = UpdateProjectRequest$outboundSchema;
})(UpdateProjectRequest$ || (UpdateProjectRequest$ = {}));
export function updateProjectRequestToJSON(updateProjectRequest) {
    return JSON.stringify(UpdateProjectRequest$outboundSchema.parse(updateProjectRequest));
}
export function updateProjectRequestFromJSON(jsonString) {
    return safeParse(jsonString, (x) => UpdateProjectRequest$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'UpdateProjectRequest' from JSON`);
}
/** @internal */
export const UpdateProjectAnalytics$inboundSchema = z.object({
    id: z.string(),
    canceledAt: z.nullable(z.number()).optional(),
    disabledAt: z.number(),
    enabledAt: z.number(),
    paidAt: z.number().optional(),
    sampleRatePercent: z.nullable(z.number()).optional(),
    spendLimitInDollars: z.nullable(z.number()).optional(),
});
/** @internal */
export const UpdateProjectAnalytics$outboundSchema = z.object({
    id: z.string(),
    canceledAt: z.nullable(z.number()).optional(),
    disabledAt: z.number(),
    enabledAt: z.number(),
    paidAt: z.number().optional(),
    sampleRatePercent: z.nullable(z.number()).optional(),
    spendLimitInDollars: z.nullable(z.number()).optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UpdateProjectAnalytics$;
(function (UpdateProjectAnalytics$) {
    /** @deprecated use `UpdateProjectAnalytics$inboundSchema` instead. */
    UpdateProjectAnalytics$.inboundSchema = UpdateProjectAnalytics$inboundSchema;
    /** @deprecated use `UpdateProjectAnalytics$outboundSchema` instead. */
    UpdateProjectAnalytics$.outboundSchema = UpdateProjectAnalytics$outboundSchema;
})(UpdateProjectAnalytics$ || (UpdateProjectAnalytics$ = {}));
export function updateProjectAnalyticsToJSON(updateProjectAnalytics) {
    return JSON.stringify(UpdateProjectAnalytics$outboundSchema.parse(updateProjectAnalytics));
}
export function updateProjectAnalyticsFromJSON(jsonString) {
    return safeParse(jsonString, (x) => UpdateProjectAnalytics$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'UpdateProjectAnalytics' from JSON`);
}
/** @internal */
export const UpdateProjectSpeedInsights$inboundSchema = z.object({
    id: z.string(),
    enabledAt: z.number().optional(),
    disabledAt: z.number().optional(),
    canceledAt: z.number().optional(),
    hasData: z.boolean().optional(),
    paidAt: z.number().optional(),
});
/** @internal */
export const UpdateProjectSpeedInsights$outboundSchema = z.object({
    id: z.string(),
    enabledAt: z.number().optional(),
    disabledAt: z.number().optional(),
    canceledAt: z.number().optional(),
    hasData: z.boolean().optional(),
    paidAt: z.number().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UpdateProjectSpeedInsights$;
(function (UpdateProjectSpeedInsights$) {
    /** @deprecated use `UpdateProjectSpeedInsights$inboundSchema` instead. */
    UpdateProjectSpeedInsights$.inboundSchema = UpdateProjectSpeedInsights$inboundSchema;
    /** @deprecated use `UpdateProjectSpeedInsights$outboundSchema` instead. */
    UpdateProjectSpeedInsights$.outboundSchema = UpdateProjectSpeedInsights$outboundSchema;
})(UpdateProjectSpeedInsights$ || (UpdateProjectSpeedInsights$ = {}));
export function updateProjectSpeedInsightsToJSON(updateProjectSpeedInsights) {
    return JSON.stringify(UpdateProjectSpeedInsights$outboundSchema.parse(updateProjectSpeedInsights));
}
export function updateProjectSpeedInsightsFromJSON(jsonString) {
    return safeParse(jsonString, (x) => UpdateProjectSpeedInsights$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'UpdateProjectSpeedInsights' from JSON`);
}
/** @internal */
export const UpdateProjectEnvId2$inboundSchema = z.nativeEnum(UpdateProjectEnvId2);
/** @internal */
export const UpdateProjectEnvId2$outboundSchema = UpdateProjectEnvId2$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UpdateProjectEnvId2$;
(function (UpdateProjectEnvId2$) {
    /** @deprecated use `UpdateProjectEnvId2$inboundSchema` instead. */
    UpdateProjectEnvId2$.inboundSchema = UpdateProjectEnvId2$inboundSchema;
    /** @deprecated use `UpdateProjectEnvId2$outboundSchema` instead. */
    UpdateProjectEnvId2$.outboundSchema = UpdateProjectEnvId2$outboundSchema;
})(UpdateProjectEnvId2$ || (UpdateProjectEnvId2$ = {}));
/** @internal */
export const UpdateProjectEnvId$inboundSchema = z.union([z.string(), UpdateProjectEnvId2$inboundSchema]);
/** @internal */
export const UpdateProjectEnvId$outboundSchema = z.union([z.string(), UpdateProjectEnvId2$outboundSchema]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UpdateProjectEnvId$;
(function (UpdateProjectEnvId$) {
    /** @deprecated use `UpdateProjectEnvId$inboundSchema` instead. */
    UpdateProjectEnvId$.inboundSchema = UpdateProjectEnvId$inboundSchema;
    /** @deprecated use `UpdateProjectEnvId$outboundSchema` instead. */
    UpdateProjectEnvId$.outboundSchema = UpdateProjectEnvId$outboundSchema;
})(UpdateProjectEnvId$ || (UpdateProjectEnvId$ = {}));
export function updateProjectEnvIdToJSON(updateProjectEnvId) {
    return JSON.stringify(UpdateProjectEnvId$outboundSchema.parse(updateProjectEnvId));
}
export function updateProjectEnvIdFromJSON(jsonString) {
    return safeParse(jsonString, (x) => UpdateProjectEnvId$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'UpdateProjectEnvId' from JSON`);
}
/** @internal */
export const UpdateProjectAws$inboundSchema = z.object({
    subnetIds: z.array(z.string()),
    securityGroupId: z.string(),
});
/** @internal */
export const UpdateProjectAws$outboundSchema = z.object({
    subnetIds: z.array(z.string()),
    securityGroupId: z.string(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UpdateProjectAws$;
(function (UpdateProjectAws$) {
    /** @deprecated use `UpdateProjectAws$inboundSchema` instead. */
    UpdateProjectAws$.inboundSchema = UpdateProjectAws$inboundSchema;
    /** @deprecated use `UpdateProjectAws$outboundSchema` instead. */
    UpdateProjectAws$.outboundSchema = UpdateProjectAws$outboundSchema;
})(UpdateProjectAws$ || (UpdateProjectAws$ = {}));
export function updateProjectAwsToJSON(updateProjectAws) {
    return JSON.stringify(UpdateProjectAws$outboundSchema.parse(updateProjectAws));
}
export function updateProjectAwsFromJSON(jsonString) {
    return safeParse(jsonString, (x) => UpdateProjectAws$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'UpdateProjectAws' from JSON`);
}
/** @internal */
export const UpdateProjectConnectConfigurations$inboundSchema = z.object({
    envId: z.union([z.string(), UpdateProjectEnvId2$inboundSchema]),
    connectConfigurationId: z.string(),
    passive: z.boolean(),
    buildsEnabled: z.boolean(),
    aws: z.lazy(() => UpdateProjectAws$inboundSchema).optional(),
    createdAt: z.number(),
    updatedAt: z.number(),
});
/** @internal */
export const UpdateProjectConnectConfigurations$outboundSchema = z.object({
    envId: z.union([z.string(), UpdateProjectEnvId2$outboundSchema]),
    connectConfigurationId: z.string(),
    passive: z.boolean(),
    buildsEnabled: z.boolean(),
    aws: z.lazy(() => UpdateProjectAws$outboundSchema).optional(),
    createdAt: z.number(),
    updatedAt: z.number(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UpdateProjectConnectConfigurations$;
(function (UpdateProjectConnectConfigurations$) {
    /** @deprecated use `UpdateProjectConnectConfigurations$inboundSchema` instead. */
    UpdateProjectConnectConfigurations$.inboundSchema = UpdateProjectConnectConfigurations$inboundSchema;
    /** @deprecated use `UpdateProjectConnectConfigurations$outboundSchema` instead. */
    UpdateProjectConnectConfigurations$.outboundSchema = UpdateProjectConnectConfigurations$outboundSchema;
})(UpdateProjectConnectConfigurations$ || (UpdateProjectConnectConfigurations$ = {}));
export function updateProjectConnectConfigurationsToJSON(updateProjectConnectConfigurations) {
    return JSON.stringify(UpdateProjectConnectConfigurations$outboundSchema.parse(updateProjectConnectConfigurations));
}
export function updateProjectConnectConfigurationsFromJSON(jsonString) {
    return safeParse(jsonString, (x) => UpdateProjectConnectConfigurations$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'UpdateProjectConnectConfigurations' from JSON`);
}
/** @internal */
export const UpdateProjectDefinitions$inboundSchema = z.object({
    host: z.string(),
    path: z.string(),
    schedule: z.string(),
});
/** @internal */
export const UpdateProjectDefinitions$outboundSchema = z.object({
    host: z.string(),
    path: z.string(),
    schedule: z.string(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UpdateProjectDefinitions$;
(function (UpdateProjectDefinitions$) {
    /** @deprecated use `UpdateProjectDefinitions$inboundSchema` instead. */
    UpdateProjectDefinitions$.inboundSchema = UpdateProjectDefinitions$inboundSchema;
    /** @deprecated use `UpdateProjectDefinitions$outboundSchema` instead. */
    UpdateProjectDefinitions$.outboundSchema = UpdateProjectDefinitions$outboundSchema;
})(UpdateProjectDefinitions$ || (UpdateProjectDefinitions$ = {}));
export function updateProjectDefinitionsToJSON(updateProjectDefinitions) {
    return JSON.stringify(UpdateProjectDefinitions$outboundSchema.parse(updateProjectDefinitions));
}
export function updateProjectDefinitionsFromJSON(jsonString) {
    return safeParse(jsonString, (x) => UpdateProjectDefinitions$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'UpdateProjectDefinitions' from JSON`);
}
/** @internal */
export const UpdateProjectCrons$inboundSchema = z.object({
    enabledAt: z.number(),
    disabledAt: z.nullable(z.number()),
    updatedAt: z.number(),
    deploymentId: z.nullable(z.string()),
    definitions: z.array(z.lazy(() => UpdateProjectDefinitions$inboundSchema)),
});
/** @internal */
export const UpdateProjectCrons$outboundSchema = z.object({
    enabledAt: z.number(),
    disabledAt: z.nullable(z.number()),
    updatedAt: z.number(),
    deploymentId: z.nullable(z.string()),
    definitions: z.array(z.lazy(() => UpdateProjectDefinitions$outboundSchema)),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UpdateProjectCrons$;
(function (UpdateProjectCrons$) {
    /** @deprecated use `UpdateProjectCrons$inboundSchema` instead. */
    UpdateProjectCrons$.inboundSchema = UpdateProjectCrons$inboundSchema;
    /** @deprecated use `UpdateProjectCrons$outboundSchema` instead. */
    UpdateProjectCrons$.outboundSchema = UpdateProjectCrons$outboundSchema;
})(UpdateProjectCrons$ || (UpdateProjectCrons$ = {}));
export function updateProjectCronsToJSON(updateProjectCrons) {
    return JSON.stringify(UpdateProjectCrons$outboundSchema.parse(updateProjectCrons));
}
export function updateProjectCronsFromJSON(jsonString) {
    return safeParse(jsonString, (x) => UpdateProjectCrons$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'UpdateProjectCrons' from JSON`);
}
/** @internal */
export const UpdateProjectDataCache$inboundSchema = z.object({
    userDisabled: z.boolean(),
    storageSizeBytes: z.nullable(z.number()).optional(),
    unlimited: z.boolean().optional(),
});
/** @internal */
export const UpdateProjectDataCache$outboundSchema = z.object({
    userDisabled: z.boolean(),
    storageSizeBytes: z.nullable(z.number()).optional(),
    unlimited: z.boolean().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UpdateProjectDataCache$;
(function (UpdateProjectDataCache$) {
    /** @deprecated use `UpdateProjectDataCache$inboundSchema` instead. */
    UpdateProjectDataCache$.inboundSchema = UpdateProjectDataCache$inboundSchema;
    /** @deprecated use `UpdateProjectDataCache$outboundSchema` instead. */
    UpdateProjectDataCache$.outboundSchema = UpdateProjectDataCache$outboundSchema;
})(UpdateProjectDataCache$ || (UpdateProjectDataCache$ = {}));
export function updateProjectDataCacheToJSON(updateProjectDataCache) {
    return JSON.stringify(UpdateProjectDataCache$outboundSchema.parse(updateProjectDataCache));
}
export function updateProjectDataCacheFromJSON(jsonString) {
    return safeParse(jsonString, (x) => UpdateProjectDataCache$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'UpdateProjectDataCache' from JSON`);
}
/** @internal */
export const UpdateProjectDeploymentExpiration$inboundSchema = z.object({
    expirationDays: z.number().optional(),
    expirationDaysProduction: z.number().optional(),
    expirationDaysCanceled: z.number().optional(),
    expirationDaysErrored: z.number().optional(),
    deploymentsToKeep: z.number().optional(),
});
/** @internal */
export const UpdateProjectDeploymentExpiration$outboundSchema = z.object({
    expirationDays: z.number().optional(),
    expirationDaysProduction: z.number().optional(),
    expirationDaysCanceled: z.number().optional(),
    expirationDaysErrored: z.number().optional(),
    deploymentsToKeep: z.number().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UpdateProjectDeploymentExpiration$;
(function (UpdateProjectDeploymentExpiration$) {
    /** @deprecated use `UpdateProjectDeploymentExpiration$inboundSchema` instead. */
    UpdateProjectDeploymentExpiration$.inboundSchema = UpdateProjectDeploymentExpiration$inboundSchema;
    /** @deprecated use `UpdateProjectDeploymentExpiration$outboundSchema` instead. */
    UpdateProjectDeploymentExpiration$.outboundSchema = UpdateProjectDeploymentExpiration$outboundSchema;
})(UpdateProjectDeploymentExpiration$ || (UpdateProjectDeploymentExpiration$ = {}));
export function updateProjectDeploymentExpirationToJSON(updateProjectDeploymentExpiration) {
    return JSON.stringify(UpdateProjectDeploymentExpiration$outboundSchema.parse(updateProjectDeploymentExpiration));
}
export function updateProjectDeploymentExpirationFromJSON(jsonString) {
    return safeParse(jsonString, (x) => UpdateProjectDeploymentExpiration$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'UpdateProjectDeploymentExpiration' from JSON`);
}
/** @internal */
export const UpdateProjectTarget2$inboundSchema = z.nativeEnum(UpdateProjectTarget2);
/** @internal */
export const UpdateProjectTarget2$outboundSchema = UpdateProjectTarget2$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UpdateProjectTarget2$;
(function (UpdateProjectTarget2$) {
    /** @deprecated use `UpdateProjectTarget2$inboundSchema` instead. */
    UpdateProjectTarget2$.inboundSchema = UpdateProjectTarget2$inboundSchema;
    /** @deprecated use `UpdateProjectTarget2$outboundSchema` instead. */
    UpdateProjectTarget2$.outboundSchema = UpdateProjectTarget2$outboundSchema;
})(UpdateProjectTarget2$ || (UpdateProjectTarget2$ = {}));
/** @internal */
export const UpdateProjectTarget$inboundSchema = z.union([z.array(z.string()), UpdateProjectTarget2$inboundSchema]);
/** @internal */
export const UpdateProjectTarget$outboundSchema = z.union([z.array(z.string()), UpdateProjectTarget2$outboundSchema]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UpdateProjectTarget$;
(function (UpdateProjectTarget$) {
    /** @deprecated use `UpdateProjectTarget$inboundSchema` instead. */
    UpdateProjectTarget$.inboundSchema = UpdateProjectTarget$inboundSchema;
    /** @deprecated use `UpdateProjectTarget$outboundSchema` instead. */
    UpdateProjectTarget$.outboundSchema = UpdateProjectTarget$outboundSchema;
})(UpdateProjectTarget$ || (UpdateProjectTarget$ = {}));
export function updateProjectTargetToJSON(updateProjectTarget) {
    return JSON.stringify(UpdateProjectTarget$outboundSchema.parse(updateProjectTarget));
}
export function updateProjectTargetFromJSON(jsonString) {
    return safeParse(jsonString, (x) => UpdateProjectTarget$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'UpdateProjectTarget' from JSON`);
}
/** @internal */
export const UpdateProjectType$inboundSchema = z.nativeEnum(UpdateProjectType);
/** @internal */
export const UpdateProjectType$outboundSchema = UpdateProjectType$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UpdateProjectType$;
(function (UpdateProjectType$) {
    /** @deprecated use `UpdateProjectType$inboundSchema` instead. */
    UpdateProjectType$.inboundSchema = UpdateProjectType$inboundSchema;
    /** @deprecated use `UpdateProjectType$outboundSchema` instead. */
    UpdateProjectType$.outboundSchema = UpdateProjectType$outboundSchema;
})(UpdateProjectType$ || (UpdateProjectType$ = {}));
/** @internal */
export const UpdateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv15Type$inboundSchema = z.nativeEnum(UpdateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv15Type);
/** @internal */
export const UpdateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv15Type$outboundSchema = UpdateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv15Type$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UpdateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv15Type$;
(function (UpdateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv15Type$) {
    /** @deprecated use `UpdateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv15Type$inboundSchema` instead. */
    UpdateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv15Type$.inboundSchema = UpdateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv15Type$inboundSchema;
    /** @deprecated use `UpdateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv15Type$outboundSchema` instead. */
    UpdateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv15Type$.outboundSchema = UpdateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv15Type$outboundSchema;
})(UpdateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv15Type$ || (UpdateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv15Type$ = {}));
/** @internal */
export const UpdateProjectContentHint15$inboundSchema = z.object({
    type: UpdateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv15Type$inboundSchema,
    projectId: z.string(),
});
/** @internal */
export const UpdateProjectContentHint15$outboundSchema = z.object({
    type: UpdateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv15Type$outboundSchema,
    projectId: z.string(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UpdateProjectContentHint15$;
(function (UpdateProjectContentHint15$) {
    /** @deprecated use `UpdateProjectContentHint15$inboundSchema` instead. */
    UpdateProjectContentHint15$.inboundSchema = UpdateProjectContentHint15$inboundSchema;
    /** @deprecated use `UpdateProjectContentHint15$outboundSchema` instead. */
    UpdateProjectContentHint15$.outboundSchema = UpdateProjectContentHint15$outboundSchema;
})(UpdateProjectContentHint15$ || (UpdateProjectContentHint15$ = {}));
export function updateProjectContentHint15ToJSON(updateProjectContentHint15) {
    return JSON.stringify(UpdateProjectContentHint15$outboundSchema.parse(updateProjectContentHint15));
}
export function updateProjectContentHint15FromJSON(jsonString) {
    return safeParse(jsonString, (x) => UpdateProjectContentHint15$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'UpdateProjectContentHint15' from JSON`);
}
/** @internal */
export const UpdateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv14Type$inboundSchema = z.nativeEnum(UpdateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv14Type);
/** @internal */
export const UpdateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv14Type$outboundSchema = UpdateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv14Type$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UpdateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv14Type$;
(function (UpdateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv14Type$) {
    /** @deprecated use `UpdateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv14Type$inboundSchema` instead. */
    UpdateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv14Type$.inboundSchema = UpdateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv14Type$inboundSchema;
    /** @deprecated use `UpdateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv14Type$outboundSchema` instead. */
    UpdateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv14Type$.outboundSchema = UpdateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv14Type$outboundSchema;
})(UpdateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv14Type$ || (UpdateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv14Type$ = {}));
/** @internal */
export const UpdateProjectContentHint14$inboundSchema = z.object({
    type: UpdateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv14Type$inboundSchema,
    storeId: z.string(),
    integrationId: z.string(),
    integrationProductId: z.string(),
    integrationConfigurationId: z.string(),
});
/** @internal */
export const UpdateProjectContentHint14$outboundSchema = z.object({
    type: UpdateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv14Type$outboundSchema,
    storeId: z.string(),
    integrationId: z.string(),
    integrationProductId: z.string(),
    integrationConfigurationId: z.string(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UpdateProjectContentHint14$;
(function (UpdateProjectContentHint14$) {
    /** @deprecated use `UpdateProjectContentHint14$inboundSchema` instead. */
    UpdateProjectContentHint14$.inboundSchema = UpdateProjectContentHint14$inboundSchema;
    /** @deprecated use `UpdateProjectContentHint14$outboundSchema` instead. */
    UpdateProjectContentHint14$.outboundSchema = UpdateProjectContentHint14$outboundSchema;
})(UpdateProjectContentHint14$ || (UpdateProjectContentHint14$ = {}));
export function updateProjectContentHint14ToJSON(updateProjectContentHint14) {
    return JSON.stringify(UpdateProjectContentHint14$outboundSchema.parse(updateProjectContentHint14));
}
export function updateProjectContentHint14FromJSON(jsonString) {
    return safeParse(jsonString, (x) => UpdateProjectContentHint14$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'UpdateProjectContentHint14' from JSON`);
}
/** @internal */
export const UpdateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv13Type$inboundSchema = z.nativeEnum(UpdateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv13Type);
/** @internal */
export const UpdateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv13Type$outboundSchema = UpdateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv13Type$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UpdateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv13Type$;
(function (UpdateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv13Type$) {
    /** @deprecated use `UpdateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv13Type$inboundSchema` instead. */
    UpdateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv13Type$.inboundSchema = UpdateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv13Type$inboundSchema;
    /** @deprecated use `UpdateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv13Type$outboundSchema` instead. */
    UpdateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv13Type$.outboundSchema = UpdateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv13Type$outboundSchema;
})(UpdateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv13Type$ || (UpdateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv13Type$ = {}));
/** @internal */
export const UpdateProjectContentHint13$inboundSchema = z.object({
    type: UpdateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv13Type$inboundSchema,
    storeId: z.string(),
});
/** @internal */
export const UpdateProjectContentHint13$outboundSchema = z.object({
    type: UpdateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv13Type$outboundSchema,
    storeId: z.string(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UpdateProjectContentHint13$;
(function (UpdateProjectContentHint13$) {
    /** @deprecated use `UpdateProjectContentHint13$inboundSchema` instead. */
    UpdateProjectContentHint13$.inboundSchema = UpdateProjectContentHint13$inboundSchema;
    /** @deprecated use `UpdateProjectContentHint13$outboundSchema` instead. */
    UpdateProjectContentHint13$.outboundSchema = UpdateProjectContentHint13$outboundSchema;
})(UpdateProjectContentHint13$ || (UpdateProjectContentHint13$ = {}));
export function updateProjectContentHint13ToJSON(updateProjectContentHint13) {
    return JSON.stringify(UpdateProjectContentHint13$outboundSchema.parse(updateProjectContentHint13));
}
export function updateProjectContentHint13FromJSON(jsonString) {
    return safeParse(jsonString, (x) => UpdateProjectContentHint13$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'UpdateProjectContentHint13' from JSON`);
}
/** @internal */
export const UpdateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv12Type$inboundSchema = z.nativeEnum(UpdateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv12Type);
/** @internal */
export const UpdateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv12Type$outboundSchema = UpdateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv12Type$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UpdateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv12Type$;
(function (UpdateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv12Type$) {
    /** @deprecated use `UpdateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv12Type$inboundSchema` instead. */
    UpdateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv12Type$.inboundSchema = UpdateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv12Type$inboundSchema;
    /** @deprecated use `UpdateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv12Type$outboundSchema` instead. */
    UpdateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv12Type$.outboundSchema = UpdateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv12Type$outboundSchema;
})(UpdateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv12Type$ || (UpdateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv12Type$ = {}));
/** @internal */
export const UpdateProjectContentHint12$inboundSchema = z.object({
    type: UpdateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv12Type$inboundSchema,
    storeId: z.string(),
});
/** @internal */
export const UpdateProjectContentHint12$outboundSchema = z.object({
    type: UpdateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv12Type$outboundSchema,
    storeId: z.string(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UpdateProjectContentHint12$;
(function (UpdateProjectContentHint12$) {
    /** @deprecated use `UpdateProjectContentHint12$inboundSchema` instead. */
    UpdateProjectContentHint12$.inboundSchema = UpdateProjectContentHint12$inboundSchema;
    /** @deprecated use `UpdateProjectContentHint12$outboundSchema` instead. */
    UpdateProjectContentHint12$.outboundSchema = UpdateProjectContentHint12$outboundSchema;
})(UpdateProjectContentHint12$ || (UpdateProjectContentHint12$ = {}));
export function updateProjectContentHint12ToJSON(updateProjectContentHint12) {
    return JSON.stringify(UpdateProjectContentHint12$outboundSchema.parse(updateProjectContentHint12));
}
export function updateProjectContentHint12FromJSON(jsonString) {
    return safeParse(jsonString, (x) => UpdateProjectContentHint12$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'UpdateProjectContentHint12' from JSON`);
}
/** @internal */
export const UpdateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv11Type$inboundSchema = z.nativeEnum(UpdateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv11Type);
/** @internal */
export const UpdateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv11Type$outboundSchema = UpdateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv11Type$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UpdateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv11Type$;
(function (UpdateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv11Type$) {
    /** @deprecated use `UpdateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv11Type$inboundSchema` instead. */
    UpdateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv11Type$.inboundSchema = UpdateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv11Type$inboundSchema;
    /** @deprecated use `UpdateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv11Type$outboundSchema` instead. */
    UpdateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv11Type$.outboundSchema = UpdateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv11Type$outboundSchema;
})(UpdateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv11Type$ || (UpdateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv11Type$ = {}));
/** @internal */
export const UpdateProjectContentHint11$inboundSchema = z.object({
    type: UpdateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv11Type$inboundSchema,
    storeId: z.string(),
});
/** @internal */
export const UpdateProjectContentHint11$outboundSchema = z.object({
    type: UpdateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv11Type$outboundSchema,
    storeId: z.string(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UpdateProjectContentHint11$;
(function (UpdateProjectContentHint11$) {
    /** @deprecated use `UpdateProjectContentHint11$inboundSchema` instead. */
    UpdateProjectContentHint11$.inboundSchema = UpdateProjectContentHint11$inboundSchema;
    /** @deprecated use `UpdateProjectContentHint11$outboundSchema` instead. */
    UpdateProjectContentHint11$.outboundSchema = UpdateProjectContentHint11$outboundSchema;
})(UpdateProjectContentHint11$ || (UpdateProjectContentHint11$ = {}));
export function updateProjectContentHint11ToJSON(updateProjectContentHint11) {
    return JSON.stringify(UpdateProjectContentHint11$outboundSchema.parse(updateProjectContentHint11));
}
export function updateProjectContentHint11FromJSON(jsonString) {
    return safeParse(jsonString, (x) => UpdateProjectContentHint11$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'UpdateProjectContentHint11' from JSON`);
}
/** @internal */
export const UpdateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv10Type$inboundSchema = z.nativeEnum(UpdateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv10Type);
/** @internal */
export const UpdateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv10Type$outboundSchema = UpdateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv10Type$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UpdateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv10Type$;
(function (UpdateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv10Type$) {
    /** @deprecated use `UpdateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv10Type$inboundSchema` instead. */
    UpdateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv10Type$.inboundSchema = UpdateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv10Type$inboundSchema;
    /** @deprecated use `UpdateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv10Type$outboundSchema` instead. */
    UpdateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv10Type$.outboundSchema = UpdateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv10Type$outboundSchema;
})(UpdateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv10Type$ || (UpdateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv10Type$ = {}));
/** @internal */
export const UpdateProjectContentHint10$inboundSchema = z.object({
    type: UpdateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv10Type$inboundSchema,
    storeId: z.string(),
});
/** @internal */
export const UpdateProjectContentHint10$outboundSchema = z.object({
    type: UpdateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv10Type$outboundSchema,
    storeId: z.string(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UpdateProjectContentHint10$;
(function (UpdateProjectContentHint10$) {
    /** @deprecated use `UpdateProjectContentHint10$inboundSchema` instead. */
    UpdateProjectContentHint10$.inboundSchema = UpdateProjectContentHint10$inboundSchema;
    /** @deprecated use `UpdateProjectContentHint10$outboundSchema` instead. */
    UpdateProjectContentHint10$.outboundSchema = UpdateProjectContentHint10$outboundSchema;
})(UpdateProjectContentHint10$ || (UpdateProjectContentHint10$ = {}));
export function updateProjectContentHint10ToJSON(updateProjectContentHint10) {
    return JSON.stringify(UpdateProjectContentHint10$outboundSchema.parse(updateProjectContentHint10));
}
export function updateProjectContentHint10FromJSON(jsonString) {
    return safeParse(jsonString, (x) => UpdateProjectContentHint10$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'UpdateProjectContentHint10' from JSON`);
}
/** @internal */
export const UpdateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv9Type$inboundSchema = z.nativeEnum(UpdateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv9Type);
/** @internal */
export const UpdateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv9Type$outboundSchema = UpdateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv9Type$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UpdateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv9Type$;
(function (UpdateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv9Type$) {
    /** @deprecated use `UpdateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv9Type$inboundSchema` instead. */
    UpdateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv9Type$.inboundSchema = UpdateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv9Type$inboundSchema;
    /** @deprecated use `UpdateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv9Type$outboundSchema` instead. */
    UpdateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv9Type$.outboundSchema = UpdateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv9Type$outboundSchema;
})(UpdateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv9Type$ || (UpdateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv9Type$ = {}));
/** @internal */
export const UpdateProjectContentHint9$inboundSchema = z.object({
    type: UpdateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv9Type$inboundSchema,
    storeId: z.string(),
});
/** @internal */
export const UpdateProjectContentHint9$outboundSchema = z.object({
    type: UpdateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv9Type$outboundSchema,
    storeId: z.string(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UpdateProjectContentHint9$;
(function (UpdateProjectContentHint9$) {
    /** @deprecated use `UpdateProjectContentHint9$inboundSchema` instead. */
    UpdateProjectContentHint9$.inboundSchema = UpdateProjectContentHint9$inboundSchema;
    /** @deprecated use `UpdateProjectContentHint9$outboundSchema` instead. */
    UpdateProjectContentHint9$.outboundSchema = UpdateProjectContentHint9$outboundSchema;
})(UpdateProjectContentHint9$ || (UpdateProjectContentHint9$ = {}));
export function updateProjectContentHint9ToJSON(updateProjectContentHint9) {
    return JSON.stringify(UpdateProjectContentHint9$outboundSchema.parse(updateProjectContentHint9));
}
export function updateProjectContentHint9FromJSON(jsonString) {
    return safeParse(jsonString, (x) => UpdateProjectContentHint9$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'UpdateProjectContentHint9' from JSON`);
}
/** @internal */
export const UpdateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv8Type$inboundSchema = z.nativeEnum(UpdateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv8Type);
/** @internal */
export const UpdateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv8Type$outboundSchema = UpdateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv8Type$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UpdateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv8Type$;
(function (UpdateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv8Type$) {
    /** @deprecated use `UpdateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv8Type$inboundSchema` instead. */
    UpdateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv8Type$.inboundSchema = UpdateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv8Type$inboundSchema;
    /** @deprecated use `UpdateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv8Type$outboundSchema` instead. */
    UpdateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv8Type$.outboundSchema = UpdateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv8Type$outboundSchema;
})(UpdateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv8Type$ || (UpdateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv8Type$ = {}));
/** @internal */
export const UpdateProjectContentHint8$inboundSchema = z.object({
    type: UpdateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv8Type$inboundSchema,
    storeId: z.string(),
});
/** @internal */
export const UpdateProjectContentHint8$outboundSchema = z.object({
    type: UpdateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv8Type$outboundSchema,
    storeId: z.string(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UpdateProjectContentHint8$;
(function (UpdateProjectContentHint8$) {
    /** @deprecated use `UpdateProjectContentHint8$inboundSchema` instead. */
    UpdateProjectContentHint8$.inboundSchema = UpdateProjectContentHint8$inboundSchema;
    /** @deprecated use `UpdateProjectContentHint8$outboundSchema` instead. */
    UpdateProjectContentHint8$.outboundSchema = UpdateProjectContentHint8$outboundSchema;
})(UpdateProjectContentHint8$ || (UpdateProjectContentHint8$ = {}));
export function updateProjectContentHint8ToJSON(updateProjectContentHint8) {
    return JSON.stringify(UpdateProjectContentHint8$outboundSchema.parse(updateProjectContentHint8));
}
export function updateProjectContentHint8FromJSON(jsonString) {
    return safeParse(jsonString, (x) => UpdateProjectContentHint8$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'UpdateProjectContentHint8' from JSON`);
}
/** @internal */
export const UpdateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnvType$inboundSchema = z.nativeEnum(UpdateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnvType);
/** @internal */
export const UpdateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnvType$outboundSchema = UpdateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnvType$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UpdateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnvType$;
(function (UpdateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnvType$) {
    /** @deprecated use `UpdateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnvType$inboundSchema` instead. */
    UpdateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnvType$.inboundSchema = UpdateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnvType$inboundSchema;
    /** @deprecated use `UpdateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnvType$outboundSchema` instead. */
    UpdateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnvType$.outboundSchema = UpdateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnvType$outboundSchema;
})(UpdateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnvType$ || (UpdateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnvType$ = {}));
/** @internal */
export const UpdateProjectContentHint7$inboundSchema = z.object({
    type: UpdateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnvType$inboundSchema,
    storeId: z.string(),
});
/** @internal */
export const UpdateProjectContentHint7$outboundSchema = z.object({
    type: UpdateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnvType$outboundSchema,
    storeId: z.string(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UpdateProjectContentHint7$;
(function (UpdateProjectContentHint7$) {
    /** @deprecated use `UpdateProjectContentHint7$inboundSchema` instead. */
    UpdateProjectContentHint7$.inboundSchema = UpdateProjectContentHint7$inboundSchema;
    /** @deprecated use `UpdateProjectContentHint7$outboundSchema` instead. */
    UpdateProjectContentHint7$.outboundSchema = UpdateProjectContentHint7$outboundSchema;
})(UpdateProjectContentHint7$ || (UpdateProjectContentHint7$ = {}));
export function updateProjectContentHint7ToJSON(updateProjectContentHint7) {
    return JSON.stringify(UpdateProjectContentHint7$outboundSchema.parse(updateProjectContentHint7));
}
export function updateProjectContentHint7FromJSON(jsonString) {
    return safeParse(jsonString, (x) => UpdateProjectContentHint7$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'UpdateProjectContentHint7' from JSON`);
}
/** @internal */
export const UpdateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyType$inboundSchema = z.nativeEnum(UpdateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyType);
/** @internal */
export const UpdateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyType$outboundSchema = UpdateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyType$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UpdateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyType$;
(function (UpdateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyType$) {
    /** @deprecated use `UpdateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyType$inboundSchema` instead. */
    UpdateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyType$.inboundSchema = UpdateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyType$inboundSchema;
    /** @deprecated use `UpdateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyType$outboundSchema` instead. */
    UpdateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyType$.outboundSchema = UpdateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyType$outboundSchema;
})(UpdateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyType$ || (UpdateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyType$ = {}));
/** @internal */
export const UpdateProjectContentHint6$inboundSchema = z.object({
    type: UpdateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyType$inboundSchema,
    storeId: z.string(),
});
/** @internal */
export const UpdateProjectContentHint6$outboundSchema = z.object({
    type: UpdateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyType$outboundSchema,
    storeId: z.string(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UpdateProjectContentHint6$;
(function (UpdateProjectContentHint6$) {
    /** @deprecated use `UpdateProjectContentHint6$inboundSchema` instead. */
    UpdateProjectContentHint6$.inboundSchema = UpdateProjectContentHint6$inboundSchema;
    /** @deprecated use `UpdateProjectContentHint6$outboundSchema` instead. */
    UpdateProjectContentHint6$.outboundSchema = UpdateProjectContentHint6$outboundSchema;
})(UpdateProjectContentHint6$ || (UpdateProjectContentHint6$ = {}));
export function updateProjectContentHint6ToJSON(updateProjectContentHint6) {
    return JSON.stringify(UpdateProjectContentHint6$outboundSchema.parse(updateProjectContentHint6));
}
export function updateProjectContentHint6FromJSON(jsonString) {
    return safeParse(jsonString, (x) => UpdateProjectContentHint6$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'UpdateProjectContentHint6' from JSON`);
}
/** @internal */
export const UpdateProjectContentHintProjectsResponse200ApplicationJSONType$inboundSchema = z.nativeEnum(UpdateProjectContentHintProjectsResponse200ApplicationJSONType);
/** @internal */
export const UpdateProjectContentHintProjectsResponse200ApplicationJSONType$outboundSchema = UpdateProjectContentHintProjectsResponse200ApplicationJSONType$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UpdateProjectContentHintProjectsResponse200ApplicationJSONType$;
(function (UpdateProjectContentHintProjectsResponse200ApplicationJSONType$) {
    /** @deprecated use `UpdateProjectContentHintProjectsResponse200ApplicationJSONType$inboundSchema` instead. */
    UpdateProjectContentHintProjectsResponse200ApplicationJSONType$.inboundSchema = UpdateProjectContentHintProjectsResponse200ApplicationJSONType$inboundSchema;
    /** @deprecated use `UpdateProjectContentHintProjectsResponse200ApplicationJSONType$outboundSchema` instead. */
    UpdateProjectContentHintProjectsResponse200ApplicationJSONType$.outboundSchema = UpdateProjectContentHintProjectsResponse200ApplicationJSONType$outboundSchema;
})(UpdateProjectContentHintProjectsResponse200ApplicationJSONType$ || (UpdateProjectContentHintProjectsResponse200ApplicationJSONType$ = {}));
/** @internal */
export const UpdateProjectContentHint5$inboundSchema = z.object({
    type: UpdateProjectContentHintProjectsResponse200ApplicationJSONType$inboundSchema,
    storeId: z.string(),
});
/** @internal */
export const UpdateProjectContentHint5$outboundSchema = z.object({
    type: UpdateProjectContentHintProjectsResponse200ApplicationJSONType$outboundSchema,
    storeId: z.string(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UpdateProjectContentHint5$;
(function (UpdateProjectContentHint5$) {
    /** @deprecated use `UpdateProjectContentHint5$inboundSchema` instead. */
    UpdateProjectContentHint5$.inboundSchema = UpdateProjectContentHint5$inboundSchema;
    /** @deprecated use `UpdateProjectContentHint5$outboundSchema` instead. */
    UpdateProjectContentHint5$.outboundSchema = UpdateProjectContentHint5$outboundSchema;
})(UpdateProjectContentHint5$ || (UpdateProjectContentHint5$ = {}));
export function updateProjectContentHint5ToJSON(updateProjectContentHint5) {
    return JSON.stringify(UpdateProjectContentHint5$outboundSchema.parse(updateProjectContentHint5));
}
export function updateProjectContentHint5FromJSON(jsonString) {
    return safeParse(jsonString, (x) => UpdateProjectContentHint5$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'UpdateProjectContentHint5' from JSON`);
}
/** @internal */
export const UpdateProjectContentHintProjectsResponse200Type$inboundSchema = z
    .nativeEnum(UpdateProjectContentHintProjectsResponse200Type);
/** @internal */
export const UpdateProjectContentHintProjectsResponse200Type$outboundSchema = UpdateProjectContentHintProjectsResponse200Type$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UpdateProjectContentHintProjectsResponse200Type$;
(function (UpdateProjectContentHintProjectsResponse200Type$) {
    /** @deprecated use `UpdateProjectContentHintProjectsResponse200Type$inboundSchema` instead. */
    UpdateProjectContentHintProjectsResponse200Type$.inboundSchema = UpdateProjectContentHintProjectsResponse200Type$inboundSchema;
    /** @deprecated use `UpdateProjectContentHintProjectsResponse200Type$outboundSchema` instead. */
    UpdateProjectContentHintProjectsResponse200Type$.outboundSchema = UpdateProjectContentHintProjectsResponse200Type$outboundSchema;
})(UpdateProjectContentHintProjectsResponse200Type$ || (UpdateProjectContentHintProjectsResponse200Type$ = {}));
/** @internal */
export const UpdateProjectContentHint4$inboundSchema = z.object({
    type: UpdateProjectContentHintProjectsResponse200Type$inboundSchema,
    storeId: z.string(),
});
/** @internal */
export const UpdateProjectContentHint4$outboundSchema = z.object({
    type: UpdateProjectContentHintProjectsResponse200Type$outboundSchema,
    storeId: z.string(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UpdateProjectContentHint4$;
(function (UpdateProjectContentHint4$) {
    /** @deprecated use `UpdateProjectContentHint4$inboundSchema` instead. */
    UpdateProjectContentHint4$.inboundSchema = UpdateProjectContentHint4$inboundSchema;
    /** @deprecated use `UpdateProjectContentHint4$outboundSchema` instead. */
    UpdateProjectContentHint4$.outboundSchema = UpdateProjectContentHint4$outboundSchema;
})(UpdateProjectContentHint4$ || (UpdateProjectContentHint4$ = {}));
export function updateProjectContentHint4ToJSON(updateProjectContentHint4) {
    return JSON.stringify(UpdateProjectContentHint4$outboundSchema.parse(updateProjectContentHint4));
}
export function updateProjectContentHint4FromJSON(jsonString) {
    return safeParse(jsonString, (x) => UpdateProjectContentHint4$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'UpdateProjectContentHint4' from JSON`);
}
/** @internal */
export const UpdateProjectContentHintProjectsResponseType$inboundSchema = z
    .nativeEnum(UpdateProjectContentHintProjectsResponseType);
/** @internal */
export const UpdateProjectContentHintProjectsResponseType$outboundSchema = UpdateProjectContentHintProjectsResponseType$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UpdateProjectContentHintProjectsResponseType$;
(function (UpdateProjectContentHintProjectsResponseType$) {
    /** @deprecated use `UpdateProjectContentHintProjectsResponseType$inboundSchema` instead. */
    UpdateProjectContentHintProjectsResponseType$.inboundSchema = UpdateProjectContentHintProjectsResponseType$inboundSchema;
    /** @deprecated use `UpdateProjectContentHintProjectsResponseType$outboundSchema` instead. */
    UpdateProjectContentHintProjectsResponseType$.outboundSchema = UpdateProjectContentHintProjectsResponseType$outboundSchema;
})(UpdateProjectContentHintProjectsResponseType$ || (UpdateProjectContentHintProjectsResponseType$ = {}));
/** @internal */
export const UpdateProjectContentHint3$inboundSchema = z.object({
    type: UpdateProjectContentHintProjectsResponseType$inboundSchema,
    storeId: z.string(),
});
/** @internal */
export const UpdateProjectContentHint3$outboundSchema = z.object({
    type: UpdateProjectContentHintProjectsResponseType$outboundSchema,
    storeId: z.string(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UpdateProjectContentHint3$;
(function (UpdateProjectContentHint3$) {
    /** @deprecated use `UpdateProjectContentHint3$inboundSchema` instead. */
    UpdateProjectContentHint3$.inboundSchema = UpdateProjectContentHint3$inboundSchema;
    /** @deprecated use `UpdateProjectContentHint3$outboundSchema` instead. */
    UpdateProjectContentHint3$.outboundSchema = UpdateProjectContentHint3$outboundSchema;
})(UpdateProjectContentHint3$ || (UpdateProjectContentHint3$ = {}));
export function updateProjectContentHint3ToJSON(updateProjectContentHint3) {
    return JSON.stringify(UpdateProjectContentHint3$outboundSchema.parse(updateProjectContentHint3));
}
export function updateProjectContentHint3FromJSON(jsonString) {
    return safeParse(jsonString, (x) => UpdateProjectContentHint3$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'UpdateProjectContentHint3' from JSON`);
}
/** @internal */
export const UpdateProjectContentHintProjectsType$inboundSchema = z.nativeEnum(UpdateProjectContentHintProjectsType);
/** @internal */
export const UpdateProjectContentHintProjectsType$outboundSchema = UpdateProjectContentHintProjectsType$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UpdateProjectContentHintProjectsType$;
(function (UpdateProjectContentHintProjectsType$) {
    /** @deprecated use `UpdateProjectContentHintProjectsType$inboundSchema` instead. */
    UpdateProjectContentHintProjectsType$.inboundSchema = UpdateProjectContentHintProjectsType$inboundSchema;
    /** @deprecated use `UpdateProjectContentHintProjectsType$outboundSchema` instead. */
    UpdateProjectContentHintProjectsType$.outboundSchema = UpdateProjectContentHintProjectsType$outboundSchema;
})(UpdateProjectContentHintProjectsType$ || (UpdateProjectContentHintProjectsType$ = {}));
/** @internal */
export const UpdateProjectContentHint2$inboundSchema = z.object({
    type: UpdateProjectContentHintProjectsType$inboundSchema,
    storeId: z.string(),
});
/** @internal */
export const UpdateProjectContentHint2$outboundSchema = z.object({
    type: UpdateProjectContentHintProjectsType$outboundSchema,
    storeId: z.string(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UpdateProjectContentHint2$;
(function (UpdateProjectContentHint2$) {
    /** @deprecated use `UpdateProjectContentHint2$inboundSchema` instead. */
    UpdateProjectContentHint2$.inboundSchema = UpdateProjectContentHint2$inboundSchema;
    /** @deprecated use `UpdateProjectContentHint2$outboundSchema` instead. */
    UpdateProjectContentHint2$.outboundSchema = UpdateProjectContentHint2$outboundSchema;
})(UpdateProjectContentHint2$ || (UpdateProjectContentHint2$ = {}));
export function updateProjectContentHint2ToJSON(updateProjectContentHint2) {
    return JSON.stringify(UpdateProjectContentHint2$outboundSchema.parse(updateProjectContentHint2));
}
export function updateProjectContentHint2FromJSON(jsonString) {
    return safeParse(jsonString, (x) => UpdateProjectContentHint2$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'UpdateProjectContentHint2' from JSON`);
}
/** @internal */
export const UpdateProjectContentHintType$inboundSchema = z.nativeEnum(UpdateProjectContentHintType);
/** @internal */
export const UpdateProjectContentHintType$outboundSchema = UpdateProjectContentHintType$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UpdateProjectContentHintType$;
(function (UpdateProjectContentHintType$) {
    /** @deprecated use `UpdateProjectContentHintType$inboundSchema` instead. */
    UpdateProjectContentHintType$.inboundSchema = UpdateProjectContentHintType$inboundSchema;
    /** @deprecated use `UpdateProjectContentHintType$outboundSchema` instead. */
    UpdateProjectContentHintType$.outboundSchema = UpdateProjectContentHintType$outboundSchema;
})(UpdateProjectContentHintType$ || (UpdateProjectContentHintType$ = {}));
/** @internal */
export const UpdateProjectContentHint1$inboundSchema = z.object({
    type: UpdateProjectContentHintType$inboundSchema,
    storeId: z.string(),
});
/** @internal */
export const UpdateProjectContentHint1$outboundSchema = z.object({
    type: UpdateProjectContentHintType$outboundSchema,
    storeId: z.string(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UpdateProjectContentHint1$;
(function (UpdateProjectContentHint1$) {
    /** @deprecated use `UpdateProjectContentHint1$inboundSchema` instead. */
    UpdateProjectContentHint1$.inboundSchema = UpdateProjectContentHint1$inboundSchema;
    /** @deprecated use `UpdateProjectContentHint1$outboundSchema` instead. */
    UpdateProjectContentHint1$.outboundSchema = UpdateProjectContentHint1$outboundSchema;
})(UpdateProjectContentHint1$ || (UpdateProjectContentHint1$ = {}));
export function updateProjectContentHint1ToJSON(updateProjectContentHint1) {
    return JSON.stringify(UpdateProjectContentHint1$outboundSchema.parse(updateProjectContentHint1));
}
export function updateProjectContentHint1FromJSON(jsonString) {
    return safeParse(jsonString, (x) => UpdateProjectContentHint1$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'UpdateProjectContentHint1' from JSON`);
}
/** @internal */
export const UpdateProjectContentHint$inboundSchema = z.union([
    z.lazy(() => UpdateProjectContentHint1$inboundSchema),
    z.lazy(() => UpdateProjectContentHint2$inboundSchema),
    z.lazy(() => UpdateProjectContentHint3$inboundSchema),
    z.lazy(() => UpdateProjectContentHint4$inboundSchema),
    z.lazy(() => UpdateProjectContentHint5$inboundSchema),
    z.lazy(() => UpdateProjectContentHint6$inboundSchema),
    z.lazy(() => UpdateProjectContentHint7$inboundSchema),
    z.lazy(() => UpdateProjectContentHint8$inboundSchema),
    z.lazy(() => UpdateProjectContentHint9$inboundSchema),
    z.lazy(() => UpdateProjectContentHint10$inboundSchema),
    z.lazy(() => UpdateProjectContentHint11$inboundSchema),
    z.lazy(() => UpdateProjectContentHint12$inboundSchema),
    z.lazy(() => UpdateProjectContentHint13$inboundSchema),
    z.lazy(() => UpdateProjectContentHint15$inboundSchema),
    z.lazy(() => UpdateProjectContentHint14$inboundSchema),
]);
/** @internal */
export const UpdateProjectContentHint$outboundSchema = z.union([
    z.lazy(() => UpdateProjectContentHint1$outboundSchema),
    z.lazy(() => UpdateProjectContentHint2$outboundSchema),
    z.lazy(() => UpdateProjectContentHint3$outboundSchema),
    z.lazy(() => UpdateProjectContentHint4$outboundSchema),
    z.lazy(() => UpdateProjectContentHint5$outboundSchema),
    z.lazy(() => UpdateProjectContentHint6$outboundSchema),
    z.lazy(() => UpdateProjectContentHint7$outboundSchema),
    z.lazy(() => UpdateProjectContentHint8$outboundSchema),
    z.lazy(() => UpdateProjectContentHint9$outboundSchema),
    z.lazy(() => UpdateProjectContentHint10$outboundSchema),
    z.lazy(() => UpdateProjectContentHint11$outboundSchema),
    z.lazy(() => UpdateProjectContentHint12$outboundSchema),
    z.lazy(() => UpdateProjectContentHint13$outboundSchema),
    z.lazy(() => UpdateProjectContentHint15$outboundSchema),
    z.lazy(() => UpdateProjectContentHint14$outboundSchema),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UpdateProjectContentHint$;
(function (UpdateProjectContentHint$) {
    /** @deprecated use `UpdateProjectContentHint$inboundSchema` instead. */
    UpdateProjectContentHint$.inboundSchema = UpdateProjectContentHint$inboundSchema;
    /** @deprecated use `UpdateProjectContentHint$outboundSchema` instead. */
    UpdateProjectContentHint$.outboundSchema = UpdateProjectContentHint$outboundSchema;
})(UpdateProjectContentHint$ || (UpdateProjectContentHint$ = {}));
export function updateProjectContentHintToJSON(updateProjectContentHint) {
    return JSON.stringify(UpdateProjectContentHint$outboundSchema.parse(updateProjectContentHint));
}
export function updateProjectContentHintFromJSON(jsonString) {
    return safeParse(jsonString, (x) => UpdateProjectContentHint$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'UpdateProjectContentHint' from JSON`);
}
/** @internal */
export const UpdateProjectProjectsResponse200ApplicationJSONResponseBodyType$inboundSchema = z.nativeEnum(UpdateProjectProjectsResponse200ApplicationJSONResponseBodyType);
/** @internal */
export const UpdateProjectProjectsResponse200ApplicationJSONResponseBodyType$outboundSchema = UpdateProjectProjectsResponse200ApplicationJSONResponseBodyType$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UpdateProjectProjectsResponse200ApplicationJSONResponseBodyType$;
(function (UpdateProjectProjectsResponse200ApplicationJSONResponseBodyType$) {
    /** @deprecated use `UpdateProjectProjectsResponse200ApplicationJSONResponseBodyType$inboundSchema` instead. */
    UpdateProjectProjectsResponse200ApplicationJSONResponseBodyType$.inboundSchema = UpdateProjectProjectsResponse200ApplicationJSONResponseBodyType$inboundSchema;
    /** @deprecated use `UpdateProjectProjectsResponse200ApplicationJSONResponseBodyType$outboundSchema` instead. */
    UpdateProjectProjectsResponse200ApplicationJSONResponseBodyType$.outboundSchema = UpdateProjectProjectsResponse200ApplicationJSONResponseBodyType$outboundSchema;
})(UpdateProjectProjectsResponse200ApplicationJSONResponseBodyType$ || (UpdateProjectProjectsResponse200ApplicationJSONResponseBodyType$ = {}));
/** @internal */
export const UpdateProjectInternalContentHint$inboundSchema = z.object({
    type: UpdateProjectProjectsResponse200ApplicationJSONResponseBodyType$inboundSchema,
    encryptedValue: z.string(),
});
/** @internal */
export const UpdateProjectInternalContentHint$outboundSchema = z.object({
    type: UpdateProjectProjectsResponse200ApplicationJSONResponseBodyType$outboundSchema,
    encryptedValue: z.string(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UpdateProjectInternalContentHint$;
(function (UpdateProjectInternalContentHint$) {
    /** @deprecated use `UpdateProjectInternalContentHint$inboundSchema` instead. */
    UpdateProjectInternalContentHint$.inboundSchema = UpdateProjectInternalContentHint$inboundSchema;
    /** @deprecated use `UpdateProjectInternalContentHint$outboundSchema` instead. */
    UpdateProjectInternalContentHint$.outboundSchema = UpdateProjectInternalContentHint$outboundSchema;
})(UpdateProjectInternalContentHint$ || (UpdateProjectInternalContentHint$ = {}));
export function updateProjectInternalContentHintToJSON(updateProjectInternalContentHint) {
    return JSON.stringify(UpdateProjectInternalContentHint$outboundSchema.parse(updateProjectInternalContentHint));
}
export function updateProjectInternalContentHintFromJSON(jsonString) {
    return safeParse(jsonString, (x) => UpdateProjectInternalContentHint$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'UpdateProjectInternalContentHint' from JSON`);
}
/** @internal */
export const UpdateProjectEnv$inboundSchema = z.object({
    target: z.union([z.array(z.string()), UpdateProjectTarget2$inboundSchema])
        .optional(),
    type: UpdateProjectType$inboundSchema,
    sunsetSecretId: z.string().optional(),
    decrypted: z.boolean().optional(),
    value: z.string(),
    vsmValue: z.string().optional(),
    id: z.string().optional(),
    key: z.string(),
    configurationId: z.nullable(z.string()).optional(),
    createdAt: z.number().optional(),
    updatedAt: z.number().optional(),
    createdBy: z.nullable(z.string()).optional(),
    updatedBy: z.nullable(z.string()).optional(),
    gitBranch: z.string().optional(),
    edgeConfigId: z.nullable(z.string()).optional(),
    edgeConfigTokenId: z.nullable(z.string()).optional(),
    contentHint: z.nullable(z.union([
        z.lazy(() => UpdateProjectContentHint1$inboundSchema),
        z.lazy(() => UpdateProjectContentHint2$inboundSchema),
        z.lazy(() => UpdateProjectContentHint3$inboundSchema),
        z.lazy(() => UpdateProjectContentHint4$inboundSchema),
        z.lazy(() => UpdateProjectContentHint5$inboundSchema),
        z.lazy(() => UpdateProjectContentHint6$inboundSchema),
        z.lazy(() => UpdateProjectContentHint7$inboundSchema),
        z.lazy(() => UpdateProjectContentHint8$inboundSchema),
        z.lazy(() => UpdateProjectContentHint9$inboundSchema),
        z.lazy(() => UpdateProjectContentHint10$inboundSchema),
        z.lazy(() => UpdateProjectContentHint11$inboundSchema),
        z.lazy(() => UpdateProjectContentHint12$inboundSchema),
        z.lazy(() => UpdateProjectContentHint13$inboundSchema),
        z.lazy(() => UpdateProjectContentHint15$inboundSchema),
        z.lazy(() => UpdateProjectContentHint14$inboundSchema),
    ])).optional(),
    internalContentHint: z.nullable(z.lazy(() => UpdateProjectInternalContentHint$inboundSchema)).optional(),
    comment: z.string().optional(),
    customEnvironmentIds: z.array(z.string()).optional(),
});
/** @internal */
export const UpdateProjectEnv$outboundSchema = z.object({
    target: z.union([z.array(z.string()), UpdateProjectTarget2$outboundSchema])
        .optional(),
    type: UpdateProjectType$outboundSchema,
    sunsetSecretId: z.string().optional(),
    decrypted: z.boolean().optional(),
    value: z.string(),
    vsmValue: z.string().optional(),
    id: z.string().optional(),
    key: z.string(),
    configurationId: z.nullable(z.string()).optional(),
    createdAt: z.number().optional(),
    updatedAt: z.number().optional(),
    createdBy: z.nullable(z.string()).optional(),
    updatedBy: z.nullable(z.string()).optional(),
    gitBranch: z.string().optional(),
    edgeConfigId: z.nullable(z.string()).optional(),
    edgeConfigTokenId: z.nullable(z.string()).optional(),
    contentHint: z.nullable(z.union([
        z.lazy(() => UpdateProjectContentHint1$outboundSchema),
        z.lazy(() => UpdateProjectContentHint2$outboundSchema),
        z.lazy(() => UpdateProjectContentHint3$outboundSchema),
        z.lazy(() => UpdateProjectContentHint4$outboundSchema),
        z.lazy(() => UpdateProjectContentHint5$outboundSchema),
        z.lazy(() => UpdateProjectContentHint6$outboundSchema),
        z.lazy(() => UpdateProjectContentHint7$outboundSchema),
        z.lazy(() => UpdateProjectContentHint8$outboundSchema),
        z.lazy(() => UpdateProjectContentHint9$outboundSchema),
        z.lazy(() => UpdateProjectContentHint10$outboundSchema),
        z.lazy(() => UpdateProjectContentHint11$outboundSchema),
        z.lazy(() => UpdateProjectContentHint12$outboundSchema),
        z.lazy(() => UpdateProjectContentHint13$outboundSchema),
        z.lazy(() => UpdateProjectContentHint15$outboundSchema),
        z.lazy(() => UpdateProjectContentHint14$outboundSchema),
    ])).optional(),
    internalContentHint: z.nullable(z.lazy(() => UpdateProjectInternalContentHint$outboundSchema)).optional(),
    comment: z.string().optional(),
    customEnvironmentIds: z.array(z.string()).optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UpdateProjectEnv$;
(function (UpdateProjectEnv$) {
    /** @deprecated use `UpdateProjectEnv$inboundSchema` instead. */
    UpdateProjectEnv$.inboundSchema = UpdateProjectEnv$inboundSchema;
    /** @deprecated use `UpdateProjectEnv$outboundSchema` instead. */
    UpdateProjectEnv$.outboundSchema = UpdateProjectEnv$outboundSchema;
})(UpdateProjectEnv$ || (UpdateProjectEnv$ = {}));
export function updateProjectEnvToJSON(updateProjectEnv) {
    return JSON.stringify(UpdateProjectEnv$outboundSchema.parse(updateProjectEnv));
}
export function updateProjectEnvFromJSON(jsonString) {
    return safeParse(jsonString, (x) => UpdateProjectEnv$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'UpdateProjectEnv' from JSON`);
}
/** @internal */
export const UpdateProjectProjectsType$inboundSchema = z.nativeEnum(UpdateProjectProjectsType);
/** @internal */
export const UpdateProjectProjectsType$outboundSchema = UpdateProjectProjectsType$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UpdateProjectProjectsType$;
(function (UpdateProjectProjectsType$) {
    /** @deprecated use `UpdateProjectProjectsType$inboundSchema` instead. */
    UpdateProjectProjectsType$.inboundSchema = UpdateProjectProjectsType$inboundSchema;
    /** @deprecated use `UpdateProjectProjectsType$outboundSchema` instead. */
    UpdateProjectProjectsType$.outboundSchema = UpdateProjectProjectsType$outboundSchema;
})(UpdateProjectProjectsType$ || (UpdateProjectProjectsType$ = {}));
/** @internal */
export const UpdateProjectProjectsResponse200ApplicationJSONResponseBodyCustomEnvironmentsType$inboundSchema = z.nativeEnum(UpdateProjectProjectsResponse200ApplicationJSONResponseBodyCustomEnvironmentsType);
/** @internal */
export const UpdateProjectProjectsResponse200ApplicationJSONResponseBodyCustomEnvironmentsType$outboundSchema = UpdateProjectProjectsResponse200ApplicationJSONResponseBodyCustomEnvironmentsType$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UpdateProjectProjectsResponse200ApplicationJSONResponseBodyCustomEnvironmentsType$;
(function (UpdateProjectProjectsResponse200ApplicationJSONResponseBodyCustomEnvironmentsType$) {
    /** @deprecated use `UpdateProjectProjectsResponse200ApplicationJSONResponseBodyCustomEnvironmentsType$inboundSchema` instead. */
    UpdateProjectProjectsResponse200ApplicationJSONResponseBodyCustomEnvironmentsType$.inboundSchema = UpdateProjectProjectsResponse200ApplicationJSONResponseBodyCustomEnvironmentsType$inboundSchema;
    /** @deprecated use `UpdateProjectProjectsResponse200ApplicationJSONResponseBodyCustomEnvironmentsType$outboundSchema` instead. */
    UpdateProjectProjectsResponse200ApplicationJSONResponseBodyCustomEnvironmentsType$.outboundSchema = UpdateProjectProjectsResponse200ApplicationJSONResponseBodyCustomEnvironmentsType$outboundSchema;
})(UpdateProjectProjectsResponse200ApplicationJSONResponseBodyCustomEnvironmentsType$ || (UpdateProjectProjectsResponse200ApplicationJSONResponseBodyCustomEnvironmentsType$ = {}));
/** @internal */
export const UpdateProjectBranchMatcher$inboundSchema = z.object({
    type: UpdateProjectProjectsResponse200ApplicationJSONResponseBodyCustomEnvironmentsType$inboundSchema,
    pattern: z.string(),
});
/** @internal */
export const UpdateProjectBranchMatcher$outboundSchema = z.object({
    type: UpdateProjectProjectsResponse200ApplicationJSONResponseBodyCustomEnvironmentsType$outboundSchema,
    pattern: z.string(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UpdateProjectBranchMatcher$;
(function (UpdateProjectBranchMatcher$) {
    /** @deprecated use `UpdateProjectBranchMatcher$inboundSchema` instead. */
    UpdateProjectBranchMatcher$.inboundSchema = UpdateProjectBranchMatcher$inboundSchema;
    /** @deprecated use `UpdateProjectBranchMatcher$outboundSchema` instead. */
    UpdateProjectBranchMatcher$.outboundSchema = UpdateProjectBranchMatcher$outboundSchema;
})(UpdateProjectBranchMatcher$ || (UpdateProjectBranchMatcher$ = {}));
export function updateProjectBranchMatcherToJSON(updateProjectBranchMatcher) {
    return JSON.stringify(UpdateProjectBranchMatcher$outboundSchema.parse(updateProjectBranchMatcher));
}
export function updateProjectBranchMatcherFromJSON(jsonString) {
    return safeParse(jsonString, (x) => UpdateProjectBranchMatcher$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'UpdateProjectBranchMatcher' from JSON`);
}
/** @internal */
export const UpdateProjectVerification$inboundSchema = z.object({
    type: z.string(),
    domain: z.string(),
    value: z.string(),
    reason: z.string(),
});
/** @internal */
export const UpdateProjectVerification$outboundSchema = z.object({
    type: z.string(),
    domain: z.string(),
    value: z.string(),
    reason: z.string(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UpdateProjectVerification$;
(function (UpdateProjectVerification$) {
    /** @deprecated use `UpdateProjectVerification$inboundSchema` instead. */
    UpdateProjectVerification$.inboundSchema = UpdateProjectVerification$inboundSchema;
    /** @deprecated use `UpdateProjectVerification$outboundSchema` instead. */
    UpdateProjectVerification$.outboundSchema = UpdateProjectVerification$outboundSchema;
})(UpdateProjectVerification$ || (UpdateProjectVerification$ = {}));
export function updateProjectVerificationToJSON(updateProjectVerification) {
    return JSON.stringify(UpdateProjectVerification$outboundSchema.parse(updateProjectVerification));
}
export function updateProjectVerificationFromJSON(jsonString) {
    return safeParse(jsonString, (x) => UpdateProjectVerification$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'UpdateProjectVerification' from JSON`);
}
/** @internal */
export const UpdateProjectDomains$inboundSchema = z.object({
    name: z.string(),
    apexName: z.string(),
    projectId: z.string(),
    redirect: z.nullable(z.string()).optional(),
    redirectStatusCode: z.nullable(z.number()).optional(),
    gitBranch: z.nullable(z.string()).optional(),
    customEnvironmentId: z.nullable(z.string()).optional(),
    updatedAt: z.number().optional(),
    createdAt: z.number().optional(),
    verified: z.boolean(),
    verification: z.array(z.lazy(() => UpdateProjectVerification$inboundSchema))
        .optional(),
});
/** @internal */
export const UpdateProjectDomains$outboundSchema = z.object({
    name: z.string(),
    apexName: z.string(),
    projectId: z.string(),
    redirect: z.nullable(z.string()).optional(),
    redirectStatusCode: z.nullable(z.number()).optional(),
    gitBranch: z.nullable(z.string()).optional(),
    customEnvironmentId: z.nullable(z.string()).optional(),
    updatedAt: z.number().optional(),
    createdAt: z.number().optional(),
    verified: z.boolean(),
    verification: z.array(z.lazy(() => UpdateProjectVerification$outboundSchema))
        .optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UpdateProjectDomains$;
(function (UpdateProjectDomains$) {
    /** @deprecated use `UpdateProjectDomains$inboundSchema` instead. */
    UpdateProjectDomains$.inboundSchema = UpdateProjectDomains$inboundSchema;
    /** @deprecated use `UpdateProjectDomains$outboundSchema` instead. */
    UpdateProjectDomains$.outboundSchema = UpdateProjectDomains$outboundSchema;
})(UpdateProjectDomains$ || (UpdateProjectDomains$ = {}));
export function updateProjectDomainsToJSON(updateProjectDomains) {
    return JSON.stringify(UpdateProjectDomains$outboundSchema.parse(updateProjectDomains));
}
export function updateProjectDomainsFromJSON(jsonString) {
    return safeParse(jsonString, (x) => UpdateProjectDomains$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'UpdateProjectDomains' from JSON`);
}
/** @internal */
export const UpdateProjectCustomEnvironments$inboundSchema = z.object({
    id: z.string(),
    slug: z.string(),
    type: UpdateProjectProjectsType$inboundSchema,
    description: z.string().optional(),
    branchMatcher: z.lazy(() => UpdateProjectBranchMatcher$inboundSchema)
        .optional(),
    domains: z.array(z.lazy(() => UpdateProjectDomains$inboundSchema)).optional(),
    currentDeploymentAliases: z.array(z.string()).optional(),
    createdAt: z.number(),
    updatedAt: z.number(),
});
/** @internal */
export const UpdateProjectCustomEnvironments$outboundSchema = z.object({
    id: z.string(),
    slug: z.string(),
    type: UpdateProjectProjectsType$outboundSchema,
    description: z.string().optional(),
    branchMatcher: z.lazy(() => UpdateProjectBranchMatcher$outboundSchema)
        .optional(),
    domains: z.array(z.lazy(() => UpdateProjectDomains$outboundSchema))
        .optional(),
    currentDeploymentAliases: z.array(z.string()).optional(),
    createdAt: z.number(),
    updatedAt: z.number(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UpdateProjectCustomEnvironments$;
(function (UpdateProjectCustomEnvironments$) {
    /** @deprecated use `UpdateProjectCustomEnvironments$inboundSchema` instead. */
    UpdateProjectCustomEnvironments$.inboundSchema = UpdateProjectCustomEnvironments$inboundSchema;
    /** @deprecated use `UpdateProjectCustomEnvironments$outboundSchema` instead. */
    UpdateProjectCustomEnvironments$.outboundSchema = UpdateProjectCustomEnvironments$outboundSchema;
})(UpdateProjectCustomEnvironments$ || (UpdateProjectCustomEnvironments$ = {}));
export function updateProjectCustomEnvironmentsToJSON(updateProjectCustomEnvironments) {
    return JSON.stringify(UpdateProjectCustomEnvironments$outboundSchema.parse(updateProjectCustomEnvironments));
}
export function updateProjectCustomEnvironmentsFromJSON(jsonString) {
    return safeParse(jsonString, (x) => UpdateProjectCustomEnvironments$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'UpdateProjectCustomEnvironments' from JSON`);
}
/** @internal */
export const UpdateProjectProjectsFramework$inboundSchema = z.nativeEnum(UpdateProjectProjectsFramework);
/** @internal */
export const UpdateProjectProjectsFramework$outboundSchema = UpdateProjectProjectsFramework$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UpdateProjectProjectsFramework$;
(function (UpdateProjectProjectsFramework$) {
    /** @deprecated use `UpdateProjectProjectsFramework$inboundSchema` instead. */
    UpdateProjectProjectsFramework$.inboundSchema = UpdateProjectProjectsFramework$inboundSchema;
    /** @deprecated use `UpdateProjectProjectsFramework$outboundSchema` instead. */
    UpdateProjectProjectsFramework$.outboundSchema = UpdateProjectProjectsFramework$outboundSchema;
})(UpdateProjectProjectsFramework$ || (UpdateProjectProjectsFramework$ = {}));
/** @internal */
export const UpdateProjectIpBuckets$inboundSchema = z.object({
    bucket: z.string(),
    supportUntil: z.number().optional(),
});
/** @internal */
export const UpdateProjectIpBuckets$outboundSchema = z.object({
    bucket: z.string(),
    supportUntil: z.number().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UpdateProjectIpBuckets$;
(function (UpdateProjectIpBuckets$) {
    /** @deprecated use `UpdateProjectIpBuckets$inboundSchema` instead. */
    UpdateProjectIpBuckets$.inboundSchema = UpdateProjectIpBuckets$inboundSchema;
    /** @deprecated use `UpdateProjectIpBuckets$outboundSchema` instead. */
    UpdateProjectIpBuckets$.outboundSchema = UpdateProjectIpBuckets$outboundSchema;
})(UpdateProjectIpBuckets$ || (UpdateProjectIpBuckets$ = {}));
export function updateProjectIpBucketsToJSON(updateProjectIpBuckets) {
    return JSON.stringify(UpdateProjectIpBuckets$outboundSchema.parse(updateProjectIpBuckets));
}
export function updateProjectIpBucketsFromJSON(jsonString) {
    return safeParse(jsonString, (x) => UpdateProjectIpBuckets$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'UpdateProjectIpBuckets' from JSON`);
}
/** @internal */
export const UpdateProjectAliasAssigned$inboundSchema = z.union([z.number(), z.boolean()]);
/** @internal */
export const UpdateProjectAliasAssigned$outboundSchema = z.union([z.number(), z.boolean()]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UpdateProjectAliasAssigned$;
(function (UpdateProjectAliasAssigned$) {
    /** @deprecated use `UpdateProjectAliasAssigned$inboundSchema` instead. */
    UpdateProjectAliasAssigned$.inboundSchema = UpdateProjectAliasAssigned$inboundSchema;
    /** @deprecated use `UpdateProjectAliasAssigned$outboundSchema` instead. */
    UpdateProjectAliasAssigned$.outboundSchema = UpdateProjectAliasAssigned$outboundSchema;
})(UpdateProjectAliasAssigned$ || (UpdateProjectAliasAssigned$ = {}));
export function updateProjectAliasAssignedToJSON(updateProjectAliasAssigned) {
    return JSON.stringify(UpdateProjectAliasAssigned$outboundSchema.parse(updateProjectAliasAssigned));
}
export function updateProjectAliasAssignedFromJSON(jsonString) {
    return safeParse(jsonString, (x) => UpdateProjectAliasAssigned$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'UpdateProjectAliasAssigned' from JSON`);
}
/** @internal */
export const UpdateProjectAliasError$inboundSchema = z.object({
    code: z.string(),
    message: z.string(),
});
/** @internal */
export const UpdateProjectAliasError$outboundSchema = z.object({
    code: z.string(),
    message: z.string(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UpdateProjectAliasError$;
(function (UpdateProjectAliasError$) {
    /** @deprecated use `UpdateProjectAliasError$inboundSchema` instead. */
    UpdateProjectAliasError$.inboundSchema = UpdateProjectAliasError$inboundSchema;
    /** @deprecated use `UpdateProjectAliasError$outboundSchema` instead. */
    UpdateProjectAliasError$.outboundSchema = UpdateProjectAliasError$outboundSchema;
})(UpdateProjectAliasError$ || (UpdateProjectAliasError$ = {}));
export function updateProjectAliasErrorToJSON(updateProjectAliasError) {
    return JSON.stringify(UpdateProjectAliasError$outboundSchema.parse(updateProjectAliasError));
}
export function updateProjectAliasErrorFromJSON(jsonString) {
    return safeParse(jsonString, (x) => UpdateProjectAliasError$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'UpdateProjectAliasError' from JSON`);
}
/** @internal */
export const UpdateProjectProjectsResponse200ApplicationJSONResponseBodyLatestDeploymentsType$inboundSchema = z.nativeEnum(UpdateProjectProjectsResponse200ApplicationJSONResponseBodyLatestDeploymentsType);
/** @internal */
export const UpdateProjectProjectsResponse200ApplicationJSONResponseBodyLatestDeploymentsType$outboundSchema = UpdateProjectProjectsResponse200ApplicationJSONResponseBodyLatestDeploymentsType$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UpdateProjectProjectsResponse200ApplicationJSONResponseBodyLatestDeploymentsType$;
(function (UpdateProjectProjectsResponse200ApplicationJSONResponseBodyLatestDeploymentsType$) {
    /** @deprecated use `UpdateProjectProjectsResponse200ApplicationJSONResponseBodyLatestDeploymentsType$inboundSchema` instead. */
    UpdateProjectProjectsResponse200ApplicationJSONResponseBodyLatestDeploymentsType$.inboundSchema = UpdateProjectProjectsResponse200ApplicationJSONResponseBodyLatestDeploymentsType$inboundSchema;
    /** @deprecated use `UpdateProjectProjectsResponse200ApplicationJSONResponseBodyLatestDeploymentsType$outboundSchema` instead. */
    UpdateProjectProjectsResponse200ApplicationJSONResponseBodyLatestDeploymentsType$.outboundSchema = UpdateProjectProjectsResponse200ApplicationJSONResponseBodyLatestDeploymentsType$outboundSchema;
})(UpdateProjectProjectsResponse200ApplicationJSONResponseBodyLatestDeploymentsType$ || (UpdateProjectProjectsResponse200ApplicationJSONResponseBodyLatestDeploymentsType$ = {}));
/** @internal */
export const UpdateProjectProjectsBranchMatcher$inboundSchema = z.object({
    type: UpdateProjectProjectsResponse200ApplicationJSONResponseBodyLatestDeploymentsType$inboundSchema,
    pattern: z.string(),
});
/** @internal */
export const UpdateProjectProjectsBranchMatcher$outboundSchema = z.object({
    type: UpdateProjectProjectsResponse200ApplicationJSONResponseBodyLatestDeploymentsType$outboundSchema,
    pattern: z.string(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UpdateProjectProjectsBranchMatcher$;
(function (UpdateProjectProjectsBranchMatcher$) {
    /** @deprecated use `UpdateProjectProjectsBranchMatcher$inboundSchema` instead. */
    UpdateProjectProjectsBranchMatcher$.inboundSchema = UpdateProjectProjectsBranchMatcher$inboundSchema;
    /** @deprecated use `UpdateProjectProjectsBranchMatcher$outboundSchema` instead. */
    UpdateProjectProjectsBranchMatcher$.outboundSchema = UpdateProjectProjectsBranchMatcher$outboundSchema;
})(UpdateProjectProjectsBranchMatcher$ || (UpdateProjectProjectsBranchMatcher$ = {}));
export function updateProjectProjectsBranchMatcherToJSON(updateProjectProjectsBranchMatcher) {
    return JSON.stringify(UpdateProjectProjectsBranchMatcher$outboundSchema.parse(updateProjectProjectsBranchMatcher));
}
export function updateProjectProjectsBranchMatcherFromJSON(jsonString) {
    return safeParse(jsonString, (x) => UpdateProjectProjectsBranchMatcher$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'UpdateProjectProjectsBranchMatcher' from JSON`);
}
/** @internal */
export const UpdateProjectBuilds$inboundSchema = z.object({
    use: z.string(),
    src: z.string().optional(),
    dest: z.string().optional(),
});
/** @internal */
export const UpdateProjectBuilds$outboundSchema = z.object({
    use: z.string(),
    src: z.string().optional(),
    dest: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UpdateProjectBuilds$;
(function (UpdateProjectBuilds$) {
    /** @deprecated use `UpdateProjectBuilds$inboundSchema` instead. */
    UpdateProjectBuilds$.inboundSchema = UpdateProjectBuilds$inboundSchema;
    /** @deprecated use `UpdateProjectBuilds$outboundSchema` instead. */
    UpdateProjectBuilds$.outboundSchema = UpdateProjectBuilds$outboundSchema;
})(UpdateProjectBuilds$ || (UpdateProjectBuilds$ = {}));
export function updateProjectBuildsToJSON(updateProjectBuilds) {
    return JSON.stringify(UpdateProjectBuilds$outboundSchema.parse(updateProjectBuilds));
}
export function updateProjectBuildsFromJSON(jsonString) {
    return safeParse(jsonString, (x) => UpdateProjectBuilds$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'UpdateProjectBuilds' from JSON`);
}
/** @internal */
export const UpdateProjectChecksConclusion$inboundSchema = z.nativeEnum(UpdateProjectChecksConclusion);
/** @internal */
export const UpdateProjectChecksConclusion$outboundSchema = UpdateProjectChecksConclusion$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UpdateProjectChecksConclusion$;
(function (UpdateProjectChecksConclusion$) {
    /** @deprecated use `UpdateProjectChecksConclusion$inboundSchema` instead. */
    UpdateProjectChecksConclusion$.inboundSchema = UpdateProjectChecksConclusion$inboundSchema;
    /** @deprecated use `UpdateProjectChecksConclusion$outboundSchema` instead. */
    UpdateProjectChecksConclusion$.outboundSchema = UpdateProjectChecksConclusion$outboundSchema;
})(UpdateProjectChecksConclusion$ || (UpdateProjectChecksConclusion$ = {}));
/** @internal */
export const UpdateProjectChecksState$inboundSchema = z.nativeEnum(UpdateProjectChecksState);
/** @internal */
export const UpdateProjectChecksState$outboundSchema = UpdateProjectChecksState$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UpdateProjectChecksState$;
(function (UpdateProjectChecksState$) {
    /** @deprecated use `UpdateProjectChecksState$inboundSchema` instead. */
    UpdateProjectChecksState$.inboundSchema = UpdateProjectChecksState$inboundSchema;
    /** @deprecated use `UpdateProjectChecksState$outboundSchema` instead. */
    UpdateProjectChecksState$.outboundSchema = UpdateProjectChecksState$outboundSchema;
})(UpdateProjectChecksState$ || (UpdateProjectChecksState$ = {}));
/** @internal */
export const UpdateProjectCreator$inboundSchema = z.object({
    email: z.string(),
    githubLogin: z.string().optional(),
    gitlabLogin: z.string().optional(),
    uid: z.string(),
    username: z.string(),
});
/** @internal */
export const UpdateProjectCreator$outboundSchema = z.object({
    email: z.string(),
    githubLogin: z.string().optional(),
    gitlabLogin: z.string().optional(),
    uid: z.string(),
    username: z.string(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UpdateProjectCreator$;
(function (UpdateProjectCreator$) {
    /** @deprecated use `UpdateProjectCreator$inboundSchema` instead. */
    UpdateProjectCreator$.inboundSchema = UpdateProjectCreator$inboundSchema;
    /** @deprecated use `UpdateProjectCreator$outboundSchema` instead. */
    UpdateProjectCreator$.outboundSchema = UpdateProjectCreator$outboundSchema;
})(UpdateProjectCreator$ || (UpdateProjectCreator$ = {}));
export function updateProjectCreatorToJSON(updateProjectCreator) {
    return JSON.stringify(UpdateProjectCreator$outboundSchema.parse(updateProjectCreator));
}
export function updateProjectCreatorFromJSON(jsonString) {
    return safeParse(jsonString, (x) => UpdateProjectCreator$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'UpdateProjectCreator' from JSON`);
}
/** @internal */
export const UpdateProjectOidcTokenClaims$inboundSchema = z.object({
    iss: z.string(),
    sub: z.string(),
    scope: z.string(),
    aud: z.string(),
    owner: z.string(),
    owner_id: z.string(),
    project: z.string(),
    project_id: z.string(),
    environment: z.string(),
}).transform((v) => {
    return remap$(v, {
        "owner_id": "ownerId",
        "project_id": "projectId",
    });
});
/** @internal */
export const UpdateProjectOidcTokenClaims$outboundSchema = z.object({
    iss: z.string(),
    sub: z.string(),
    scope: z.string(),
    aud: z.string(),
    owner: z.string(),
    ownerId: z.string(),
    project: z.string(),
    projectId: z.string(),
    environment: z.string(),
}).transform((v) => {
    return remap$(v, {
        ownerId: "owner_id",
        projectId: "project_id",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UpdateProjectOidcTokenClaims$;
(function (UpdateProjectOidcTokenClaims$) {
    /** @deprecated use `UpdateProjectOidcTokenClaims$inboundSchema` instead. */
    UpdateProjectOidcTokenClaims$.inboundSchema = UpdateProjectOidcTokenClaims$inboundSchema;
    /** @deprecated use `UpdateProjectOidcTokenClaims$outboundSchema` instead. */
    UpdateProjectOidcTokenClaims$.outboundSchema = UpdateProjectOidcTokenClaims$outboundSchema;
})(UpdateProjectOidcTokenClaims$ || (UpdateProjectOidcTokenClaims$ = {}));
export function updateProjectOidcTokenClaimsToJSON(updateProjectOidcTokenClaims) {
    return JSON.stringify(UpdateProjectOidcTokenClaims$outboundSchema.parse(updateProjectOidcTokenClaims));
}
export function updateProjectOidcTokenClaimsFromJSON(jsonString) {
    return safeParse(jsonString, (x) => UpdateProjectOidcTokenClaims$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'UpdateProjectOidcTokenClaims' from JSON`);
}
/** @internal */
export const UpdateProjectPlan$inboundSchema = z.nativeEnum(UpdateProjectPlan);
/** @internal */
export const UpdateProjectPlan$outboundSchema = UpdateProjectPlan$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UpdateProjectPlan$;
(function (UpdateProjectPlan$) {
    /** @deprecated use `UpdateProjectPlan$inboundSchema` instead. */
    UpdateProjectPlan$.inboundSchema = UpdateProjectPlan$inboundSchema;
    /** @deprecated use `UpdateProjectPlan$outboundSchema` instead. */
    UpdateProjectPlan$.outboundSchema = UpdateProjectPlan$outboundSchema;
})(UpdateProjectPlan$ || (UpdateProjectPlan$ = {}));
/** @internal */
export const UpdateProjectReadyState$inboundSchema = z.nativeEnum(UpdateProjectReadyState);
/** @internal */
export const UpdateProjectReadyState$outboundSchema = UpdateProjectReadyState$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UpdateProjectReadyState$;
(function (UpdateProjectReadyState$) {
    /** @deprecated use `UpdateProjectReadyState$inboundSchema` instead. */
    UpdateProjectReadyState$.inboundSchema = UpdateProjectReadyState$inboundSchema;
    /** @deprecated use `UpdateProjectReadyState$outboundSchema` instead. */
    UpdateProjectReadyState$.outboundSchema = UpdateProjectReadyState$outboundSchema;
})(UpdateProjectReadyState$ || (UpdateProjectReadyState$ = {}));
/** @internal */
export const UpdateProjectReadySubstate$inboundSchema = z.nativeEnum(UpdateProjectReadySubstate);
/** @internal */
export const UpdateProjectReadySubstate$outboundSchema = UpdateProjectReadySubstate$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UpdateProjectReadySubstate$;
(function (UpdateProjectReadySubstate$) {
    /** @deprecated use `UpdateProjectReadySubstate$inboundSchema` instead. */
    UpdateProjectReadySubstate$.inboundSchema = UpdateProjectReadySubstate$inboundSchema;
    /** @deprecated use `UpdateProjectReadySubstate$outboundSchema` instead. */
    UpdateProjectReadySubstate$.outboundSchema = UpdateProjectReadySubstate$outboundSchema;
})(UpdateProjectReadySubstate$ || (UpdateProjectReadySubstate$ = {}));
/** @internal */
export const UpdateProjectProjectsResponseType$inboundSchema = z.nativeEnum(UpdateProjectProjectsResponseType);
/** @internal */
export const UpdateProjectProjectsResponseType$outboundSchema = UpdateProjectProjectsResponseType$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UpdateProjectProjectsResponseType$;
(function (UpdateProjectProjectsResponseType$) {
    /** @deprecated use `UpdateProjectProjectsResponseType$inboundSchema` instead. */
    UpdateProjectProjectsResponseType$.inboundSchema = UpdateProjectProjectsResponseType$inboundSchema;
    /** @deprecated use `UpdateProjectProjectsResponseType$outboundSchema` instead. */
    UpdateProjectProjectsResponseType$.outboundSchema = UpdateProjectProjectsResponseType$outboundSchema;
})(UpdateProjectProjectsResponseType$ || (UpdateProjectProjectsResponseType$ = {}));
/** @internal */
export const UpdateProjectLatestDeployments$inboundSchema = z.object({
    id: z.string(),
    alias: z.array(z.string()).optional(),
    aliasAssigned: z.nullable(z.union([z.number(), z.boolean()])).optional(),
    aliasError: z.nullable(z.lazy(() => UpdateProjectAliasError$inboundSchema))
        .optional(),
    aliasFinal: z.nullable(z.string()).optional(),
    automaticAliases: z.array(z.string()).optional(),
    branchMatcher: z.lazy(() => UpdateProjectProjectsBranchMatcher$inboundSchema)
        .optional(),
    buildingAt: z.number().optional(),
    builds: z.array(z.lazy(() => UpdateProjectBuilds$inboundSchema)).optional(),
    checksConclusion: UpdateProjectChecksConclusion$inboundSchema.optional(),
    checksState: UpdateProjectChecksState$inboundSchema.optional(),
    connectBuildsEnabled: z.boolean().optional(),
    connectConfigurationId: z.string().optional(),
    createdAt: z.number(),
    createdIn: z.string(),
    creator: z.nullable(z.lazy(() => UpdateProjectCreator$inboundSchema)),
    deletedAt: z.number().optional(),
    deploymentHostname: z.string(),
    forced: z.boolean().optional(),
    name: z.string(),
    meta: z.record(z.string()).optional(),
    monorepoManager: z.nullable(z.string()).optional(),
    oidcTokenClaims: z.lazy(() => UpdateProjectOidcTokenClaims$inboundSchema)
        .optional(),
    plan: UpdateProjectPlan$inboundSchema,
    previewCommentsEnabled: z.boolean().optional(),
    private: z.boolean(),
    readyAt: z.number().optional(),
    readyState: UpdateProjectReadyState$inboundSchema,
    readySubstate: UpdateProjectReadySubstate$inboundSchema.optional(),
    requestedAt: z.number().optional(),
    target: z.nullable(z.string()).optional(),
    teamId: z.nullable(z.string()).optional(),
    type: UpdateProjectProjectsResponseType$inboundSchema,
    url: z.string(),
    userId: z.string(),
    withCache: z.boolean().optional(),
});
/** @internal */
export const UpdateProjectLatestDeployments$outboundSchema = z.object({
    id: z.string(),
    alias: z.array(z.string()).optional(),
    aliasAssigned: z.nullable(z.union([z.number(), z.boolean()])).optional(),
    aliasError: z.nullable(z.lazy(() => UpdateProjectAliasError$outboundSchema))
        .optional(),
    aliasFinal: z.nullable(z.string()).optional(),
    automaticAliases: z.array(z.string()).optional(),
    branchMatcher: z.lazy(() => UpdateProjectProjectsBranchMatcher$outboundSchema)
        .optional(),
    buildingAt: z.number().optional(),
    builds: z.array(z.lazy(() => UpdateProjectBuilds$outboundSchema)).optional(),
    checksConclusion: UpdateProjectChecksConclusion$outboundSchema.optional(),
    checksState: UpdateProjectChecksState$outboundSchema.optional(),
    connectBuildsEnabled: z.boolean().optional(),
    connectConfigurationId: z.string().optional(),
    createdAt: z.number(),
    createdIn: z.string(),
    creator: z.nullable(z.lazy(() => UpdateProjectCreator$outboundSchema)),
    deletedAt: z.number().optional(),
    deploymentHostname: z.string(),
    forced: z.boolean().optional(),
    name: z.string(),
    meta: z.record(z.string()).optional(),
    monorepoManager: z.nullable(z.string()).optional(),
    oidcTokenClaims: z.lazy(() => UpdateProjectOidcTokenClaims$outboundSchema)
        .optional(),
    plan: UpdateProjectPlan$outboundSchema,
    previewCommentsEnabled: z.boolean().optional(),
    private: z.boolean(),
    readyAt: z.number().optional(),
    readyState: UpdateProjectReadyState$outboundSchema,
    readySubstate: UpdateProjectReadySubstate$outboundSchema.optional(),
    requestedAt: z.number().optional(),
    target: z.nullable(z.string()).optional(),
    teamId: z.nullable(z.string()).optional(),
    type: UpdateProjectProjectsResponseType$outboundSchema,
    url: z.string(),
    userId: z.string(),
    withCache: z.boolean().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UpdateProjectLatestDeployments$;
(function (UpdateProjectLatestDeployments$) {
    /** @deprecated use `UpdateProjectLatestDeployments$inboundSchema` instead. */
    UpdateProjectLatestDeployments$.inboundSchema = UpdateProjectLatestDeployments$inboundSchema;
    /** @deprecated use `UpdateProjectLatestDeployments$outboundSchema` instead. */
    UpdateProjectLatestDeployments$.outboundSchema = UpdateProjectLatestDeployments$outboundSchema;
})(UpdateProjectLatestDeployments$ || (UpdateProjectLatestDeployments$ = {}));
export function updateProjectLatestDeploymentsToJSON(updateProjectLatestDeployments) {
    return JSON.stringify(UpdateProjectLatestDeployments$outboundSchema.parse(updateProjectLatestDeployments));
}
export function updateProjectLatestDeploymentsFromJSON(jsonString) {
    return safeParse(jsonString, (x) => UpdateProjectLatestDeployments$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'UpdateProjectLatestDeployments' from JSON`);
}
/** @internal */
export const UpdateProjectLinkProjectsResponse200Type$inboundSchema = z
    .nativeEnum(UpdateProjectLinkProjectsResponse200Type);
/** @internal */
export const UpdateProjectLinkProjectsResponse200Type$outboundSchema = UpdateProjectLinkProjectsResponse200Type$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UpdateProjectLinkProjectsResponse200Type$;
(function (UpdateProjectLinkProjectsResponse200Type$) {
    /** @deprecated use `UpdateProjectLinkProjectsResponse200Type$inboundSchema` instead. */
    UpdateProjectLinkProjectsResponse200Type$.inboundSchema = UpdateProjectLinkProjectsResponse200Type$inboundSchema;
    /** @deprecated use `UpdateProjectLinkProjectsResponse200Type$outboundSchema` instead. */
    UpdateProjectLinkProjectsResponse200Type$.outboundSchema = UpdateProjectLinkProjectsResponse200Type$outboundSchema;
})(UpdateProjectLinkProjectsResponse200Type$ || (UpdateProjectLinkProjectsResponse200Type$ = {}));
/** @internal */
export const UpdateProjectLinkProjectsResponse200DeployHooks$inboundSchema = z.object({
    createdAt: z.number().optional(),
    id: z.string(),
    name: z.string(),
    ref: z.string(),
    url: z.string(),
});
/** @internal */
export const UpdateProjectLinkProjectsResponse200DeployHooks$outboundSchema = z.object({
    createdAt: z.number().optional(),
    id: z.string(),
    name: z.string(),
    ref: z.string(),
    url: z.string(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UpdateProjectLinkProjectsResponse200DeployHooks$;
(function (UpdateProjectLinkProjectsResponse200DeployHooks$) {
    /** @deprecated use `UpdateProjectLinkProjectsResponse200DeployHooks$inboundSchema` instead. */
    UpdateProjectLinkProjectsResponse200DeployHooks$.inboundSchema = UpdateProjectLinkProjectsResponse200DeployHooks$inboundSchema;
    /** @deprecated use `UpdateProjectLinkProjectsResponse200DeployHooks$outboundSchema` instead. */
    UpdateProjectLinkProjectsResponse200DeployHooks$.outboundSchema = UpdateProjectLinkProjectsResponse200DeployHooks$outboundSchema;
})(UpdateProjectLinkProjectsResponse200DeployHooks$ || (UpdateProjectLinkProjectsResponse200DeployHooks$ = {}));
export function updateProjectLinkProjectsResponse200DeployHooksToJSON(updateProjectLinkProjectsResponse200DeployHooks) {
    return JSON.stringify(UpdateProjectLinkProjectsResponse200DeployHooks$outboundSchema.parse(updateProjectLinkProjectsResponse200DeployHooks));
}
export function updateProjectLinkProjectsResponse200DeployHooksFromJSON(jsonString) {
    return safeParse(jsonString, (x) => UpdateProjectLinkProjectsResponse200DeployHooks$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'UpdateProjectLinkProjectsResponse200DeployHooks' from JSON`);
}
/** @internal */
export const UpdateProjectLink4$inboundSchema = z.object({
    org: z.string().optional(),
    repoOwnerId: z.number().optional(),
    repo: z.string().optional(),
    repoId: z.number().optional(),
    type: UpdateProjectLinkProjectsResponse200Type$inboundSchema.optional(),
    host: z.string().optional(),
    createdAt: z.number().optional(),
    deployHooks: z.array(z.lazy(() => UpdateProjectLinkProjectsResponse200DeployHooks$inboundSchema)),
    gitCredentialId: z.string().optional(),
    updatedAt: z.number().optional(),
    sourceless: z.boolean().optional(),
    productionBranch: z.string().optional(),
});
/** @internal */
export const UpdateProjectLink4$outboundSchema = z.object({
    org: z.string().optional(),
    repoOwnerId: z.number().optional(),
    repo: z.string().optional(),
    repoId: z.number().optional(),
    type: UpdateProjectLinkProjectsResponse200Type$outboundSchema.optional(),
    host: z.string().optional(),
    createdAt: z.number().optional(),
    deployHooks: z.array(z.lazy(() => UpdateProjectLinkProjectsResponse200DeployHooks$outboundSchema)),
    gitCredentialId: z.string().optional(),
    updatedAt: z.number().optional(),
    sourceless: z.boolean().optional(),
    productionBranch: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UpdateProjectLink4$;
(function (UpdateProjectLink4$) {
    /** @deprecated use `UpdateProjectLink4$inboundSchema` instead. */
    UpdateProjectLink4$.inboundSchema = UpdateProjectLink4$inboundSchema;
    /** @deprecated use `UpdateProjectLink4$outboundSchema` instead. */
    UpdateProjectLink4$.outboundSchema = UpdateProjectLink4$outboundSchema;
})(UpdateProjectLink4$ || (UpdateProjectLink4$ = {}));
export function updateProjectLink4ToJSON(updateProjectLink4) {
    return JSON.stringify(UpdateProjectLink4$outboundSchema.parse(updateProjectLink4));
}
export function updateProjectLink4FromJSON(jsonString) {
    return safeParse(jsonString, (x) => UpdateProjectLink4$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'UpdateProjectLink4' from JSON`);
}
/** @internal */
export const UpdateProjectLinkProjectsResponseType$inboundSchema = z.nativeEnum(UpdateProjectLinkProjectsResponseType);
/** @internal */
export const UpdateProjectLinkProjectsResponseType$outboundSchema = UpdateProjectLinkProjectsResponseType$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UpdateProjectLinkProjectsResponseType$;
(function (UpdateProjectLinkProjectsResponseType$) {
    /** @deprecated use `UpdateProjectLinkProjectsResponseType$inboundSchema` instead. */
    UpdateProjectLinkProjectsResponseType$.inboundSchema = UpdateProjectLinkProjectsResponseType$inboundSchema;
    /** @deprecated use `UpdateProjectLinkProjectsResponseType$outboundSchema` instead. */
    UpdateProjectLinkProjectsResponseType$.outboundSchema = UpdateProjectLinkProjectsResponseType$outboundSchema;
})(UpdateProjectLinkProjectsResponseType$ || (UpdateProjectLinkProjectsResponseType$ = {}));
/** @internal */
export const UpdateProjectLinkProjectsResponseDeployHooks$inboundSchema = z.object({
    createdAt: z.number().optional(),
    id: z.string(),
    name: z.string(),
    ref: z.string(),
    url: z.string(),
});
/** @internal */
export const UpdateProjectLinkProjectsResponseDeployHooks$outboundSchema = z.object({
    createdAt: z.number().optional(),
    id: z.string(),
    name: z.string(),
    ref: z.string(),
    url: z.string(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UpdateProjectLinkProjectsResponseDeployHooks$;
(function (UpdateProjectLinkProjectsResponseDeployHooks$) {
    /** @deprecated use `UpdateProjectLinkProjectsResponseDeployHooks$inboundSchema` instead. */
    UpdateProjectLinkProjectsResponseDeployHooks$.inboundSchema = UpdateProjectLinkProjectsResponseDeployHooks$inboundSchema;
    /** @deprecated use `UpdateProjectLinkProjectsResponseDeployHooks$outboundSchema` instead. */
    UpdateProjectLinkProjectsResponseDeployHooks$.outboundSchema = UpdateProjectLinkProjectsResponseDeployHooks$outboundSchema;
})(UpdateProjectLinkProjectsResponseDeployHooks$ || (UpdateProjectLinkProjectsResponseDeployHooks$ = {}));
export function updateProjectLinkProjectsResponseDeployHooksToJSON(updateProjectLinkProjectsResponseDeployHooks) {
    return JSON.stringify(UpdateProjectLinkProjectsResponseDeployHooks$outboundSchema.parse(updateProjectLinkProjectsResponseDeployHooks));
}
export function updateProjectLinkProjectsResponseDeployHooksFromJSON(jsonString) {
    return safeParse(jsonString, (x) => UpdateProjectLinkProjectsResponseDeployHooks$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'UpdateProjectLinkProjectsResponseDeployHooks' from JSON`);
}
/** @internal */
export const UpdateProjectLink3$inboundSchema = z.object({
    name: z.string().optional(),
    slug: z.string().optional(),
    owner: z.string().optional(),
    type: UpdateProjectLinkProjectsResponseType$inboundSchema.optional(),
    uuid: z.string().optional(),
    workspaceUuid: z.string().optional(),
    createdAt: z.number().optional(),
    deployHooks: z.array(z.lazy(() => UpdateProjectLinkProjectsResponseDeployHooks$inboundSchema)),
    gitCredentialId: z.string().optional(),
    updatedAt: z.number().optional(),
    sourceless: z.boolean().optional(),
    productionBranch: z.string().optional(),
});
/** @internal */
export const UpdateProjectLink3$outboundSchema = z.object({
    name: z.string().optional(),
    slug: z.string().optional(),
    owner: z.string().optional(),
    type: UpdateProjectLinkProjectsResponseType$outboundSchema.optional(),
    uuid: z.string().optional(),
    workspaceUuid: z.string().optional(),
    createdAt: z.number().optional(),
    deployHooks: z.array(z.lazy(() => UpdateProjectLinkProjectsResponseDeployHooks$outboundSchema)),
    gitCredentialId: z.string().optional(),
    updatedAt: z.number().optional(),
    sourceless: z.boolean().optional(),
    productionBranch: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UpdateProjectLink3$;
(function (UpdateProjectLink3$) {
    /** @deprecated use `UpdateProjectLink3$inboundSchema` instead. */
    UpdateProjectLink3$.inboundSchema = UpdateProjectLink3$inboundSchema;
    /** @deprecated use `UpdateProjectLink3$outboundSchema` instead. */
    UpdateProjectLink3$.outboundSchema = UpdateProjectLink3$outboundSchema;
})(UpdateProjectLink3$ || (UpdateProjectLink3$ = {}));
export function updateProjectLink3ToJSON(updateProjectLink3) {
    return JSON.stringify(UpdateProjectLink3$outboundSchema.parse(updateProjectLink3));
}
export function updateProjectLink3FromJSON(jsonString) {
    return safeParse(jsonString, (x) => UpdateProjectLink3$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'UpdateProjectLink3' from JSON`);
}
/** @internal */
export const UpdateProjectLinkProjectsType$inboundSchema = z.nativeEnum(UpdateProjectLinkProjectsType);
/** @internal */
export const UpdateProjectLinkProjectsType$outboundSchema = UpdateProjectLinkProjectsType$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UpdateProjectLinkProjectsType$;
(function (UpdateProjectLinkProjectsType$) {
    /** @deprecated use `UpdateProjectLinkProjectsType$inboundSchema` instead. */
    UpdateProjectLinkProjectsType$.inboundSchema = UpdateProjectLinkProjectsType$inboundSchema;
    /** @deprecated use `UpdateProjectLinkProjectsType$outboundSchema` instead. */
    UpdateProjectLinkProjectsType$.outboundSchema = UpdateProjectLinkProjectsType$outboundSchema;
})(UpdateProjectLinkProjectsType$ || (UpdateProjectLinkProjectsType$ = {}));
/** @internal */
export const UpdateProjectLinkProjectsDeployHooks$inboundSchema = z.object({
    createdAt: z.number().optional(),
    id: z.string(),
    name: z.string(),
    ref: z.string(),
    url: z.string(),
});
/** @internal */
export const UpdateProjectLinkProjectsDeployHooks$outboundSchema = z.object({
    createdAt: z.number().optional(),
    id: z.string(),
    name: z.string(),
    ref: z.string(),
    url: z.string(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UpdateProjectLinkProjectsDeployHooks$;
(function (UpdateProjectLinkProjectsDeployHooks$) {
    /** @deprecated use `UpdateProjectLinkProjectsDeployHooks$inboundSchema` instead. */
    UpdateProjectLinkProjectsDeployHooks$.inboundSchema = UpdateProjectLinkProjectsDeployHooks$inboundSchema;
    /** @deprecated use `UpdateProjectLinkProjectsDeployHooks$outboundSchema` instead. */
    UpdateProjectLinkProjectsDeployHooks$.outboundSchema = UpdateProjectLinkProjectsDeployHooks$outboundSchema;
})(UpdateProjectLinkProjectsDeployHooks$ || (UpdateProjectLinkProjectsDeployHooks$ = {}));
export function updateProjectLinkProjectsDeployHooksToJSON(updateProjectLinkProjectsDeployHooks) {
    return JSON.stringify(UpdateProjectLinkProjectsDeployHooks$outboundSchema.parse(updateProjectLinkProjectsDeployHooks));
}
export function updateProjectLinkProjectsDeployHooksFromJSON(jsonString) {
    return safeParse(jsonString, (x) => UpdateProjectLinkProjectsDeployHooks$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'UpdateProjectLinkProjectsDeployHooks' from JSON`);
}
/** @internal */
export const UpdateProjectLink2$inboundSchema = z.object({
    projectId: z.string().optional(),
    projectName: z.string().optional(),
    projectNameWithNamespace: z.string().optional(),
    projectNamespace: z.string().optional(),
    projectOwnerId: z.number().optional(),
    projectUrl: z.string().optional(),
    type: UpdateProjectLinkProjectsType$inboundSchema.optional(),
    createdAt: z.number().optional(),
    deployHooks: z.array(z.lazy(() => UpdateProjectLinkProjectsDeployHooks$inboundSchema)),
    gitCredentialId: z.string().optional(),
    updatedAt: z.number().optional(),
    sourceless: z.boolean().optional(),
    productionBranch: z.string().optional(),
});
/** @internal */
export const UpdateProjectLink2$outboundSchema = z.object({
    projectId: z.string().optional(),
    projectName: z.string().optional(),
    projectNameWithNamespace: z.string().optional(),
    projectNamespace: z.string().optional(),
    projectOwnerId: z.number().optional(),
    projectUrl: z.string().optional(),
    type: UpdateProjectLinkProjectsType$outboundSchema.optional(),
    createdAt: z.number().optional(),
    deployHooks: z.array(z.lazy(() => UpdateProjectLinkProjectsDeployHooks$outboundSchema)),
    gitCredentialId: z.string().optional(),
    updatedAt: z.number().optional(),
    sourceless: z.boolean().optional(),
    productionBranch: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UpdateProjectLink2$;
(function (UpdateProjectLink2$) {
    /** @deprecated use `UpdateProjectLink2$inboundSchema` instead. */
    UpdateProjectLink2$.inboundSchema = UpdateProjectLink2$inboundSchema;
    /** @deprecated use `UpdateProjectLink2$outboundSchema` instead. */
    UpdateProjectLink2$.outboundSchema = UpdateProjectLink2$outboundSchema;
})(UpdateProjectLink2$ || (UpdateProjectLink2$ = {}));
export function updateProjectLink2ToJSON(updateProjectLink2) {
    return JSON.stringify(UpdateProjectLink2$outboundSchema.parse(updateProjectLink2));
}
export function updateProjectLink2FromJSON(jsonString) {
    return safeParse(jsonString, (x) => UpdateProjectLink2$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'UpdateProjectLink2' from JSON`);
}
/** @internal */
export const UpdateProjectLinkType$inboundSchema = z.nativeEnum(UpdateProjectLinkType);
/** @internal */
export const UpdateProjectLinkType$outboundSchema = UpdateProjectLinkType$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UpdateProjectLinkType$;
(function (UpdateProjectLinkType$) {
    /** @deprecated use `UpdateProjectLinkType$inboundSchema` instead. */
    UpdateProjectLinkType$.inboundSchema = UpdateProjectLinkType$inboundSchema;
    /** @deprecated use `UpdateProjectLinkType$outboundSchema` instead. */
    UpdateProjectLinkType$.outboundSchema = UpdateProjectLinkType$outboundSchema;
})(UpdateProjectLinkType$ || (UpdateProjectLinkType$ = {}));
/** @internal */
export const UpdateProjectLinkDeployHooks$inboundSchema = z.object({
    createdAt: z.number().optional(),
    id: z.string(),
    name: z.string(),
    ref: z.string(),
    url: z.string(),
});
/** @internal */
export const UpdateProjectLinkDeployHooks$outboundSchema = z.object({
    createdAt: z.number().optional(),
    id: z.string(),
    name: z.string(),
    ref: z.string(),
    url: z.string(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UpdateProjectLinkDeployHooks$;
(function (UpdateProjectLinkDeployHooks$) {
    /** @deprecated use `UpdateProjectLinkDeployHooks$inboundSchema` instead. */
    UpdateProjectLinkDeployHooks$.inboundSchema = UpdateProjectLinkDeployHooks$inboundSchema;
    /** @deprecated use `UpdateProjectLinkDeployHooks$outboundSchema` instead. */
    UpdateProjectLinkDeployHooks$.outboundSchema = UpdateProjectLinkDeployHooks$outboundSchema;
})(UpdateProjectLinkDeployHooks$ || (UpdateProjectLinkDeployHooks$ = {}));
export function updateProjectLinkDeployHooksToJSON(updateProjectLinkDeployHooks) {
    return JSON.stringify(UpdateProjectLinkDeployHooks$outboundSchema.parse(updateProjectLinkDeployHooks));
}
export function updateProjectLinkDeployHooksFromJSON(jsonString) {
    return safeParse(jsonString, (x) => UpdateProjectLinkDeployHooks$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'UpdateProjectLinkDeployHooks' from JSON`);
}
/** @internal */
export const UpdateProjectLink1$inboundSchema = z.object({
    org: z.string().optional(),
    repoOwnerId: z.number().optional(),
    repo: z.string().optional(),
    repoId: z.number().optional(),
    type: UpdateProjectLinkType$inboundSchema.optional(),
    createdAt: z.number().optional(),
    deployHooks: z.array(z.lazy(() => UpdateProjectLinkDeployHooks$inboundSchema)),
    gitCredentialId: z.string().optional(),
    updatedAt: z.number().optional(),
    sourceless: z.boolean().optional(),
    productionBranch: z.string().optional(),
});
/** @internal */
export const UpdateProjectLink1$outboundSchema = z.object({
    org: z.string().optional(),
    repoOwnerId: z.number().optional(),
    repo: z.string().optional(),
    repoId: z.number().optional(),
    type: UpdateProjectLinkType$outboundSchema.optional(),
    createdAt: z.number().optional(),
    deployHooks: z.array(z.lazy(() => UpdateProjectLinkDeployHooks$outboundSchema)),
    gitCredentialId: z.string().optional(),
    updatedAt: z.number().optional(),
    sourceless: z.boolean().optional(),
    productionBranch: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UpdateProjectLink1$;
(function (UpdateProjectLink1$) {
    /** @deprecated use `UpdateProjectLink1$inboundSchema` instead. */
    UpdateProjectLink1$.inboundSchema = UpdateProjectLink1$inboundSchema;
    /** @deprecated use `UpdateProjectLink1$outboundSchema` instead. */
    UpdateProjectLink1$.outboundSchema = UpdateProjectLink1$outboundSchema;
})(UpdateProjectLink1$ || (UpdateProjectLink1$ = {}));
export function updateProjectLink1ToJSON(updateProjectLink1) {
    return JSON.stringify(UpdateProjectLink1$outboundSchema.parse(updateProjectLink1));
}
export function updateProjectLink1FromJSON(jsonString) {
    return safeParse(jsonString, (x) => UpdateProjectLink1$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'UpdateProjectLink1' from JSON`);
}
/** @internal */
export const UpdateProjectLink$inboundSchema = z.union([
    z.lazy(() => UpdateProjectLink1$inboundSchema),
    z.lazy(() => UpdateProjectLink3$inboundSchema),
    z.lazy(() => UpdateProjectLink4$inboundSchema),
    z.lazy(() => UpdateProjectLink2$inboundSchema),
]);
/** @internal */
export const UpdateProjectLink$outboundSchema = z.union([
    z.lazy(() => UpdateProjectLink1$outboundSchema),
    z.lazy(() => UpdateProjectLink3$outboundSchema),
    z.lazy(() => UpdateProjectLink4$outboundSchema),
    z.lazy(() => UpdateProjectLink2$outboundSchema),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UpdateProjectLink$;
(function (UpdateProjectLink$) {
    /** @deprecated use `UpdateProjectLink$inboundSchema` instead. */
    UpdateProjectLink$.inboundSchema = UpdateProjectLink$inboundSchema;
    /** @deprecated use `UpdateProjectLink$outboundSchema` instead. */
    UpdateProjectLink$.outboundSchema = UpdateProjectLink$outboundSchema;
})(UpdateProjectLink$ || (UpdateProjectLink$ = {}));
export function updateProjectLinkToJSON(updateProjectLink) {
    return JSON.stringify(UpdateProjectLink$outboundSchema.parse(updateProjectLink));
}
export function updateProjectLinkFromJSON(jsonString) {
    return safeParse(jsonString, (x) => UpdateProjectLink$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'UpdateProjectLink' from JSON`);
}
/** @internal */
export const UpdateProjectMicrofrontends2$inboundSchema = z.object({
    updatedAt: z.number(),
    groupIds: z.array(z.any()),
    enabled: z.boolean(),
});
/** @internal */
export const UpdateProjectMicrofrontends2$outboundSchema = z.object({
    updatedAt: z.number(),
    groupIds: z.array(z.any()),
    enabled: z.boolean(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UpdateProjectMicrofrontends2$;
(function (UpdateProjectMicrofrontends2$) {
    /** @deprecated use `UpdateProjectMicrofrontends2$inboundSchema` instead. */
    UpdateProjectMicrofrontends2$.inboundSchema = UpdateProjectMicrofrontends2$inboundSchema;
    /** @deprecated use `UpdateProjectMicrofrontends2$outboundSchema` instead. */
    UpdateProjectMicrofrontends2$.outboundSchema = UpdateProjectMicrofrontends2$outboundSchema;
})(UpdateProjectMicrofrontends2$ || (UpdateProjectMicrofrontends2$ = {}));
export function updateProjectMicrofrontends2ToJSON(updateProjectMicrofrontends2) {
    return JSON.stringify(UpdateProjectMicrofrontends2$outboundSchema.parse(updateProjectMicrofrontends2));
}
export function updateProjectMicrofrontends2FromJSON(jsonString) {
    return safeParse(jsonString, (x) => UpdateProjectMicrofrontends2$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'UpdateProjectMicrofrontends2' from JSON`);
}
/** @internal */
export const UpdateProjectMicrofrontends1$inboundSchema = z.object({
    updatedAt: z.number(),
    groupIds: z.array(z.string()),
    enabled: z.boolean(),
    isDefaultApp: z.boolean().optional(),
    defaultRoute: z.string().optional(),
    routeObservabilityToThisProject: z.boolean().optional(),
});
/** @internal */
export const UpdateProjectMicrofrontends1$outboundSchema = z.object({
    updatedAt: z.number(),
    groupIds: z.array(z.string()),
    enabled: z.boolean(),
    isDefaultApp: z.boolean().optional(),
    defaultRoute: z.string().optional(),
    routeObservabilityToThisProject: z.boolean().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UpdateProjectMicrofrontends1$;
(function (UpdateProjectMicrofrontends1$) {
    /** @deprecated use `UpdateProjectMicrofrontends1$inboundSchema` instead. */
    UpdateProjectMicrofrontends1$.inboundSchema = UpdateProjectMicrofrontends1$inboundSchema;
    /** @deprecated use `UpdateProjectMicrofrontends1$outboundSchema` instead. */
    UpdateProjectMicrofrontends1$.outboundSchema = UpdateProjectMicrofrontends1$outboundSchema;
})(UpdateProjectMicrofrontends1$ || (UpdateProjectMicrofrontends1$ = {}));
export function updateProjectMicrofrontends1ToJSON(updateProjectMicrofrontends1) {
    return JSON.stringify(UpdateProjectMicrofrontends1$outboundSchema.parse(updateProjectMicrofrontends1));
}
export function updateProjectMicrofrontends1FromJSON(jsonString) {
    return safeParse(jsonString, (x) => UpdateProjectMicrofrontends1$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'UpdateProjectMicrofrontends1' from JSON`);
}
/** @internal */
export const UpdateProjectMicrofrontends$inboundSchema = z.union([
    z.lazy(() => UpdateProjectMicrofrontends2$inboundSchema),
    z.lazy(() => UpdateProjectMicrofrontends1$inboundSchema),
]);
/** @internal */
export const UpdateProjectMicrofrontends$outboundSchema = z.union([
    z.lazy(() => UpdateProjectMicrofrontends2$outboundSchema),
    z.lazy(() => UpdateProjectMicrofrontends1$outboundSchema),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UpdateProjectMicrofrontends$;
(function (UpdateProjectMicrofrontends$) {
    /** @deprecated use `UpdateProjectMicrofrontends$inboundSchema` instead. */
    UpdateProjectMicrofrontends$.inboundSchema = UpdateProjectMicrofrontends$inboundSchema;
    /** @deprecated use `UpdateProjectMicrofrontends$outboundSchema` instead. */
    UpdateProjectMicrofrontends$.outboundSchema = UpdateProjectMicrofrontends$outboundSchema;
})(UpdateProjectMicrofrontends$ || (UpdateProjectMicrofrontends$ = {}));
export function updateProjectMicrofrontendsToJSON(updateProjectMicrofrontends) {
    return JSON.stringify(UpdateProjectMicrofrontends$outboundSchema.parse(updateProjectMicrofrontends));
}
export function updateProjectMicrofrontendsFromJSON(jsonString) {
    return safeParse(jsonString, (x) => UpdateProjectMicrofrontends$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'UpdateProjectMicrofrontends' from JSON`);
}
/** @internal */
export const UpdateProjectProjectsNodeVersion$inboundSchema = z.nativeEnum(UpdateProjectProjectsNodeVersion);
/** @internal */
export const UpdateProjectProjectsNodeVersion$outboundSchema = UpdateProjectProjectsNodeVersion$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UpdateProjectProjectsNodeVersion$;
(function (UpdateProjectProjectsNodeVersion$) {
    /** @deprecated use `UpdateProjectProjectsNodeVersion$inboundSchema` instead. */
    UpdateProjectProjectsNodeVersion$.inboundSchema = UpdateProjectProjectsNodeVersion$inboundSchema;
    /** @deprecated use `UpdateProjectProjectsNodeVersion$outboundSchema` instead. */
    UpdateProjectProjectsNodeVersion$.outboundSchema = UpdateProjectProjectsNodeVersion$outboundSchema;
})(UpdateProjectProjectsNodeVersion$ || (UpdateProjectProjectsNodeVersion$ = {}));
/** @internal */
export const UpdateProjectProjectsPaths$inboundSchema = z.object({
    value: z.string(),
});
/** @internal */
export const UpdateProjectProjectsPaths$outboundSchema = z.object({
    value: z.string(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UpdateProjectProjectsPaths$;
(function (UpdateProjectProjectsPaths$) {
    /** @deprecated use `UpdateProjectProjectsPaths$inboundSchema` instead. */
    UpdateProjectProjectsPaths$.inboundSchema = UpdateProjectProjectsPaths$inboundSchema;
    /** @deprecated use `UpdateProjectProjectsPaths$outboundSchema` instead. */
    UpdateProjectProjectsPaths$.outboundSchema = UpdateProjectProjectsPaths$outboundSchema;
})(UpdateProjectProjectsPaths$ || (UpdateProjectProjectsPaths$ = {}));
export function updateProjectProjectsPathsToJSON(updateProjectProjectsPaths) {
    return JSON.stringify(UpdateProjectProjectsPaths$outboundSchema.parse(updateProjectProjectsPaths));
}
export function updateProjectProjectsPathsFromJSON(jsonString) {
    return safeParse(jsonString, (x) => UpdateProjectProjectsPaths$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'UpdateProjectProjectsPaths' from JSON`);
}
/** @internal */
export const UpdateProjectProjectsOptionsAllowlist$inboundSchema = z.object({
    paths: z.array(z.lazy(() => UpdateProjectProjectsPaths$inboundSchema)),
});
/** @internal */
export const UpdateProjectProjectsOptionsAllowlist$outboundSchema = z.object({
    paths: z.array(z.lazy(() => UpdateProjectProjectsPaths$outboundSchema)),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UpdateProjectProjectsOptionsAllowlist$;
(function (UpdateProjectProjectsOptionsAllowlist$) {
    /** @deprecated use `UpdateProjectProjectsOptionsAllowlist$inboundSchema` instead. */
    UpdateProjectProjectsOptionsAllowlist$.inboundSchema = UpdateProjectProjectsOptionsAllowlist$inboundSchema;
    /** @deprecated use `UpdateProjectProjectsOptionsAllowlist$outboundSchema` instead. */
    UpdateProjectProjectsOptionsAllowlist$.outboundSchema = UpdateProjectProjectsOptionsAllowlist$outboundSchema;
})(UpdateProjectProjectsOptionsAllowlist$ || (UpdateProjectProjectsOptionsAllowlist$ = {}));
export function updateProjectProjectsOptionsAllowlistToJSON(updateProjectProjectsOptionsAllowlist) {
    return JSON.stringify(UpdateProjectProjectsOptionsAllowlist$outboundSchema.parse(updateProjectProjectsOptionsAllowlist));
}
export function updateProjectProjectsOptionsAllowlistFromJSON(jsonString) {
    return safeParse(jsonString, (x) => UpdateProjectProjectsOptionsAllowlist$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'UpdateProjectProjectsOptionsAllowlist' from JSON`);
}
/** @internal */
export const UpdateProjectProjectsPasswordProtection$inboundSchema = z.object({});
/** @internal */
export const UpdateProjectProjectsPasswordProtection$outboundSchema = z.object({});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UpdateProjectProjectsPasswordProtection$;
(function (UpdateProjectProjectsPasswordProtection$) {
    /** @deprecated use `UpdateProjectProjectsPasswordProtection$inboundSchema` instead. */
    UpdateProjectProjectsPasswordProtection$.inboundSchema = UpdateProjectProjectsPasswordProtection$inboundSchema;
    /** @deprecated use `UpdateProjectProjectsPasswordProtection$outboundSchema` instead. */
    UpdateProjectProjectsPasswordProtection$.outboundSchema = UpdateProjectProjectsPasswordProtection$outboundSchema;
})(UpdateProjectProjectsPasswordProtection$ || (UpdateProjectProjectsPasswordProtection$ = {}));
export function updateProjectProjectsPasswordProtectionToJSON(updateProjectProjectsPasswordProtection) {
    return JSON.stringify(UpdateProjectProjectsPasswordProtection$outboundSchema.parse(updateProjectProjectsPasswordProtection));
}
export function updateProjectProjectsPasswordProtectionFromJSON(jsonString) {
    return safeParse(jsonString, (x) => UpdateProjectProjectsPasswordProtection$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'UpdateProjectProjectsPasswordProtection' from JSON`);
}
/** @internal */
export const UpdateProjectProjectsFunctionDefaultMemoryType$inboundSchema = z
    .nativeEnum(UpdateProjectProjectsFunctionDefaultMemoryType);
/** @internal */
export const UpdateProjectProjectsFunctionDefaultMemoryType$outboundSchema = UpdateProjectProjectsFunctionDefaultMemoryType$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UpdateProjectProjectsFunctionDefaultMemoryType$;
(function (UpdateProjectProjectsFunctionDefaultMemoryType$) {
    /** @deprecated use `UpdateProjectProjectsFunctionDefaultMemoryType$inboundSchema` instead. */
    UpdateProjectProjectsFunctionDefaultMemoryType$.inboundSchema = UpdateProjectProjectsFunctionDefaultMemoryType$inboundSchema;
    /** @deprecated use `UpdateProjectProjectsFunctionDefaultMemoryType$outboundSchema` instead. */
    UpdateProjectProjectsFunctionDefaultMemoryType$.outboundSchema = UpdateProjectProjectsFunctionDefaultMemoryType$outboundSchema;
})(UpdateProjectProjectsFunctionDefaultMemoryType$ || (UpdateProjectProjectsFunctionDefaultMemoryType$ = {}));
/** @internal */
export const UpdateProjectProjectsBuildMachineType$inboundSchema = z.nativeEnum(UpdateProjectProjectsBuildMachineType);
/** @internal */
export const UpdateProjectProjectsBuildMachineType$outboundSchema = UpdateProjectProjectsBuildMachineType$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UpdateProjectProjectsBuildMachineType$;
(function (UpdateProjectProjectsBuildMachineType$) {
    /** @deprecated use `UpdateProjectProjectsBuildMachineType$inboundSchema` instead. */
    UpdateProjectProjectsBuildMachineType$.inboundSchema = UpdateProjectProjectsBuildMachineType$inboundSchema;
    /** @deprecated use `UpdateProjectProjectsBuildMachineType$outboundSchema` instead. */
    UpdateProjectProjectsBuildMachineType$.outboundSchema = UpdateProjectProjectsBuildMachineType$outboundSchema;
})(UpdateProjectProjectsBuildMachineType$ || (UpdateProjectProjectsBuildMachineType$ = {}));
/** @internal */
export const UpdateProjectProjectsResourceConfig$inboundSchema = z.object({
    fluid: z.boolean().optional(),
    functionDefaultRegions: z.array(z.string()),
    functionDefaultTimeout: z.number().optional(),
    functionDefaultMemoryType: UpdateProjectProjectsFunctionDefaultMemoryType$inboundSchema.optional(),
    functionZeroConfigFailover: z.boolean().optional(),
    elasticConcurrencyEnabled: z.boolean().optional(),
    buildMachineType: UpdateProjectProjectsBuildMachineType$inboundSchema
        .optional(),
});
/** @internal */
export const UpdateProjectProjectsResourceConfig$outboundSchema = z.object({
    fluid: z.boolean().optional(),
    functionDefaultRegions: z.array(z.string()),
    functionDefaultTimeout: z.number().optional(),
    functionDefaultMemoryType: UpdateProjectProjectsFunctionDefaultMemoryType$outboundSchema.optional(),
    functionZeroConfigFailover: z.boolean().optional(),
    elasticConcurrencyEnabled: z.boolean().optional(),
    buildMachineType: UpdateProjectProjectsBuildMachineType$outboundSchema
        .optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UpdateProjectProjectsResourceConfig$;
(function (UpdateProjectProjectsResourceConfig$) {
    /** @deprecated use `UpdateProjectProjectsResourceConfig$inboundSchema` instead. */
    UpdateProjectProjectsResourceConfig$.inboundSchema = UpdateProjectProjectsResourceConfig$inboundSchema;
    /** @deprecated use `UpdateProjectProjectsResourceConfig$outboundSchema` instead. */
    UpdateProjectProjectsResourceConfig$.outboundSchema = UpdateProjectProjectsResourceConfig$outboundSchema;
})(UpdateProjectProjectsResourceConfig$ || (UpdateProjectProjectsResourceConfig$ = {}));
export function updateProjectProjectsResourceConfigToJSON(updateProjectProjectsResourceConfig) {
    return JSON.stringify(UpdateProjectProjectsResourceConfig$outboundSchema.parse(updateProjectProjectsResourceConfig));
}
export function updateProjectProjectsResourceConfigFromJSON(jsonString) {
    return safeParse(jsonString, (x) => UpdateProjectProjectsResourceConfig$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'UpdateProjectProjectsResourceConfig' from JSON`);
}
/** @internal */
export const UpdateProjectStages$inboundSchema = z.object({
    targetPercentage: z.number(),
    minutesToRelease: z.number().optional(),
    requireApproval: z.boolean().optional(),
    duration: z.number().optional(),
});
/** @internal */
export const UpdateProjectStages$outboundSchema = z.object({
    targetPercentage: z.number(),
    minutesToRelease: z.number().optional(),
    requireApproval: z.boolean().optional(),
    duration: z.number().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UpdateProjectStages$;
(function (UpdateProjectStages$) {
    /** @deprecated use `UpdateProjectStages$inboundSchema` instead. */
    UpdateProjectStages$.inboundSchema = UpdateProjectStages$inboundSchema;
    /** @deprecated use `UpdateProjectStages$outboundSchema` instead. */
    UpdateProjectStages$.outboundSchema = UpdateProjectStages$outboundSchema;
})(UpdateProjectStages$ || (UpdateProjectStages$ = {}));
export function updateProjectStagesToJSON(updateProjectStages) {
    return JSON.stringify(UpdateProjectStages$outboundSchema.parse(updateProjectStages));
}
export function updateProjectStagesFromJSON(jsonString) {
    return safeParse(jsonString, (x) => UpdateProjectStages$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'UpdateProjectStages' from JSON`);
}
/** @internal */
export const UpdateProjectRollingRelease$inboundSchema = z.object({
    target: z.string(),
    minutesToRelease: z.number().optional(),
    stages: z.nullable(z.array(z.lazy(() => UpdateProjectStages$inboundSchema)))
        .optional(),
});
/** @internal */
export const UpdateProjectRollingRelease$outboundSchema = z.object({
    target: z.string(),
    minutesToRelease: z.number().optional(),
    stages: z.nullable(z.array(z.lazy(() => UpdateProjectStages$outboundSchema)))
        .optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UpdateProjectRollingRelease$;
(function (UpdateProjectRollingRelease$) {
    /** @deprecated use `UpdateProjectRollingRelease$inboundSchema` instead. */
    UpdateProjectRollingRelease$.inboundSchema = UpdateProjectRollingRelease$inboundSchema;
    /** @deprecated use `UpdateProjectRollingRelease$outboundSchema` instead. */
    UpdateProjectRollingRelease$.outboundSchema = UpdateProjectRollingRelease$outboundSchema;
})(UpdateProjectRollingRelease$ || (UpdateProjectRollingRelease$ = {}));
export function updateProjectRollingReleaseToJSON(updateProjectRollingRelease) {
    return JSON.stringify(UpdateProjectRollingRelease$outboundSchema.parse(updateProjectRollingRelease));
}
export function updateProjectRollingReleaseFromJSON(jsonString) {
    return safeParse(jsonString, (x) => UpdateProjectRollingRelease$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'UpdateProjectRollingRelease' from JSON`);
}
/** @internal */
export const UpdateProjectProjectsResponseFunctionDefaultMemoryType$inboundSchema = z.nativeEnum(UpdateProjectProjectsResponseFunctionDefaultMemoryType);
/** @internal */
export const UpdateProjectProjectsResponseFunctionDefaultMemoryType$outboundSchema = UpdateProjectProjectsResponseFunctionDefaultMemoryType$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UpdateProjectProjectsResponseFunctionDefaultMemoryType$;
(function (UpdateProjectProjectsResponseFunctionDefaultMemoryType$) {
    /** @deprecated use `UpdateProjectProjectsResponseFunctionDefaultMemoryType$inboundSchema` instead. */
    UpdateProjectProjectsResponseFunctionDefaultMemoryType$.inboundSchema = UpdateProjectProjectsResponseFunctionDefaultMemoryType$inboundSchema;
    /** @deprecated use `UpdateProjectProjectsResponseFunctionDefaultMemoryType$outboundSchema` instead. */
    UpdateProjectProjectsResponseFunctionDefaultMemoryType$.outboundSchema = UpdateProjectProjectsResponseFunctionDefaultMemoryType$outboundSchema;
})(UpdateProjectProjectsResponseFunctionDefaultMemoryType$ || (UpdateProjectProjectsResponseFunctionDefaultMemoryType$ = {}));
/** @internal */
export const UpdateProjectProjectsResponseBuildMachineType$inboundSchema = z
    .nativeEnum(UpdateProjectProjectsResponseBuildMachineType);
/** @internal */
export const UpdateProjectProjectsResponseBuildMachineType$outboundSchema = UpdateProjectProjectsResponseBuildMachineType$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UpdateProjectProjectsResponseBuildMachineType$;
(function (UpdateProjectProjectsResponseBuildMachineType$) {
    /** @deprecated use `UpdateProjectProjectsResponseBuildMachineType$inboundSchema` instead. */
    UpdateProjectProjectsResponseBuildMachineType$.inboundSchema = UpdateProjectProjectsResponseBuildMachineType$inboundSchema;
    /** @deprecated use `UpdateProjectProjectsResponseBuildMachineType$outboundSchema` instead. */
    UpdateProjectProjectsResponseBuildMachineType$.outboundSchema = UpdateProjectProjectsResponseBuildMachineType$outboundSchema;
})(UpdateProjectProjectsResponseBuildMachineType$ || (UpdateProjectProjectsResponseBuildMachineType$ = {}));
/** @internal */
export const UpdateProjectDefaultResourceConfig$inboundSchema = z.object({
    fluid: z.boolean().optional(),
    functionDefaultRegions: z.array(z.string()),
    functionDefaultTimeout: z.number().optional(),
    functionDefaultMemoryType: UpdateProjectProjectsResponseFunctionDefaultMemoryType$inboundSchema
        .optional(),
    functionZeroConfigFailover: z.boolean().optional(),
    elasticConcurrencyEnabled: z.boolean().optional(),
    buildMachineType: UpdateProjectProjectsResponseBuildMachineType$inboundSchema
        .optional(),
});
/** @internal */
export const UpdateProjectDefaultResourceConfig$outboundSchema = z.object({
    fluid: z.boolean().optional(),
    functionDefaultRegions: z.array(z.string()),
    functionDefaultTimeout: z.number().optional(),
    functionDefaultMemoryType: UpdateProjectProjectsResponseFunctionDefaultMemoryType$outboundSchema
        .optional(),
    functionZeroConfigFailover: z.boolean().optional(),
    elasticConcurrencyEnabled: z.boolean().optional(),
    buildMachineType: UpdateProjectProjectsResponseBuildMachineType$outboundSchema
        .optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UpdateProjectDefaultResourceConfig$;
(function (UpdateProjectDefaultResourceConfig$) {
    /** @deprecated use `UpdateProjectDefaultResourceConfig$inboundSchema` instead. */
    UpdateProjectDefaultResourceConfig$.inboundSchema = UpdateProjectDefaultResourceConfig$inboundSchema;
    /** @deprecated use `UpdateProjectDefaultResourceConfig$outboundSchema` instead. */
    UpdateProjectDefaultResourceConfig$.outboundSchema = UpdateProjectDefaultResourceConfig$outboundSchema;
})(UpdateProjectDefaultResourceConfig$ || (UpdateProjectDefaultResourceConfig$ = {}));
export function updateProjectDefaultResourceConfigToJSON(updateProjectDefaultResourceConfig) {
    return JSON.stringify(UpdateProjectDefaultResourceConfig$outboundSchema.parse(updateProjectDefaultResourceConfig));
}
export function updateProjectDefaultResourceConfigFromJSON(jsonString) {
    return safeParse(jsonString, (x) => UpdateProjectDefaultResourceConfig$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'UpdateProjectDefaultResourceConfig' from JSON`);
}
/** @internal */
export const UpdateProjectProjectsResponseDeploymentType$inboundSchema = z
    .nativeEnum(UpdateProjectProjectsResponseDeploymentType);
/** @internal */
export const UpdateProjectProjectsResponseDeploymentType$outboundSchema = UpdateProjectProjectsResponseDeploymentType$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UpdateProjectProjectsResponseDeploymentType$;
(function (UpdateProjectProjectsResponseDeploymentType$) {
    /** @deprecated use `UpdateProjectProjectsResponseDeploymentType$inboundSchema` instead. */
    UpdateProjectProjectsResponseDeploymentType$.inboundSchema = UpdateProjectProjectsResponseDeploymentType$inboundSchema;
    /** @deprecated use `UpdateProjectProjectsResponseDeploymentType$outboundSchema` instead. */
    UpdateProjectProjectsResponseDeploymentType$.outboundSchema = UpdateProjectProjectsResponseDeploymentType$outboundSchema;
})(UpdateProjectProjectsResponseDeploymentType$ || (UpdateProjectProjectsResponseDeploymentType$ = {}));
/** @internal */
export const UpdateProjectProjectsSsoProtection$inboundSchema = z.object({
    deploymentType: UpdateProjectProjectsResponseDeploymentType$inboundSchema,
});
/** @internal */
export const UpdateProjectProjectsSsoProtection$outboundSchema = z.object({
    deploymentType: UpdateProjectProjectsResponseDeploymentType$outboundSchema,
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UpdateProjectProjectsSsoProtection$;
(function (UpdateProjectProjectsSsoProtection$) {
    /** @deprecated use `UpdateProjectProjectsSsoProtection$inboundSchema` instead. */
    UpdateProjectProjectsSsoProtection$.inboundSchema = UpdateProjectProjectsSsoProtection$inboundSchema;
    /** @deprecated use `UpdateProjectProjectsSsoProtection$outboundSchema` instead. */
    UpdateProjectProjectsSsoProtection$.outboundSchema = UpdateProjectProjectsSsoProtection$outboundSchema;
})(UpdateProjectProjectsSsoProtection$ || (UpdateProjectProjectsSsoProtection$ = {}));
export function updateProjectProjectsSsoProtectionToJSON(updateProjectProjectsSsoProtection) {
    return JSON.stringify(UpdateProjectProjectsSsoProtection$outboundSchema.parse(updateProjectProjectsSsoProtection));
}
export function updateProjectProjectsSsoProtectionFromJSON(jsonString) {
    return safeParse(jsonString, (x) => UpdateProjectProjectsSsoProtection$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'UpdateProjectProjectsSsoProtection' from JSON`);
}
/** @internal */
export const UpdateProjectProjectsAliasAssigned$inboundSchema = z.union([z.number(), z.boolean()]);
/** @internal */
export const UpdateProjectProjectsAliasAssigned$outboundSchema = z.union([z.number(), z.boolean()]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UpdateProjectProjectsAliasAssigned$;
(function (UpdateProjectProjectsAliasAssigned$) {
    /** @deprecated use `UpdateProjectProjectsAliasAssigned$inboundSchema` instead. */
    UpdateProjectProjectsAliasAssigned$.inboundSchema = UpdateProjectProjectsAliasAssigned$inboundSchema;
    /** @deprecated use `UpdateProjectProjectsAliasAssigned$outboundSchema` instead. */
    UpdateProjectProjectsAliasAssigned$.outboundSchema = UpdateProjectProjectsAliasAssigned$outboundSchema;
})(UpdateProjectProjectsAliasAssigned$ || (UpdateProjectProjectsAliasAssigned$ = {}));
export function updateProjectProjectsAliasAssignedToJSON(updateProjectProjectsAliasAssigned) {
    return JSON.stringify(UpdateProjectProjectsAliasAssigned$outboundSchema.parse(updateProjectProjectsAliasAssigned));
}
export function updateProjectProjectsAliasAssignedFromJSON(jsonString) {
    return safeParse(jsonString, (x) => UpdateProjectProjectsAliasAssigned$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'UpdateProjectProjectsAliasAssigned' from JSON`);
}
/** @internal */
export const UpdateProjectProjectsAliasError$inboundSchema = z.object({
    code: z.string(),
    message: z.string(),
});
/** @internal */
export const UpdateProjectProjectsAliasError$outboundSchema = z.object({
    code: z.string(),
    message: z.string(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UpdateProjectProjectsAliasError$;
(function (UpdateProjectProjectsAliasError$) {
    /** @deprecated use `UpdateProjectProjectsAliasError$inboundSchema` instead. */
    UpdateProjectProjectsAliasError$.inboundSchema = UpdateProjectProjectsAliasError$inboundSchema;
    /** @deprecated use `UpdateProjectProjectsAliasError$outboundSchema` instead. */
    UpdateProjectProjectsAliasError$.outboundSchema = UpdateProjectProjectsAliasError$outboundSchema;
})(UpdateProjectProjectsAliasError$ || (UpdateProjectProjectsAliasError$ = {}));
export function updateProjectProjectsAliasErrorToJSON(updateProjectProjectsAliasError) {
    return JSON.stringify(UpdateProjectProjectsAliasError$outboundSchema.parse(updateProjectProjectsAliasError));
}
export function updateProjectProjectsAliasErrorFromJSON(jsonString) {
    return safeParse(jsonString, (x) => UpdateProjectProjectsAliasError$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'UpdateProjectProjectsAliasError' from JSON`);
}
/** @internal */
export const UpdateProjectProjectsResponse200ApplicationJSONResponseBodyTargetsType$inboundSchema = z.nativeEnum(UpdateProjectProjectsResponse200ApplicationJSONResponseBodyTargetsType);
/** @internal */
export const UpdateProjectProjectsResponse200ApplicationJSONResponseBodyTargetsType$outboundSchema = UpdateProjectProjectsResponse200ApplicationJSONResponseBodyTargetsType$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UpdateProjectProjectsResponse200ApplicationJSONResponseBodyTargetsType$;
(function (UpdateProjectProjectsResponse200ApplicationJSONResponseBodyTargetsType$) {
    /** @deprecated use `UpdateProjectProjectsResponse200ApplicationJSONResponseBodyTargetsType$inboundSchema` instead. */
    UpdateProjectProjectsResponse200ApplicationJSONResponseBodyTargetsType$.inboundSchema = UpdateProjectProjectsResponse200ApplicationJSONResponseBodyTargetsType$inboundSchema;
    /** @deprecated use `UpdateProjectProjectsResponse200ApplicationJSONResponseBodyTargetsType$outboundSchema` instead. */
    UpdateProjectProjectsResponse200ApplicationJSONResponseBodyTargetsType$.outboundSchema = UpdateProjectProjectsResponse200ApplicationJSONResponseBodyTargetsType$outboundSchema;
})(UpdateProjectProjectsResponse200ApplicationJSONResponseBodyTargetsType$ || (UpdateProjectProjectsResponse200ApplicationJSONResponseBodyTargetsType$ = {}));
/** @internal */
export const UpdateProjectProjectsResponseBranchMatcher$inboundSchema = z.object({
    type: UpdateProjectProjectsResponse200ApplicationJSONResponseBodyTargetsType$inboundSchema,
    pattern: z.string(),
});
/** @internal */
export const UpdateProjectProjectsResponseBranchMatcher$outboundSchema = z.object({
    type: UpdateProjectProjectsResponse200ApplicationJSONResponseBodyTargetsType$outboundSchema,
    pattern: z.string(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UpdateProjectProjectsResponseBranchMatcher$;
(function (UpdateProjectProjectsResponseBranchMatcher$) {
    /** @deprecated use `UpdateProjectProjectsResponseBranchMatcher$inboundSchema` instead. */
    UpdateProjectProjectsResponseBranchMatcher$.inboundSchema = UpdateProjectProjectsResponseBranchMatcher$inboundSchema;
    /** @deprecated use `UpdateProjectProjectsResponseBranchMatcher$outboundSchema` instead. */
    UpdateProjectProjectsResponseBranchMatcher$.outboundSchema = UpdateProjectProjectsResponseBranchMatcher$outboundSchema;
})(UpdateProjectProjectsResponseBranchMatcher$ || (UpdateProjectProjectsResponseBranchMatcher$ = {}));
export function updateProjectProjectsResponseBranchMatcherToJSON(updateProjectProjectsResponseBranchMatcher) {
    return JSON.stringify(UpdateProjectProjectsResponseBranchMatcher$outboundSchema.parse(updateProjectProjectsResponseBranchMatcher));
}
export function updateProjectProjectsResponseBranchMatcherFromJSON(jsonString) {
    return safeParse(jsonString, (x) => UpdateProjectProjectsResponseBranchMatcher$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'UpdateProjectProjectsResponseBranchMatcher' from JSON`);
}
/** @internal */
export const UpdateProjectProjectsBuilds$inboundSchema = z.object({
    use: z.string(),
    src: z.string().optional(),
    dest: z.string().optional(),
});
/** @internal */
export const UpdateProjectProjectsBuilds$outboundSchema = z.object({
    use: z.string(),
    src: z.string().optional(),
    dest: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UpdateProjectProjectsBuilds$;
(function (UpdateProjectProjectsBuilds$) {
    /** @deprecated use `UpdateProjectProjectsBuilds$inboundSchema` instead. */
    UpdateProjectProjectsBuilds$.inboundSchema = UpdateProjectProjectsBuilds$inboundSchema;
    /** @deprecated use `UpdateProjectProjectsBuilds$outboundSchema` instead. */
    UpdateProjectProjectsBuilds$.outboundSchema = UpdateProjectProjectsBuilds$outboundSchema;
})(UpdateProjectProjectsBuilds$ || (UpdateProjectProjectsBuilds$ = {}));
export function updateProjectProjectsBuildsToJSON(updateProjectProjectsBuilds) {
    return JSON.stringify(UpdateProjectProjectsBuilds$outboundSchema.parse(updateProjectProjectsBuilds));
}
export function updateProjectProjectsBuildsFromJSON(jsonString) {
    return safeParse(jsonString, (x) => UpdateProjectProjectsBuilds$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'UpdateProjectProjectsBuilds' from JSON`);
}
/** @internal */
export const UpdateProjectProjectsChecksConclusion$inboundSchema = z.nativeEnum(UpdateProjectProjectsChecksConclusion);
/** @internal */
export const UpdateProjectProjectsChecksConclusion$outboundSchema = UpdateProjectProjectsChecksConclusion$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UpdateProjectProjectsChecksConclusion$;
(function (UpdateProjectProjectsChecksConclusion$) {
    /** @deprecated use `UpdateProjectProjectsChecksConclusion$inboundSchema` instead. */
    UpdateProjectProjectsChecksConclusion$.inboundSchema = UpdateProjectProjectsChecksConclusion$inboundSchema;
    /** @deprecated use `UpdateProjectProjectsChecksConclusion$outboundSchema` instead. */
    UpdateProjectProjectsChecksConclusion$.outboundSchema = UpdateProjectProjectsChecksConclusion$outboundSchema;
})(UpdateProjectProjectsChecksConclusion$ || (UpdateProjectProjectsChecksConclusion$ = {}));
/** @internal */
export const UpdateProjectProjectsChecksState$inboundSchema = z.nativeEnum(UpdateProjectProjectsChecksState);
/** @internal */
export const UpdateProjectProjectsChecksState$outboundSchema = UpdateProjectProjectsChecksState$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UpdateProjectProjectsChecksState$;
(function (UpdateProjectProjectsChecksState$) {
    /** @deprecated use `UpdateProjectProjectsChecksState$inboundSchema` instead. */
    UpdateProjectProjectsChecksState$.inboundSchema = UpdateProjectProjectsChecksState$inboundSchema;
    /** @deprecated use `UpdateProjectProjectsChecksState$outboundSchema` instead. */
    UpdateProjectProjectsChecksState$.outboundSchema = UpdateProjectProjectsChecksState$outboundSchema;
})(UpdateProjectProjectsChecksState$ || (UpdateProjectProjectsChecksState$ = {}));
/** @internal */
export const UpdateProjectProjectsCreator$inboundSchema = z.object({
    email: z.string(),
    githubLogin: z.string().optional(),
    gitlabLogin: z.string().optional(),
    uid: z.string(),
    username: z.string(),
});
/** @internal */
export const UpdateProjectProjectsCreator$outboundSchema = z.object({
    email: z.string(),
    githubLogin: z.string().optional(),
    gitlabLogin: z.string().optional(),
    uid: z.string(),
    username: z.string(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UpdateProjectProjectsCreator$;
(function (UpdateProjectProjectsCreator$) {
    /** @deprecated use `UpdateProjectProjectsCreator$inboundSchema` instead. */
    UpdateProjectProjectsCreator$.inboundSchema = UpdateProjectProjectsCreator$inboundSchema;
    /** @deprecated use `UpdateProjectProjectsCreator$outboundSchema` instead. */
    UpdateProjectProjectsCreator$.outboundSchema = UpdateProjectProjectsCreator$outboundSchema;
})(UpdateProjectProjectsCreator$ || (UpdateProjectProjectsCreator$ = {}));
export function updateProjectProjectsCreatorToJSON(updateProjectProjectsCreator) {
    return JSON.stringify(UpdateProjectProjectsCreator$outboundSchema.parse(updateProjectProjectsCreator));
}
export function updateProjectProjectsCreatorFromJSON(jsonString) {
    return safeParse(jsonString, (x) => UpdateProjectProjectsCreator$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'UpdateProjectProjectsCreator' from JSON`);
}
/** @internal */
export const UpdateProjectProjectsOidcTokenClaims$inboundSchema = z.object({
    iss: z.string(),
    sub: z.string(),
    scope: z.string(),
    aud: z.string(),
    owner: z.string(),
    owner_id: z.string(),
    project: z.string(),
    project_id: z.string(),
    environment: z.string(),
}).transform((v) => {
    return remap$(v, {
        "owner_id": "ownerId",
        "project_id": "projectId",
    });
});
/** @internal */
export const UpdateProjectProjectsOidcTokenClaims$outboundSchema = z.object({
    iss: z.string(),
    sub: z.string(),
    scope: z.string(),
    aud: z.string(),
    owner: z.string(),
    ownerId: z.string(),
    project: z.string(),
    projectId: z.string(),
    environment: z.string(),
}).transform((v) => {
    return remap$(v, {
        ownerId: "owner_id",
        projectId: "project_id",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UpdateProjectProjectsOidcTokenClaims$;
(function (UpdateProjectProjectsOidcTokenClaims$) {
    /** @deprecated use `UpdateProjectProjectsOidcTokenClaims$inboundSchema` instead. */
    UpdateProjectProjectsOidcTokenClaims$.inboundSchema = UpdateProjectProjectsOidcTokenClaims$inboundSchema;
    /** @deprecated use `UpdateProjectProjectsOidcTokenClaims$outboundSchema` instead. */
    UpdateProjectProjectsOidcTokenClaims$.outboundSchema = UpdateProjectProjectsOidcTokenClaims$outboundSchema;
})(UpdateProjectProjectsOidcTokenClaims$ || (UpdateProjectProjectsOidcTokenClaims$ = {}));
export function updateProjectProjectsOidcTokenClaimsToJSON(updateProjectProjectsOidcTokenClaims) {
    return JSON.stringify(UpdateProjectProjectsOidcTokenClaims$outboundSchema.parse(updateProjectProjectsOidcTokenClaims));
}
export function updateProjectProjectsOidcTokenClaimsFromJSON(jsonString) {
    return safeParse(jsonString, (x) => UpdateProjectProjectsOidcTokenClaims$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'UpdateProjectProjectsOidcTokenClaims' from JSON`);
}
/** @internal */
export const UpdateProjectProjectsPlan$inboundSchema = z.nativeEnum(UpdateProjectProjectsPlan);
/** @internal */
export const UpdateProjectProjectsPlan$outboundSchema = UpdateProjectProjectsPlan$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UpdateProjectProjectsPlan$;
(function (UpdateProjectProjectsPlan$) {
    /** @deprecated use `UpdateProjectProjectsPlan$inboundSchema` instead. */
    UpdateProjectProjectsPlan$.inboundSchema = UpdateProjectProjectsPlan$inboundSchema;
    /** @deprecated use `UpdateProjectProjectsPlan$outboundSchema` instead. */
    UpdateProjectProjectsPlan$.outboundSchema = UpdateProjectProjectsPlan$outboundSchema;
})(UpdateProjectProjectsPlan$ || (UpdateProjectProjectsPlan$ = {}));
/** @internal */
export const UpdateProjectProjectsReadyState$inboundSchema = z.nativeEnum(UpdateProjectProjectsReadyState);
/** @internal */
export const UpdateProjectProjectsReadyState$outboundSchema = UpdateProjectProjectsReadyState$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UpdateProjectProjectsReadyState$;
(function (UpdateProjectProjectsReadyState$) {
    /** @deprecated use `UpdateProjectProjectsReadyState$inboundSchema` instead. */
    UpdateProjectProjectsReadyState$.inboundSchema = UpdateProjectProjectsReadyState$inboundSchema;
    /** @deprecated use `UpdateProjectProjectsReadyState$outboundSchema` instead. */
    UpdateProjectProjectsReadyState$.outboundSchema = UpdateProjectProjectsReadyState$outboundSchema;
})(UpdateProjectProjectsReadyState$ || (UpdateProjectProjectsReadyState$ = {}));
/** @internal */
export const UpdateProjectProjectsReadySubstate$inboundSchema = z.nativeEnum(UpdateProjectProjectsReadySubstate);
/** @internal */
export const UpdateProjectProjectsReadySubstate$outboundSchema = UpdateProjectProjectsReadySubstate$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UpdateProjectProjectsReadySubstate$;
(function (UpdateProjectProjectsReadySubstate$) {
    /** @deprecated use `UpdateProjectProjectsReadySubstate$inboundSchema` instead. */
    UpdateProjectProjectsReadySubstate$.inboundSchema = UpdateProjectProjectsReadySubstate$inboundSchema;
    /** @deprecated use `UpdateProjectProjectsReadySubstate$outboundSchema` instead. */
    UpdateProjectProjectsReadySubstate$.outboundSchema = UpdateProjectProjectsReadySubstate$outboundSchema;
})(UpdateProjectProjectsReadySubstate$ || (UpdateProjectProjectsReadySubstate$ = {}));
/** @internal */
export const UpdateProjectProjectsResponse200Type$inboundSchema = z.nativeEnum(UpdateProjectProjectsResponse200Type);
/** @internal */
export const UpdateProjectProjectsResponse200Type$outboundSchema = UpdateProjectProjectsResponse200Type$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UpdateProjectProjectsResponse200Type$;
(function (UpdateProjectProjectsResponse200Type$) {
    /** @deprecated use `UpdateProjectProjectsResponse200Type$inboundSchema` instead. */
    UpdateProjectProjectsResponse200Type$.inboundSchema = UpdateProjectProjectsResponse200Type$inboundSchema;
    /** @deprecated use `UpdateProjectProjectsResponse200Type$outboundSchema` instead. */
    UpdateProjectProjectsResponse200Type$.outboundSchema = UpdateProjectProjectsResponse200Type$outboundSchema;
})(UpdateProjectProjectsResponse200Type$ || (UpdateProjectProjectsResponse200Type$ = {}));
/** @internal */
export const UpdateProjectTargets$inboundSchema = z.object({
    id: z.string(),
    alias: z.array(z.string()).optional(),
    aliasAssigned: z.nullable(z.union([z.number(), z.boolean()])).optional(),
    aliasError: z.nullable(z.lazy(() => UpdateProjectProjectsAliasError$inboundSchema)).optional(),
    aliasFinal: z.nullable(z.string()).optional(),
    automaticAliases: z.array(z.string()).optional(),
    branchMatcher: z.lazy(() => UpdateProjectProjectsResponseBranchMatcher$inboundSchema).optional(),
    buildingAt: z.number().optional(),
    builds: z.array(z.lazy(() => UpdateProjectProjectsBuilds$inboundSchema))
        .optional(),
    checksConclusion: UpdateProjectProjectsChecksConclusion$inboundSchema
        .optional(),
    checksState: UpdateProjectProjectsChecksState$inboundSchema.optional(),
    connectBuildsEnabled: z.boolean().optional(),
    connectConfigurationId: z.string().optional(),
    createdAt: z.number(),
    createdIn: z.string(),
    creator: z.nullable(z.lazy(() => UpdateProjectProjectsCreator$inboundSchema)),
    deletedAt: z.number().optional(),
    deploymentHostname: z.string(),
    forced: z.boolean().optional(),
    name: z.string(),
    meta: z.record(z.string()).optional(),
    monorepoManager: z.nullable(z.string()).optional(),
    oidcTokenClaims: z.lazy(() => UpdateProjectProjectsOidcTokenClaims$inboundSchema).optional(),
    plan: UpdateProjectProjectsPlan$inboundSchema,
    previewCommentsEnabled: z.boolean().optional(),
    private: z.boolean(),
    readyAt: z.number().optional(),
    readyState: UpdateProjectProjectsReadyState$inboundSchema,
    readySubstate: UpdateProjectProjectsReadySubstate$inboundSchema.optional(),
    requestedAt: z.number().optional(),
    target: z.nullable(z.string()).optional(),
    teamId: z.nullable(z.string()).optional(),
    type: UpdateProjectProjectsResponse200Type$inboundSchema,
    url: z.string(),
    userId: z.string(),
    withCache: z.boolean().optional(),
});
/** @internal */
export const UpdateProjectTargets$outboundSchema = z.object({
    id: z.string(),
    alias: z.array(z.string()).optional(),
    aliasAssigned: z.nullable(z.union([z.number(), z.boolean()])).optional(),
    aliasError: z.nullable(z.lazy(() => UpdateProjectProjectsAliasError$outboundSchema)).optional(),
    aliasFinal: z.nullable(z.string()).optional(),
    automaticAliases: z.array(z.string()).optional(),
    branchMatcher: z.lazy(() => UpdateProjectProjectsResponseBranchMatcher$outboundSchema).optional(),
    buildingAt: z.number().optional(),
    builds: z.array(z.lazy(() => UpdateProjectProjectsBuilds$outboundSchema))
        .optional(),
    checksConclusion: UpdateProjectProjectsChecksConclusion$outboundSchema
        .optional(),
    checksState: UpdateProjectProjectsChecksState$outboundSchema.optional(),
    connectBuildsEnabled: z.boolean().optional(),
    connectConfigurationId: z.string().optional(),
    createdAt: z.number(),
    createdIn: z.string(),
    creator: z.nullable(z.lazy(() => UpdateProjectProjectsCreator$outboundSchema)),
    deletedAt: z.number().optional(),
    deploymentHostname: z.string(),
    forced: z.boolean().optional(),
    name: z.string(),
    meta: z.record(z.string()).optional(),
    monorepoManager: z.nullable(z.string()).optional(),
    oidcTokenClaims: z.lazy(() => UpdateProjectProjectsOidcTokenClaims$outboundSchema).optional(),
    plan: UpdateProjectProjectsPlan$outboundSchema,
    previewCommentsEnabled: z.boolean().optional(),
    private: z.boolean(),
    readyAt: z.number().optional(),
    readyState: UpdateProjectProjectsReadyState$outboundSchema,
    readySubstate: UpdateProjectProjectsReadySubstate$outboundSchema.optional(),
    requestedAt: z.number().optional(),
    target: z.nullable(z.string()).optional(),
    teamId: z.nullable(z.string()).optional(),
    type: UpdateProjectProjectsResponse200Type$outboundSchema,
    url: z.string(),
    userId: z.string(),
    withCache: z.boolean().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UpdateProjectTargets$;
(function (UpdateProjectTargets$) {
    /** @deprecated use `UpdateProjectTargets$inboundSchema` instead. */
    UpdateProjectTargets$.inboundSchema = UpdateProjectTargets$inboundSchema;
    /** @deprecated use `UpdateProjectTargets$outboundSchema` instead. */
    UpdateProjectTargets$.outboundSchema = UpdateProjectTargets$outboundSchema;
})(UpdateProjectTargets$ || (UpdateProjectTargets$ = {}));
export function updateProjectTargetsToJSON(updateProjectTargets) {
    return JSON.stringify(UpdateProjectTargets$outboundSchema.parse(updateProjectTargets));
}
export function updateProjectTargetsFromJSON(jsonString) {
    return safeParse(jsonString, (x) => UpdateProjectTargets$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'UpdateProjectTargets' from JSON`);
}
/** @internal */
export const UpdateProjectPermissions$inboundSchema = z.object({
    user: z.array(ACLAction$inboundSchema).optional(),
    userConnection: z.array(ACLAction$inboundSchema).optional(),
    userSudo: z.array(ACLAction$inboundSchema).optional(),
    webAuthn: z.array(ACLAction$inboundSchema).optional(),
    oauth2Connection: z.array(ACLAction$inboundSchema).optional(),
    accessGroup: z.array(ACLAction$inboundSchema).optional(),
    aliasGlobal: z.array(ACLAction$inboundSchema).optional(),
    analyticsSampling: z.array(ACLAction$inboundSchema).optional(),
    analyticsUsage: z.array(ACLAction$inboundSchema).optional(),
    auditLog: z.array(ACLAction$inboundSchema).optional(),
    billingAddress: z.array(ACLAction$inboundSchema).optional(),
    billingInformation: z.array(ACLAction$inboundSchema).optional(),
    billingInvoice: z.array(ACLAction$inboundSchema).optional(),
    billingInvoiceEmailRecipient: z.array(ACLAction$inboundSchema).optional(),
    billingInvoiceLanguage: z.array(ACLAction$inboundSchema).optional(),
    billingPlan: z.array(ACLAction$inboundSchema).optional(),
    billingPurchaseOrder: z.array(ACLAction$inboundSchema).optional(),
    billingTaxId: z.array(ACLAction$inboundSchema).optional(),
    blob: z.array(ACLAction$inboundSchema).optional(),
    budget: z.array(ACLAction$inboundSchema).optional(),
    cacheArtifact: z.array(ACLAction$inboundSchema).optional(),
    cacheArtifactUsageEvent: z.array(ACLAction$inboundSchema).optional(),
    codeChecks: z.array(ACLAction$inboundSchema).optional(),
    concurrentBuilds: z.array(ACLAction$inboundSchema).optional(),
    connect: z.array(ACLAction$inboundSchema).optional(),
    connectConfiguration: z.array(ACLAction$inboundSchema).optional(),
    domain: z.array(ACLAction$inboundSchema).optional(),
    domainAcceptDelegation: z.array(ACLAction$inboundSchema).optional(),
    domainAuthCodes: z.array(ACLAction$inboundSchema).optional(),
    domainCertificate: z.array(ACLAction$inboundSchema).optional(),
    domainCheckConfig: z.array(ACLAction$inboundSchema).optional(),
    domainMove: z.array(ACLAction$inboundSchema).optional(),
    domainPurchase: z.array(ACLAction$inboundSchema).optional(),
    domainRecord: z.array(ACLAction$inboundSchema).optional(),
    domainTransferIn: z.array(ACLAction$inboundSchema).optional(),
    event: z.array(ACLAction$inboundSchema).optional(),
    ownEvent: z.array(ACLAction$inboundSchema).optional(),
    sensitiveEnvironmentVariablePolicy: z.array(ACLAction$inboundSchema)
        .optional(),
    fileUpload: z.array(ACLAction$inboundSchema).optional(),
    flagsExplorerSubscription: z.array(ACLAction$inboundSchema).optional(),
    gitRepository: z.array(ACLAction$inboundSchema).optional(),
    ipBlocking: z.array(ACLAction$inboundSchema).optional(),
    imageOptimizationNewPrice: z.array(ACLAction$inboundSchema).optional(),
    integration: z.array(ACLAction$inboundSchema).optional(),
    integrationAccount: z.array(ACLAction$inboundSchema).optional(),
    integrationConfiguration: z.array(ACLAction$inboundSchema).optional(),
    integrationConfigurationTransfer: z.array(ACLAction$inboundSchema).optional(),
    integrationConfigurationProjects: z.array(ACLAction$inboundSchema).optional(),
    integrationVercelConfigurationOverride: z.array(ACLAction$inboundSchema)
        .optional(),
    integrationConfigurationRole: z.array(ACLAction$inboundSchema).optional(),
    integrationSSOSession: z.array(ACLAction$inboundSchema).optional(),
    integrationResource: z.array(ACLAction$inboundSchema).optional(),
    integrationEvent: z.array(ACLAction$inboundSchema).optional(),
    integrationResourceSecrets: z.array(ACLAction$inboundSchema).optional(),
    integrationDeploymentAction: z.array(ACLAction$inboundSchema).optional(),
    marketplaceInstallationMember: z.array(ACLAction$inboundSchema).optional(),
    marketplaceBillingData: z.array(ACLAction$inboundSchema).optional(),
    marketplaceInvoice: z.array(ACLAction$inboundSchema).optional(),
    marketplaceExperimentationItem: z.array(ACLAction$inboundSchema).optional(),
    marketplaceExperimentationEdgeConfigData: z.array(ACLAction$inboundSchema)
        .optional(),
    jobGlobal: z.array(ACLAction$inboundSchema).optional(),
    drain: z.array(ACLAction$inboundSchema).optional(),
    logDrain: z.array(ACLAction$inboundSchema).optional(),
    Monitoring: z.array(ACLAction$inboundSchema).optional(),
    monitoringSettings: z.array(ACLAction$inboundSchema).optional(),
    monitoringQuery: z.array(ACLAction$inboundSchema).optional(),
    monitoringChart: z.array(ACLAction$inboundSchema).optional(),
    monitoringAlert: z.array(ACLAction$inboundSchema).optional(),
    notificationDeploymentFailed: z.array(ACLAction$inboundSchema).optional(),
    notificationDomainConfiguration: z.array(ACLAction$inboundSchema).optional(),
    notificationDomainExpire: z.array(ACLAction$inboundSchema).optional(),
    notificationDomainMoved: z.array(ACLAction$inboundSchema).optional(),
    notificationDomainPurchase: z.array(ACLAction$inboundSchema).optional(),
    notificationDomainRenewal: z.array(ACLAction$inboundSchema).optional(),
    notificationDomainTransfer: z.array(ACLAction$inboundSchema).optional(),
    notificationDomainUnverified: z.array(ACLAction$inboundSchema).optional(),
    NotificationMonitoringAlert: z.array(ACLAction$inboundSchema).optional(),
    notificationPaymentFailed: z.array(ACLAction$inboundSchema).optional(),
    notificationUsageAlert: z.array(ACLAction$inboundSchema).optional(),
    notificationCustomerBudget: z.array(ACLAction$inboundSchema).optional(),
    notificationStatementOfReasons: z.array(ACLAction$inboundSchema).optional(),
    observabilityConfiguration: z.array(ACLAction$inboundSchema).optional(),
    observabilityNotebook: z.array(ACLAction$inboundSchema).optional(),
    openTelemetryEndpoint: z.array(ACLAction$inboundSchema).optional(),
    vercelAppInstallation: z.array(ACLAction$inboundSchema).optional(),
    paymentMethod: z.array(ACLAction$inboundSchema).optional(),
    permissions: z.array(ACLAction$inboundSchema).optional(),
    postgres: z.array(ACLAction$inboundSchema).optional(),
    previewDeploymentSuffix: z.array(ACLAction$inboundSchema).optional(),
    proTrialOnboarding: z.array(ACLAction$inboundSchema).optional(),
    sharedEnvVars: z.array(ACLAction$inboundSchema).optional(),
    sharedEnvVarsProduction: z.array(ACLAction$inboundSchema).optional(),
    space: z.array(ACLAction$inboundSchema).optional(),
    spaceRun: z.array(ACLAction$inboundSchema).optional(),
    passwordProtectionInvoiceItem: z.array(ACLAction$inboundSchema).optional(),
    rateLimit: z.array(ACLAction$inboundSchema).optional(),
    redis: z.array(ACLAction$inboundSchema).optional(),
    repository: z.array(ACLAction$inboundSchema).optional(),
    remoteCaching: z.array(ACLAction$inboundSchema).optional(),
    samlConfig: z.array(ACLAction$inboundSchema).optional(),
    secret: z.array(ACLAction$inboundSchema).optional(),
    redisStoreTokenSet: z.array(ACLAction$inboundSchema).optional(),
    blobStoreTokenSet: z.array(ACLAction$inboundSchema).optional(),
    postgresStoreTokenSet: z.array(ACLAction$inboundSchema).optional(),
    integrationStoreTokenSet: z.array(ACLAction$inboundSchema).optional(),
    integrationResourceReplCommand: z.array(ACLAction$inboundSchema).optional(),
    storeTransfer: z.array(ACLAction$inboundSchema).optional(),
    supportCase: z.array(ACLAction$inboundSchema).optional(),
    supportCaseComment: z.array(ACLAction$inboundSchema).optional(),
    dataCacheBillingSettings: z.array(ACLAction$inboundSchema).optional(),
    team: z.array(ACLAction$inboundSchema).optional(),
    teamAccessRequest: z.array(ACLAction$inboundSchema).optional(),
    teamFellowMembership: z.array(ACLAction$inboundSchema).optional(),
    teamGitExclusivity: z.array(ACLAction$inboundSchema).optional(),
    teamInvite: z.array(ACLAction$inboundSchema).optional(),
    teamInviteCode: z.array(ACLAction$inboundSchema).optional(),
    teamJoin: z.array(ACLAction$inboundSchema).optional(),
    teamMemberMfaStatus: z.array(ACLAction$inboundSchema).optional(),
    teamMicrofrontends: z.array(ACLAction$inboundSchema).optional(),
    teamOwnMembership: z.array(ACLAction$inboundSchema).optional(),
    teamOwnMembershipDisconnectSAML: z.array(ACLAction$inboundSchema).optional(),
    token: z.array(ACLAction$inboundSchema).optional(),
    usage: z.array(ACLAction$inboundSchema).optional(),
    usageCycle: z.array(ACLAction$inboundSchema).optional(),
    vpcPeeringConnection: z.array(ACLAction$inboundSchema).optional(),
    webAnalyticsPlan: z.array(ACLAction$inboundSchema).optional(),
    edgeConfig: z.array(ACLAction$inboundSchema).optional(),
    edgeConfigItem: z.array(ACLAction$inboundSchema).optional(),
    edgeConfigSchema: z.array(ACLAction$inboundSchema).optional(),
    edgeConfigToken: z.array(ACLAction$inboundSchema).optional(),
    webhook: z.array(ACLAction$inboundSchema).optional(),
    "webhook-event": z.array(ACLAction$inboundSchema).optional(),
    endpointVerification: z.array(ACLAction$inboundSchema).optional(),
    projectTransferIn: z.array(ACLAction$inboundSchema).optional(),
    oauth2Application: z.array(ACLAction$inboundSchema).optional(),
    vercelRun: z.array(ACLAction$inboundSchema).optional(),
    vercelRunExec: z.array(ACLAction$inboundSchema).optional(),
    aliasProject: z.array(ACLAction$inboundSchema).optional(),
    aliasProtectionBypass: z.array(ACLAction$inboundSchema).optional(),
    productionAliasProtectionBypass: z.array(ACLAction$inboundSchema).optional(),
    connectConfigurationLink: z.array(ACLAction$inboundSchema).optional(),
    dataCacheNamespace: z.array(ACLAction$inboundSchema).optional(),
    deployment: z.array(ACLAction$inboundSchema).optional(),
    deploymentCheck: z.array(ACLAction$inboundSchema).optional(),
    deploymentCheckPreview: z.array(ACLAction$inboundSchema).optional(),
    deploymentCheckReRunFromProductionBranch: z.array(ACLAction$inboundSchema)
        .optional(),
    deploymentProductionGit: z.array(ACLAction$inboundSchema).optional(),
    deploymentV0: z.array(ACLAction$inboundSchema).optional(),
    deploymentPreview: z.array(ACLAction$inboundSchema).optional(),
    deploymentPrivate: z.array(ACLAction$inboundSchema).optional(),
    deploymentPromote: z.array(ACLAction$inboundSchema).optional(),
    deploymentRollback: z.array(ACLAction$inboundSchema).optional(),
    edgeCacheNamespace: z.array(ACLAction$inboundSchema).optional(),
    environments: z.array(ACLAction$inboundSchema).optional(),
    logs: z.array(ACLAction$inboundSchema).optional(),
    logsPreset: z.array(ACLAction$inboundSchema).optional(),
    passwordProtection: z.array(ACLAction$inboundSchema).optional(),
    optionsAllowlist: z.array(ACLAction$inboundSchema).optional(),
    job: z.array(ACLAction$inboundSchema).optional(),
    observabilityData: z.array(ACLAction$inboundSchema).optional(),
    project: z.array(ACLAction$inboundSchema).optional(),
    projectFromV0: z.array(ACLAction$inboundSchema).optional(),
    projectAccessGroup: z.array(ACLAction$inboundSchema).optional(),
    projectAnalyticsSampling: z.array(ACLAction$inboundSchema).optional(),
    projectDeploymentHook: z.array(ACLAction$inboundSchema).optional(),
    projectDomain: z.array(ACLAction$inboundSchema).optional(),
    projectDomainMove: z.array(ACLAction$inboundSchema).optional(),
    projectDomainCheckConfig: z.array(ACLAction$inboundSchema).optional(),
    projectEnvVars: z.array(ACLAction$inboundSchema).optional(),
    projectEnvVarsProduction: z.array(ACLAction$inboundSchema).optional(),
    projectEnvVarsUnownedByIntegration: z.array(ACLAction$inboundSchema)
        .optional(),
    projectFlags: z.array(ACLAction$inboundSchema).optional(),
    projectId: z.array(ACLAction$inboundSchema).optional(),
    projectIntegrationConfiguration: z.array(ACLAction$inboundSchema).optional(),
    projectLink: z.array(ACLAction$inboundSchema).optional(),
    projectMember: z.array(ACLAction$inboundSchema).optional(),
    projectMonitoring: z.array(ACLAction$inboundSchema).optional(),
    projectPermissions: z.array(ACLAction$inboundSchema).optional(),
    projectProductionBranch: z.array(ACLAction$inboundSchema).optional(),
    projectTransfer: z.array(ACLAction$inboundSchema).optional(),
    projectTransferOut: z.array(ACLAction$inboundSchema).optional(),
    projectProtectionBypass: z.array(ACLAction$inboundSchema).optional(),
    projectUsage: z.array(ACLAction$inboundSchema).optional(),
    projectAnalyticsUsage: z.array(ACLAction$inboundSchema).optional(),
    projectSupportCase: z.array(ACLAction$inboundSchema).optional(),
    projectSupportCaseComment: z.array(ACLAction$inboundSchema).optional(),
    projectDeploymentExpiration: z.array(ACLAction$inboundSchema).optional(),
    projectRollingRelease: z.array(ACLAction$inboundSchema).optional(),
    projectTier: z.array(ACLAction$inboundSchema).optional(),
    seawallConfig: z.array(ACLAction$inboundSchema).optional(),
    skewProtection: z.array(ACLAction$inboundSchema).optional(),
    analytics: z.array(ACLAction$inboundSchema).optional(),
    trustedIps: z.array(ACLAction$inboundSchema).optional(),
    webAnalytics: z.array(ACLAction$inboundSchema).optional(),
    sharedEnvVarConnection: z.array(ACLAction$inboundSchema).optional(),
    sonar: z.array(ACLAction$inboundSchema).optional(),
}).transform((v) => {
    return remap$(v, {
        "Monitoring": "monitoring",
        "NotificationMonitoringAlert": "notificationMonitoringAlert",
        "webhook-event": "webhookEvent",
    });
});
/** @internal */
export const UpdateProjectPermissions$outboundSchema = z.object({
    user: z.array(ACLAction$outboundSchema).optional(),
    userConnection: z.array(ACLAction$outboundSchema).optional(),
    userSudo: z.array(ACLAction$outboundSchema).optional(),
    webAuthn: z.array(ACLAction$outboundSchema).optional(),
    oauth2Connection: z.array(ACLAction$outboundSchema).optional(),
    accessGroup: z.array(ACLAction$outboundSchema).optional(),
    aliasGlobal: z.array(ACLAction$outboundSchema).optional(),
    analyticsSampling: z.array(ACLAction$outboundSchema).optional(),
    analyticsUsage: z.array(ACLAction$outboundSchema).optional(),
    auditLog: z.array(ACLAction$outboundSchema).optional(),
    billingAddress: z.array(ACLAction$outboundSchema).optional(),
    billingInformation: z.array(ACLAction$outboundSchema).optional(),
    billingInvoice: z.array(ACLAction$outboundSchema).optional(),
    billingInvoiceEmailRecipient: z.array(ACLAction$outboundSchema).optional(),
    billingInvoiceLanguage: z.array(ACLAction$outboundSchema).optional(),
    billingPlan: z.array(ACLAction$outboundSchema).optional(),
    billingPurchaseOrder: z.array(ACLAction$outboundSchema).optional(),
    billingTaxId: z.array(ACLAction$outboundSchema).optional(),
    blob: z.array(ACLAction$outboundSchema).optional(),
    budget: z.array(ACLAction$outboundSchema).optional(),
    cacheArtifact: z.array(ACLAction$outboundSchema).optional(),
    cacheArtifactUsageEvent: z.array(ACLAction$outboundSchema).optional(),
    codeChecks: z.array(ACLAction$outboundSchema).optional(),
    concurrentBuilds: z.array(ACLAction$outboundSchema).optional(),
    connect: z.array(ACLAction$outboundSchema).optional(),
    connectConfiguration: z.array(ACLAction$outboundSchema).optional(),
    domain: z.array(ACLAction$outboundSchema).optional(),
    domainAcceptDelegation: z.array(ACLAction$outboundSchema).optional(),
    domainAuthCodes: z.array(ACLAction$outboundSchema).optional(),
    domainCertificate: z.array(ACLAction$outboundSchema).optional(),
    domainCheckConfig: z.array(ACLAction$outboundSchema).optional(),
    domainMove: z.array(ACLAction$outboundSchema).optional(),
    domainPurchase: z.array(ACLAction$outboundSchema).optional(),
    domainRecord: z.array(ACLAction$outboundSchema).optional(),
    domainTransferIn: z.array(ACLAction$outboundSchema).optional(),
    event: z.array(ACLAction$outboundSchema).optional(),
    ownEvent: z.array(ACLAction$outboundSchema).optional(),
    sensitiveEnvironmentVariablePolicy: z.array(ACLAction$outboundSchema)
        .optional(),
    fileUpload: z.array(ACLAction$outboundSchema).optional(),
    flagsExplorerSubscription: z.array(ACLAction$outboundSchema).optional(),
    gitRepository: z.array(ACLAction$outboundSchema).optional(),
    ipBlocking: z.array(ACLAction$outboundSchema).optional(),
    imageOptimizationNewPrice: z.array(ACLAction$outboundSchema).optional(),
    integration: z.array(ACLAction$outboundSchema).optional(),
    integrationAccount: z.array(ACLAction$outboundSchema).optional(),
    integrationConfiguration: z.array(ACLAction$outboundSchema).optional(),
    integrationConfigurationTransfer: z.array(ACLAction$outboundSchema)
        .optional(),
    integrationConfigurationProjects: z.array(ACLAction$outboundSchema)
        .optional(),
    integrationVercelConfigurationOverride: z.array(ACLAction$outboundSchema)
        .optional(),
    integrationConfigurationRole: z.array(ACLAction$outboundSchema).optional(),
    integrationSSOSession: z.array(ACLAction$outboundSchema).optional(),
    integrationResource: z.array(ACLAction$outboundSchema).optional(),
    integrationEvent: z.array(ACLAction$outboundSchema).optional(),
    integrationResourceSecrets: z.array(ACLAction$outboundSchema).optional(),
    integrationDeploymentAction: z.array(ACLAction$outboundSchema).optional(),
    marketplaceInstallationMember: z.array(ACLAction$outboundSchema).optional(),
    marketplaceBillingData: z.array(ACLAction$outboundSchema).optional(),
    marketplaceInvoice: z.array(ACLAction$outboundSchema).optional(),
    marketplaceExperimentationItem: z.array(ACLAction$outboundSchema).optional(),
    marketplaceExperimentationEdgeConfigData: z.array(ACLAction$outboundSchema)
        .optional(),
    jobGlobal: z.array(ACLAction$outboundSchema).optional(),
    drain: z.array(ACLAction$outboundSchema).optional(),
    logDrain: z.array(ACLAction$outboundSchema).optional(),
    monitoring: z.array(ACLAction$outboundSchema).optional(),
    monitoringSettings: z.array(ACLAction$outboundSchema).optional(),
    monitoringQuery: z.array(ACLAction$outboundSchema).optional(),
    monitoringChart: z.array(ACLAction$outboundSchema).optional(),
    monitoringAlert: z.array(ACLAction$outboundSchema).optional(),
    notificationDeploymentFailed: z.array(ACLAction$outboundSchema).optional(),
    notificationDomainConfiguration: z.array(ACLAction$outboundSchema).optional(),
    notificationDomainExpire: z.array(ACLAction$outboundSchema).optional(),
    notificationDomainMoved: z.array(ACLAction$outboundSchema).optional(),
    notificationDomainPurchase: z.array(ACLAction$outboundSchema).optional(),
    notificationDomainRenewal: z.array(ACLAction$outboundSchema).optional(),
    notificationDomainTransfer: z.array(ACLAction$outboundSchema).optional(),
    notificationDomainUnverified: z.array(ACLAction$outboundSchema).optional(),
    notificationMonitoringAlert: z.array(ACLAction$outboundSchema).optional(),
    notificationPaymentFailed: z.array(ACLAction$outboundSchema).optional(),
    notificationUsageAlert: z.array(ACLAction$outboundSchema).optional(),
    notificationCustomerBudget: z.array(ACLAction$outboundSchema).optional(),
    notificationStatementOfReasons: z.array(ACLAction$outboundSchema).optional(),
    observabilityConfiguration: z.array(ACLAction$outboundSchema).optional(),
    observabilityNotebook: z.array(ACLAction$outboundSchema).optional(),
    openTelemetryEndpoint: z.array(ACLAction$outboundSchema).optional(),
    vercelAppInstallation: z.array(ACLAction$outboundSchema).optional(),
    paymentMethod: z.array(ACLAction$outboundSchema).optional(),
    permissions: z.array(ACLAction$outboundSchema).optional(),
    postgres: z.array(ACLAction$outboundSchema).optional(),
    previewDeploymentSuffix: z.array(ACLAction$outboundSchema).optional(),
    proTrialOnboarding: z.array(ACLAction$outboundSchema).optional(),
    sharedEnvVars: z.array(ACLAction$outboundSchema).optional(),
    sharedEnvVarsProduction: z.array(ACLAction$outboundSchema).optional(),
    space: z.array(ACLAction$outboundSchema).optional(),
    spaceRun: z.array(ACLAction$outboundSchema).optional(),
    passwordProtectionInvoiceItem: z.array(ACLAction$outboundSchema).optional(),
    rateLimit: z.array(ACLAction$outboundSchema).optional(),
    redis: z.array(ACLAction$outboundSchema).optional(),
    repository: z.array(ACLAction$outboundSchema).optional(),
    remoteCaching: z.array(ACLAction$outboundSchema).optional(),
    samlConfig: z.array(ACLAction$outboundSchema).optional(),
    secret: z.array(ACLAction$outboundSchema).optional(),
    redisStoreTokenSet: z.array(ACLAction$outboundSchema).optional(),
    blobStoreTokenSet: z.array(ACLAction$outboundSchema).optional(),
    postgresStoreTokenSet: z.array(ACLAction$outboundSchema).optional(),
    integrationStoreTokenSet: z.array(ACLAction$outboundSchema).optional(),
    integrationResourceReplCommand: z.array(ACLAction$outboundSchema).optional(),
    storeTransfer: z.array(ACLAction$outboundSchema).optional(),
    supportCase: z.array(ACLAction$outboundSchema).optional(),
    supportCaseComment: z.array(ACLAction$outboundSchema).optional(),
    dataCacheBillingSettings: z.array(ACLAction$outboundSchema).optional(),
    team: z.array(ACLAction$outboundSchema).optional(),
    teamAccessRequest: z.array(ACLAction$outboundSchema).optional(),
    teamFellowMembership: z.array(ACLAction$outboundSchema).optional(),
    teamGitExclusivity: z.array(ACLAction$outboundSchema).optional(),
    teamInvite: z.array(ACLAction$outboundSchema).optional(),
    teamInviteCode: z.array(ACLAction$outboundSchema).optional(),
    teamJoin: z.array(ACLAction$outboundSchema).optional(),
    teamMemberMfaStatus: z.array(ACLAction$outboundSchema).optional(),
    teamMicrofrontends: z.array(ACLAction$outboundSchema).optional(),
    teamOwnMembership: z.array(ACLAction$outboundSchema).optional(),
    teamOwnMembershipDisconnectSAML: z.array(ACLAction$outboundSchema).optional(),
    token: z.array(ACLAction$outboundSchema).optional(),
    usage: z.array(ACLAction$outboundSchema).optional(),
    usageCycle: z.array(ACLAction$outboundSchema).optional(),
    vpcPeeringConnection: z.array(ACLAction$outboundSchema).optional(),
    webAnalyticsPlan: z.array(ACLAction$outboundSchema).optional(),
    edgeConfig: z.array(ACLAction$outboundSchema).optional(),
    edgeConfigItem: z.array(ACLAction$outboundSchema).optional(),
    edgeConfigSchema: z.array(ACLAction$outboundSchema).optional(),
    edgeConfigToken: z.array(ACLAction$outboundSchema).optional(),
    webhook: z.array(ACLAction$outboundSchema).optional(),
    webhookEvent: z.array(ACLAction$outboundSchema).optional(),
    endpointVerification: z.array(ACLAction$outboundSchema).optional(),
    projectTransferIn: z.array(ACLAction$outboundSchema).optional(),
    oauth2Application: z.array(ACLAction$outboundSchema).optional(),
    vercelRun: z.array(ACLAction$outboundSchema).optional(),
    vercelRunExec: z.array(ACLAction$outboundSchema).optional(),
    aliasProject: z.array(ACLAction$outboundSchema).optional(),
    aliasProtectionBypass: z.array(ACLAction$outboundSchema).optional(),
    productionAliasProtectionBypass: z.array(ACLAction$outboundSchema).optional(),
    connectConfigurationLink: z.array(ACLAction$outboundSchema).optional(),
    dataCacheNamespace: z.array(ACLAction$outboundSchema).optional(),
    deployment: z.array(ACLAction$outboundSchema).optional(),
    deploymentCheck: z.array(ACLAction$outboundSchema).optional(),
    deploymentCheckPreview: z.array(ACLAction$outboundSchema).optional(),
    deploymentCheckReRunFromProductionBranch: z.array(ACLAction$outboundSchema)
        .optional(),
    deploymentProductionGit: z.array(ACLAction$outboundSchema).optional(),
    deploymentV0: z.array(ACLAction$outboundSchema).optional(),
    deploymentPreview: z.array(ACLAction$outboundSchema).optional(),
    deploymentPrivate: z.array(ACLAction$outboundSchema).optional(),
    deploymentPromote: z.array(ACLAction$outboundSchema).optional(),
    deploymentRollback: z.array(ACLAction$outboundSchema).optional(),
    edgeCacheNamespace: z.array(ACLAction$outboundSchema).optional(),
    environments: z.array(ACLAction$outboundSchema).optional(),
    logs: z.array(ACLAction$outboundSchema).optional(),
    logsPreset: z.array(ACLAction$outboundSchema).optional(),
    passwordProtection: z.array(ACLAction$outboundSchema).optional(),
    optionsAllowlist: z.array(ACLAction$outboundSchema).optional(),
    job: z.array(ACLAction$outboundSchema).optional(),
    observabilityData: z.array(ACLAction$outboundSchema).optional(),
    project: z.array(ACLAction$outboundSchema).optional(),
    projectFromV0: z.array(ACLAction$outboundSchema).optional(),
    projectAccessGroup: z.array(ACLAction$outboundSchema).optional(),
    projectAnalyticsSampling: z.array(ACLAction$outboundSchema).optional(),
    projectDeploymentHook: z.array(ACLAction$outboundSchema).optional(),
    projectDomain: z.array(ACLAction$outboundSchema).optional(),
    projectDomainMove: z.array(ACLAction$outboundSchema).optional(),
    projectDomainCheckConfig: z.array(ACLAction$outboundSchema).optional(),
    projectEnvVars: z.array(ACLAction$outboundSchema).optional(),
    projectEnvVarsProduction: z.array(ACLAction$outboundSchema).optional(),
    projectEnvVarsUnownedByIntegration: z.array(ACLAction$outboundSchema)
        .optional(),
    projectFlags: z.array(ACLAction$outboundSchema).optional(),
    projectId: z.array(ACLAction$outboundSchema).optional(),
    projectIntegrationConfiguration: z.array(ACLAction$outboundSchema).optional(),
    projectLink: z.array(ACLAction$outboundSchema).optional(),
    projectMember: z.array(ACLAction$outboundSchema).optional(),
    projectMonitoring: z.array(ACLAction$outboundSchema).optional(),
    projectPermissions: z.array(ACLAction$outboundSchema).optional(),
    projectProductionBranch: z.array(ACLAction$outboundSchema).optional(),
    projectTransfer: z.array(ACLAction$outboundSchema).optional(),
    projectTransferOut: z.array(ACLAction$outboundSchema).optional(),
    projectProtectionBypass: z.array(ACLAction$outboundSchema).optional(),
    projectUsage: z.array(ACLAction$outboundSchema).optional(),
    projectAnalyticsUsage: z.array(ACLAction$outboundSchema).optional(),
    projectSupportCase: z.array(ACLAction$outboundSchema).optional(),
    projectSupportCaseComment: z.array(ACLAction$outboundSchema).optional(),
    projectDeploymentExpiration: z.array(ACLAction$outboundSchema).optional(),
    projectRollingRelease: z.array(ACLAction$outboundSchema).optional(),
    projectTier: z.array(ACLAction$outboundSchema).optional(),
    seawallConfig: z.array(ACLAction$outboundSchema).optional(),
    skewProtection: z.array(ACLAction$outboundSchema).optional(),
    analytics: z.array(ACLAction$outboundSchema).optional(),
    trustedIps: z.array(ACLAction$outboundSchema).optional(),
    webAnalytics: z.array(ACLAction$outboundSchema).optional(),
    sharedEnvVarConnection: z.array(ACLAction$outboundSchema).optional(),
    sonar: z.array(ACLAction$outboundSchema).optional(),
}).transform((v) => {
    return remap$(v, {
        monitoring: "Monitoring",
        notificationMonitoringAlert: "NotificationMonitoringAlert",
        webhookEvent: "webhook-event",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UpdateProjectPermissions$;
(function (UpdateProjectPermissions$) {
    /** @deprecated use `UpdateProjectPermissions$inboundSchema` instead. */
    UpdateProjectPermissions$.inboundSchema = UpdateProjectPermissions$inboundSchema;
    /** @deprecated use `UpdateProjectPermissions$outboundSchema` instead. */
    UpdateProjectPermissions$.outboundSchema = UpdateProjectPermissions$outboundSchema;
})(UpdateProjectPermissions$ || (UpdateProjectPermissions$ = {}));
export function updateProjectPermissionsToJSON(updateProjectPermissions) {
    return JSON.stringify(UpdateProjectPermissions$outboundSchema.parse(updateProjectPermissions));
}
export function updateProjectPermissionsFromJSON(jsonString) {
    return safeParse(jsonString, (x) => UpdateProjectPermissions$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'UpdateProjectPermissions' from JSON`);
}
/** @internal */
export const UpdateProjectLastRollbackTarget$inboundSchema = z.object({});
/** @internal */
export const UpdateProjectLastRollbackTarget$outboundSchema = z.object({});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UpdateProjectLastRollbackTarget$;
(function (UpdateProjectLastRollbackTarget$) {
    /** @deprecated use `UpdateProjectLastRollbackTarget$inboundSchema` instead. */
    UpdateProjectLastRollbackTarget$.inboundSchema = UpdateProjectLastRollbackTarget$inboundSchema;
    /** @deprecated use `UpdateProjectLastRollbackTarget$outboundSchema` instead. */
    UpdateProjectLastRollbackTarget$.outboundSchema = UpdateProjectLastRollbackTarget$outboundSchema;
})(UpdateProjectLastRollbackTarget$ || (UpdateProjectLastRollbackTarget$ = {}));
export function updateProjectLastRollbackTargetToJSON(updateProjectLastRollbackTarget) {
    return JSON.stringify(UpdateProjectLastRollbackTarget$outboundSchema.parse(updateProjectLastRollbackTarget));
}
export function updateProjectLastRollbackTargetFromJSON(jsonString) {
    return safeParse(jsonString, (x) => UpdateProjectLastRollbackTarget$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'UpdateProjectLastRollbackTarget' from JSON`);
}
/** @internal */
export const UpdateProjectJobStatus$inboundSchema = z.nativeEnum(UpdateProjectJobStatus);
/** @internal */
export const UpdateProjectJobStatus$outboundSchema = UpdateProjectJobStatus$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UpdateProjectJobStatus$;
(function (UpdateProjectJobStatus$) {
    /** @deprecated use `UpdateProjectJobStatus$inboundSchema` instead. */
    UpdateProjectJobStatus$.inboundSchema = UpdateProjectJobStatus$inboundSchema;
    /** @deprecated use `UpdateProjectJobStatus$outboundSchema` instead. */
    UpdateProjectJobStatus$.outboundSchema = UpdateProjectJobStatus$outboundSchema;
})(UpdateProjectJobStatus$ || (UpdateProjectJobStatus$ = {}));
/** @internal */
export const UpdateProjectProjectsResponse200ApplicationJSONType$inboundSchema = z.nativeEnum(UpdateProjectProjectsResponse200ApplicationJSONType);
/** @internal */
export const UpdateProjectProjectsResponse200ApplicationJSONType$outboundSchema = UpdateProjectProjectsResponse200ApplicationJSONType$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UpdateProjectProjectsResponse200ApplicationJSONType$;
(function (UpdateProjectProjectsResponse200ApplicationJSONType$) {
    /** @deprecated use `UpdateProjectProjectsResponse200ApplicationJSONType$inboundSchema` instead. */
    UpdateProjectProjectsResponse200ApplicationJSONType$.inboundSchema = UpdateProjectProjectsResponse200ApplicationJSONType$inboundSchema;
    /** @deprecated use `UpdateProjectProjectsResponse200ApplicationJSONType$outboundSchema` instead. */
    UpdateProjectProjectsResponse200ApplicationJSONType$.outboundSchema = UpdateProjectProjectsResponse200ApplicationJSONType$outboundSchema;
})(UpdateProjectProjectsResponse200ApplicationJSONType$ || (UpdateProjectProjectsResponse200ApplicationJSONType$ = {}));
/** @internal */
export const UpdateProjectLastAliasRequest$inboundSchema = z.object({
    fromDeploymentId: z.string(),
    toDeploymentId: z.string(),
    fromRollingReleaseId: z.string().optional(),
    jobStatus: UpdateProjectJobStatus$inboundSchema,
    requestedAt: z.number(),
    type: UpdateProjectProjectsResponse200ApplicationJSONType$inboundSchema,
});
/** @internal */
export const UpdateProjectLastAliasRequest$outboundSchema = z.object({
    fromDeploymentId: z.string(),
    toDeploymentId: z.string(),
    fromRollingReleaseId: z.string().optional(),
    jobStatus: UpdateProjectJobStatus$outboundSchema,
    requestedAt: z.number(),
    type: UpdateProjectProjectsResponse200ApplicationJSONType$outboundSchema,
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UpdateProjectLastAliasRequest$;
(function (UpdateProjectLastAliasRequest$) {
    /** @deprecated use `UpdateProjectLastAliasRequest$inboundSchema` instead. */
    UpdateProjectLastAliasRequest$.inboundSchema = UpdateProjectLastAliasRequest$inboundSchema;
    /** @deprecated use `UpdateProjectLastAliasRequest$outboundSchema` instead. */
    UpdateProjectLastAliasRequest$.outboundSchema = UpdateProjectLastAliasRequest$outboundSchema;
})(UpdateProjectLastAliasRequest$ || (UpdateProjectLastAliasRequest$ = {}));
export function updateProjectLastAliasRequestToJSON(updateProjectLastAliasRequest) {
    return JSON.stringify(UpdateProjectLastAliasRequest$outboundSchema.parse(updateProjectLastAliasRequest));
}
export function updateProjectLastAliasRequestFromJSON(jsonString) {
    return safeParse(jsonString, (x) => UpdateProjectLastAliasRequest$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'UpdateProjectLastAliasRequest' from JSON`);
}
/** @internal */
export const UpdateProjectProtectionBypassProjectsScope$inboundSchema = z
    .nativeEnum(UpdateProjectProtectionBypassProjectsScope);
/** @internal */
export const UpdateProjectProtectionBypassProjectsScope$outboundSchema = UpdateProjectProtectionBypassProjectsScope$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UpdateProjectProtectionBypassProjectsScope$;
(function (UpdateProjectProtectionBypassProjectsScope$) {
    /** @deprecated use `UpdateProjectProtectionBypassProjectsScope$inboundSchema` instead. */
    UpdateProjectProtectionBypassProjectsScope$.inboundSchema = UpdateProjectProtectionBypassProjectsScope$inboundSchema;
    /** @deprecated use `UpdateProjectProtectionBypassProjectsScope$outboundSchema` instead. */
    UpdateProjectProtectionBypassProjectsScope$.outboundSchema = UpdateProjectProtectionBypassProjectsScope$outboundSchema;
})(UpdateProjectProtectionBypassProjectsScope$ || (UpdateProjectProtectionBypassProjectsScope$ = {}));
/** @internal */
export const UpdateProjectProtectionBypass2$inboundSchema = z.object({
    createdAt: z.number(),
    createdBy: z.string(),
    scope: UpdateProjectProtectionBypassProjectsScope$inboundSchema,
});
/** @internal */
export const UpdateProjectProtectionBypass2$outboundSchema = z.object({
    createdAt: z.number(),
    createdBy: z.string(),
    scope: UpdateProjectProtectionBypassProjectsScope$outboundSchema,
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UpdateProjectProtectionBypass2$;
(function (UpdateProjectProtectionBypass2$) {
    /** @deprecated use `UpdateProjectProtectionBypass2$inboundSchema` instead. */
    UpdateProjectProtectionBypass2$.inboundSchema = UpdateProjectProtectionBypass2$inboundSchema;
    /** @deprecated use `UpdateProjectProtectionBypass2$outboundSchema` instead. */
    UpdateProjectProtectionBypass2$.outboundSchema = UpdateProjectProtectionBypass2$outboundSchema;
})(UpdateProjectProtectionBypass2$ || (UpdateProjectProtectionBypass2$ = {}));
export function updateProjectProtectionBypass2ToJSON(updateProjectProtectionBypass2) {
    return JSON.stringify(UpdateProjectProtectionBypass2$outboundSchema.parse(updateProjectProtectionBypass2));
}
export function updateProjectProtectionBypass2FromJSON(jsonString) {
    return safeParse(jsonString, (x) => UpdateProjectProtectionBypass2$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'UpdateProjectProtectionBypass2' from JSON`);
}
/** @internal */
export const UpdateProjectProtectionBypassScope$inboundSchema = z.nativeEnum(UpdateProjectProtectionBypassScope);
/** @internal */
export const UpdateProjectProtectionBypassScope$outboundSchema = UpdateProjectProtectionBypassScope$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UpdateProjectProtectionBypassScope$;
(function (UpdateProjectProtectionBypassScope$) {
    /** @deprecated use `UpdateProjectProtectionBypassScope$inboundSchema` instead. */
    UpdateProjectProtectionBypassScope$.inboundSchema = UpdateProjectProtectionBypassScope$inboundSchema;
    /** @deprecated use `UpdateProjectProtectionBypassScope$outboundSchema` instead. */
    UpdateProjectProtectionBypassScope$.outboundSchema = UpdateProjectProtectionBypassScope$outboundSchema;
})(UpdateProjectProtectionBypassScope$ || (UpdateProjectProtectionBypassScope$ = {}));
/** @internal */
export const UpdateProjectProtectionBypass1$inboundSchema = z.object({
    createdAt: z.number(),
    createdBy: z.string(),
    scope: UpdateProjectProtectionBypassScope$inboundSchema,
    integrationId: z.string(),
    configurationId: z.string(),
});
/** @internal */
export const UpdateProjectProtectionBypass1$outboundSchema = z.object({
    createdAt: z.number(),
    createdBy: z.string(),
    scope: UpdateProjectProtectionBypassScope$outboundSchema,
    integrationId: z.string(),
    configurationId: z.string(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UpdateProjectProtectionBypass1$;
(function (UpdateProjectProtectionBypass1$) {
    /** @deprecated use `UpdateProjectProtectionBypass1$inboundSchema` instead. */
    UpdateProjectProtectionBypass1$.inboundSchema = UpdateProjectProtectionBypass1$inboundSchema;
    /** @deprecated use `UpdateProjectProtectionBypass1$outboundSchema` instead. */
    UpdateProjectProtectionBypass1$.outboundSchema = UpdateProjectProtectionBypass1$outboundSchema;
})(UpdateProjectProtectionBypass1$ || (UpdateProjectProtectionBypass1$ = {}));
export function updateProjectProtectionBypass1ToJSON(updateProjectProtectionBypass1) {
    return JSON.stringify(UpdateProjectProtectionBypass1$outboundSchema.parse(updateProjectProtectionBypass1));
}
export function updateProjectProtectionBypass1FromJSON(jsonString) {
    return safeParse(jsonString, (x) => UpdateProjectProtectionBypass1$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'UpdateProjectProtectionBypass1' from JSON`);
}
/** @internal */
export const UpdateProjectProtectionBypass$inboundSchema = z.union([
    z.lazy(() => UpdateProjectProtectionBypass2$inboundSchema),
    z.lazy(() => UpdateProjectProtectionBypass1$inboundSchema),
]);
/** @internal */
export const UpdateProjectProtectionBypass$outboundSchema = z.union([
    z.lazy(() => UpdateProjectProtectionBypass2$outboundSchema),
    z.lazy(() => UpdateProjectProtectionBypass1$outboundSchema),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UpdateProjectProtectionBypass$;
(function (UpdateProjectProtectionBypass$) {
    /** @deprecated use `UpdateProjectProtectionBypass$inboundSchema` instead. */
    UpdateProjectProtectionBypass$.inboundSchema = UpdateProjectProtectionBypass$inboundSchema;
    /** @deprecated use `UpdateProjectProtectionBypass$outboundSchema` instead. */
    UpdateProjectProtectionBypass$.outboundSchema = UpdateProjectProtectionBypass$outboundSchema;
})(UpdateProjectProtectionBypass$ || (UpdateProjectProtectionBypass$ = {}));
export function updateProjectProtectionBypassToJSON(updateProjectProtectionBypass) {
    return JSON.stringify(UpdateProjectProtectionBypass$outboundSchema.parse(updateProjectProtectionBypass));
}
export function updateProjectProtectionBypassFromJSON(jsonString) {
    return safeParse(jsonString, (x) => UpdateProjectProtectionBypass$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'UpdateProjectProtectionBypass' from JSON`);
}
/** @internal */
export const UpdateProjectTrustedIpsProjectsDeploymentType$inboundSchema = z
    .nativeEnum(UpdateProjectTrustedIpsProjectsDeploymentType);
/** @internal */
export const UpdateProjectTrustedIpsProjectsDeploymentType$outboundSchema = UpdateProjectTrustedIpsProjectsDeploymentType$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UpdateProjectTrustedIpsProjectsDeploymentType$;
(function (UpdateProjectTrustedIpsProjectsDeploymentType$) {
    /** @deprecated use `UpdateProjectTrustedIpsProjectsDeploymentType$inboundSchema` instead. */
    UpdateProjectTrustedIpsProjectsDeploymentType$.inboundSchema = UpdateProjectTrustedIpsProjectsDeploymentType$inboundSchema;
    /** @deprecated use `UpdateProjectTrustedIpsProjectsDeploymentType$outboundSchema` instead. */
    UpdateProjectTrustedIpsProjectsDeploymentType$.outboundSchema = UpdateProjectTrustedIpsProjectsDeploymentType$outboundSchema;
})(UpdateProjectTrustedIpsProjectsDeploymentType$ || (UpdateProjectTrustedIpsProjectsDeploymentType$ = {}));
/** @internal */
export const UpdateProjectTrustedIps2$inboundSchema = z.object({
    deploymentType: UpdateProjectTrustedIpsProjectsDeploymentType$inboundSchema,
});
/** @internal */
export const UpdateProjectTrustedIps2$outboundSchema = z.object({
    deploymentType: UpdateProjectTrustedIpsProjectsDeploymentType$outboundSchema,
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UpdateProjectTrustedIps2$;
(function (UpdateProjectTrustedIps2$) {
    /** @deprecated use `UpdateProjectTrustedIps2$inboundSchema` instead. */
    UpdateProjectTrustedIps2$.inboundSchema = UpdateProjectTrustedIps2$inboundSchema;
    /** @deprecated use `UpdateProjectTrustedIps2$outboundSchema` instead. */
    UpdateProjectTrustedIps2$.outboundSchema = UpdateProjectTrustedIps2$outboundSchema;
})(UpdateProjectTrustedIps2$ || (UpdateProjectTrustedIps2$ = {}));
export function updateProjectTrustedIps2ToJSON(updateProjectTrustedIps2) {
    return JSON.stringify(UpdateProjectTrustedIps2$outboundSchema.parse(updateProjectTrustedIps2));
}
export function updateProjectTrustedIps2FromJSON(jsonString) {
    return safeParse(jsonString, (x) => UpdateProjectTrustedIps2$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'UpdateProjectTrustedIps2' from JSON`);
}
/** @internal */
export const UpdateProjectTrustedIpsDeploymentType$inboundSchema = z.nativeEnum(UpdateProjectTrustedIpsDeploymentType);
/** @internal */
export const UpdateProjectTrustedIpsDeploymentType$outboundSchema = UpdateProjectTrustedIpsDeploymentType$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UpdateProjectTrustedIpsDeploymentType$;
(function (UpdateProjectTrustedIpsDeploymentType$) {
    /** @deprecated use `UpdateProjectTrustedIpsDeploymentType$inboundSchema` instead. */
    UpdateProjectTrustedIpsDeploymentType$.inboundSchema = UpdateProjectTrustedIpsDeploymentType$inboundSchema;
    /** @deprecated use `UpdateProjectTrustedIpsDeploymentType$outboundSchema` instead. */
    UpdateProjectTrustedIpsDeploymentType$.outboundSchema = UpdateProjectTrustedIpsDeploymentType$outboundSchema;
})(UpdateProjectTrustedIpsDeploymentType$ || (UpdateProjectTrustedIpsDeploymentType$ = {}));
/** @internal */
export const UpdateProjectTrustedIpsAddresses$inboundSchema = z.object({
    value: z.string(),
    note: z.string().optional(),
});
/** @internal */
export const UpdateProjectTrustedIpsAddresses$outboundSchema = z.object({
    value: z.string(),
    note: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UpdateProjectTrustedIpsAddresses$;
(function (UpdateProjectTrustedIpsAddresses$) {
    /** @deprecated use `UpdateProjectTrustedIpsAddresses$inboundSchema` instead. */
    UpdateProjectTrustedIpsAddresses$.inboundSchema = UpdateProjectTrustedIpsAddresses$inboundSchema;
    /** @deprecated use `UpdateProjectTrustedIpsAddresses$outboundSchema` instead. */
    UpdateProjectTrustedIpsAddresses$.outboundSchema = UpdateProjectTrustedIpsAddresses$outboundSchema;
})(UpdateProjectTrustedIpsAddresses$ || (UpdateProjectTrustedIpsAddresses$ = {}));
export function updateProjectTrustedIpsAddressesToJSON(updateProjectTrustedIpsAddresses) {
    return JSON.stringify(UpdateProjectTrustedIpsAddresses$outboundSchema.parse(updateProjectTrustedIpsAddresses));
}
export function updateProjectTrustedIpsAddressesFromJSON(jsonString) {
    return safeParse(jsonString, (x) => UpdateProjectTrustedIpsAddresses$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'UpdateProjectTrustedIpsAddresses' from JSON`);
}
/** @internal */
export const UpdateProjectTrustedIpsProtectionMode$inboundSchema = z.nativeEnum(UpdateProjectTrustedIpsProtectionMode);
/** @internal */
export const UpdateProjectTrustedIpsProtectionMode$outboundSchema = UpdateProjectTrustedIpsProtectionMode$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UpdateProjectTrustedIpsProtectionMode$;
(function (UpdateProjectTrustedIpsProtectionMode$) {
    /** @deprecated use `UpdateProjectTrustedIpsProtectionMode$inboundSchema` instead. */
    UpdateProjectTrustedIpsProtectionMode$.inboundSchema = UpdateProjectTrustedIpsProtectionMode$inboundSchema;
    /** @deprecated use `UpdateProjectTrustedIpsProtectionMode$outboundSchema` instead. */
    UpdateProjectTrustedIpsProtectionMode$.outboundSchema = UpdateProjectTrustedIpsProtectionMode$outboundSchema;
})(UpdateProjectTrustedIpsProtectionMode$ || (UpdateProjectTrustedIpsProtectionMode$ = {}));
/** @internal */
export const UpdateProjectTrustedIps1$inboundSchema = z.object({
    deploymentType: UpdateProjectTrustedIpsDeploymentType$inboundSchema,
    addresses: z.array(z.lazy(() => UpdateProjectTrustedIpsAddresses$inboundSchema)),
    protectionMode: UpdateProjectTrustedIpsProtectionMode$inboundSchema,
});
/** @internal */
export const UpdateProjectTrustedIps1$outboundSchema = z.object({
    deploymentType: UpdateProjectTrustedIpsDeploymentType$outboundSchema,
    addresses: z.array(z.lazy(() => UpdateProjectTrustedIpsAddresses$outboundSchema)),
    protectionMode: UpdateProjectTrustedIpsProtectionMode$outboundSchema,
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UpdateProjectTrustedIps1$;
(function (UpdateProjectTrustedIps1$) {
    /** @deprecated use `UpdateProjectTrustedIps1$inboundSchema` instead. */
    UpdateProjectTrustedIps1$.inboundSchema = UpdateProjectTrustedIps1$inboundSchema;
    /** @deprecated use `UpdateProjectTrustedIps1$outboundSchema` instead. */
    UpdateProjectTrustedIps1$.outboundSchema = UpdateProjectTrustedIps1$outboundSchema;
})(UpdateProjectTrustedIps1$ || (UpdateProjectTrustedIps1$ = {}));
export function updateProjectTrustedIps1ToJSON(updateProjectTrustedIps1) {
    return JSON.stringify(UpdateProjectTrustedIps1$outboundSchema.parse(updateProjectTrustedIps1));
}
export function updateProjectTrustedIps1FromJSON(jsonString) {
    return safeParse(jsonString, (x) => UpdateProjectTrustedIps1$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'UpdateProjectTrustedIps1' from JSON`);
}
/** @internal */
export const UpdateProjectProjectsTrustedIps$inboundSchema = z.union([
    z.lazy(() => UpdateProjectTrustedIps2$inboundSchema),
    z.lazy(() => UpdateProjectTrustedIps1$inboundSchema),
]);
/** @internal */
export const UpdateProjectProjectsTrustedIps$outboundSchema = z.union([
    z.lazy(() => UpdateProjectTrustedIps2$outboundSchema),
    z.lazy(() => UpdateProjectTrustedIps1$outboundSchema),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UpdateProjectProjectsTrustedIps$;
(function (UpdateProjectProjectsTrustedIps$) {
    /** @deprecated use `UpdateProjectProjectsTrustedIps$inboundSchema` instead. */
    UpdateProjectProjectsTrustedIps$.inboundSchema = UpdateProjectProjectsTrustedIps$inboundSchema;
    /** @deprecated use `UpdateProjectProjectsTrustedIps$outboundSchema` instead. */
    UpdateProjectProjectsTrustedIps$.outboundSchema = UpdateProjectProjectsTrustedIps$outboundSchema;
})(UpdateProjectProjectsTrustedIps$ || (UpdateProjectProjectsTrustedIps$ = {}));
export function updateProjectProjectsTrustedIpsToJSON(updateProjectProjectsTrustedIps) {
    return JSON.stringify(UpdateProjectProjectsTrustedIps$outboundSchema.parse(updateProjectProjectsTrustedIps));
}
export function updateProjectProjectsTrustedIpsFromJSON(jsonString) {
    return safeParse(jsonString, (x) => UpdateProjectProjectsTrustedIps$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'UpdateProjectProjectsTrustedIps' from JSON`);
}
/** @internal */
export const UpdateProjectGitComments$inboundSchema = z.object({
    onPullRequest: z.boolean(),
    onCommit: z.boolean(),
});
/** @internal */
export const UpdateProjectGitComments$outboundSchema = z.object({
    onPullRequest: z.boolean(),
    onCommit: z.boolean(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UpdateProjectGitComments$;
(function (UpdateProjectGitComments$) {
    /** @deprecated use `UpdateProjectGitComments$inboundSchema` instead. */
    UpdateProjectGitComments$.inboundSchema = UpdateProjectGitComments$inboundSchema;
    /** @deprecated use `UpdateProjectGitComments$outboundSchema` instead. */
    UpdateProjectGitComments$.outboundSchema = UpdateProjectGitComments$outboundSchema;
})(UpdateProjectGitComments$ || (UpdateProjectGitComments$ = {}));
export function updateProjectGitCommentsToJSON(updateProjectGitComments) {
    return JSON.stringify(UpdateProjectGitComments$outboundSchema.parse(updateProjectGitComments));
}
export function updateProjectGitCommentsFromJSON(jsonString) {
    return safeParse(jsonString, (x) => UpdateProjectGitComments$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'UpdateProjectGitComments' from JSON`);
}
/** @internal */
export const UpdateProjectCreateDeployments$inboundSchema = z.nativeEnum(UpdateProjectCreateDeployments);
/** @internal */
export const UpdateProjectCreateDeployments$outboundSchema = UpdateProjectCreateDeployments$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UpdateProjectCreateDeployments$;
(function (UpdateProjectCreateDeployments$) {
    /** @deprecated use `UpdateProjectCreateDeployments$inboundSchema` instead. */
    UpdateProjectCreateDeployments$.inboundSchema = UpdateProjectCreateDeployments$inboundSchema;
    /** @deprecated use `UpdateProjectCreateDeployments$outboundSchema` instead. */
    UpdateProjectCreateDeployments$.outboundSchema = UpdateProjectCreateDeployments$outboundSchema;
})(UpdateProjectCreateDeployments$ || (UpdateProjectCreateDeployments$ = {}));
/** @internal */
export const UpdateProjectGitProviderOptions$inboundSchema = z.object({
    createDeployments: UpdateProjectCreateDeployments$inboundSchema,
});
/** @internal */
export const UpdateProjectGitProviderOptions$outboundSchema = z.object({
    createDeployments: UpdateProjectCreateDeployments$outboundSchema,
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UpdateProjectGitProviderOptions$;
(function (UpdateProjectGitProviderOptions$) {
    /** @deprecated use `UpdateProjectGitProviderOptions$inboundSchema` instead. */
    UpdateProjectGitProviderOptions$.inboundSchema = UpdateProjectGitProviderOptions$inboundSchema;
    /** @deprecated use `UpdateProjectGitProviderOptions$outboundSchema` instead. */
    UpdateProjectGitProviderOptions$.outboundSchema = UpdateProjectGitProviderOptions$outboundSchema;
})(UpdateProjectGitProviderOptions$ || (UpdateProjectGitProviderOptions$ = {}));
export function updateProjectGitProviderOptionsToJSON(updateProjectGitProviderOptions) {
    return JSON.stringify(UpdateProjectGitProviderOptions$outboundSchema.parse(updateProjectGitProviderOptions));
}
export function updateProjectGitProviderOptionsFromJSON(jsonString) {
    return safeParse(jsonString, (x) => UpdateProjectGitProviderOptions$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'UpdateProjectGitProviderOptions' from JSON`);
}
/** @internal */
export const UpdateProjectWebAnalytics$inboundSchema = z.object({
    id: z.string(),
    disabledAt: z.number().optional(),
    canceledAt: z.number().optional(),
    enabledAt: z.number().optional(),
    hasData: z.boolean().optional(),
});
/** @internal */
export const UpdateProjectWebAnalytics$outboundSchema = z.object({
    id: z.string(),
    disabledAt: z.number().optional(),
    canceledAt: z.number().optional(),
    enabledAt: z.number().optional(),
    hasData: z.boolean().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UpdateProjectWebAnalytics$;
(function (UpdateProjectWebAnalytics$) {
    /** @deprecated use `UpdateProjectWebAnalytics$inboundSchema` instead. */
    UpdateProjectWebAnalytics$.inboundSchema = UpdateProjectWebAnalytics$inboundSchema;
    /** @deprecated use `UpdateProjectWebAnalytics$outboundSchema` instead. */
    UpdateProjectWebAnalytics$.outboundSchema = UpdateProjectWebAnalytics$outboundSchema;
})(UpdateProjectWebAnalytics$ || (UpdateProjectWebAnalytics$ = {}));
export function updateProjectWebAnalyticsToJSON(updateProjectWebAnalytics) {
    return JSON.stringify(UpdateProjectWebAnalytics$outboundSchema.parse(updateProjectWebAnalytics));
}
export function updateProjectWebAnalyticsFromJSON(jsonString) {
    return safeParse(jsonString, (x) => UpdateProjectWebAnalytics$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'UpdateProjectWebAnalytics' from JSON`);
}
/** @internal */
export const UpdateProjectSrc2$inboundSchema = z.object({
    re: z.string().optional(),
    eq: z.string().optional(),
    neq: z.string().optional(),
    inc: z.array(z.string()).optional(),
    ninc: z.array(z.string()).optional(),
    pre: z.string().optional(),
    suf: z.string().optional(),
    gt: z.number().optional(),
    gte: z.number().optional(),
    lt: z.number().optional(),
    lte: z.number().optional(),
});
/** @internal */
export const UpdateProjectSrc2$outboundSchema = z.object({
    re: z.string().optional(),
    eq: z.string().optional(),
    neq: z.string().optional(),
    inc: z.array(z.string()).optional(),
    ninc: z.array(z.string()).optional(),
    pre: z.string().optional(),
    suf: z.string().optional(),
    gt: z.number().optional(),
    gte: z.number().optional(),
    lt: z.number().optional(),
    lte: z.number().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UpdateProjectSrc2$;
(function (UpdateProjectSrc2$) {
    /** @deprecated use `UpdateProjectSrc2$inboundSchema` instead. */
    UpdateProjectSrc2$.inboundSchema = UpdateProjectSrc2$inboundSchema;
    /** @deprecated use `UpdateProjectSrc2$outboundSchema` instead. */
    UpdateProjectSrc2$.outboundSchema = UpdateProjectSrc2$outboundSchema;
})(UpdateProjectSrc2$ || (UpdateProjectSrc2$ = {}));
export function updateProjectSrc2ToJSON(updateProjectSrc2) {
    return JSON.stringify(UpdateProjectSrc2$outboundSchema.parse(updateProjectSrc2));
}
export function updateProjectSrc2FromJSON(jsonString) {
    return safeParse(jsonString, (x) => UpdateProjectSrc2$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'UpdateProjectSrc2' from JSON`);
}
/** @internal */
export const UpdateProjectSrc$inboundSchema = z.union([z.lazy(() => UpdateProjectSrc2$inboundSchema), z.string()]);
/** @internal */
export const UpdateProjectSrc$outboundSchema = z.union([z.lazy(() => UpdateProjectSrc2$outboundSchema), z.string()]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UpdateProjectSrc$;
(function (UpdateProjectSrc$) {
    /** @deprecated use `UpdateProjectSrc$inboundSchema` instead. */
    UpdateProjectSrc$.inboundSchema = UpdateProjectSrc$inboundSchema;
    /** @deprecated use `UpdateProjectSrc$outboundSchema` instead. */
    UpdateProjectSrc$.outboundSchema = UpdateProjectSrc$outboundSchema;
})(UpdateProjectSrc$ || (UpdateProjectSrc$ = {}));
export function updateProjectSrcToJSON(updateProjectSrc) {
    return JSON.stringify(UpdateProjectSrc$outboundSchema.parse(updateProjectSrc));
}
export function updateProjectSrcFromJSON(jsonString) {
    return safeParse(jsonString, (x) => UpdateProjectSrc$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'UpdateProjectSrc' from JSON`);
}
/** @internal */
export const UpdateProjectProjectsResponse200ApplicationJSONResponseBodySecurityType$inboundSchema = z.nativeEnum(UpdateProjectProjectsResponse200ApplicationJSONResponseBodySecurityType);
/** @internal */
export const UpdateProjectProjectsResponse200ApplicationJSONResponseBodySecurityType$outboundSchema = UpdateProjectProjectsResponse200ApplicationJSONResponseBodySecurityType$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UpdateProjectProjectsResponse200ApplicationJSONResponseBodySecurityType$;
(function (UpdateProjectProjectsResponse200ApplicationJSONResponseBodySecurityType$) {
    /** @deprecated use `UpdateProjectProjectsResponse200ApplicationJSONResponseBodySecurityType$inboundSchema` instead. */
    UpdateProjectProjectsResponse200ApplicationJSONResponseBodySecurityType$.inboundSchema = UpdateProjectProjectsResponse200ApplicationJSONResponseBodySecurityType$inboundSchema;
    /** @deprecated use `UpdateProjectProjectsResponse200ApplicationJSONResponseBodySecurityType$outboundSchema` instead. */
    UpdateProjectProjectsResponse200ApplicationJSONResponseBodySecurityType$.outboundSchema = UpdateProjectProjectsResponse200ApplicationJSONResponseBodySecurityType$outboundSchema;
})(UpdateProjectProjectsResponse200ApplicationJSONResponseBodySecurityType$ || (UpdateProjectProjectsResponse200ApplicationJSONResponseBodySecurityType$ = {}));
/** @internal */
export const UpdateProjectValue2$inboundSchema = z.object({
    re: z.string().optional(),
    eq: z.string().optional(),
    neq: z.string().optional(),
    inc: z.array(z.string()).optional(),
    ninc: z.array(z.string()).optional(),
    pre: z.string().optional(),
    suf: z.string().optional(),
    gt: z.number().optional(),
    gte: z.number().optional(),
    lt: z.number().optional(),
    lte: z.number().optional(),
});
/** @internal */
export const UpdateProjectValue2$outboundSchema = z.object({
    re: z.string().optional(),
    eq: z.string().optional(),
    neq: z.string().optional(),
    inc: z.array(z.string()).optional(),
    ninc: z.array(z.string()).optional(),
    pre: z.string().optional(),
    suf: z.string().optional(),
    gt: z.number().optional(),
    gte: z.number().optional(),
    lt: z.number().optional(),
    lte: z.number().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UpdateProjectValue2$;
(function (UpdateProjectValue2$) {
    /** @deprecated use `UpdateProjectValue2$inboundSchema` instead. */
    UpdateProjectValue2$.inboundSchema = UpdateProjectValue2$inboundSchema;
    /** @deprecated use `UpdateProjectValue2$outboundSchema` instead. */
    UpdateProjectValue2$.outboundSchema = UpdateProjectValue2$outboundSchema;
})(UpdateProjectValue2$ || (UpdateProjectValue2$ = {}));
export function updateProjectValue2ToJSON(updateProjectValue2) {
    return JSON.stringify(UpdateProjectValue2$outboundSchema.parse(updateProjectValue2));
}
export function updateProjectValue2FromJSON(jsonString) {
    return safeParse(jsonString, (x) => UpdateProjectValue2$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'UpdateProjectValue2' from JSON`);
}
/** @internal */
export const UpdateProjectValue$inboundSchema = z.union([z.lazy(() => UpdateProjectValue2$inboundSchema), z.string()]);
/** @internal */
export const UpdateProjectValue$outboundSchema = z.union([z.lazy(() => UpdateProjectValue2$outboundSchema), z.string()]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UpdateProjectValue$;
(function (UpdateProjectValue$) {
    /** @deprecated use `UpdateProjectValue$inboundSchema` instead. */
    UpdateProjectValue$.inboundSchema = UpdateProjectValue$inboundSchema;
    /** @deprecated use `UpdateProjectValue$outboundSchema` instead. */
    UpdateProjectValue$.outboundSchema = UpdateProjectValue$outboundSchema;
})(UpdateProjectValue$ || (UpdateProjectValue$ = {}));
export function updateProjectValueToJSON(updateProjectValue) {
    return JSON.stringify(UpdateProjectValue$outboundSchema.parse(updateProjectValue));
}
export function updateProjectValueFromJSON(jsonString) {
    return safeParse(jsonString, (x) => UpdateProjectValue$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'UpdateProjectValue' from JSON`);
}
/** @internal */
export const UpdateProjectHas$inboundSchema = z.object({
    type: UpdateProjectProjectsResponse200ApplicationJSONResponseBodySecurityType$inboundSchema,
    key: z.string().optional(),
    value: z.union([z.lazy(() => UpdateProjectValue2$inboundSchema), z.string()])
        .optional(),
});
/** @internal */
export const UpdateProjectHas$outboundSchema = z.object({
    type: UpdateProjectProjectsResponse200ApplicationJSONResponseBodySecurityType$outboundSchema,
    key: z.string().optional(),
    value: z.union([z.lazy(() => UpdateProjectValue2$outboundSchema), z.string()])
        .optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UpdateProjectHas$;
(function (UpdateProjectHas$) {
    /** @deprecated use `UpdateProjectHas$inboundSchema` instead. */
    UpdateProjectHas$.inboundSchema = UpdateProjectHas$inboundSchema;
    /** @deprecated use `UpdateProjectHas$outboundSchema` instead. */
    UpdateProjectHas$.outboundSchema = UpdateProjectHas$outboundSchema;
})(UpdateProjectHas$ || (UpdateProjectHas$ = {}));
export function updateProjectHasToJSON(updateProjectHas) {
    return JSON.stringify(UpdateProjectHas$outboundSchema.parse(updateProjectHas));
}
export function updateProjectHasFromJSON(jsonString) {
    return safeParse(jsonString, (x) => UpdateProjectHas$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'UpdateProjectHas' from JSON`);
}
/** @internal */
export const UpdateProjectProjectsResponse200ApplicationJSONResponseBodySecurityFirewallRoutesType$inboundSchema = z.nativeEnum(UpdateProjectProjectsResponse200ApplicationJSONResponseBodySecurityFirewallRoutesType);
/** @internal */
export const UpdateProjectProjectsResponse200ApplicationJSONResponseBodySecurityFirewallRoutesType$outboundSchema = UpdateProjectProjectsResponse200ApplicationJSONResponseBodySecurityFirewallRoutesType$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UpdateProjectProjectsResponse200ApplicationJSONResponseBodySecurityFirewallRoutesType$;
(function (UpdateProjectProjectsResponse200ApplicationJSONResponseBodySecurityFirewallRoutesType$) {
    /** @deprecated use `UpdateProjectProjectsResponse200ApplicationJSONResponseBodySecurityFirewallRoutesType$inboundSchema` instead. */
    UpdateProjectProjectsResponse200ApplicationJSONResponseBodySecurityFirewallRoutesType$.inboundSchema = UpdateProjectProjectsResponse200ApplicationJSONResponseBodySecurityFirewallRoutesType$inboundSchema;
    /** @deprecated use `UpdateProjectProjectsResponse200ApplicationJSONResponseBodySecurityFirewallRoutesType$outboundSchema` instead. */
    UpdateProjectProjectsResponse200ApplicationJSONResponseBodySecurityFirewallRoutesType$.outboundSchema = UpdateProjectProjectsResponse200ApplicationJSONResponseBodySecurityFirewallRoutesType$outboundSchema;
})(UpdateProjectProjectsResponse200ApplicationJSONResponseBodySecurityFirewallRoutesType$ || (UpdateProjectProjectsResponse200ApplicationJSONResponseBodySecurityFirewallRoutesType$ = {}));
/** @internal */
export const UpdateProjectValueProjects2$inboundSchema = z.object({
    re: z.string().optional(),
    eq: z.string().optional(),
    neq: z.string().optional(),
    inc: z.array(z.string()).optional(),
    ninc: z.array(z.string()).optional(),
    pre: z.string().optional(),
    suf: z.string().optional(),
    gt: z.number().optional(),
    gte: z.number().optional(),
    lt: z.number().optional(),
    lte: z.number().optional(),
});
/** @internal */
export const UpdateProjectValueProjects2$outboundSchema = z.object({
    re: z.string().optional(),
    eq: z.string().optional(),
    neq: z.string().optional(),
    inc: z.array(z.string()).optional(),
    ninc: z.array(z.string()).optional(),
    pre: z.string().optional(),
    suf: z.string().optional(),
    gt: z.number().optional(),
    gte: z.number().optional(),
    lt: z.number().optional(),
    lte: z.number().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UpdateProjectValueProjects2$;
(function (UpdateProjectValueProjects2$) {
    /** @deprecated use `UpdateProjectValueProjects2$inboundSchema` instead. */
    UpdateProjectValueProjects2$.inboundSchema = UpdateProjectValueProjects2$inboundSchema;
    /** @deprecated use `UpdateProjectValueProjects2$outboundSchema` instead. */
    UpdateProjectValueProjects2$.outboundSchema = UpdateProjectValueProjects2$outboundSchema;
})(UpdateProjectValueProjects2$ || (UpdateProjectValueProjects2$ = {}));
export function updateProjectValueProjects2ToJSON(updateProjectValueProjects2) {
    return JSON.stringify(UpdateProjectValueProjects2$outboundSchema.parse(updateProjectValueProjects2));
}
export function updateProjectValueProjects2FromJSON(jsonString) {
    return safeParse(jsonString, (x) => UpdateProjectValueProjects2$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'UpdateProjectValueProjects2' from JSON`);
}
/** @internal */
export const UpdateProjectProjectsValue$inboundSchema = z.union([
    z.lazy(() => UpdateProjectValueProjects2$inboundSchema),
    z.string(),
]);
/** @internal */
export const UpdateProjectProjectsValue$outboundSchema = z.union([
    z.lazy(() => UpdateProjectValueProjects2$outboundSchema),
    z.string(),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UpdateProjectProjectsValue$;
(function (UpdateProjectProjectsValue$) {
    /** @deprecated use `UpdateProjectProjectsValue$inboundSchema` instead. */
    UpdateProjectProjectsValue$.inboundSchema = UpdateProjectProjectsValue$inboundSchema;
    /** @deprecated use `UpdateProjectProjectsValue$outboundSchema` instead. */
    UpdateProjectProjectsValue$.outboundSchema = UpdateProjectProjectsValue$outboundSchema;
})(UpdateProjectProjectsValue$ || (UpdateProjectProjectsValue$ = {}));
export function updateProjectProjectsValueToJSON(updateProjectProjectsValue) {
    return JSON.stringify(UpdateProjectProjectsValue$outboundSchema.parse(updateProjectProjectsValue));
}
export function updateProjectProjectsValueFromJSON(jsonString) {
    return safeParse(jsonString, (x) => UpdateProjectProjectsValue$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'UpdateProjectProjectsValue' from JSON`);
}
/** @internal */
export const UpdateProjectMissing$inboundSchema = z.object({
    type: UpdateProjectProjectsResponse200ApplicationJSONResponseBodySecurityFirewallRoutesType$inboundSchema,
    key: z.string().optional(),
    value: z.union([
        z.lazy(() => UpdateProjectValueProjects2$inboundSchema),
        z.string(),
    ]).optional(),
});
/** @internal */
export const UpdateProjectMissing$outboundSchema = z.object({
    type: UpdateProjectProjectsResponse200ApplicationJSONResponseBodySecurityFirewallRoutesType$outboundSchema,
    key: z.string().optional(),
    value: z.union([
        z.lazy(() => UpdateProjectValueProjects2$outboundSchema),
        z.string(),
    ]).optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UpdateProjectMissing$;
(function (UpdateProjectMissing$) {
    /** @deprecated use `UpdateProjectMissing$inboundSchema` instead. */
    UpdateProjectMissing$.inboundSchema = UpdateProjectMissing$inboundSchema;
    /** @deprecated use `UpdateProjectMissing$outboundSchema` instead. */
    UpdateProjectMissing$.outboundSchema = UpdateProjectMissing$outboundSchema;
})(UpdateProjectMissing$ || (UpdateProjectMissing$ = {}));
export function updateProjectMissingToJSON(updateProjectMissing) {
    return JSON.stringify(UpdateProjectMissing$outboundSchema.parse(updateProjectMissing));
}
export function updateProjectMissingFromJSON(jsonString) {
    return safeParse(jsonString, (x) => UpdateProjectMissing$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'UpdateProjectMissing' from JSON`);
}
/** @internal */
export const UpdateProjectHandle$inboundSchema = z.nativeEnum(UpdateProjectHandle);
/** @internal */
export const UpdateProjectHandle$outboundSchema = UpdateProjectHandle$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UpdateProjectHandle$;
(function (UpdateProjectHandle$) {
    /** @deprecated use `UpdateProjectHandle$inboundSchema` instead. */
    UpdateProjectHandle$.inboundSchema = UpdateProjectHandle$inboundSchema;
    /** @deprecated use `UpdateProjectHandle$outboundSchema` instead. */
    UpdateProjectHandle$.outboundSchema = UpdateProjectHandle$outboundSchema;
})(UpdateProjectHandle$ || (UpdateProjectHandle$ = {}));
/** @internal */
export const UpdateProjectProjectsAction$inboundSchema = z.nativeEnum(UpdateProjectProjectsAction);
/** @internal */
export const UpdateProjectProjectsAction$outboundSchema = UpdateProjectProjectsAction$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UpdateProjectProjectsAction$;
(function (UpdateProjectProjectsAction$) {
    /** @deprecated use `UpdateProjectProjectsAction$inboundSchema` instead. */
    UpdateProjectProjectsAction$.inboundSchema = UpdateProjectProjectsAction$inboundSchema;
    /** @deprecated use `UpdateProjectProjectsAction$outboundSchema` instead. */
    UpdateProjectProjectsAction$.outboundSchema = UpdateProjectProjectsAction$outboundSchema;
})(UpdateProjectProjectsAction$ || (UpdateProjectProjectsAction$ = {}));
/** @internal */
export const UpdateProjectAlgo$inboundSchema = z.nativeEnum(UpdateProjectAlgo);
/** @internal */
export const UpdateProjectAlgo$outboundSchema = UpdateProjectAlgo$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UpdateProjectAlgo$;
(function (UpdateProjectAlgo$) {
    /** @deprecated use `UpdateProjectAlgo$inboundSchema` instead. */
    UpdateProjectAlgo$.inboundSchema = UpdateProjectAlgo$inboundSchema;
    /** @deprecated use `UpdateProjectAlgo$outboundSchema` instead. */
    UpdateProjectAlgo$.outboundSchema = UpdateProjectAlgo$outboundSchema;
})(UpdateProjectAlgo$ || (UpdateProjectAlgo$ = {}));
/** @internal */
export const UpdateProjectErl$inboundSchema = z.object({
    algo: UpdateProjectAlgo$inboundSchema,
    window: z.number(),
    limit: z.number(),
    keys: z.array(z.string()),
});
/** @internal */
export const UpdateProjectErl$outboundSchema = z.object({
    algo: UpdateProjectAlgo$outboundSchema,
    window: z.number(),
    limit: z.number(),
    keys: z.array(z.string()),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UpdateProjectErl$;
(function (UpdateProjectErl$) {
    /** @deprecated use `UpdateProjectErl$inboundSchema` instead. */
    UpdateProjectErl$.inboundSchema = UpdateProjectErl$inboundSchema;
    /** @deprecated use `UpdateProjectErl$outboundSchema` instead. */
    UpdateProjectErl$.outboundSchema = UpdateProjectErl$outboundSchema;
})(UpdateProjectErl$ || (UpdateProjectErl$ = {}));
export function updateProjectErlToJSON(updateProjectErl) {
    return JSON.stringify(UpdateProjectErl$outboundSchema.parse(updateProjectErl));
}
export function updateProjectErlFromJSON(jsonString) {
    return safeParse(jsonString, (x) => UpdateProjectErl$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'UpdateProjectErl' from JSON`);
}
/** @internal */
export const UpdateProjectMitigate$inboundSchema = z.object({
    action: UpdateProjectProjectsAction$inboundSchema,
    rule_id: z.string(),
    ttl: z.number().optional(),
    erl: z.lazy(() => UpdateProjectErl$inboundSchema).optional(),
}).transform((v) => {
    return remap$(v, {
        "rule_id": "ruleId",
    });
});
/** @internal */
export const UpdateProjectMitigate$outboundSchema = z.object({
    action: UpdateProjectProjectsAction$outboundSchema,
    ruleId: z.string(),
    ttl: z.number().optional(),
    erl: z.lazy(() => UpdateProjectErl$outboundSchema).optional(),
}).transform((v) => {
    return remap$(v, {
        ruleId: "rule_id",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UpdateProjectMitigate$;
(function (UpdateProjectMitigate$) {
    /** @deprecated use `UpdateProjectMitigate$inboundSchema` instead. */
    UpdateProjectMitigate$.inboundSchema = UpdateProjectMitigate$inboundSchema;
    /** @deprecated use `UpdateProjectMitigate$outboundSchema` instead. */
    UpdateProjectMitigate$.outboundSchema = UpdateProjectMitigate$outboundSchema;
})(UpdateProjectMitigate$ || (UpdateProjectMitigate$ = {}));
export function updateProjectMitigateToJSON(updateProjectMitigate) {
    return JSON.stringify(UpdateProjectMitigate$outboundSchema.parse(updateProjectMitigate));
}
export function updateProjectMitigateFromJSON(jsonString) {
    return safeParse(jsonString, (x) => UpdateProjectMitigate$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'UpdateProjectMitigate' from JSON`);
}
/** @internal */
export const UpdateProjectFirewallRoutes$inboundSchema = z.object({
    src: z.union([z.lazy(() => UpdateProjectSrc2$inboundSchema), z.string()])
        .optional(),
    has: z.array(z.lazy(() => UpdateProjectHas$inboundSchema)).optional(),
    missing: z.array(z.lazy(() => UpdateProjectMissing$inboundSchema)).optional(),
    dest: z.string().optional(),
    status: z.number().optional(),
    handle: UpdateProjectHandle$inboundSchema.optional(),
    mitigate: z.lazy(() => UpdateProjectMitigate$inboundSchema).optional(),
});
/** @internal */
export const UpdateProjectFirewallRoutes$outboundSchema = z.object({
    src: z.union([z.lazy(() => UpdateProjectSrc2$outboundSchema), z.string()])
        .optional(),
    has: z.array(z.lazy(() => UpdateProjectHas$outboundSchema)).optional(),
    missing: z.array(z.lazy(() => UpdateProjectMissing$outboundSchema))
        .optional(),
    dest: z.string().optional(),
    status: z.number().optional(),
    handle: UpdateProjectHandle$outboundSchema.optional(),
    mitigate: z.lazy(() => UpdateProjectMitigate$outboundSchema).optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UpdateProjectFirewallRoutes$;
(function (UpdateProjectFirewallRoutes$) {
    /** @deprecated use `UpdateProjectFirewallRoutes$inboundSchema` instead. */
    UpdateProjectFirewallRoutes$.inboundSchema = UpdateProjectFirewallRoutes$inboundSchema;
    /** @deprecated use `UpdateProjectFirewallRoutes$outboundSchema` instead. */
    UpdateProjectFirewallRoutes$.outboundSchema = UpdateProjectFirewallRoutes$outboundSchema;
})(UpdateProjectFirewallRoutes$ || (UpdateProjectFirewallRoutes$ = {}));
export function updateProjectFirewallRoutesToJSON(updateProjectFirewallRoutes) {
    return JSON.stringify(UpdateProjectFirewallRoutes$outboundSchema.parse(updateProjectFirewallRoutes));
}
export function updateProjectFirewallRoutesFromJSON(jsonString) {
    return safeParse(jsonString, (x) => UpdateProjectFirewallRoutes$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'UpdateProjectFirewallRoutes' from JSON`);
}
/** @internal */
export const UpdateProjectAction$inboundSchema = z.nativeEnum(UpdateProjectAction);
/** @internal */
export const UpdateProjectAction$outboundSchema = UpdateProjectAction$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UpdateProjectAction$;
(function (UpdateProjectAction$) {
    /** @deprecated use `UpdateProjectAction$inboundSchema` instead. */
    UpdateProjectAction$.inboundSchema = UpdateProjectAction$inboundSchema;
    /** @deprecated use `UpdateProjectAction$outboundSchema` instead. */
    UpdateProjectAction$.outboundSchema = UpdateProjectAction$outboundSchema;
})(UpdateProjectAction$ || (UpdateProjectAction$ = {}));
/** @internal */
export const UpdateProjectManagedRules$inboundSchema = z.object({
    active: z.boolean(),
    action: UpdateProjectAction$inboundSchema.optional(),
});
/** @internal */
export const UpdateProjectManagedRules$outboundSchema = z.object({
    active: z.boolean(),
    action: UpdateProjectAction$outboundSchema.optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UpdateProjectManagedRules$;
(function (UpdateProjectManagedRules$) {
    /** @deprecated use `UpdateProjectManagedRules$inboundSchema` instead. */
    UpdateProjectManagedRules$.inboundSchema = UpdateProjectManagedRules$inboundSchema;
    /** @deprecated use `UpdateProjectManagedRules$outboundSchema` instead. */
    UpdateProjectManagedRules$.outboundSchema = UpdateProjectManagedRules$outboundSchema;
})(UpdateProjectManagedRules$ || (UpdateProjectManagedRules$ = {}));
export function updateProjectManagedRulesToJSON(updateProjectManagedRules) {
    return JSON.stringify(UpdateProjectManagedRules$outboundSchema.parse(updateProjectManagedRules));
}
export function updateProjectManagedRulesFromJSON(jsonString) {
    return safeParse(jsonString, (x) => UpdateProjectManagedRules$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'UpdateProjectManagedRules' from JSON`);
}
/** @internal */
export const UpdateProjectSecurity$inboundSchema = z.object({
    attackModeEnabled: z.boolean().optional(),
    attackModeUpdatedAt: z.number().optional(),
    firewallEnabled: z.boolean().optional(),
    firewallUpdatedAt: z.number().optional(),
    attackModeActiveUntil: z.nullable(z.number()).optional(),
    firewallConfigVersion: z.number().optional(),
    firewallRoutes: z.array(z.lazy(() => UpdateProjectFirewallRoutes$inboundSchema)).optional(),
    firewallSeawallEnabled: z.boolean().optional(),
    ja3Enabled: z.boolean().optional(),
    ja4Enabled: z.boolean().optional(),
    firewallBypassIps: z.array(z.string()).optional(),
    managedRules: z.nullable(z.record(z.lazy(() => UpdateProjectManagedRules$inboundSchema))).optional(),
});
/** @internal */
export const UpdateProjectSecurity$outboundSchema = z.object({
    attackModeEnabled: z.boolean().optional(),
    attackModeUpdatedAt: z.number().optional(),
    firewallEnabled: z.boolean().optional(),
    firewallUpdatedAt: z.number().optional(),
    attackModeActiveUntil: z.nullable(z.number()).optional(),
    firewallConfigVersion: z.number().optional(),
    firewallRoutes: z.array(z.lazy(() => UpdateProjectFirewallRoutes$outboundSchema)).optional(),
    firewallSeawallEnabled: z.boolean().optional(),
    ja3Enabled: z.boolean().optional(),
    ja4Enabled: z.boolean().optional(),
    firewallBypassIps: z.array(z.string()).optional(),
    managedRules: z.nullable(z.record(z.lazy(() => UpdateProjectManagedRules$outboundSchema))).optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UpdateProjectSecurity$;
(function (UpdateProjectSecurity$) {
    /** @deprecated use `UpdateProjectSecurity$inboundSchema` instead. */
    UpdateProjectSecurity$.inboundSchema = UpdateProjectSecurity$inboundSchema;
    /** @deprecated use `UpdateProjectSecurity$outboundSchema` instead. */
    UpdateProjectSecurity$.outboundSchema = UpdateProjectSecurity$outboundSchema;
})(UpdateProjectSecurity$ || (UpdateProjectSecurity$ = {}));
export function updateProjectSecurityToJSON(updateProjectSecurity) {
    return JSON.stringify(UpdateProjectSecurity$outboundSchema.parse(updateProjectSecurity));
}
export function updateProjectSecurityFromJSON(jsonString) {
    return safeParse(jsonString, (x) => UpdateProjectSecurity$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'UpdateProjectSecurity' from JSON`);
}
/** @internal */
export const UpdateProjectProjectsIssuerMode$inboundSchema = z.nativeEnum(UpdateProjectProjectsIssuerMode);
/** @internal */
export const UpdateProjectProjectsIssuerMode$outboundSchema = UpdateProjectProjectsIssuerMode$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UpdateProjectProjectsIssuerMode$;
(function (UpdateProjectProjectsIssuerMode$) {
    /** @deprecated use `UpdateProjectProjectsIssuerMode$inboundSchema` instead. */
    UpdateProjectProjectsIssuerMode$.inboundSchema = UpdateProjectProjectsIssuerMode$inboundSchema;
    /** @deprecated use `UpdateProjectProjectsIssuerMode$outboundSchema` instead. */
    UpdateProjectProjectsIssuerMode$.outboundSchema = UpdateProjectProjectsIssuerMode$outboundSchema;
})(UpdateProjectProjectsIssuerMode$ || (UpdateProjectProjectsIssuerMode$ = {}));
/** @internal */
export const UpdateProjectProjectsOidcTokenConfig$inboundSchema = z.object({
    enabled: z.boolean(),
    issuerMode: UpdateProjectProjectsIssuerMode$inboundSchema.optional(),
});
/** @internal */
export const UpdateProjectProjectsOidcTokenConfig$outboundSchema = z.object({
    enabled: z.boolean(),
    issuerMode: UpdateProjectProjectsIssuerMode$outboundSchema.optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UpdateProjectProjectsOidcTokenConfig$;
(function (UpdateProjectProjectsOidcTokenConfig$) {
    /** @deprecated use `UpdateProjectProjectsOidcTokenConfig$inboundSchema` instead. */
    UpdateProjectProjectsOidcTokenConfig$.inboundSchema = UpdateProjectProjectsOidcTokenConfig$inboundSchema;
    /** @deprecated use `UpdateProjectProjectsOidcTokenConfig$outboundSchema` instead. */
    UpdateProjectProjectsOidcTokenConfig$.outboundSchema = UpdateProjectProjectsOidcTokenConfig$outboundSchema;
})(UpdateProjectProjectsOidcTokenConfig$ || (UpdateProjectProjectsOidcTokenConfig$ = {}));
export function updateProjectProjectsOidcTokenConfigToJSON(updateProjectProjectsOidcTokenConfig) {
    return JSON.stringify(UpdateProjectProjectsOidcTokenConfig$outboundSchema.parse(updateProjectProjectsOidcTokenConfig));
}
export function updateProjectProjectsOidcTokenConfigFromJSON(jsonString) {
    return safeParse(jsonString, (x) => UpdateProjectProjectsOidcTokenConfig$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'UpdateProjectProjectsOidcTokenConfig' from JSON`);
}
/** @internal */
export const UpdateProjectTier$inboundSchema = z.nativeEnum(UpdateProjectTier);
/** @internal */
export const UpdateProjectTier$outboundSchema = UpdateProjectTier$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UpdateProjectTier$;
(function (UpdateProjectTier$) {
    /** @deprecated use `UpdateProjectTier$inboundSchema` instead. */
    UpdateProjectTier$.inboundSchema = UpdateProjectTier$inboundSchema;
    /** @deprecated use `UpdateProjectTier$outboundSchema` instead. */
    UpdateProjectTier$.outboundSchema = UpdateProjectTier$outboundSchema;
})(UpdateProjectTier$ || (UpdateProjectTier$ = {}));
/** @internal */
export const UpdateProjectResponseBody$inboundSchema = z.object({
    accountId: z.string(),
    analytics: z.lazy(() => UpdateProjectAnalytics$inboundSchema).optional(),
    speedInsights: z.lazy(() => UpdateProjectSpeedInsights$inboundSchema)
        .optional(),
    autoExposeSystemEnvs: z.boolean().optional(),
    autoAssignCustomDomains: z.boolean().optional(),
    autoAssignCustomDomainsUpdatedBy: z.string().optional(),
    buildCommand: z.nullable(z.string()).optional(),
    commandForIgnoringBuildStep: z.nullable(z.string()).optional(),
    connectConfigurations: z.nullable(z.array(z.lazy(() => UpdateProjectConnectConfigurations$inboundSchema))).optional(),
    connectConfigurationId: z.nullable(z.string()).optional(),
    connectBuildsEnabled: z.boolean().optional(),
    passiveConnectConfigurationId: z.nullable(z.string()).optional(),
    createdAt: z.number().optional(),
    customerSupportCodeVisibility: z.boolean().optional(),
    crons: z.lazy(() => UpdateProjectCrons$inboundSchema).optional(),
    dataCache: z.lazy(() => UpdateProjectDataCache$inboundSchema).optional(),
    deploymentExpiration: z.nullable(z.lazy(() => UpdateProjectDeploymentExpiration$inboundSchema)).optional(),
    devCommand: z.nullable(z.string()).optional(),
    directoryListing: z.boolean(),
    installCommand: z.nullable(z.string()).optional(),
    env: z.array(z.lazy(() => UpdateProjectEnv$inboundSchema)).optional(),
    customEnvironments: z.array(z.lazy(() => UpdateProjectCustomEnvironments$inboundSchema)).optional(),
    framework: z.nullable(UpdateProjectProjectsFramework$inboundSchema)
        .optional(),
    gitForkProtection: z.boolean().optional(),
    gitLFS: z.boolean().optional(),
    id: z.string(),
    ipBuckets: z.array(z.lazy(() => UpdateProjectIpBuckets$inboundSchema))
        .optional(),
    latestDeployments: z.array(z.lazy(() => UpdateProjectLatestDeployments$inboundSchema)).optional(),
    link: z.union([
        z.lazy(() => UpdateProjectLink1$inboundSchema),
        z.lazy(() => UpdateProjectLink3$inboundSchema),
        z.lazy(() => UpdateProjectLink4$inboundSchema),
        z.lazy(() => UpdateProjectLink2$inboundSchema),
    ]).optional(),
    microfrontends: z.union([
        z.lazy(() => UpdateProjectMicrofrontends2$inboundSchema),
        z.lazy(() => UpdateProjectMicrofrontends1$inboundSchema),
    ]).optional(),
    name: z.string(),
    nodeVersion: UpdateProjectProjectsNodeVersion$inboundSchema,
    optionsAllowlist: z.nullable(z.lazy(() => UpdateProjectProjectsOptionsAllowlist$inboundSchema)).optional(),
    outputDirectory: z.nullable(z.string()).optional(),
    passwordProtection: z.nullable(z.lazy(() => UpdateProjectProjectsPasswordProtection$inboundSchema)).optional(),
    productionDeploymentsFastLane: z.boolean().optional(),
    publicSource: z.nullable(z.boolean()).optional(),
    resourceConfig: z.lazy(() => UpdateProjectProjectsResourceConfig$inboundSchema),
    rollingRelease: z.nullable(z.lazy(() => UpdateProjectRollingRelease$inboundSchema)).optional(),
    defaultResourceConfig: z.lazy(() => UpdateProjectDefaultResourceConfig$inboundSchema),
    rootDirectory: z.nullable(z.string()).optional(),
    serverlessFunctionRegion: z.nullable(z.string()).optional(),
    serverlessFunctionZeroConfigFailover: z.boolean().optional(),
    skewProtectionBoundaryAt: z.number().optional(),
    skewProtectionMaxAge: z.number().optional(),
    skipGitConnectDuringLink: z.boolean().optional(),
    sourceFilesOutsideRootDirectory: z.boolean().optional(),
    enableAffectedProjectsDeployments: z.boolean().optional(),
    ssoProtection: z.nullable(z.lazy(() => UpdateProjectProjectsSsoProtection$inboundSchema)).optional(),
    targets: z.record(z.nullable(z.lazy(() => UpdateProjectTargets$inboundSchema))).optional(),
    transferCompletedAt: z.number().optional(),
    transferStartedAt: z.number().optional(),
    transferToAccountId: z.string().optional(),
    transferredFromAccountId: z.string().optional(),
    updatedAt: z.number().optional(),
    live: z.boolean().optional(),
    enablePreviewFeedback: z.nullable(z.boolean()).optional(),
    enableProductionFeedback: z.nullable(z.boolean()).optional(),
    permissions: z.lazy(() => UpdateProjectPermissions$inboundSchema).optional(),
    lastRollbackTarget: z.nullable(z.lazy(() => UpdateProjectLastRollbackTarget$inboundSchema)).optional(),
    lastAliasRequest: z.nullable(z.lazy(() => UpdateProjectLastAliasRequest$inboundSchema)).optional(),
    protectionBypass: z.record(z.union([
        z.lazy(() => UpdateProjectProtectionBypass2$inboundSchema),
        z.lazy(() => UpdateProjectProtectionBypass1$inboundSchema),
    ])).optional(),
    hasActiveBranches: z.boolean().optional(),
    trustedIps: z.nullable(z.union([
        z.lazy(() => UpdateProjectTrustedIps2$inboundSchema),
        z.lazy(() => UpdateProjectTrustedIps1$inboundSchema),
    ])).optional(),
    gitComments: z.lazy(() => UpdateProjectGitComments$inboundSchema).optional(),
    gitProviderOptions: z.lazy(() => UpdateProjectGitProviderOptions$inboundSchema).optional(),
    paused: z.boolean().optional(),
    concurrencyBucketName: z.string().optional(),
    webAnalytics: z.lazy(() => UpdateProjectWebAnalytics$inboundSchema)
        .optional(),
    security: z.lazy(() => UpdateProjectSecurity$inboundSchema).optional(),
    oidcTokenConfig: z.lazy(() => UpdateProjectProjectsOidcTokenConfig$inboundSchema).optional(),
    tier: UpdateProjectTier$inboundSchema.optional(),
});
/** @internal */
export const UpdateProjectResponseBody$outboundSchema = z.object({
    accountId: z.string(),
    analytics: z.lazy(() => UpdateProjectAnalytics$outboundSchema).optional(),
    speedInsights: z.lazy(() => UpdateProjectSpeedInsights$outboundSchema)
        .optional(),
    autoExposeSystemEnvs: z.boolean().optional(),
    autoAssignCustomDomains: z.boolean().optional(),
    autoAssignCustomDomainsUpdatedBy: z.string().optional(),
    buildCommand: z.nullable(z.string()).optional(),
    commandForIgnoringBuildStep: z.nullable(z.string()).optional(),
    connectConfigurations: z.nullable(z.array(z.lazy(() => UpdateProjectConnectConfigurations$outboundSchema))).optional(),
    connectConfigurationId: z.nullable(z.string()).optional(),
    connectBuildsEnabled: z.boolean().optional(),
    passiveConnectConfigurationId: z.nullable(z.string()).optional(),
    createdAt: z.number().optional(),
    customerSupportCodeVisibility: z.boolean().optional(),
    crons: z.lazy(() => UpdateProjectCrons$outboundSchema).optional(),
    dataCache: z.lazy(() => UpdateProjectDataCache$outboundSchema).optional(),
    deploymentExpiration: z.nullable(z.lazy(() => UpdateProjectDeploymentExpiration$outboundSchema)).optional(),
    devCommand: z.nullable(z.string()).optional(),
    directoryListing: z.boolean(),
    installCommand: z.nullable(z.string()).optional(),
    env: z.array(z.lazy(() => UpdateProjectEnv$outboundSchema)).optional(),
    customEnvironments: z.array(z.lazy(() => UpdateProjectCustomEnvironments$outboundSchema)).optional(),
    framework: z.nullable(UpdateProjectProjectsFramework$outboundSchema)
        .optional(),
    gitForkProtection: z.boolean().optional(),
    gitLFS: z.boolean().optional(),
    id: z.string(),
    ipBuckets: z.array(z.lazy(() => UpdateProjectIpBuckets$outboundSchema))
        .optional(),
    latestDeployments: z.array(z.lazy(() => UpdateProjectLatestDeployments$outboundSchema)).optional(),
    link: z.union([
        z.lazy(() => UpdateProjectLink1$outboundSchema),
        z.lazy(() => UpdateProjectLink3$outboundSchema),
        z.lazy(() => UpdateProjectLink4$outboundSchema),
        z.lazy(() => UpdateProjectLink2$outboundSchema),
    ]).optional(),
    microfrontends: z.union([
        z.lazy(() => UpdateProjectMicrofrontends2$outboundSchema),
        z.lazy(() => UpdateProjectMicrofrontends1$outboundSchema),
    ]).optional(),
    name: z.string(),
    nodeVersion: UpdateProjectProjectsNodeVersion$outboundSchema,
    optionsAllowlist: z.nullable(z.lazy(() => UpdateProjectProjectsOptionsAllowlist$outboundSchema)).optional(),
    outputDirectory: z.nullable(z.string()).optional(),
    passwordProtection: z.nullable(z.lazy(() => UpdateProjectProjectsPasswordProtection$outboundSchema)).optional(),
    productionDeploymentsFastLane: z.boolean().optional(),
    publicSource: z.nullable(z.boolean()).optional(),
    resourceConfig: z.lazy(() => UpdateProjectProjectsResourceConfig$outboundSchema),
    rollingRelease: z.nullable(z.lazy(() => UpdateProjectRollingRelease$outboundSchema)).optional(),
    defaultResourceConfig: z.lazy(() => UpdateProjectDefaultResourceConfig$outboundSchema),
    rootDirectory: z.nullable(z.string()).optional(),
    serverlessFunctionRegion: z.nullable(z.string()).optional(),
    serverlessFunctionZeroConfigFailover: z.boolean().optional(),
    skewProtectionBoundaryAt: z.number().optional(),
    skewProtectionMaxAge: z.number().optional(),
    skipGitConnectDuringLink: z.boolean().optional(),
    sourceFilesOutsideRootDirectory: z.boolean().optional(),
    enableAffectedProjectsDeployments: z.boolean().optional(),
    ssoProtection: z.nullable(z.lazy(() => UpdateProjectProjectsSsoProtection$outboundSchema)).optional(),
    targets: z.record(z.nullable(z.lazy(() => UpdateProjectTargets$outboundSchema))).optional(),
    transferCompletedAt: z.number().optional(),
    transferStartedAt: z.number().optional(),
    transferToAccountId: z.string().optional(),
    transferredFromAccountId: z.string().optional(),
    updatedAt: z.number().optional(),
    live: z.boolean().optional(),
    enablePreviewFeedback: z.nullable(z.boolean()).optional(),
    enableProductionFeedback: z.nullable(z.boolean()).optional(),
    permissions: z.lazy(() => UpdateProjectPermissions$outboundSchema).optional(),
    lastRollbackTarget: z.nullable(z.lazy(() => UpdateProjectLastRollbackTarget$outboundSchema)).optional(),
    lastAliasRequest: z.nullable(z.lazy(() => UpdateProjectLastAliasRequest$outboundSchema)).optional(),
    protectionBypass: z.record(z.union([
        z.lazy(() => UpdateProjectProtectionBypass2$outboundSchema),
        z.lazy(() => UpdateProjectProtectionBypass1$outboundSchema),
    ])).optional(),
    hasActiveBranches: z.boolean().optional(),
    trustedIps: z.nullable(z.union([
        z.lazy(() => UpdateProjectTrustedIps2$outboundSchema),
        z.lazy(() => UpdateProjectTrustedIps1$outboundSchema),
    ])).optional(),
    gitComments: z.lazy(() => UpdateProjectGitComments$outboundSchema).optional(),
    gitProviderOptions: z.lazy(() => UpdateProjectGitProviderOptions$outboundSchema).optional(),
    paused: z.boolean().optional(),
    concurrencyBucketName: z.string().optional(),
    webAnalytics: z.lazy(() => UpdateProjectWebAnalytics$outboundSchema)
        .optional(),
    security: z.lazy(() => UpdateProjectSecurity$outboundSchema).optional(),
    oidcTokenConfig: z.lazy(() => UpdateProjectProjectsOidcTokenConfig$outboundSchema).optional(),
    tier: UpdateProjectTier$outboundSchema.optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UpdateProjectResponseBody$;
(function (UpdateProjectResponseBody$) {
    /** @deprecated use `UpdateProjectResponseBody$inboundSchema` instead. */
    UpdateProjectResponseBody$.inboundSchema = UpdateProjectResponseBody$inboundSchema;
    /** @deprecated use `UpdateProjectResponseBody$outboundSchema` instead. */
    UpdateProjectResponseBody$.outboundSchema = UpdateProjectResponseBody$outboundSchema;
})(UpdateProjectResponseBody$ || (UpdateProjectResponseBody$ = {}));
export function updateProjectResponseBodyToJSON(updateProjectResponseBody) {
    return JSON.stringify(UpdateProjectResponseBody$outboundSchema.parse(updateProjectResponseBody));
}
export function updateProjectResponseBodyFromJSON(jsonString) {
    return safeParse(jsonString, (x) => UpdateProjectResponseBody$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'UpdateProjectResponseBody' from JSON`);
}
//# sourceMappingURL=updateprojectop.js.map