import { VercelCore } from "../core.js";
import { RequestOptions } from "../lib/sdks.js";
import { GetBypassIpRequest, GetBypassIpResponseBody } from "../models/getbypassipop.js";
import { ConnectionError, InvalidRequestError, RequestAbortedError, RequestTimeoutError, UnexpectedClientError } from "../models/httpclienterrors.js";
import { SDKError } from "../models/sdkerror.js";
import { SDKValidationError } from "../models/sdkvalidationerror.js";
import { VercelBadRequestError } from "../models/vercelbadrequesterror.js";
import { VercelForbiddenError } from "../models/vercelforbiddenerror.js";
import { VercelNotFoundError } from "../models/vercelnotfounderror.js";
import { APIPromise } from "../types/async.js";
import { Result } from "../types/fp.js";
/**
 * Read System Bypass
 *
 * @remarks
 * Retrieve the system bypass rules configured for the specified project
 */
export declare function securityGetBypassIp(client: VercelCore, request: GetBypassIpRequest, options?: RequestOptions): APIPromise<Result<GetBypassIpResponseBody, VercelBadRequestError | VercelForbiddenError | VercelNotFoundError | SDKError | SDKValidationError | UnexpectedClientError | InvalidRequestError | RequestAbortedError | RequestTimeoutError | ConnectionError>>;
//# sourceMappingURL=securityGetBypassIp.d.ts.map