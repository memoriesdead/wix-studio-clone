import { VercelCore } from "../core.js";
import { RequestOptions } from "../lib/sdks.js";
import { CreateLogDrainRequest, CreateLogDrainResponseBody } from "../models/createlogdrainop.js";
import { ConnectionError, InvalidRequestError, RequestAbortedError, RequestTimeoutError, UnexpectedClientError } from "../models/httpclienterrors.js";
import { SDKError } from "../models/sdkerror.js";
import { SDKValidationError } from "../models/sdkvalidationerror.js";
import { VercelBadRequestError } from "../models/vercelbadrequesterror.js";
import { VercelForbiddenError } from "../models/vercelforbiddenerror.js";
import { APIPromise } from "../types/async.js";
import { Result } from "../types/fp.js";
/**
 * Creates a new Integration Log Drain
 *
 * @remarks
 * Creates an Integration log drain. This endpoint must be called with an OAuth2 client (integration), since log drains are tied to integrations. If it is called with a different token type it will produce a 400 error.
 */
export declare function logDrainsCreateLogDrain(client: VercelCore, request: CreateLogDrainRequest, options?: RequestOptions): APIPromise<Result<CreateLogDrainResponseBody, VercelBadRequestError | VercelForbiddenError | SDKError | SDKValidationError | UnexpectedClientError | InvalidRequestError | RequestAbortedError | RequestTimeoutError | ConnectionError>>;
//# sourceMappingURL=logDrainsCreateLogDrain.d.ts.map