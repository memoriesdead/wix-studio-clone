import { VercelCore } from "../core.js";
import { RequestOptions } from "../lib/sdks.js";
import { GetIntegrationLogDrainsRequest, GetIntegrationLogDrainsResponseBody } from "../models/getintegrationlogdrainsop.js";
import { ConnectionError, InvalidRequestError, RequestAbortedError, RequestTimeoutError, UnexpectedClientError } from "../models/httpclienterrors.js";
import { SDKError } from "../models/sdkerror.js";
import { SDKValidationError } from "../models/sdkvalidationerror.js";
import { VercelBadRequestError } from "../models/vercelbadrequesterror.js";
import { VercelForbiddenError } from "../models/vercelforbiddenerror.js";
import { APIPromise } from "../types/async.js";
import { Result } from "../types/fp.js";
/**
 * Retrieves a list of Integration log drains
 *
 * @remarks
 * Retrieves a list of all Integration log drains that are defined for the authenticated user or team. When using an OAuth2 token, the list is limited to log drains created by the authenticated integration.
 */
export declare function logDrainsGetIntegrationLogDrains(client: VercelCore, request: GetIntegrationLogDrainsRequest, options?: RequestOptions): APIPromise<Result<Array<GetIntegrationLogDrainsResponseBody>, VercelBadRequestError | VercelForbiddenError | SDKError | SDKValidationError | UnexpectedClientError | InvalidRequestError | RequestAbortedError | RequestTimeoutError | ConnectionError>>;
//# sourceMappingURL=logDrainsGetIntegrationLogDrains.d.ts.map